
Dev_Board_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004264  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004434  08004434  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800443c  0800443c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000070  080044b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  080044b4  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f26  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268a  00000000  00000000  00032fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00035648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147a5  00000000  00000000  000372b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012522  00000000  00000000  0004ba55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee75  00000000  00000000  0005df77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dcdec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003880  00000000  00000000  000dce40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800430c 	.word	0x0800430c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800430c 	.word	0x0800430c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	b0b9      	sub	sp, #228	; 0xe4
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fe03 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f893 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 fa85 	bl	80009cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c2:	f000 f90d 	bl	80006e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004c6:	f000 f9a9 	bl	800081c <MX_SPI1_Init>
  MX_SPI2_Init();
 80004ca:	f000 f9df 	bl	800088c <MX_SPI2_Init>
  MX_TSC_Init();
 80004ce:	f000 fa13 	bl	80008f8 <MX_TSC_Init>
  MX_USART1_UART_Init();
 80004d2:	f000 f973 	bl	80007bc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004d6:	f000 fa53 	bl	8000980 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 80004da:	f000 f941 	bl	8000760 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  char buffer[] = "Don't Panic :)\r\n";
//  char uartbuffer[] = "Don't Panic - from USART\r\n";
  char uart2Data[64] = "Connected to UART Two\r\n";
 80004de:	2494      	movs	r4, #148	; 0x94
 80004e0:	1939      	adds	r1, r7, r4
 80004e2:	4a38      	ldr	r2, [pc, #224]	; (80005c4 <main+0x114>)
 80004e4:	000b      	movs	r3, r1
 80004e6:	ca61      	ldmia	r2!, {r0, r5, r6}
 80004e8:	c361      	stmia	r3!, {r0, r5, r6}
 80004ea:	ca61      	ldmia	r2!, {r0, r5, r6}
 80004ec:	c361      	stmia	r3!, {r0, r5, r6}
 80004ee:	000b      	movs	r3, r1
 80004f0:	3318      	adds	r3, #24
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	0018      	movs	r0, r3
 80004f8:	f003 fada 	bl	8003ab0 <memset>

  HAL_UART_Transmit(&huart1, (uint8_t *)&uart2Data, sizeof(uart2Data), 0xFFFF);
 80004fc:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <main+0x118>)
 80004fe:	1939      	adds	r1, r7, r4
 8000500:	4832      	ldr	r0, [pc, #200]	; (80005cc <main+0x11c>)
 8000502:	2240      	movs	r2, #64	; 0x40
 8000504:	f002 fd5c 	bl	8002fc0 <HAL_UART_Transmit>

  char output[] = "Scanning I2C Bus: \r\n";
 8000508:	217c      	movs	r1, #124	; 0x7c
 800050a:	187b      	adds	r3, r7, r1
 800050c:	4a30      	ldr	r2, [pc, #192]	; (80005d0 <main+0x120>)
 800050e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000510:	c331      	stmia	r3!, {r0, r4, r5}
 8000512:	ca11      	ldmia	r2!, {r0, r4}
 8000514:	c311      	stmia	r3!, {r0, r4}
 8000516:	7812      	ldrb	r2, [r2, #0]
 8000518:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *)output, sizeof(output), 0xFFFF);
 800051a:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <main+0x118>)
 800051c:	1879      	adds	r1, r7, r1
 800051e:	482b      	ldr	r0, [pc, #172]	; (80005cc <main+0x11c>)
 8000520:	2215      	movs	r2, #21
 8000522:	f002 fd4d 	bl	8002fc0 <HAL_UART_Transmit>

  HAL_StatusTypeDef result;
  uint8_t i;

  int j = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	22d8      	movs	r2, #216	; 0xd8
 800052a:	18ba      	adds	r2, r7, r2
 800052c:	6013      	str	r3, [r2, #0]
  char output2[] = "Address found at 0x";
 800052e:	2368      	movs	r3, #104	; 0x68
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	4a28      	ldr	r2, [pc, #160]	; (80005d4 <main+0x124>)
 8000534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000536:	c313      	stmia	r3!, {r0, r1, r4}
 8000538:	ca03      	ldmia	r2!, {r0, r1}
 800053a:	c303      	stmia	r3!, {r0, r1}
  char output1[] = ".\r\n";
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <main+0x128>)
 8000542:	601a      	str	r2, [r3, #0]

  for (i=1; i<128; i++)
 8000544:	23df      	movs	r3, #223	; 0xdf
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e02d      	b.n	80005aa <main+0xfa>
	{
	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 800054e:	23df      	movs	r3, #223	; 0xdf
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b29b      	uxth	r3, r3
 8000556:	18db      	adds	r3, r3, r3
 8000558:	b299      	uxth	r1, r3
 800055a:	25d7      	movs	r5, #215	; 0xd7
 800055c:	197c      	adds	r4, r7, r5
 800055e:	481f      	ldr	r0, [pc, #124]	; (80005dc <main+0x12c>)
 8000560:	2302      	movs	r3, #2
 8000562:	2202      	movs	r2, #2
 8000564:	f001 f91e 	bl	80017a4 <HAL_I2C_IsDeviceReady>
 8000568:	0003      	movs	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
//	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
//	  {
//		  HAL_UART_Transmit(&huart1, (uint8_t *)output1, sizeof(output1), 0xFFFF);
//	  }
	  if (result == HAL_OK)
 800056c:	197b      	adds	r3, r7, r5
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10e      	bne.n	8000592 <main+0xe2>
	  {
		  char buf[100];
		  sprintf(buf, "%d", j);
 8000574:	23d8      	movs	r3, #216	; 0xd8
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4919      	ldr	r1, [pc, #100]	; (80005e0 <main+0x130>)
 800057c:	003b      	movs	r3, r7
 800057e:	0018      	movs	r0, r3
 8000580:	f003 fa9e 	bl	8003ac0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *)output2, sizeof(output2), 0xFFFF);
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <main+0x118>)
 8000586:	2268      	movs	r2, #104	; 0x68
 8000588:	18b9      	adds	r1, r7, r2
 800058a:	4810      	ldr	r0, [pc, #64]	; (80005cc <main+0x11c>)
 800058c:	2214      	movs	r2, #20
 800058e:	f002 fd17 	bl	8002fc0 <HAL_UART_Transmit>
//		  HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	  }
	  j++;
 8000592:	22d8      	movs	r2, #216	; 0xd8
 8000594:	18bb      	adds	r3, r7, r2
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	18ba      	adds	r2, r7, r2
 800059c:	6013      	str	r3, [r2, #0]
  for (i=1; i<128; i++)
 800059e:	21df      	movs	r1, #223	; 0xdf
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	3201      	adds	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	23df      	movs	r3, #223	; 0xdf
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dacb      	bge.n	800054e <main+0x9e>
//		 HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, sizeof(buffer), HAL_MAX_DELAY);
//		 HAL_UART_Transmit(&huart1, (uint8_t *)uartbuffer, sizeof(uartbuffer), HAL_MAX_DELAY);
//	  		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
//	  	 HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);

		 HAL_Delay(2000);
 80005b6:	23fa      	movs	r3, #250	; 0xfa
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fdf0 	bl	80011a0 <HAL_Delay>
 80005c0:	e7f9      	b.n	80005b6 <main+0x106>
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	08004328 	.word	0x08004328
 80005c8:	0000ffff 	.word	0x0000ffff
 80005cc:	200001c0 	.word	0x200001c0
 80005d0:	08004368 	.word	0x08004368
 80005d4:	08004380 	.word	0x08004380
 80005d8:	000a0d2e 	.word	0x000a0d2e
 80005dc:	200000f0 	.word	0x200000f0
 80005e0:	08004324 	.word	0x08004324

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b09d      	sub	sp, #116	; 0x74
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	2438      	movs	r4, #56	; 0x38
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2338      	movs	r3, #56	; 0x38
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fa5b 	bl	8003ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	2324      	movs	r3, #36	; 0x24
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	2314      	movs	r3, #20
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f003 fa53 	bl	8003ab0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060a:	003b      	movs	r3, r7
 800060c:	0018      	movs	r0, r3
 800060e:	2324      	movs	r3, #36	; 0x24
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f003 fa4c 	bl	8003ab0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <SystemClock_Config+0xf4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a2f      	ldr	r2, [pc, #188]	; (80006dc <SystemClock_Config+0xf8>)
 800061e:	401a      	ands	r2, r3
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemClock_Config+0xf4>)
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	0109      	lsls	r1, r1, #4
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2221      	movs	r2, #33	; 0x21
 800062e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	22a0      	movs	r2, #160	; 0xa0
 8000634:	02d2      	lsls	r2, r2, #11
 8000636:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2201      	movs	r2, #1
 800063e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2202      	movs	r2, #2
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	0252      	lsls	r2, r2, #9
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	0352      	lsls	r2, r2, #13
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	0412      	lsls	r2, r2, #16
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	187b      	adds	r3, r7, r1
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fbcb 	bl	8001dfc <HAL_RCC_OscConfig>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800066a:	f000 fa59 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	2124      	movs	r1, #36	; 0x24
 8000670:	187b      	adds	r3, r7, r1
 8000672:	220f      	movs	r2, #15
 8000674:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2203      	movs	r2, #3
 800067a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2101      	movs	r1, #1
 8000692:	0018      	movs	r0, r3
 8000694:	f001 ff76 	bl	8002584 <HAL_RCC_ClockConfig>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800069c:	f000 fa40 	bl	8000b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80006a0:	003b      	movs	r3, r7
 80006a2:	224d      	movs	r2, #77	; 0x4d
 80006a4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	04d2      	lsls	r2, r2, #19
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	003b      	movs	r3, r7
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 f982 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80006cc:	f000 fa28 	bl	8000b20 <Error_Handler>
  }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b01d      	add	sp, #116	; 0x74
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	40007000 	.word	0x40007000
 80006dc:	ffffe7ff 	.word	0xffffe7ff

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_I2C1_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_I2C1_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_I2C1_Init+0x74>)
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <MX_I2C1_Init+0x7c>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x74>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 ffab 	bl	8001678 <HAL_I2C_Init>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000726:	f000 f9fb 	bl	8000b20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x74>)
 800072c:	2100      	movs	r1, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f001 f992 	bl	8001a58 <HAL_I2CEx_ConfigAnalogFilter>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000738:	f000 f9f2 	bl	8000b20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <MX_I2C1_Init+0x74>)
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f9d5 	bl	8001af0 <HAL_I2CEx_ConfigDigitalFilter>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f9e9 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000f0 	.word	0x200000f0
 8000758:	40005400 	.word	0x40005400
 800075c:	00707cbb 	.word	0x00707cbb

08000760 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_LPUART1_UART_Init+0x58>)
 8000768:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 800076c:	2296      	movs	r2, #150	; 0x96
 800076e:	0192      	lsls	r2, r2, #6
 8000770:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <MX_LPUART1_UART_Init+0x54>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fbb2 	bl	8002f08 <HAL_HalfDuplex_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f9ba 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	2000013c 	.word	0x2000013c
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <MX_USART1_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c8:	22e1      	movs	r2, #225	; 0xe1
 80007ca:	0252      	lsls	r2, r2, #9
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_USART1_UART_Init+0x58>)
 8000800:	0018      	movs	r0, r3
 8000802:	f002 fb81 	bl	8002f08 <HAL_HalfDuplex_Init>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f989 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200001c0 	.word	0x200001c0
 8000818:	40013800 	.word	0x40013800

0800081c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_SPI1_Init+0x68>)
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <MX_SPI1_Init+0x6c>)
 8000824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_SPI1_Init+0x68>)
 8000828:	2282      	movs	r2, #130	; 0x82
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_SPI1_Init+0x68>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_SPI1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_SPI1_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_SPI1_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_SPI1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_SPI1_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_SPI1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_SPI1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_SPI1_Init+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_SPI1_Init+0x68>)
 8000868:	2207      	movs	r2, #7
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_SPI1_Init+0x68>)
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fa10 	bl	8002c94 <HAL_SPI_Init>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000878:	f000 f952 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000244 	.word	0x20000244
 8000888:	40013000 	.word	0x40013000

0800088c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI2_Init+0x64>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_SPI2_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI2_Init+0x64>)
 8000898:	2282      	movs	r2, #130	; 0x82
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008d6:	2207      	movs	r2, #7
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 f9d9 	bl	8002c94 <HAL_SPI_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 f91b 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000098 	.word	0x20000098
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TSC_Init+0x80>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_TSC_Init+0x84>)
 8000900:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TSC_Init+0x80>)
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0552      	lsls	r2, r2, #21
 8000908:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TSC_Init+0x80>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0452      	lsls	r2, r2, #17
 8000910:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_TSC_Init+0x80>)
 8000914:	2200      	movs	r2, #0
 8000916:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_TSC_Init+0x80>)
 800091a:	2201      	movs	r2, #1
 800091c:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TSC_Init+0x80>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_TSC_Init+0x80>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	0192      	lsls	r2, r2, #6
 800092a:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_TSC_Init+0x80>)
 800092e:	22a0      	movs	r2, #160	; 0xa0
 8000930:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_TSC_Init+0x80>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_TSC_Init+0x80>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_TSC_Init+0x80>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_TSC_Init+0x80>)
 8000946:	222c      	movs	r2, #44	; 0x2c
 8000948:	2100      	movs	r1, #0
 800094a:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_TSC_Init+0x80>)
 800094e:	2291      	movs	r2, #145	; 0x91
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_TSC_Init+0x80>)
 8000956:	2200      	movs	r2, #0
 8000958:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_TSC_Init+0x80>)
 800095c:	2291      	movs	r2, #145	; 0x91
 800095e:	00d2      	lsls	r2, r2, #3
 8000960:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <MX_TSC_Init+0x80>)
 8000964:	0018      	movs	r0, r3
 8000966:	f002 fa29 	bl	8002dbc <HAL_TSC_Init>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 800096e:	f000 f8d7 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000590 	.word	0x20000590
 800097c:	40024000 	.word	0x40024000

08000980 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <MX_USB_PCD_Init+0x48>)
 8000988:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 800098c:	2208      	movs	r2, #8
 800098e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 8000992:	2202      	movs	r2, #2
 8000994:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 8000998:	2202      	movs	r2, #2
 800099a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <MX_USB_PCD_Init+0x44>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 f8e9 	bl	8001b88 <HAL_PCD_Init>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80009ba:	f000 f8b1 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000029c 	.word	0x2000029c
 80009c8:	40005c00 	.word	0x40005c00

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	2414      	movs	r4, #20
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	0018      	movs	r0, r3
 80009d8:	2314      	movs	r3, #20
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f003 f867 	bl	8003ab0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b4c      	ldr	r3, [pc, #304]	; (8000b14 <MX_GPIO_Init+0x148>)
 80009e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e6:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <MX_GPIO_Init+0x148>)
 80009e8:	2104      	movs	r1, #4
 80009ea:	430a      	orrs	r2, r1
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ee:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <MX_GPIO_Init+0x148>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f2:	2204      	movs	r2, #4
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <MX_GPIO_Init+0x148>)
 80009fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fe:	4b45      	ldr	r3, [pc, #276]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	430a      	orrs	r2, r1
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a22:	2201      	movs	r2, #1
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a2e:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a30:	2102      	movs	r1, #2
 8000a32:	430a      	orrs	r2, r1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a36:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <MX_GPIO_Init+0x148>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000a42:	23a0      	movs	r3, #160	; 0xa0
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fdf6 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|LED_GN_Pin, GPIO_PIN_RESET);
 8000a50:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <MX_GPIO_Init+0x14c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	2114      	movs	r1, #20
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fdf0 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	0192      	lsls	r2, r2, #6
 8000a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2288      	movs	r2, #136	; 0x88
 8000a68:	0352      	lsls	r2, r2, #13
 8000a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	4a29      	ldr	r2, [pc, #164]	; (8000b1c <MX_GPIO_Init+0x150>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f000 fc69 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2290      	movs	r2, #144	; 0x90
 8000a88:	0352      	lsls	r2, r2, #13
 8000a8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a92:	193a      	adds	r2, r7, r4
 8000a94:	23a0      	movs	r3, #160	; 0xa0
 8000a96:	05db      	lsls	r3, r3, #23
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fc58 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	193a      	adds	r2, r7, r4
 8000ab4:	23a0      	movs	r3, #160	; 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fc48 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	193a      	adds	r2, r7, r4
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fc35 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin LED_GN_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|LED_GN_Pin;
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2214      	movs	r2, #20
 8000aec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2201      	movs	r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <MX_GPIO_Init+0x14c>)
 8000b04:	0019      	movs	r1, r3
 8000b06:	0010      	movs	r0, r2
 8000b08:	f000 fc22 	bl	8001350 <HAL_GPIO_Init>

}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b00b      	add	sp, #44	; 0x2c
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	50000400 	.word	0x50000400
 8000b1c:	50000800 	.word	0x50000800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_MspInit+0x24>)
 8000b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x24>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_MspInit+0x24>)
 8000b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_MspInit+0x24>)
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	0549      	lsls	r1, r1, #21
 8000b46:	430a      	orrs	r2, r1
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	240c      	movs	r4, #12
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f002 ffa2 	bl	8003ab0 <memset>
  if(hi2c->Instance==I2C1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_I2C_MspInit+0x80>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d129      	bne.n	8000bca <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b86:	2202      	movs	r2, #2
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	22c0      	movs	r2, #192	; 0xc0
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	0021      	movs	r1, r4
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2212      	movs	r2, #18
 8000b9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2204      	movs	r2, #4
 8000bae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	0010      	movs	r0, r2
 8000bb8:	f000 fbca 	bl	8001350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	0389      	lsls	r1, r1, #14
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b009      	add	sp, #36	; 0x24
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	50000400 	.word	0x50000400

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	2414      	movs	r4, #20
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	0018      	movs	r0, r3
 8000bee:	2314      	movs	r3, #20
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f002 ff5c 	bl	8003ab0 <memset>
  if(huart->Instance==LPUART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a48      	ldr	r2, [pc, #288]	; (8000d20 <HAL_UART_MspInit+0x140>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d140      	bne.n	8000c84 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c02:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c06:	4b47      	ldr	r3, [pc, #284]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b44      	ldr	r3, [pc, #272]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c14:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c16:	2102      	movs	r1, #2
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	2202      	movs	r2, #2
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2212      	movs	r2, #18
 8000c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2201      	movs	r2, #1
 8000c3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2203      	movs	r2, #3
 8000c40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2204      	movs	r2, #4
 8000c46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <HAL_UART_MspInit+0x148>)
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0010      	movs	r0, r2
 8000c50:	f000 fb7e 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c54:	0021      	movs	r1, r4
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2202      	movs	r2, #2
 8000c62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2204      	movs	r2, #4
 8000c74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	4a2b      	ldr	r2, [pc, #172]	; (8000d28 <HAL_UART_MspInit+0x148>)
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	0010      	movs	r0, r2
 8000c7e:	f000 fb67 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c82:	e048      	b.n	8000d16 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <HAL_UART_MspInit+0x14c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d143      	bne.n	8000d16 <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	01c9      	lsls	r1, r1, #7
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_UART_MspInit+0x144>)
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	2201      	movs	r2, #1
 8000cae:	4013      	ands	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART_RX_Pin;
 8000cb4:	2114      	movs	r1, #20
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	22a0      	movs	r2, #160	; 0xa0
 8000cba:	00d2      	lsls	r2, r2, #3
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	000c      	movs	r4, r1
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2203      	movs	r2, #3
 8000cd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	193a      	adds	r2, r7, r4
 8000cda:	23a0      	movs	r3, #160	; 0xa0
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fb35 	bl	8001350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8000ce6:	0021      	movs	r1, r4
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2212      	movs	r2, #18
 8000cf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2204      	movs	r2, #4
 8000d06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000d08:	187a      	adds	r2, r7, r1
 8000d0a:	23a0      	movs	r3, #160	; 0xa0
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 fb1d 	bl	8001350 <HAL_GPIO_Init>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b00b      	add	sp, #44	; 0x2c
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40004800 	.word	0x40004800
 8000d24:	40021000 	.word	0x40021000
 8000d28:	50000400 	.word	0x50000400
 8000d2c:	40013800 	.word	0x40013800

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	2414      	movs	r4, #20
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f002 feb4 	bl	8003ab0 <memset>
  if(hspi->Instance==SPI1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a41      	ldr	r2, [pc, #260]	; (8000e54 <HAL_SPI_MspInit+0x124>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d14c      	bne.n	8000dec <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d52:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	0149      	lsls	r1, r1, #5
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d64:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	2201      	movs	r2, #1
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d7e:	2102      	movs	r1, #2
 8000d80:	430a      	orrs	r2, r1
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	2202      	movs	r2, #2
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	0212      	lsls	r2, r2, #8
 8000d96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000db0:	193a      	adds	r2, r7, r4
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fac9 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000dbe:	0021      	movs	r1, r4
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <HAL_SPI_MspInit+0x12c>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f000 fab3 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dea:	e02e      	b.n	8000e4a <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_SPI_MspInit+0x130>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d129      	bne.n	8000e4a <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	01c9      	lsls	r1, r1, #7
 8000e00:	430a      	orrs	r2, r1
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_SPI_MspInit+0x128>)
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	2202      	movs	r2, #2
 8000e16:	4013      	ands	r3, r2
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000e1c:	2114      	movs	r1, #20
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	22f0      	movs	r2, #240	; 0xf0
 8000e22:	0212      	lsls	r2, r2, #8
 8000e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2202      	movs	r2, #2
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2203      	movs	r2, #3
 8000e36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_SPI_MspInit+0x12c>)
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f000 fa83 	bl	8001350 <HAL_GPIO_Init>
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b00b      	add	sp, #44	; 0x2c
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	40013000 	.word	0x40013000
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	50000400 	.word	0x50000400
 8000e60:	40003800 	.word	0x40003800

08000e64 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b08b      	sub	sp, #44	; 0x2c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	2414      	movs	r4, #20
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	0018      	movs	r0, r3
 8000e72:	2314      	movs	r3, #20
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	f002 fe1a 	bl	8003ab0 <memset>
  if(htsc->Instance==TSC)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a41      	ldr	r2, [pc, #260]	; (8000f88 <HAL_TSC_MspInit+0x124>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d17c      	bne.n	8000f80 <HAL_TSC_MspInit+0x11c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e8a:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	0249      	lsls	r1, r1, #9
 8000e90:	430a      	orrs	r2, r1
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
 8000e94:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	025b      	lsls	r3, r3, #9
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <HAL_TSC_MspInit+0x128>)
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	2244      	movs	r2, #68	; 0x44
 8000ed6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	2202      	movs	r2, #2
 8000edc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2203      	movs	r2, #3
 8000eee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	193a      	adds	r2, r7, r4
 8000ef2:	23a0      	movs	r3, #160	; 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 fa29 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2288      	movs	r2, #136	; 0x88
 8000f02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2212      	movs	r2, #18
 8000f08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	193a      	adds	r2, r7, r4
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 fa13 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2202      	movs	r2, #2
 8000f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	2203      	movs	r2, #3
 8000f46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <HAL_TSC_MspInit+0x12c>)
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	0010      	movs	r0, r2
 8000f50:	f000 f9fe 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f54:	0021      	movs	r1, r4
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2202      	movs	r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2212      	movs	r2, #18
 8000f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2203      	movs	r2, #3
 8000f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_TSC_MspInit+0x12c>)
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	f000 f9e8 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b00b      	add	sp, #44	; 0x2c
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	40024000 	.word	0x40024000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	50000400 	.word	0x50000400

08000f94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_PCD_MspInit+0x28>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d106      	bne.n	8000fb4 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_PCD_MspInit+0x2c>)
 8000fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_PCD_MspInit+0x2c>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0409      	lsls	r1, r1, #16
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40005c00 	.word	0x40005c00
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f8be 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f002 fd1a 	bl	8003a5c <__errno>
 8001028:	0003      	movs	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	2301      	movs	r3, #1
 8001030:	425b      	negs	r3, r3
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	18d2      	adds	r2, r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b006      	add	sp, #24
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20002000 	.word	0x20002000
 8001054:	00000400 	.word	0x00000400
 8001058:	2000008c 	.word	0x2000008c
 800105c:	200005e8 	.word	0x200005e8

08001060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001096:	f7ff ffe3 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f002 fce5 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fa07 	bl	80004b0 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b0:	08004444 	.word	0x08004444
  ldr r2, =_sbss
 80010b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010b8:	200005e8 	.word	0x200005e8

080010bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_COMP_IRQHandler>
	...

080010c0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x3c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Init+0x3c>)
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 f811 	bl	8001100 <HAL_InitTick>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d003      	beq.n	80010ea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e001      	b.n	80010ee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ea:	f7ff fd1f 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_InitTick+0x5c>)
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	0019      	movs	r1, r3
 8001112:	23fa      	movs	r3, #250	; 0xfa
 8001114:	0098      	lsls	r0, r3, #2
 8001116:	f7ff f801 	bl	800011c <__udivsi3>
 800111a:	0003      	movs	r3, r0
 800111c:	0019      	movs	r1, r3
 800111e:	0020      	movs	r0, r4
 8001120:	f7fe fffc 	bl	800011c <__udivsi3>
 8001124:	0003      	movs	r3, r0
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f905 	bl	8001336 <HAL_SYSTICK_Config>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e00f      	b.n	8001154 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d80b      	bhi.n	8001152 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2301      	movs	r3, #1
 800113e:	425b      	negs	r3, r3
 8001140:	2200      	movs	r2, #0
 8001142:	0018      	movs	r0, r3
 8001144:	f000 f8e2 	bl	800130c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_InitTick+0x64>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	001a      	movs	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	18d2      	adds	r2, r2, r3
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_IncTick+0x20>)
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20000008 	.word	0x20000008
 8001188:	200005d4 	.word	0x200005d4

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <HAL_GetTick+0x10>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	200005d4 	.word	0x200005d4

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff fff0 	bl	800118c <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	189b      	adds	r3, r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	f7ff ffe0 	bl	800118c <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000008 	.word	0x20000008

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0002      	movs	r2, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b7f      	cmp	r3, #127	; 0x7f
 80011fc:	d828      	bhi.n	8001250 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <__NVIC_SetPriority+0xd4>)
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	33c0      	adds	r3, #192	; 0xc0
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	589b      	ldr	r3, [r3, r2]
 800120e:	1dfa      	adds	r2, r7, #7
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	0011      	movs	r1, r2
 8001214:	2203      	movs	r2, #3
 8001216:	400a      	ands	r2, r1
 8001218:	00d2      	lsls	r2, r2, #3
 800121a:	21ff      	movs	r1, #255	; 0xff
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	43d2      	mvns	r2, r2
 8001222:	401a      	ands	r2, r3
 8001224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	22ff      	movs	r2, #255	; 0xff
 800122c:	401a      	ands	r2, r3
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	0018      	movs	r0, r3
 8001234:	2303      	movs	r3, #3
 8001236:	4003      	ands	r3, r0
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123c:	481f      	ldr	r0, [pc, #124]	; (80012bc <__NVIC_SetPriority+0xd4>)
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	430a      	orrs	r2, r1
 8001248:	33c0      	adds	r3, #192	; 0xc0
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800124e:	e031      	b.n	80012b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <__NVIC_SetPriority+0xd8>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	0019      	movs	r1, r3
 8001258:	230f      	movs	r3, #15
 800125a:	400b      	ands	r3, r1
 800125c:	3b08      	subs	r3, #8
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3306      	adds	r3, #6
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1dfa      	adds	r2, r7, #7
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	0011      	movs	r1, r2
 8001270:	2203      	movs	r2, #3
 8001272:	400a      	ands	r2, r1
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	21ff      	movs	r1, #255	; 0xff
 8001278:	4091      	lsls	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	43d2      	mvns	r2, r2
 800127e:	401a      	ands	r2, r3
 8001280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	22ff      	movs	r2, #255	; 0xff
 8001288:	401a      	ands	r2, r3
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	2303      	movs	r3, #3
 8001292:	4003      	ands	r3, r0
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <__NVIC_SetPriority+0xd8>)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	001c      	movs	r4, r3
 80012a0:	230f      	movs	r3, #15
 80012a2:	4023      	ands	r3, r4
 80012a4:	3b08      	subs	r3, #8
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	430a      	orrs	r2, r1
 80012aa:	3306      	adds	r3, #6
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	18c3      	adds	r3, r0, r3
 80012b0:	3304      	adds	r3, #4
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b003      	add	sp, #12
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	045b      	lsls	r3, r3, #17
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d301      	bcc.n	80012dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d8:	2301      	movs	r3, #1
 80012da:	e010      	b.n	80012fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <SysTick_Config+0x44>)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	3a01      	subs	r2, #1
 80012e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e4:	2301      	movs	r3, #1
 80012e6:	425b      	negs	r3, r3
 80012e8:	2103      	movs	r1, #3
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff ff7c 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x44>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x44>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	210f      	movs	r1, #15
 8001318:	187b      	adds	r3, r7, r1
 800131a:	1c02      	adds	r2, r0, #0
 800131c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	187b      	adds	r3, r7, r1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	0011      	movs	r1, r2
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b004      	add	sp, #16
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ffbf 	bl	80012c4 <SysTick_Config>
 8001346:	0003      	movs	r3, r0
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001366:	e14f      	b.n	8001608 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x30>
 800137e:	e140      	b.n	8001602 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	2b01      	cmp	r3, #1
 800138a:	d005      	beq.n	8001398 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001394:	2b02      	cmp	r3, #2
 8001396:	d130      	bne.n	80013fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	409a      	lsls	r2, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ce:	2201      	movs	r2, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	2201      	movs	r2, #1
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2203      	movs	r2, #3
 8001400:	4013      	ands	r3, r2
 8001402:	2b03      	cmp	r3, #3
 8001404:	d017      	beq.n	8001436 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d123      	bne.n	800148a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	58d3      	ldr	r3, [r2, r3]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2207      	movs	r2, #7
 8001454:	4013      	ands	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	409a      	lsls	r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2107      	movs	r1, #7
 800146e:	400b      	ands	r3, r1
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	401a      	ands	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	23c0      	movs	r3, #192	; 0xc0
 80014c4:	029b      	lsls	r3, r3, #10
 80014c6:	4013      	ands	r3, r2
 80014c8:	d100      	bne.n	80014cc <HAL_GPIO_Init+0x17c>
 80014ca:	e09a      	b.n	8001602 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014cc:	4b54      	ldr	r3, [pc, #336]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80014ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d8:	4a52      	ldr	r2, [pc, #328]	; (8001624 <HAL_GPIO_Init+0x2d4>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	589b      	ldr	r3, [r3, r2]
 80014e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2203      	movs	r2, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	23a0      	movs	r3, #160	; 0xa0
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	429a      	cmp	r2, r3
 8001504:	d019      	beq.n	800153a <HAL_GPIO_Init+0x1ea>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a47      	ldr	r2, [pc, #284]	; (8001628 <HAL_GPIO_Init+0x2d8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0x1e6>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a46      	ldr	r2, [pc, #280]	; (800162c <HAL_GPIO_Init+0x2dc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00d      	beq.n	8001532 <HAL_GPIO_Init+0x1e2>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d007      	beq.n	800152e <HAL_GPIO_Init+0x1de>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a44      	ldr	r2, [pc, #272]	; (8001634 <HAL_GPIO_Init+0x2e4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_GPIO_Init+0x1da>
 8001526:	2305      	movs	r3, #5
 8001528:	e008      	b.n	800153c <HAL_GPIO_Init+0x1ec>
 800152a:	2306      	movs	r3, #6
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x1ec>
 800152e:	2303      	movs	r3, #3
 8001530:	e004      	b.n	800153c <HAL_GPIO_Init+0x1ec>
 8001532:	2302      	movs	r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x1ec>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x1ec>
 800153a:	2300      	movs	r3, #0
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	2103      	movs	r1, #3
 8001540:	400a      	ands	r2, r1
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4093      	lsls	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <HAL_GPIO_Init+0x2d4>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	025b      	lsls	r3, r3, #9
 8001572:	4013      	ands	r3, r2
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	035b      	lsls	r3, r3, #13
 80015c6:	4013      	ands	r3, r2
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	039b      	lsls	r3, r3, #14
 80015f0:	4013      	ands	r3, r2
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	40da      	lsrs	r2, r3
 8001610:	1e13      	subs	r3, r2, #0
 8001612:	d000      	beq.n	8001616 <HAL_GPIO_Init+0x2c6>
 8001614:	e6a8      	b.n	8001368 <HAL_GPIO_Init+0x18>
  }
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b006      	add	sp, #24
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	50000400 	.word	0x50000400
 800162c:	50000800 	.word	0x50000800
 8001630:	50000c00 	.word	0x50000c00
 8001634:	50001c00 	.word	0x50001c00
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	0008      	movs	r0, r1
 8001646:	0011      	movs	r1, r2
 8001648:	1cbb      	adds	r3, r7, #2
 800164a:	1c02      	adds	r2, r0, #0
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	1c7b      	adds	r3, r7, #1
 8001650:	1c0a      	adds	r2, r1, #0
 8001652:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001654:	1c7b      	adds	r3, r7, #1
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165c:	1cbb      	adds	r3, r7, #2
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001664:	e003      	b.n	800166e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001666:	1cbb      	adds	r3, r7, #2
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e082      	b.n	8001790 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2241      	movs	r2, #65	; 0x41
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d107      	bne.n	80016a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	2100      	movs	r1, #0
 800169c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fa57 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2241      	movs	r2, #65	; 0x41
 80016aa:	2124      	movs	r1, #36	; 0x24
 80016ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	438a      	bics	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4934      	ldr	r1, [pc, #208]	; (8001798 <HAL_I2C_Init+0x120>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4931      	ldr	r1, [pc, #196]	; (800179c <HAL_I2C_Init+0x124>)
 80016d8:	400a      	ands	r2, r1
 80016da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0209      	lsls	r1, r1, #8
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	e007      	b.n	8001706 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2184      	movs	r1, #132	; 0x84
 8001700:	0209      	lsls	r1, r1, #8
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d104      	bne.n	8001718 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	491f      	ldr	r1, [pc, #124]	; (80017a0 <HAL_I2C_Init+0x128>)
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	491a      	ldr	r1, [pc, #104]	; (800179c <HAL_I2C_Init+0x124>)
 8001734:	400a      	ands	r2, r1
 8001736:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	431a      	orrs	r2, r3
 8001742:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69d9      	ldr	r1, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2241      	movs	r2, #65	; 0x41
 800177c:	2120      	movs	r1, #32
 800177e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2242      	movs	r2, #66	; 0x42
 800178a:	2100      	movs	r1, #0
 800178c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}
 8001798:	f0ffffff 	.word	0xf0ffffff
 800179c:	ffff7fff 	.word	0xffff7fff
 80017a0:	02008000 	.word	0x02008000

080017a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	230a      	movs	r3, #10
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	1c0a      	adds	r2, r1, #0
 80017b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2241      	movs	r2, #65	; 0x41
 80017c0:	5c9b      	ldrb	r3, [r3, r2]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d000      	beq.n	80017ca <HAL_I2C_IsDeviceReady+0x26>
 80017c8:	e0fe      	b.n	80019c8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	401a      	ands	r2, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	429a      	cmp	r2, r3
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
 80017e0:	e0f3      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2240      	movs	r2, #64	; 0x40
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_I2C_IsDeviceReady+0x4c>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0ec      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	2101      	movs	r1, #1
 80017f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2241      	movs	r2, #65	; 0x41
 80017fc:	2124      	movs	r1, #36	; 0x24
 80017fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_I2C_IsDeviceReady+0x7a>
 800180e:	230a      	movs	r3, #10
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	059b      	lsls	r3, r3, #22
 8001816:	0d9b      	lsrs	r3, r3, #22
 8001818:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <HAL_I2C_IsDeviceReady+0x230>)
 800181a:	431a      	orrs	r2, r3
 800181c:	e007      	b.n	800182e <HAL_I2C_IsDeviceReady+0x8a>
 800181e:	230a      	movs	r3, #10
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	059b      	lsls	r3, r3, #22
 8001826:	0d9b      	lsrs	r3, r3, #22
 8001828:	22a0      	movs	r2, #160	; 0xa0
 800182a:	0192      	lsls	r2, r2, #6
 800182c:	431a      	orrs	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001834:	f7ff fcaa 	bl	800118c <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2220      	movs	r2, #32
 8001844:	4013      	ands	r3, r2
 8001846:	3b20      	subs	r3, #32
 8001848:	425a      	negs	r2, r3
 800184a:	4153      	adcs	r3, r2
 800184c:	b2da      	uxtb	r2, r3
 800184e:	231f      	movs	r3, #31
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2210      	movs	r2, #16
 800185c:	4013      	ands	r3, r2
 800185e:	3b10      	subs	r3, #16
 8001860:	425a      	negs	r2, r3
 8001862:	4153      	adcs	r3, r2
 8001864:	b2da      	uxtb	r2, r3
 8001866:	231e      	movs	r3, #30
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800186c:	e035      	b.n	80018da <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	d01a      	beq.n	80018aa <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001874:	f7ff fc8a 	bl	800118c <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d302      	bcc.n	800188a <HAL_I2C_IsDeviceReady+0xe6>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2241      	movs	r2, #65	; 0x41
 800188e:	2120      	movs	r1, #32
 8001890:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	2220      	movs	r2, #32
 8001898:	431a      	orrs	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2240      	movs	r2, #64	; 0x40
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e08f      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2220      	movs	r2, #32
 80018b2:	4013      	ands	r3, r2
 80018b4:	3b20      	subs	r3, #32
 80018b6:	425a      	negs	r2, r3
 80018b8:	4153      	adcs	r3, r2
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	231f      	movs	r3, #31
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2210      	movs	r2, #16
 80018ca:	4013      	ands	r3, r2
 80018cc:	3b10      	subs	r3, #16
 80018ce:	425a      	negs	r2, r3
 80018d0:	4153      	adcs	r3, r2
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	231e      	movs	r3, #30
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018da:	231f      	movs	r3, #31
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d104      	bne.n	80018ee <HAL_I2C_IsDeviceReady+0x14a>
 80018e4:	231e      	movs	r3, #30
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0bf      	beq.n	800186e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2210      	movs	r2, #16
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d01a      	beq.n	8001932 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	0013      	movs	r3, r2
 8001906:	2200      	movs	r2, #0
 8001908:	2120      	movs	r1, #32
 800190a:	f000 f865 	bl	80019d8 <I2C_WaitOnFlagUntilTimeout>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e059      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2220      	movs	r2, #32
 800191c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2241      	movs	r2, #65	; 0x41
 8001922:	2120      	movs	r1, #32
 8001924:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	2100      	movs	r1, #0
 800192c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e04b      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	0013      	movs	r3, r2
 800193c:	2200      	movs	r2, #0
 800193e:	2120      	movs	r1, #32
 8001940:	f000 f84a 	bl	80019d8 <I2C_WaitOnFlagUntilTimeout>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e03e      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2210      	movs	r2, #16
 8001952:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2220      	movs	r2, #32
 800195a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	d119      	bne.n	8001998 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	01c9      	lsls	r1, r1, #7
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	0013      	movs	r3, r2
 8001980:	2200      	movs	r2, #0
 8001982:	2120      	movs	r1, #32
 8001984:	f000 f828 	bl	80019d8 <I2C_WaitOnFlagUntilTimeout>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e01c      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2220      	movs	r2, #32
 8001996:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d900      	bls.n	80019a8 <HAL_I2C_IsDeviceReady+0x204>
 80019a6:	e72e      	b.n	8001806 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2241      	movs	r2, #65	; 0x41
 80019ac:	2120      	movs	r1, #32
 80019ae:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	2220      	movs	r2, #32
 80019b6:	431a      	orrs	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b008      	add	sp, #32
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	02002000 	.word	0x02002000

080019d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e8:	e021      	b.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	d01e      	beq.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f0:	f7ff fbcc 	bl	800118c <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d302      	bcc.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2241      	movs	r2, #65	; 0x41
 8001a16:	2120      	movs	r1, #32
 8001a18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2242      	movs	r2, #66	; 0x42
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2240      	movs	r2, #64	; 0x40
 8001a26:	2100      	movs	r1, #0
 8001a28:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	4013      	ands	r3, r2
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	425a      	negs	r2, r3
 8001a3e:	4153      	adcs	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d0ce      	beq.n	80019ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	5c9b      	ldrb	r3, [r3, r2]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b20      	cmp	r3, #32
 8001a6c:	d138      	bne.n	8001ae0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2240      	movs	r2, #64	; 0x40
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e032      	b.n	8001ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	2101      	movs	r1, #1
 8001a82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2241      	movs	r2, #65	; 0x41
 8001a88:	2124      	movs	r1, #36	; 0x24
 8001a8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4911      	ldr	r1, [pc, #68]	; (8001aec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2241      	movs	r2, #65	; 0x41
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e000      	b.n	8001ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
  }
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	ffffefff 	.word	0xffffefff

08001af0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2241      	movs	r2, #65	; 0x41
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d139      	bne.n	8001b7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2240      	movs	r2, #64	; 0x40
 8001b0a:	5c9b      	ldrb	r3, [r3, r2]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e033      	b.n	8001b7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	2101      	movs	r1, #1
 8001b1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2241      	movs	r2, #65	; 0x41
 8001b20:	2124      	movs	r1, #36	; 0x24
 8001b22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	438a      	bics	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2241      	movs	r2, #65	; 0x41
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
  }
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b004      	add	sp, #16
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	fffff0ff 	.word	0xfffff0ff

08001b88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	b08b      	sub	sp, #44	; 0x2c
 8001b8c:	af06      	add	r7, sp, #24
 8001b8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0ff      	b.n	8001d9a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a81      	ldr	r2, [pc, #516]	; (8001da4 <HAL_PCD_Init+0x21c>)
 8001b9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d108      	bne.n	8001bb8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	23aa      	movs	r3, #170	; 0xaa
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	2100      	movs	r1, #0
 8001bae:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff f9ee 	bl	8000f94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <HAL_PCD_Init+0x21c>)
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f001 ff03 	bl	80039d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e058      	b.n	8001c86 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	183b      	adds	r3, r7, r0
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	0013      	movs	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	189b      	adds	r3, r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	18cb      	adds	r3, r1, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bee:	183b      	adds	r3, r7, r0
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	189b      	adds	r3, r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	183a      	adds	r2, r7, r0
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c04:	0004      	movs	r4, r0
 8001c06:	183b      	adds	r3, r7, r0
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b298      	uxth	r0, r3
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	0013      	movs	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	189b      	adds	r3, r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	18cb      	adds	r3, r1, r3
 8001c1c:	3336      	adds	r3, #54	; 0x36
 8001c1e:	1c02      	adds	r2, r0, #0
 8001c20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	0013      	movs	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	189b      	adds	r3, r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	18cb      	adds	r3, r1, r3
 8001c34:	3303      	adds	r3, #3
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	0013      	movs	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	18cb      	adds	r3, r1, r3
 8001c4a:	3338      	adds	r3, #56	; 0x38
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c50:	193b      	adds	r3, r7, r4
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	0013      	movs	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	189b      	adds	r3, r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	18cb      	adds	r3, r1, r3
 8001c60:	333c      	adds	r3, #60	; 0x3c
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	189b      	adds	r3, r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	18cb      	adds	r3, r1, r3
 8001c76:	3340      	adds	r3, #64	; 0x40
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7c:	193b      	adds	r3, r7, r4
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	193b      	adds	r3, r7, r4
 8001c82:	3201      	adds	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	210f      	movs	r1, #15
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d39f      	bcc.n	8001bd4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e056      	b.n	8001d4a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c9c:	240f      	movs	r4, #15
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	236a      	movs	r3, #106	; 0x6a
 8001ca6:	33ff      	adds	r3, #255	; 0xff
 8001ca8:	0019      	movs	r1, r3
 8001caa:	0013      	movs	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	18c3      	adds	r3, r0, r3
 8001cb4:	185b      	adds	r3, r3, r1
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cba:	193b      	adds	r3, r7, r4
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	23b4      	movs	r3, #180	; 0xb4
 8001cc2:	0059      	lsls	r1, r3, #1
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	189b      	adds	r3, r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	18c3      	adds	r3, r0, r3
 8001cce:	185b      	adds	r3, r3, r1
 8001cd0:	193a      	adds	r2, r7, r4
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cd6:	193b      	adds	r3, r7, r4
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	236c      	movs	r3, #108	; 0x6c
 8001cde:	33ff      	adds	r3, #255	; 0xff
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	189b      	adds	r3, r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	18c3      	adds	r3, r0, r3
 8001cec:	185b      	adds	r3, r3, r1
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	23bc      	movs	r3, #188	; 0xbc
 8001cfa:	0059      	lsls	r1, r3, #1
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	189b      	adds	r3, r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	18c3      	adds	r3, r0, r3
 8001d06:	185b      	adds	r3, r3, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	23be      	movs	r3, #190	; 0xbe
 8001d14:	0059      	lsls	r1, r3, #1
 8001d16:	0013      	movs	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	189b      	adds	r3, r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	18c3      	adds	r3, r0, r3
 8001d20:	185b      	adds	r3, r3, r1
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	0059      	lsls	r1, r3, #1
 8001d30:	0013      	movs	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	189b      	adds	r3, r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	18c3      	adds	r3, r0, r3
 8001d3a:	185b      	adds	r3, r3, r1
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d40:	193b      	adds	r3, r7, r4
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	193b      	adds	r3, r7, r4
 8001d46:	3201      	adds	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d3a1      	bcc.n	8001c9c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	466a      	mov	r2, sp
 8001d60:	0011      	movs	r1, r2
 8001d62:	001a      	movs	r2, r3
 8001d64:	3210      	adds	r2, #16
 8001d66:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001d68:	c170      	stmia	r1!, {r4, r5, r6}
 8001d6a:	ca30      	ldmia	r2!, {r4, r5}
 8001d6c:	c130      	stmia	r1!, {r4, r5}
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f001 fe46 	bl	8003a04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_PCD_Init+0x21c>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d103      	bne.n	8001d98 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 f808 	bl	8001da8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b005      	add	sp, #20
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	000002a9 	.word	0x000002a9

08001da8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	23ba      	movs	r3, #186	; 0xba
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	23b8      	movs	r3, #184	; 0xb8
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2254      	movs	r2, #84	; 0x54
 8001dce:	5a9b      	ldrh	r3, [r3, r2]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b299      	uxth	r1, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2254      	movs	r2, #84	; 0x54
 8001ddc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2254      	movs	r2, #84	; 0x54
 8001de2:	5a9b      	ldrh	r3, [r3, r2]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2202      	movs	r2, #2
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b299      	uxth	r1, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2254      	movs	r2, #84	; 0x54
 8001df0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b004      	add	sp, #16
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b5b0      	push	{r4, r5, r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f000 fbaf 	bl	800256e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e10:	4bcf      	ldr	r3, [pc, #828]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	220c      	movs	r2, #12
 8001e16:	4013      	ands	r3, r2
 8001e18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e1a:	4bcd      	ldr	r3, [pc, #820]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	4013      	ands	r3, r2
 8001e24:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <HAL_RCC_OscConfig+0x36>
 8001e30:	e07e      	b.n	8001f30 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d007      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d112      	bne.n	8001e64 <HAL_RCC_OscConfig+0x68>
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	4bc1      	ldr	r3, [pc, #772]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	029b      	lsls	r3, r3, #10
 8001e50:	4013      	ands	r3, r2
 8001e52:	d100      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5a>
 8001e54:	e06b      	b.n	8001f2e <HAL_RCC_OscConfig+0x132>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d167      	bne.n	8001f2e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f000 fb85 	bl	800256e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	025b      	lsls	r3, r3, #9
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x84>
 8001e70:	4bb7      	ldr	r3, [pc, #732]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4bb6      	ldr	r3, [pc, #728]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0249      	lsls	r1, r1, #9
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e027      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	23a0      	movs	r3, #160	; 0xa0
 8001e86:	02db      	lsls	r3, r3, #11
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d10e      	bne.n	8001eaa <HAL_RCC_OscConfig+0xae>
 8001e8c:	4bb0      	ldr	r3, [pc, #704]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4baf      	ldr	r3, [pc, #700]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	02c9      	lsls	r1, r1, #11
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	4bad      	ldr	r3, [pc, #692]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4bac      	ldr	r3, [pc, #688]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0249      	lsls	r1, r1, #9
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e012      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001eaa:	4ba9      	ldr	r3, [pc, #676]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4ba8      	ldr	r3, [pc, #672]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001eb0:	49a8      	ldr	r1, [pc, #672]	; (8002154 <HAL_RCC_OscConfig+0x358>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	4ba6      	ldr	r3, [pc, #664]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	025b      	lsls	r3, r3, #9
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4ba2      	ldr	r3, [pc, #648]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4ba1      	ldr	r3, [pc, #644]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001eca:	49a3      	ldr	r1, [pc, #652]	; (8002158 <HAL_RCC_OscConfig+0x35c>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d015      	beq.n	8001f04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f958 	bl	800118c <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee2:	f7ff f953 	bl	800118c <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d902      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	f000 fb3c 	bl	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ef6:	4b96      	ldr	r3, [pc, #600]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	4013      	ands	r3, r2
 8001f00:	d0ef      	beq.n	8001ee2 <HAL_RCC_OscConfig+0xe6>
 8001f02:	e015      	b.n	8001f30 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff f942 	bl	800118c <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0e:	f7ff f93d 	bl	800118c <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e326      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	029b      	lsls	r3, r3, #10
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x112>
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d100      	bne.n	8001f3c <HAL_RCC_OscConfig+0x140>
 8001f3a:	e08b      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d13e      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1d0>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d13b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f54:	4b7e      	ldr	r3, [pc, #504]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_RCC_OscConfig+0x16c>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e302      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b79      	ldr	r3, [pc, #484]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a7b      	ldr	r2, [pc, #492]	; (800215c <HAL_RCC_OscConfig+0x360>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	021a      	lsls	r2, r3, #8
 8001f78:	4b75      	ldr	r3, [pc, #468]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f7e:	4b74      	ldr	r3, [pc, #464]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2209      	movs	r2, #9
 8001f84:	4393      	bics	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	4b71      	ldr	r3, [pc, #452]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f90:	f000 fc40 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 8001f94:	0001      	movs	r1, r0
 8001f96:	4b6e      	ldr	r3, [pc, #440]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	4a6f      	ldr	r2, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x364>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	40da      	lsrs	r2, r3
 8001fa8:	4b6e      	ldr	r3, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x368>)
 8001faa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001fac:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <HAL_RCC_OscConfig+0x36c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2513      	movs	r5, #19
 8001fb2:	197c      	adds	r4, r7, r5
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff f8a3 	bl	8001100 <HAL_InitTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fbe:	197b      	adds	r3, r7, r5
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d046      	beq.n	8002054 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001fc6:	197b      	adds	r3, r7, r5
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	e2d0      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d027      	beq.n	8002022 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fd2:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2209      	movs	r2, #9
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f8d2 	bl	800118c <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff f8cd 	bl	800118c <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e2b6      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2204      	movs	r2, #4
 8002006:	4013      	ands	r3, r2
 8002008:	d0f1      	beq.n	8001fee <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a53      	ldr	r2, [pc, #332]	; (800215c <HAL_RCC_OscConfig+0x360>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	021a      	lsls	r2, r3, #8
 800201a:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	e018      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002028:	2101      	movs	r1, #1
 800202a:	438a      	bics	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff f8ad 	bl	800118c <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff f8a8 	bl	800118c <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e291      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2204      	movs	r2, #4
 8002050:	4013      	ands	r3, r2
 8002052:	d1f1      	bne.n	8002038 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d100      	bne.n	8002060 <HAL_RCC_OscConfig+0x264>
 800205e:	e0a1      	b.n	80021a4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d140      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d005      	beq.n	800207e <HAL_RCC_OscConfig+0x282>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e277      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207e:	4b34      	ldr	r3, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a3a      	ldr	r2, [pc, #232]	; (800216c <HAL_RCC_OscConfig+0x370>)
 8002084:	4013      	ands	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	0a19      	lsrs	r1, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	061a      	lsls	r2, r3, #24
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	0b5b      	lsrs	r3, r3, #13
 80020ac:	3301      	adds	r3, #1
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	0212      	lsls	r2, r2, #8
 80020b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	210f      	movs	r1, #15
 80020bc:	400b      	ands	r3, r1
 80020be:	4928      	ldr	r1, [pc, #160]	; (8002160 <HAL_RCC_OscConfig+0x364>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x368>)
 80020c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x36c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2513      	movs	r5, #19
 80020ce:	197c      	adds	r4, r7, r5
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff f815 	bl	8001100 <HAL_InitTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020da:	197b      	adds	r3, r7, r5
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d060      	beq.n	80021a4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80020e2:	197b      	adds	r3, r7, r5
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	e242      	b.n	800256e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03f      	beq.n	8002170 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	0049      	lsls	r1, r1, #1
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff f845 	bl	800118c <HAL_GetTick>
 8002102:	0003      	movs	r3, r0
 8002104:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002108:	f7ff f840 	bl	800118c <HAL_GetTick>
 800210c:	0002      	movs	r2, r0
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e229      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x370>)
 800212c:	4013      	ands	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	0a19      	lsrs	r1, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	061a      	lsls	r2, r3, #24
 8002148:	4b01      	ldr	r3, [pc, #4]	; (8002150 <HAL_RCC_OscConfig+0x354>)
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	e029      	b.n	80021a4 <HAL_RCC_OscConfig+0x3a8>
 8002150:	40021000 	.word	0x40021000
 8002154:	fffeffff 	.word	0xfffeffff
 8002158:	fffbffff 	.word	0xfffbffff
 800215c:	ffffe0ff 	.word	0xffffe0ff
 8002160:	08004394 	.word	0x08004394
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004
 800216c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002170:	4bbd      	ldr	r3, [pc, #756]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4bbc      	ldr	r3, [pc, #752]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002176:	49bd      	ldr	r1, [pc, #756]	; (800246c <HAL_RCC_OscConfig+0x670>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff f806 	bl	800118c <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002186:	f7ff f801 	bl	800118c <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1ea      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002198:	4bb3      	ldr	r3, [pc, #716]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2208      	movs	r2, #8
 80021aa:	4013      	ands	r3, r2
 80021ac:	d036      	beq.n	800221c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d019      	beq.n	80021ea <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4bac      	ldr	r3, [pc, #688]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80021b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ba:	4bab      	ldr	r3, [pc, #684]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80021bc:	2101      	movs	r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe ffe3 	bl	800118c <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021cc:	f7fe ffde 	bl	800118c <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1c7      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021de:	4ba2      	ldr	r3, [pc, #648]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d0f1      	beq.n	80021cc <HAL_RCC_OscConfig+0x3d0>
 80021e8:	e018      	b.n	800221c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ea:	4b9f      	ldr	r3, [pc, #636]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	4b9e      	ldr	r3, [pc, #632]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	438a      	bics	r2, r1
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7fe ffc9 	bl	800118c <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe ffc4 	bl	800118c <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1ad      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002212:	4b95      	ldr	r3, [pc, #596]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d1f1      	bne.n	8002200 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2204      	movs	r2, #4
 8002222:	4013      	ands	r3, r2
 8002224:	d100      	bne.n	8002228 <HAL_RCC_OscConfig+0x42c>
 8002226:	e0ae      	b.n	8002386 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002228:	2027      	movs	r0, #39	; 0x27
 800222a:	183b      	adds	r3, r7, r0
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002230:	4b8d      	ldr	r3, [pc, #564]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	055b      	lsls	r3, r3, #21
 8002238:	4013      	ands	r3, r2
 800223a:	d109      	bne.n	8002250 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b8a      	ldr	r3, [pc, #552]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800223e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002240:	4b89      	ldr	r3, [pc, #548]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	0549      	lsls	r1, r1, #21
 8002246:	430a      	orrs	r2, r1
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800224a:	183b      	adds	r3, r7, r0
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	4b87      	ldr	r3, [pc, #540]	; (8002470 <HAL_RCC_OscConfig+0x674>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4013      	ands	r3, r2
 800225a:	d11a      	bne.n	8002292 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225c:	4b84      	ldr	r3, [pc, #528]	; (8002470 <HAL_RCC_OscConfig+0x674>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b83      	ldr	r3, [pc, #524]	; (8002470 <HAL_RCC_OscConfig+0x674>)
 8002262:	2180      	movs	r1, #128	; 0x80
 8002264:	0049      	lsls	r1, r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7fe ff8f 	bl	800118c <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe ff8a 	bl	800118c <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e173      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x674>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	429a      	cmp	r2, r3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_OscConfig+0x4b2>
 800229e:	4b72      	ldr	r3, [pc, #456]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a2:	4b71      	ldr	r3, [pc, #452]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	651a      	str	r2, [r3, #80]	; 0x50
 80022ac:	e031      	b.n	8002312 <HAL_RCC_OscConfig+0x516>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4d4>
 80022b6:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ba:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022bc:	496b      	ldr	r1, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x670>)
 80022be:	400a      	ands	r2, r1
 80022c0:	651a      	str	r2, [r3, #80]	; 0x50
 80022c2:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c6:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022c8:	496a      	ldr	r1, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x678>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	651a      	str	r2, [r3, #80]	; 0x50
 80022ce:	e020      	b.n	8002312 <HAL_RCC_OscConfig+0x516>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	23a0      	movs	r3, #160	; 0xa0
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	429a      	cmp	r2, r3
 80022da:	d10e      	bne.n	80022fa <HAL_RCC_OscConfig+0x4fe>
 80022dc:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022e0:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	00c9      	lsls	r1, r1, #3
 80022e6:	430a      	orrs	r2, r1
 80022e8:	651a      	str	r2, [r3, #80]	; 0x50
 80022ea:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ee:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0049      	lsls	r1, r1, #1
 80022f4:	430a      	orrs	r2, r1
 80022f6:	651a      	str	r2, [r3, #80]	; 0x50
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x516>
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80022fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002300:	495a      	ldr	r1, [pc, #360]	; (800246c <HAL_RCC_OscConfig+0x670>)
 8002302:	400a      	ands	r2, r1
 8002304:	651a      	str	r2, [r3, #80]	; 0x50
 8002306:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230a:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800230c:	4959      	ldr	r1, [pc, #356]	; (8002474 <HAL_RCC_OscConfig+0x678>)
 800230e:	400a      	ands	r2, r1
 8002310:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe ff37 	bl	800118c <HAL_GetTick>
 800231e:	0003      	movs	r3, r0
 8002320:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002322:	e009      	b.n	8002338 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7fe ff32 	bl	800118c <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_OscConfig+0x67c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e11a      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002338:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800233a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d0ef      	beq.n	8002324 <HAL_RCC_OscConfig+0x528>
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe ff21 	bl	800118c <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800234e:	e009      	b.n	8002364 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe ff1c 	bl	800118c <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	4a47      	ldr	r2, [pc, #284]	; (8002478 <HAL_RCC_OscConfig+0x67c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e104      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002364:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d1ef      	bne.n	8002350 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002370:	2327      	movs	r3, #39	; 0x27
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d105      	bne.n	8002386 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002380:	493e      	ldr	r1, [pc, #248]	; (800247c <HAL_RCC_OscConfig+0x680>)
 8002382:	400a      	ands	r2, r1
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2220      	movs	r2, #32
 800238c:	4013      	ands	r3, r2
 800238e:	d049      	beq.n	8002424 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d026      	beq.n	80023e6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002398:	4b33      	ldr	r3, [pc, #204]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80023a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a8:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	430a      	orrs	r2, r1
 80023ae:	635a      	str	r2, [r3, #52]	; 0x34
 80023b0:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_RCC_OscConfig+0x684>)
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_RCC_OscConfig+0x684>)
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	0189      	lsls	r1, r1, #6
 80023ba:	430a      	orrs	r2, r1
 80023bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fee5 	bl	800118c <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c8:	f7fe fee0 	bl	800118c <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0c9      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f1      	beq.n	80023c8 <HAL_RCC_OscConfig+0x5cc>
 80023e4:	e01e      	b.n	8002424 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	438a      	bics	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_RCC_OscConfig+0x684>)
 80023f4:	6a1a      	ldr	r2, [r3, #32]
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_OscConfig+0x684>)
 80023f8:	4922      	ldr	r1, [pc, #136]	; (8002484 <HAL_RCC_OscConfig+0x688>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe fec5 	bl	800118c <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002408:	f7fe fec0 	bl	800118c <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0a9      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d1f1      	bne.n	8002408 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <HAL_RCC_OscConfig+0x632>
 800242c:	e09e      	b.n	800256c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d100      	bne.n	8002436 <HAL_RCC_OscConfig+0x63a>
 8002434:	e077      	b.n	8002526 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	2b02      	cmp	r3, #2
 800243c:	d158      	bne.n	80024f0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x66c>)
 8002444:	4910      	ldr	r1, [pc, #64]	; (8002488 <HAL_RCC_OscConfig+0x68c>)
 8002446:	400a      	ands	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fe9f 	bl	800118c <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002452:	e01b      	b.n	800248c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fe9a 	bl	800118c <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d914      	bls.n	800248c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e083      	b.n	800256e <HAL_RCC_OscConfig+0x772>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	40021000 	.word	0x40021000
 800246c:	fffffeff 	.word	0xfffffeff
 8002470:	40007000 	.word	0x40007000
 8002474:	fffffbff 	.word	0xfffffbff
 8002478:	00001388 	.word	0x00001388
 800247c:	efffffff 	.word	0xefffffff
 8002480:	40010000 	.word	0x40010000
 8002484:	ffffdfff 	.word	0xffffdfff
 8002488:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800248c:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	049b      	lsls	r3, r3, #18
 8002494:	4013      	ands	r3, r2
 8002496:	d1dd      	bne.n	8002454 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a37      	ldr	r2, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x780>)
 800249e:	4013      	ands	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	431a      	orrs	r2, r3
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	0449      	lsls	r1, r1, #17
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fe61 	bl	800118c <HAL_GetTick>
 80024ca:	0003      	movs	r3, r0
 80024cc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fe5c 	bl	800118c <HAL_GetTick>
 80024d4:	0002      	movs	r2, r0
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e045      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024e2:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	049b      	lsls	r3, r3, #18
 80024ea:	4013      	ands	r3, r2
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x6d4>
 80024ee:	e03d      	b.n	800256c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 80024f6:	4922      	ldr	r1, [pc, #136]	; (8002580 <HAL_RCC_OscConfig+0x784>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fe46 	bl	800118c <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe fe41 	bl	800118c <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e02a      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	049b      	lsls	r3, r3, #18
 8002520:	4013      	ands	r3, r2
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x70a>
 8002524:	e022      	b.n	800256c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e01d      	b.n	800256e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_OscConfig+0x77c>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	025b      	lsls	r3, r3, #9
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	429a      	cmp	r2, r3
 8002546:	d10f      	bne.n	8002568 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	23f0      	movs	r3, #240	; 0xf0
 800254c:	039b      	lsls	r3, r3, #14
 800254e:	401a      	ands	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d107      	bne.n	8002568 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	23c0      	movs	r3, #192	; 0xc0
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b00a      	add	sp, #40	; 0x28
 8002574:	bdb0      	pop	{r4, r5, r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	40021000 	.word	0x40021000
 800257c:	ff02ffff 	.word	0xff02ffff
 8002580:	feffffff 	.word	0xfeffffff

08002584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e128      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b96      	ldr	r3, [pc, #600]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d91e      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b93      	ldr	r3, [pc, #588]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2201      	movs	r2, #1
 80025ac:	4393      	bics	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	4b90      	ldr	r3, [pc, #576]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fde8 	bl	800118c <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	e009      	b.n	80025d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fde3 	bl	800118c <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	4a8a      	ldr	r2, [pc, #552]	; (80027f8 <HAL_RCC_ClockConfig+0x274>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e109      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b87      	ldr	r3, [pc, #540]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1ee      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ee:	4b83      	ldr	r3, [pc, #524]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	22f0      	movs	r2, #240	; 0xf0
 80025f4:	4393      	bics	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	4b7f      	ldr	r3, [pc, #508]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d100      	bne.n	800260e <HAL_RCC_ClockConfig+0x8a>
 800260c:	e089      	b.n	8002722 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002616:	4b79      	ldr	r3, [pc, #484]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	029b      	lsls	r3, r3, #10
 800261e:	4013      	ands	r3, r2
 8002620:	d120      	bne.n	8002664 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0e1      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	049b      	lsls	r3, r3, #18
 8002636:	4013      	ands	r3, r2
 8002638:	d114      	bne.n	8002664 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0d5      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d106      	bne.n	8002654 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002646:	4b6d      	ldr	r3, [pc, #436]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2204      	movs	r2, #4
 800264c:	4013      	ands	r3, r2
 800264e:	d109      	bne.n	8002664 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0ca      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002654:	4b69      	ldr	r3, [pc, #420]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0c2      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002664:	4b65      	ldr	r3, [pc, #404]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2203      	movs	r2, #3
 800266a:	4393      	bics	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4b62      	ldr	r3, [pc, #392]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7fe fd88 	bl	800118c <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d111      	bne.n	80026ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002688:	e009      	b.n	800269e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f7fe fd7f 	bl	800118c <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCC_ClockConfig+0x274>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0a5      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800269e:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	220c      	movs	r2, #12
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d1ef      	bne.n	800268a <HAL_RCC_ClockConfig+0x106>
 80026aa:	e03a      	b.n	8002722 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d111      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b4:	e009      	b.n	80026ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b6:	f7fe fd69 	bl	800118c <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	4a4d      	ldr	r2, [pc, #308]	; (80027f8 <HAL_RCC_ClockConfig+0x274>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e08f      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	220c      	movs	r2, #12
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x132>
 80026d6:	e024      	b.n	8002722 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d11b      	bne.n	8002718 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e0:	e009      	b.n	80026f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e2:	f7fe fd53 	bl	800118c <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <HAL_RCC_ClockConfig+0x274>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e079      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	220c      	movs	r2, #12
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d1ef      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x15e>
 8002702:	e00e      	b.n	8002722 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fe fd42 	bl	800118c <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_RCC_ClockConfig+0x274>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e068      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002718:	4b38      	ldr	r3, [pc, #224]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	220c      	movs	r2, #12
 800271e:	4013      	ands	r3, r2
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2201      	movs	r2, #1
 8002728:	4013      	ands	r3, r2
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d21e      	bcs.n	800276e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	4393      	bics	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002742:	f7fe fd23 	bl	800118c <HAL_GetTick>
 8002746:	0003      	movs	r3, r0
 8002748:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	e009      	b.n	8002760 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7fe fd1e 	bl	800118c <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <HAL_RCC_ClockConfig+0x274>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e044      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002760:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d1ee      	bne.n	800274c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a20      	ldr	r2, [pc, #128]	; (8002800 <HAL_RCC_ClockConfig+0x27c>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2208      	movs	r2, #8
 8002792:	4013      	ands	r3, r2
 8002794:	d00a      	beq.n	80027ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_RCC_ClockConfig+0x280>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	00da      	lsls	r2, r3, #3
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ac:	f000 f832 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027b0:	0001      	movs	r1, r0
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x278>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	220f      	movs	r2, #15
 80027ba:	4013      	ands	r3, r2
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <HAL_RCC_ClockConfig+0x284>)
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	000a      	movs	r2, r1
 80027c2:	40da      	lsrs	r2, r3
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCC_ClockConfig+0x288>)
 80027c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_RCC_ClockConfig+0x28c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	250b      	movs	r5, #11
 80027ce:	197c      	adds	r4, r7, r5
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe fc95 	bl	8001100 <HAL_InitTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027da:	197b      	adds	r3, r7, r5
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027e2:	197b      	adds	r3, r7, r5
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	e000      	b.n	80027ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b004      	add	sp, #16
 80027f0:	bdb0      	pop	{r4, r5, r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40022000 	.word	0x40022000
 80027f8:	00001388 	.word	0x00001388
 80027fc:	40021000 	.word	0x40021000
 8002800:	fffff8ff 	.word	0xfffff8ff
 8002804:	ffffc7ff 	.word	0xffffc7ff
 8002808:	08004394 	.word	0x08004394
 800280c:	20000000 	.word	0x20000000
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_GetSysClockFreq+0x138>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	230c      	movs	r3, #12
 8002824:	4013      	ands	r3, r2
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d014      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x40>
 800282a:	d900      	bls.n	800282e <HAL_RCC_GetSysClockFreq+0x1a>
 800282c:	e07b      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x112>
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x24>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d00b      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x3a>
 8002836:	e076      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002838:	4b44      	ldr	r3, [pc, #272]	; (800294c <HAL_RCC_GetSysClockFreq+0x138>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2210      	movs	r2, #16
 800283e:	4013      	ands	r3, r2
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002842:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002846:	e07c      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002848:	4b42      	ldr	r3, [pc, #264]	; (8002954 <HAL_RCC_GetSysClockFreq+0x140>)
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800284c:	e079      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800284e:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCC_GetSysClockFreq+0x144>)
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002852:	e076      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	0c9a      	lsrs	r2, r3, #18
 8002858:	230f      	movs	r3, #15
 800285a:	401a      	ands	r2, r3
 800285c:	4b3f      	ldr	r3, [pc, #252]	; (800295c <HAL_RCC_GetSysClockFreq+0x148>)
 800285e:	5c9b      	ldrb	r3, [r3, r2]
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	0d9a      	lsrs	r2, r3, #22
 8002866:	2303      	movs	r3, #3
 8002868:	4013      	ands	r3, r2
 800286a:	3301      	adds	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286e:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_RCC_GetSysClockFreq+0x138>)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	025b      	lsls	r3, r3, #9
 8002876:	4013      	ands	r3, r2
 8002878:	d01a      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	4a35      	ldr	r2, [pc, #212]	; (8002958 <HAL_RCC_GetSysClockFreq+0x144>)
 8002884:	2300      	movs	r3, #0
 8002886:	69b8      	ldr	r0, [r7, #24]
 8002888:	69f9      	ldr	r1, [r7, #28]
 800288a:	f7fd fcf3 	bl	8000274 <__aeabi_lmul>
 800288e:	0002      	movs	r2, r0
 8002890:	000b      	movs	r3, r1
 8002892:	0010      	movs	r0, r2
 8002894:	0019      	movs	r1, r3
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f7fd fcc7 	bl	8000234 <__aeabi_uldivmod>
 80028a6:	0002      	movs	r2, r0
 80028a8:	000b      	movs	r3, r1
 80028aa:	0013      	movs	r3, r2
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e037      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028b0:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_GetSysClockFreq+0x138>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	d01a      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4a23      	ldr	r2, [pc, #140]	; (8002950 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028c4:	2300      	movs	r3, #0
 80028c6:	68b8      	ldr	r0, [r7, #8]
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	f7fd fcd3 	bl	8000274 <__aeabi_lmul>
 80028ce:	0002      	movs	r2, r0
 80028d0:	000b      	movs	r3, r1
 80028d2:	0010      	movs	r0, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f7fd fca7 	bl	8000234 <__aeabi_uldivmod>
 80028e6:	0002      	movs	r2, r0
 80028e8:	000b      	movs	r3, r1
 80028ea:	0013      	movs	r3, r2
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
 80028ee:	e017      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	0018      	movs	r0, r3
 80028f4:	2300      	movs	r3, #0
 80028f6:	0019      	movs	r1, r3
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_RCC_GetSysClockFreq+0x140>)
 80028fa:	2300      	movs	r3, #0
 80028fc:	f7fd fcba 	bl	8000274 <__aeabi_lmul>
 8002900:	0002      	movs	r2, r0
 8002902:	000b      	movs	r3, r1
 8002904:	0010      	movs	r0, r2
 8002906:	0019      	movs	r1, r3
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	001c      	movs	r4, r3
 800290c:	2300      	movs	r3, #0
 800290e:	001d      	movs	r5, r3
 8002910:	0022      	movs	r2, r4
 8002912:	002b      	movs	r3, r5
 8002914:	f7fd fc8e 	bl	8000234 <__aeabi_uldivmod>
 8002918:	0002      	movs	r2, r0
 800291a:	000b      	movs	r3, r1
 800291c:	0013      	movs	r3, r2
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002924:	e00d      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_GetSysClockFreq+0x138>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0b5b      	lsrs	r3, r3, #13
 800292c:	2207      	movs	r2, #7
 800292e:	4013      	ands	r3, r2
 8002930:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	3301      	adds	r3, #1
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	0212      	lsls	r2, r2, #8
 800293a:	409a      	lsls	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002940:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b00e      	add	sp, #56	; 0x38
 800294a:	bdb0      	pop	{r4, r5, r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	003d0900 	.word	0x003d0900
 8002954:	00f42400 	.word	0x00f42400
 8002958:	007a1200 	.word	0x007a1200
 800295c:	080043ac 	.word	0x080043ac

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_RCC_GetHCLKFreq+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	20000000 	.word	0x20000000

08002974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002978:	f7ff fff2 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 800297c:	0001      	movs	r1, r0
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	2207      	movs	r2, #7
 8002986:	4013      	ands	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_RCC_GetPCLK1Freq+0x28>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	40d9      	lsrs	r1, r3
 800298e:	000b      	movs	r3, r1
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	40021000 	.word	0x40021000
 800299c:	080043a4 	.word	0x080043a4

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffdc 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a8:	0001      	movs	r1, r0
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	0adb      	lsrs	r3, r3, #11
 80029b0:	2207      	movs	r2, #7
 80029b2:	4013      	ands	r3, r2
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	40d9      	lsrs	r1, r3
 80029ba:	000b      	movs	r3, r1
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080043a4 	.word	0x080043a4

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029d4:	2317      	movs	r3, #23
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2220      	movs	r2, #32
 80029e2:	4013      	ands	r3, r2
 80029e4:	d106      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	4013      	ands	r3, r2
 80029f0:	d100      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80029f2:	e0d9      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f4:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	055b      	lsls	r3, r3, #21
 80029fc:	4013      	ands	r3, r2
 80029fe:	d10a      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4b99      	ldr	r3, [pc, #612]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a04:	4b98      	ldr	r3, [pc, #608]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a06:	2180      	movs	r1, #128	; 0x80
 8002a08:	0549      	lsls	r1, r1, #21
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a0e:	2317      	movs	r3, #23
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b95      	ldr	r3, [pc, #596]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d11a      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b92      	ldr	r3, [pc, #584]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b91      	ldr	r3, [pc, #580]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	0049      	lsls	r1, r1, #1
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a30:	f7fe fbac 	bl	800118c <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fe fba7 	bl	800118c <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e108      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b87      	ldr	r3, [pc, #540]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a58:	4b83      	ldr	r3, [pc, #524]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	23c0      	movs	r3, #192	; 0xc0
 8002a5e:	039b      	lsls	r3, r3, #14
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	23c0      	movs	r3, #192	; 0xc0
 8002a6a:	039b      	lsls	r3, r3, #14
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d107      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	039b      	lsls	r3, r3, #14
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d013      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	23c0      	movs	r3, #192	; 0xc0
 8002a8a:	029b      	lsls	r3, r3, #10
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	23c0      	movs	r3, #192	; 0xc0
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d10a      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a96:	4b74      	ldr	r3, [pc, #464]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	029b      	lsls	r3, r3, #10
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d101      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0d8      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002aac:	4b6e      	ldr	r3, [pc, #440]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab0:	23c0      	movs	r3, #192	; 0xc0
 8002ab2:	029b      	lsls	r3, r3, #10
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d049      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	23c0      	movs	r3, #192	; 0xc0
 8002ac4:	029b      	lsls	r3, r3, #10
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d004      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	029b      	lsls	r3, r3, #10
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d034      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d02e      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002af4:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b02:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0309      	lsls	r1, r1, #12
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b10:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b12:	4958      	ldr	r1, [pc, #352]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4013      	ands	r3, r2
 8002b26:	d014      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe fb30 	bl	800118c <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b30:	e009      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fb2b 	bl	800118c <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e08b      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b46:	4b48      	ldr	r3, [pc, #288]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0ef      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	23c0      	movs	r3, #192	; 0xc0
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	23c0      	movs	r3, #192	; 0xc0
 8002b5e:	029b      	lsls	r3, r3, #10
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a44      	ldr	r2, [pc, #272]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	23c0      	movs	r3, #192	; 0xc0
 8002b74:	039b      	lsls	r3, r3, #14
 8002b76:	401a      	ands	r2, r3
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	23c0      	movs	r3, #192	; 0xc0
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b92:	2317      	movs	r3, #23
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba0:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ba2:	4937      	ldr	r1, [pc, #220]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4393      	bics	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2204      	movs	r2, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2208      	movs	r2, #8
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	4013      	ands	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	4013      	ands	r3, r2
 8002c46:	d009      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b006      	add	sp, #24
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	fffcffff 	.word	0xfffcffff
 8002c74:	fff7ffff 	.word	0xfff7ffff
 8002c78:	00001388 	.word	0x00001388
 8002c7c:	ffcfffff 	.word	0xffcfffff
 8002c80:	efffffff 	.word	0xefffffff
 8002c84:	fffff3ff 	.word	0xfffff3ff
 8002c88:	ffffcfff 	.word	0xffffcfff
 8002c8c:	fbffffff 	.word	0xfbffffff
 8002c90:	fff3ffff 	.word	0xfff3ffff

08002c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e083      	b.n	8002dae <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	2382      	movs	r3, #130	; 0x82
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d009      	beq.n	8002cce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	e005      	b.n	8002cce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2251      	movs	r2, #81	; 0x51
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2250      	movs	r2, #80	; 0x50
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7fe f820 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2251      	movs	r2, #81	; 0x51
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	438a      	bics	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	2382      	movs	r3, #130	; 0x82
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	401a      	ands	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	2384      	movs	r3, #132	; 0x84
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68d9      	ldr	r1, [r3, #12]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	400b      	ands	r3, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	400b      	ands	r3, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6999      	ldr	r1, [r3, #24]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	400b      	ands	r3, r1
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2138      	movs	r1, #56	; 0x38
 8002d50:	400b      	ands	r3, r1
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	400b      	ands	r3, r1
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	0011      	movs	r1, r2
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	019b      	lsls	r3, r3, #6
 8002d68:	401a      	ands	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	2204      	movs	r2, #4
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2210      	movs	r2, #16
 8002d84:	401a      	ands	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4907      	ldr	r1, [pc, #28]	; (8002db8 <HAL_SPI_Init+0x124>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2251      	movs	r2, #81	; 0x51
 8002da8:	2101      	movs	r1, #1
 8002daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	fffff7ff 	.word	0xfffff7ff

08002dbc <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e074      	b.n	8002eb8 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223c      	movs	r2, #60	; 0x3c
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	223d      	movs	r2, #61	; 0x3d
 8002dde:	2100      	movs	r1, #0
 8002de0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7fe f83d 	bl	8000e64 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223c      	movs	r2, #60	; 0x3c
 8002dee:	2102      	movs	r1, #2
 8002df0:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002e08:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002e10:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002e16:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002e1c:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002e22:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002e28:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002e2e:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7b1b      	ldrb	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d108      	bne.n	8002e52 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	0249      	lsls	r1, r1, #9
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	43d2      	mvns	r2, r2
 8002e68:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e82:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681c      	ldr	r4, [r3, #0]
 8002e8c:	0010      	movs	r0, r2
 8002e8e:	f000 f817 	bl	8002ec0 <TSC_extract_groups>
 8002e92:	0003      	movs	r3, r0
 8002e94:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	223c      	movs	r2, #60	; 0x3c
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b003      	add	sp, #12
 8002ebe:	bd90      	pop	{r4, r7, pc}

08002ec0 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	e011      	b.n	8002ef6 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	0013      	movs	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d006      	beq.n	8002ef0 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	0013      	movs	r3, r2
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	d9ea      	bls.n	8002ed2 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002efc:	68fb      	ldr	r3, [r7, #12]
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b004      	add	sp, #16
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e04c      	b.n	8002fb4 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2274      	movs	r2, #116	; 0x74
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fd fe57 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2224      	movs	r2, #36	; 0x24
 8002f36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 f8e0 	bl	8003110 <UART_SetConfig>
 8002f50:	0003      	movs	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02c      	b.n	8002fb4 <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 fb73 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4911      	ldr	r1, [pc, #68]	; (8002fbc <HAL_HalfDuplex_Init+0xb4>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2122      	movs	r1, #34	; 0x22
 8002f86:	438a      	bics	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2108      	movs	r1, #8
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 fc03 	bl	80037b8 <UART_CheckIdleState>
 8002fb2:	0003      	movs	r3, r0
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	ffffb7ff 	.word	0xffffb7ff

08002fc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	1dbb      	adds	r3, r7, #6
 8002fce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d000      	beq.n	8002fda <HAL_UART_Transmit+0x1a>
 8002fd8:	e095      	b.n	8003106 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_UART_Transmit+0x28>
 8002fe0:	1dbb      	adds	r3, r7, #6
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e08d      	b.n	8003108 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	015b      	lsls	r3, r3, #5
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d109      	bne.n	800300c <HAL_UART_Transmit+0x4c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e07d      	b.n	8003108 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2274      	movs	r2, #116	; 0x74
 8003010:	5c9b      	ldrb	r3, [r3, r2]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_UART_Transmit+0x5a>
 8003016:	2302      	movs	r3, #2
 8003018:	e076      	b.n	8003108 <HAL_UART_Transmit+0x148>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2274      	movs	r2, #116	; 0x74
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	2100      	movs	r1, #0
 8003028:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2221      	movs	r2, #33	; 0x21
 800302e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003030:	f7fe f8ac 	bl	800118c <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1dba      	adds	r2, r7, #6
 800303c:	2150      	movs	r1, #80	; 0x50
 800303e:	8812      	ldrh	r2, [r2, #0]
 8003040:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1dba      	adds	r2, r7, #6
 8003046:	2152      	movs	r1, #82	; 0x52
 8003048:	8812      	ldrh	r2, [r2, #0]
 800304a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	429a      	cmp	r2, r3
 8003056:	d108      	bne.n	800306a <HAL_UART_Transmit+0xaa>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e003      	b.n	8003072 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2274      	movs	r2, #116	; 0x74
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800307a:	e02c      	b.n	80030d6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	0013      	movs	r3, r2
 8003086:	2200      	movs	r2, #0
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	f000 fbdd 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 800308e:	1e03      	subs	r3, r0, #0
 8003090:	d001      	beq.n	8003096 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e038      	b.n	8003108 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	001a      	movs	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	05d2      	lsls	r2, r2, #23
 80030a8:	0dd2      	lsrs	r2, r2, #23
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	3302      	adds	r3, #2
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e007      	b.n	80030c4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2252      	movs	r2, #82	; 0x52
 80030c8:	5a9b      	ldrh	r3, [r3, r2]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b299      	uxth	r1, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2252      	movs	r2, #82	; 0x52
 80030d4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2252      	movs	r2, #82	; 0x52
 80030da:	5a9b      	ldrh	r3, [r3, r2]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1cc      	bne.n	800307c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	0013      	movs	r3, r2
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	f000 fbaa 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d001      	beq.n	80030fc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e005      	b.n	8003108 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b008      	add	sp, #32
 800310e:	bd80      	pop	{r7, pc}

08003110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b08e      	sub	sp, #56	; 0x38
 8003114:	af00      	add	r7, sp, #0
 8003116:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003118:	231a      	movs	r3, #26
 800311a:	2218      	movs	r2, #24
 800311c:	4694      	mov	ip, r2
 800311e:	44bc      	add	ip, r7
 8003120:	4463      	add	r3, ip
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	431a      	orrs	r2, r3
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	431a      	orrs	r2, r3
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4313      	orrs	r3, r2
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4ac1      	ldr	r2, [pc, #772]	; (800344c <UART_SetConfig+0x33c>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4abd      	ldr	r2, [pc, #756]	; (8003450 <UART_SetConfig+0x340>)
 800315c:	4013      	ands	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4ab7      	ldr	r2, [pc, #732]	; (8003454 <UART_SetConfig+0x344>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003182:	4313      	orrs	r3, r2
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4ab2      	ldr	r2, [pc, #712]	; (8003458 <UART_SetConfig+0x348>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4aae      	ldr	r2, [pc, #696]	; (800345c <UART_SetConfig+0x34c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d136      	bne.n	8003214 <UART_SetConfig+0x104>
 80031a6:	4bae      	ldr	r3, [pc, #696]	; (8003460 <UART_SetConfig+0x350>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	2203      	movs	r2, #3
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d020      	beq.n	80031f4 <UART_SetConfig+0xe4>
 80031b2:	d827      	bhi.n	8003204 <UART_SetConfig+0xf4>
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d00d      	beq.n	80031d4 <UART_SetConfig+0xc4>
 80031b8:	d824      	bhi.n	8003204 <UART_SetConfig+0xf4>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <UART_SetConfig+0xb4>
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d010      	beq.n	80031e4 <UART_SetConfig+0xd4>
 80031c2:	e01f      	b.n	8003204 <UART_SetConfig+0xf4>
 80031c4:	231b      	movs	r3, #27
 80031c6:	2218      	movs	r2, #24
 80031c8:	4694      	mov	ip, r2
 80031ca:	44bc      	add	ip, r7
 80031cc:	4463      	add	r3, ip
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e0ab      	b.n	800332c <UART_SetConfig+0x21c>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2218      	movs	r2, #24
 80031d8:	4694      	mov	ip, r2
 80031da:	44bc      	add	ip, r7
 80031dc:	4463      	add	r3, ip
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e0a3      	b.n	800332c <UART_SetConfig+0x21c>
 80031e4:	231b      	movs	r3, #27
 80031e6:	2218      	movs	r2, #24
 80031e8:	4694      	mov	ip, r2
 80031ea:	44bc      	add	ip, r7
 80031ec:	4463      	add	r3, ip
 80031ee:	2204      	movs	r2, #4
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e09b      	b.n	800332c <UART_SetConfig+0x21c>
 80031f4:	231b      	movs	r3, #27
 80031f6:	2218      	movs	r2, #24
 80031f8:	4694      	mov	ip, r2
 80031fa:	44bc      	add	ip, r7
 80031fc:	4463      	add	r3, ip
 80031fe:	2208      	movs	r2, #8
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e093      	b.n	800332c <UART_SetConfig+0x21c>
 8003204:	231b      	movs	r3, #27
 8003206:	2218      	movs	r2, #24
 8003208:	4694      	mov	ip, r2
 800320a:	44bc      	add	ip, r7
 800320c:	4463      	add	r3, ip
 800320e:	2210      	movs	r2, #16
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e08b      	b.n	800332c <UART_SetConfig+0x21c>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a92      	ldr	r2, [pc, #584]	; (8003464 <UART_SetConfig+0x354>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d136      	bne.n	800328c <UART_SetConfig+0x17c>
 800321e:	4b90      	ldr	r3, [pc, #576]	; (8003460 <UART_SetConfig+0x350>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	220c      	movs	r2, #12
 8003224:	4013      	ands	r3, r2
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d020      	beq.n	800326c <UART_SetConfig+0x15c>
 800322a:	d827      	bhi.n	800327c <UART_SetConfig+0x16c>
 800322c:	2b08      	cmp	r3, #8
 800322e:	d00d      	beq.n	800324c <UART_SetConfig+0x13c>
 8003230:	d824      	bhi.n	800327c <UART_SetConfig+0x16c>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <UART_SetConfig+0x12c>
 8003236:	2b04      	cmp	r3, #4
 8003238:	d010      	beq.n	800325c <UART_SetConfig+0x14c>
 800323a:	e01f      	b.n	800327c <UART_SetConfig+0x16c>
 800323c:	231b      	movs	r3, #27
 800323e:	2218      	movs	r2, #24
 8003240:	4694      	mov	ip, r2
 8003242:	44bc      	add	ip, r7
 8003244:	4463      	add	r3, ip
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e06f      	b.n	800332c <UART_SetConfig+0x21c>
 800324c:	231b      	movs	r3, #27
 800324e:	2218      	movs	r2, #24
 8003250:	4694      	mov	ip, r2
 8003252:	44bc      	add	ip, r7
 8003254:	4463      	add	r3, ip
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e067      	b.n	800332c <UART_SetConfig+0x21c>
 800325c:	231b      	movs	r3, #27
 800325e:	2218      	movs	r2, #24
 8003260:	4694      	mov	ip, r2
 8003262:	44bc      	add	ip, r7
 8003264:	4463      	add	r3, ip
 8003266:	2204      	movs	r2, #4
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e05f      	b.n	800332c <UART_SetConfig+0x21c>
 800326c:	231b      	movs	r3, #27
 800326e:	2218      	movs	r2, #24
 8003270:	4694      	mov	ip, r2
 8003272:	44bc      	add	ip, r7
 8003274:	4463      	add	r3, ip
 8003276:	2208      	movs	r2, #8
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e057      	b.n	800332c <UART_SetConfig+0x21c>
 800327c:	231b      	movs	r3, #27
 800327e:	2218      	movs	r2, #24
 8003280:	4694      	mov	ip, r2
 8003282:	44bc      	add	ip, r7
 8003284:	4463      	add	r3, ip
 8003286:	2210      	movs	r2, #16
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e04f      	b.n	800332c <UART_SetConfig+0x21c>
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a70      	ldr	r2, [pc, #448]	; (8003454 <UART_SetConfig+0x344>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d143      	bne.n	800331e <UART_SetConfig+0x20e>
 8003296:	4b72      	ldr	r3, [pc, #456]	; (8003460 <UART_SetConfig+0x350>)
 8003298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800329a:	23c0      	movs	r3, #192	; 0xc0
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	22c0      	movs	r2, #192	; 0xc0
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d02a      	beq.n	80032fe <UART_SetConfig+0x1ee>
 80032a8:	22c0      	movs	r2, #192	; 0xc0
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d82e      	bhi.n	800330e <UART_SetConfig+0x1fe>
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d012      	beq.n	80032de <UART_SetConfig+0x1ce>
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	4293      	cmp	r3, r2
 80032be:	d826      	bhi.n	800330e <UART_SetConfig+0x1fe>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <UART_SetConfig+0x1be>
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	00d2      	lsls	r2, r2, #3
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d010      	beq.n	80032ee <UART_SetConfig+0x1de>
 80032cc:	e01f      	b.n	800330e <UART_SetConfig+0x1fe>
 80032ce:	231b      	movs	r3, #27
 80032d0:	2218      	movs	r2, #24
 80032d2:	4694      	mov	ip, r2
 80032d4:	44bc      	add	ip, r7
 80032d6:	4463      	add	r3, ip
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e026      	b.n	800332c <UART_SetConfig+0x21c>
 80032de:	231b      	movs	r3, #27
 80032e0:	2218      	movs	r2, #24
 80032e2:	4694      	mov	ip, r2
 80032e4:	44bc      	add	ip, r7
 80032e6:	4463      	add	r3, ip
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e01e      	b.n	800332c <UART_SetConfig+0x21c>
 80032ee:	231b      	movs	r3, #27
 80032f0:	2218      	movs	r2, #24
 80032f2:	4694      	mov	ip, r2
 80032f4:	44bc      	add	ip, r7
 80032f6:	4463      	add	r3, ip
 80032f8:	2204      	movs	r2, #4
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e016      	b.n	800332c <UART_SetConfig+0x21c>
 80032fe:	231b      	movs	r3, #27
 8003300:	2218      	movs	r2, #24
 8003302:	4694      	mov	ip, r2
 8003304:	44bc      	add	ip, r7
 8003306:	4463      	add	r3, ip
 8003308:	2208      	movs	r2, #8
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e00e      	b.n	800332c <UART_SetConfig+0x21c>
 800330e:	231b      	movs	r3, #27
 8003310:	2218      	movs	r2, #24
 8003312:	4694      	mov	ip, r2
 8003314:	44bc      	add	ip, r7
 8003316:	4463      	add	r3, ip
 8003318:	2210      	movs	r2, #16
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e006      	b.n	800332c <UART_SetConfig+0x21c>
 800331e:	231b      	movs	r3, #27
 8003320:	2218      	movs	r2, #24
 8003322:	4694      	mov	ip, r2
 8003324:	44bc      	add	ip, r7
 8003326:	4463      	add	r3, ip
 8003328:	2210      	movs	r2, #16
 800332a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a48      	ldr	r2, [pc, #288]	; (8003454 <UART_SetConfig+0x344>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d000      	beq.n	8003338 <UART_SetConfig+0x228>
 8003336:	e09b      	b.n	8003470 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003338:	231b      	movs	r3, #27
 800333a:	2218      	movs	r2, #24
 800333c:	4694      	mov	ip, r2
 800333e:	44bc      	add	ip, r7
 8003340:	4463      	add	r3, ip
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d01d      	beq.n	8003384 <UART_SetConfig+0x274>
 8003348:	dc20      	bgt.n	800338c <UART_SetConfig+0x27c>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d015      	beq.n	800337a <UART_SetConfig+0x26a>
 800334e:	dc1d      	bgt.n	800338c <UART_SetConfig+0x27c>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <UART_SetConfig+0x24a>
 8003354:	2b02      	cmp	r3, #2
 8003356:	d005      	beq.n	8003364 <UART_SetConfig+0x254>
 8003358:	e018      	b.n	800338c <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335a:	f7ff fb0b 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 800335e:	0003      	movs	r3, r0
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003362:	e01d      	b.n	80033a0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003364:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <UART_SetConfig+0x350>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2210      	movs	r2, #16
 800336a:	4013      	ands	r3, r2
 800336c:	d002      	beq.n	8003374 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <UART_SetConfig+0x358>)
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003372:	e015      	b.n	80033a0 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8003374:	4b3d      	ldr	r3, [pc, #244]	; (800346c <UART_SetConfig+0x35c>)
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003378:	e012      	b.n	80033a0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7ff fa4b 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 800337e:	0003      	movs	r3, r0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003382:	e00d      	b.n	80033a0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800338a:	e009      	b.n	80033a0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003390:	231a      	movs	r3, #26
 8003392:	2218      	movs	r2, #24
 8003394:	4694      	mov	ip, r2
 8003396:	44bc      	add	ip, r7
 8003398:	4463      	add	r3, ip
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
        break;
 800339e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d100      	bne.n	80033a8 <UART_SetConfig+0x298>
 80033a6:	e139      	b.n	800361c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	0013      	movs	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	189b      	adds	r3, r3, r2
 80033b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d305      	bcc.n	80033c4 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d907      	bls.n	80033d4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80033c4:	231a      	movs	r3, #26
 80033c6:	2218      	movs	r2, #24
 80033c8:	4694      	mov	ip, r2
 80033ca:	44bc      	add	ip, r7
 80033cc:	4463      	add	r3, ip
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e123      	b.n	800361c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	6939      	ldr	r1, [r7, #16]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	000b      	movs	r3, r1
 80033e2:	0e1b      	lsrs	r3, r3, #24
 80033e4:	0010      	movs	r0, r2
 80033e6:	0205      	lsls	r5, r0, #8
 80033e8:	431d      	orrs	r5, r3
 80033ea:	000b      	movs	r3, r1
 80033ec:	021c      	lsls	r4, r3, #8
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68b8      	ldr	r0, [r7, #8]
 80033fc:	68f9      	ldr	r1, [r7, #12]
 80033fe:	1900      	adds	r0, r0, r4
 8003400:	4169      	adcs	r1, r5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	2300      	movs	r3, #0
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f7fc ff10 	bl	8000234 <__aeabi_uldivmod>
 8003414:	0002      	movs	r2, r0
 8003416:	000b      	movs	r3, r1
 8003418:	0013      	movs	r3, r2
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800341c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341e:	23c0      	movs	r3, #192	; 0xc0
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	429a      	cmp	r2, r3
 8003424:	d309      	bcc.n	800343a <UART_SetConfig+0x32a>
 8003426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	035b      	lsls	r3, r3, #13
 800342c:	429a      	cmp	r2, r3
 800342e:	d204      	bcs.n	800343a <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	e0f0      	b.n	800361c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800343a:	231a      	movs	r3, #26
 800343c:	2218      	movs	r2, #24
 800343e:	4694      	mov	ip, r2
 8003440:	44bc      	add	ip, r7
 8003442:	4463      	add	r3, ip
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e0e8      	b.n	800361c <UART_SetConfig+0x50c>
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	efff69f3 	.word	0xefff69f3
 8003450:	ffffcfff 	.word	0xffffcfff
 8003454:	40004800 	.word	0x40004800
 8003458:	fffff4ff 	.word	0xfffff4ff
 800345c:	40013800 	.word	0x40013800
 8003460:	40021000 	.word	0x40021000
 8003464:	40004400 	.word	0x40004400
 8003468:	003d0900 	.word	0x003d0900
 800346c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	429a      	cmp	r2, r3
 800347a:	d000      	beq.n	800347e <UART_SetConfig+0x36e>
 800347c:	e074      	b.n	8003568 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800347e:	231b      	movs	r3, #27
 8003480:	2218      	movs	r2, #24
 8003482:	4694      	mov	ip, r2
 8003484:	44bc      	add	ip, r7
 8003486:	4463      	add	r3, ip
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b08      	cmp	r3, #8
 800348c:	d822      	bhi.n	80034d4 <UART_SetConfig+0x3c4>
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	4b6a      	ldr	r3, [pc, #424]	; (800363c <UART_SetConfig+0x52c>)
 8003492:	18d3      	adds	r3, r2, r3
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003498:	f7ff fa6c 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 800349c:	0003      	movs	r3, r0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034a0:	e022      	b.n	80034e8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a2:	f7ff fa7d 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 80034a6:	0003      	movs	r3, r0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034aa:	e01d      	b.n	80034e8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034ac:	4b64      	ldr	r3, [pc, #400]	; (8003640 <UART_SetConfig+0x530>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2210      	movs	r2, #16
 80034b2:	4013      	ands	r3, r2
 80034b4:	d002      	beq.n	80034bc <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <UART_SetConfig+0x534>)
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034ba:	e015      	b.n	80034e8 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 80034bc:	4b62      	ldr	r3, [pc, #392]	; (8003648 <UART_SetConfig+0x538>)
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034c0:	e012      	b.n	80034e8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c2:	f7ff f9a7 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80034c6:	0003      	movs	r3, r0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ca:	e00d      	b.n	80034e8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034d2:	e009      	b.n	80034e8 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034d8:	231a      	movs	r3, #26
 80034da:	2218      	movs	r2, #24
 80034dc:	4694      	mov	ip, r2
 80034de:	44bc      	add	ip, r7
 80034e0:	4463      	add	r3, ip
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
        break;
 80034e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d100      	bne.n	80034f0 <UART_SetConfig+0x3e0>
 80034ee:	e095      	b.n	800361c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	005a      	lsls	r2, r3, #1
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	18d2      	adds	r2, r2, r3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0019      	movs	r1, r3
 8003502:	0010      	movs	r0, r2
 8003504:	f7fc fe0a 	bl	800011c <__udivsi3>
 8003508:	0003      	movs	r3, r0
 800350a:	b29b      	uxth	r3, r3
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	2b0f      	cmp	r3, #15
 8003512:	d921      	bls.n	8003558 <UART_SetConfig+0x448>
 8003514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	025b      	lsls	r3, r3, #9
 800351a:	429a      	cmp	r2, r3
 800351c:	d21c      	bcs.n	8003558 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	b29a      	uxth	r2, r3
 8003522:	200e      	movs	r0, #14
 8003524:	2418      	movs	r4, #24
 8003526:	193b      	adds	r3, r7, r4
 8003528:	181b      	adds	r3, r3, r0
 800352a:	210f      	movs	r1, #15
 800352c:	438a      	bics	r2, r1
 800352e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	2207      	movs	r2, #7
 8003538:	4013      	ands	r3, r2
 800353a:	b299      	uxth	r1, r3
 800353c:	193b      	adds	r3, r7, r4
 800353e:	181b      	adds	r3, r3, r0
 8003540:	193a      	adds	r2, r7, r4
 8003542:	1812      	adds	r2, r2, r0
 8003544:	8812      	ldrh	r2, [r2, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	193a      	adds	r2, r7, r4
 8003550:	1812      	adds	r2, r2, r0
 8003552:	8812      	ldrh	r2, [r2, #0]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e061      	b.n	800361c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003558:	231a      	movs	r3, #26
 800355a:	2218      	movs	r2, #24
 800355c:	4694      	mov	ip, r2
 800355e:	44bc      	add	ip, r7
 8003560:	4463      	add	r3, ip
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e059      	b.n	800361c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003568:	231b      	movs	r3, #27
 800356a:	2218      	movs	r2, #24
 800356c:	4694      	mov	ip, r2
 800356e:	44bc      	add	ip, r7
 8003570:	4463      	add	r3, ip
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d822      	bhi.n	80035be <UART_SetConfig+0x4ae>
 8003578:	009a      	lsls	r2, r3, #2
 800357a:	4b34      	ldr	r3, [pc, #208]	; (800364c <UART_SetConfig+0x53c>)
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003582:	f7ff f9f7 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8003586:	0003      	movs	r3, r0
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800358a:	e022      	b.n	80035d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800358c:	f7ff fa08 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8003590:	0003      	movs	r3, r0
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003594:	e01d      	b.n	80035d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003596:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <UART_SetConfig+0x530>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	4013      	ands	r3, r2
 800359e:	d002      	beq.n	80035a6 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <UART_SetConfig+0x534>)
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035a4:	e015      	b.n	80035d2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <UART_SetConfig+0x538>)
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035aa:	e012      	b.n	80035d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ac:	f7ff f932 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80035b0:	0003      	movs	r3, r0
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b4:	e00d      	b.n	80035d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035bc:	e009      	b.n	80035d2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035c2:	231a      	movs	r3, #26
 80035c4:	2218      	movs	r2, #24
 80035c6:	4694      	mov	ip, r2
 80035c8:	44bc      	add	ip, r7
 80035ca:	4463      	add	r3, ip
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
        break;
 80035d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d021      	beq.n	800361c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	085a      	lsrs	r2, r3, #1
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	18d2      	adds	r2, r2, r3
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0019      	movs	r1, r3
 80035e8:	0010      	movs	r0, r2
 80035ea:	f7fc fd97 	bl	800011c <__udivsi3>
 80035ee:	0003      	movs	r3, r0
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d909      	bls.n	800360e <UART_SetConfig+0x4fe>
 80035fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	429a      	cmp	r2, r3
 8003602:	d204      	bcs.n	800360e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	e006      	b.n	800361c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800360e:	231a      	movs	r3, #26
 8003610:	2218      	movs	r2, #24
 8003612:	4694      	mov	ip, r2
 8003614:	44bc      	add	ip, r7
 8003616:	4463      	add	r3, ip
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2200      	movs	r2, #0
 8003620:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2200      	movs	r2, #0
 8003626:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003628:	231a      	movs	r3, #26
 800362a:	2218      	movs	r2, #24
 800362c:	4694      	mov	ip, r2
 800362e:	44bc      	add	ip, r7
 8003630:	4463      	add	r3, ip
 8003632:	781b      	ldrb	r3, [r3, #0]
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b00e      	add	sp, #56	; 0x38
 800363a:	bdb0      	pop	{r4, r5, r7, pc}
 800363c:	080043b8 	.word	0x080043b8
 8003640:	40021000 	.word	0x40021000
 8003644:	003d0900 	.word	0x003d0900
 8003648:	00f42400 	.word	0x00f42400
 800364c:	080043dc 	.word	0x080043dc

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2201      	movs	r2, #1
 800365e:	4013      	ands	r3, r2
 8003660:	d00b      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a4a      	ldr	r2, [pc, #296]	; (8003794 <UART_AdvFeatureConfig+0x144>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2202      	movs	r2, #2
 8003680:	4013      	ands	r3, r2
 8003682:	d00b      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a43      	ldr	r2, [pc, #268]	; (8003798 <UART_AdvFeatureConfig+0x148>)
 800368c:	4013      	ands	r3, r2
 800368e:	0019      	movs	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2204      	movs	r2, #4
 80036a2:	4013      	ands	r3, r2
 80036a4:	d00b      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a3b      	ldr	r2, [pc, #236]	; (800379c <UART_AdvFeatureConfig+0x14c>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2208      	movs	r2, #8
 80036c4:	4013      	ands	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a34      	ldr	r2, [pc, #208]	; (80037a0 <UART_AdvFeatureConfig+0x150>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2210      	movs	r2, #16
 80036e6:	4013      	ands	r3, r2
 80036e8:	d00b      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <UART_AdvFeatureConfig+0x154>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2220      	movs	r2, #32
 8003708:	4013      	ands	r3, r2
 800370a:	d00b      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <UART_AdvFeatureConfig+0x158>)
 8003714:	4013      	ands	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	4013      	ands	r3, r2
 800372c:	d01d      	beq.n	800376a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <UART_AdvFeatureConfig+0x15c>)
 8003736:	4013      	ands	r3, r2
 8003738:	0019      	movs	r1, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	035b      	lsls	r3, r3, #13
 800374e:	429a      	cmp	r2, r3
 8003750:	d10b      	bne.n	800376a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <UART_AdvFeatureConfig+0x160>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	4013      	ands	r3, r2
 8003772:	d00b      	beq.n	800378c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <UART_AdvFeatureConfig+0x164>)
 800377c:	4013      	ands	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}
 8003794:	fffdffff 	.word	0xfffdffff
 8003798:	fffeffff 	.word	0xfffeffff
 800379c:	fffbffff 	.word	0xfffbffff
 80037a0:	ffff7fff 	.word	0xffff7fff
 80037a4:	ffffefff 	.word	0xffffefff
 80037a8:	ffffdfff 	.word	0xffffdfff
 80037ac:	ffefffff 	.word	0xffefffff
 80037b0:	ff9fffff 	.word	0xff9fffff
 80037b4:	fff7ffff 	.word	0xfff7ffff

080037b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	2100      	movs	r1, #0
 80037c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c8:	f7fd fce0 	bl	800118c <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2208      	movs	r2, #8
 80037d8:	4013      	ands	r3, r2
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d10c      	bne.n	80037f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	0391      	lsls	r1, r2, #14
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <UART_CheckIdleState+0x8c>)
 80037e8:	9200      	str	r2, [sp, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f000 f82c 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e021      	b.n	800383c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2204      	movs	r2, #4
 8003800:	4013      	ands	r3, r2
 8003802:	2b04      	cmp	r3, #4
 8003804:	d10c      	bne.n	8003820 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	03d1      	lsls	r1, r2, #15
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <UART_CheckIdleState+0x8c>)
 8003810:	9200      	str	r2, [sp, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	f000 f818 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d001      	beq.n	8003820 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e00d      	b.n	800383c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2274      	movs	r2, #116	; 0x74
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b004      	add	sp, #16
 8003842:	bd80      	pop	{r7, pc}
 8003844:	01ffffff 	.word	0x01ffffff

08003848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b094      	sub	sp, #80	; 0x50
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003858:	e0a3      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800385c:	3301      	adds	r3, #1
 800385e:	d100      	bne.n	8003862 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003860:	e09f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fd fc93 	bl	800118c <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <UART_WaitOnFlagUntilTimeout+0x30>
 8003872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003874:	2b00      	cmp	r3, #0
 8003876:	d13d      	bne.n	80038f4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
 8003882:	2301      	movs	r3, #1
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	494c      	ldr	r1, [pc, #304]	; (80039cc <UART_WaitOnFlagUntilTimeout+0x184>)
 800389a:	400a      	ands	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038aa:	f3ef 8310 	mrs	r3, PRIMASK
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b2:	643b      	str	r3, [r7, #64]	; 0x40
 80038b4:	2301      	movs	r3, #1
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2101      	movs	r1, #1
 80038cc:	438a      	bics	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d6:	f383 8810 	msr	PRIMASK, r3
}
 80038da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2274      	movs	r2, #116	; 0x74
 80038ec:	2100      	movs	r1, #0
 80038ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e067      	b.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2204      	movs	r2, #4
 80038fc:	4013      	ands	r3, r2
 80038fe:	d050      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	401a      	ands	r2, r3
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	429a      	cmp	r2, r3
 8003912:	d146      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391e:	f3ef 8310 	mrs	r3, PRIMASK
 8003922:	613b      	str	r3, [r7, #16]
  return(result);
 8003924:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4923      	ldr	r1, [pc, #140]	; (80039cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003940:	400a      	ands	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003950:	f3ef 8310 	mrs	r3, PRIMASK
 8003954:	61fb      	str	r3, [r7, #28]
  return(result);
 8003956:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
 800395a:	2301      	movs	r3, #1
 800395c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2101      	movs	r1, #1
 8003972:	438a      	bics	r2, r1
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	2120      	movs	r1, #32
 8003994:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2274      	movs	r2, #116	; 0x74
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e010      	b.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	425a      	negs	r2, r3
 80039b2:	4153      	adcs	r3, r2
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	001a      	movs	r2, r3
 80039b8:	1dfb      	adds	r3, r7, #7
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d100      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80039c0:	e74b      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b014      	add	sp, #80	; 0x50
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	fffffe5f 	.word	0xfffffe5f

080039d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <USB_DisableGlobalInt+0x30>)
 80039da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	5a9b      	ldrh	r3, [r3, r2]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	b292      	uxth	r2, r2
 80039e8:	43d2      	mvns	r2, r2
 80039ea:	b292      	uxth	r2, r2
 80039ec:	4013      	ands	r3, r2
 80039ee:	b299      	uxth	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	0000bf80 	.word	0x0000bf80

08003a04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a04:	b084      	sub	sp, #16
 8003a06:	b590      	push	{r4, r7, lr}
 8003a08:	46c6      	mov	lr, r8
 8003a0a:	b500      	push	{lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	2004      	movs	r0, #4
 8003a14:	2410      	movs	r4, #16
 8003a16:	46a4      	mov	ip, r4
 8003a18:	2408      	movs	r4, #8
 8003a1a:	46a0      	mov	r8, r4
 8003a1c:	44b8      	add	r8, r7
 8003a1e:	44c4      	add	ip, r8
 8003a20:	4460      	add	r0, ip
 8003a22:	6001      	str	r1, [r0, #0]
 8003a24:	6042      	str	r2, [r0, #4]
 8003a26:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	2100      	movs	r1, #0
 8003a36:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2244      	movs	r2, #68	; 0x44
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2250      	movs	r2, #80	; 0x50
 8003a44:	2100      	movs	r1, #0
 8003a46:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b002      	add	sp, #8
 8003a50:	bc80      	pop	{r7}
 8003a52:	46b8      	mov	r8, r7
 8003a54:	bc90      	pop	{r4, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	b004      	add	sp, #16
 8003a5a:	4718      	bx	r3

08003a5c <__errno>:
 8003a5c:	4b01      	ldr	r3, [pc, #4]	; (8003a64 <__errno+0x8>)
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	4770      	bx	lr
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	2000000c 	.word	0x2000000c

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	4d0c      	ldr	r5, [pc, #48]	; (8003aa0 <__libc_init_array+0x38>)
 8003a6e:	4c0d      	ldr	r4, [pc, #52]	; (8003aa4 <__libc_init_array+0x3c>)
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	2600      	movs	r6, #0
 8003a7a:	f000 fc47 	bl	800430c <_init>
 8003a7e:	4d0a      	ldr	r5, [pc, #40]	; (8003aa8 <__libc_init_array+0x40>)
 8003a80:	4c0a      	ldr	r4, [pc, #40]	; (8003aac <__libc_init_array+0x44>)
 8003a82:	1b64      	subs	r4, r4, r5
 8003a84:	10a4      	asrs	r4, r4, #2
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	00b3      	lsls	r3, r6, #2
 8003a8e:	58eb      	ldr	r3, [r5, r3]
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	00b3      	lsls	r3, r6, #2
 8003a98:	58eb      	ldr	r3, [r5, r3]
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	0800443c 	.word	0x0800443c
 8003aa4:	0800443c 	.word	0x0800443c
 8003aa8:	0800443c 	.word	0x0800443c
 8003aac:	08004440 	.word	0x08004440

08003ab0 <memset>:
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	1882      	adds	r2, r0, r2
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d100      	bne.n	8003aba <memset+0xa>
 8003ab8:	4770      	bx	lr
 8003aba:	7019      	strb	r1, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	e7f9      	b.n	8003ab4 <memset+0x4>

08003ac0 <siprintf>:
 8003ac0:	b40e      	push	{r1, r2, r3}
 8003ac2:	b500      	push	{lr}
 8003ac4:	490b      	ldr	r1, [pc, #44]	; (8003af4 <siprintf+0x34>)
 8003ac6:	b09c      	sub	sp, #112	; 0x70
 8003ac8:	ab1d      	add	r3, sp, #116	; 0x74
 8003aca:	9002      	str	r0, [sp, #8]
 8003acc:	9006      	str	r0, [sp, #24]
 8003ace:	9107      	str	r1, [sp, #28]
 8003ad0:	9104      	str	r1, [sp, #16]
 8003ad2:	4809      	ldr	r0, [pc, #36]	; (8003af8 <siprintf+0x38>)
 8003ad4:	4909      	ldr	r1, [pc, #36]	; (8003afc <siprintf+0x3c>)
 8003ad6:	cb04      	ldmia	r3!, {r2}
 8003ad8:	9105      	str	r1, [sp, #20]
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	a902      	add	r1, sp, #8
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	f000 f870 	bl	8003bc4 <_svfiprintf_r>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9a02      	ldr	r2, [sp, #8]
 8003ae8:	7013      	strb	r3, [r2, #0]
 8003aea:	b01c      	add	sp, #112	; 0x70
 8003aec:	bc08      	pop	{r3}
 8003aee:	b003      	add	sp, #12
 8003af0:	4718      	bx	r3
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	7fffffff 	.word	0x7fffffff
 8003af8:	2000000c 	.word	0x2000000c
 8003afc:	ffff0208 	.word	0xffff0208

08003b00 <__ssputs_r>:
 8003b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b02:	688e      	ldr	r6, [r1, #8]
 8003b04:	b085      	sub	sp, #20
 8003b06:	0007      	movs	r7, r0
 8003b08:	000c      	movs	r4, r1
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	429e      	cmp	r6, r3
 8003b10:	d83c      	bhi.n	8003b8c <__ssputs_r+0x8c>
 8003b12:	2390      	movs	r3, #144	; 0x90
 8003b14:	898a      	ldrh	r2, [r1, #12]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	421a      	tst	r2, r3
 8003b1a:	d034      	beq.n	8003b86 <__ssputs_r+0x86>
 8003b1c:	2503      	movs	r5, #3
 8003b1e:	6909      	ldr	r1, [r1, #16]
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	1a5b      	subs	r3, r3, r1
 8003b24:	9302      	str	r3, [sp, #8]
 8003b26:	6963      	ldr	r3, [r4, #20]
 8003b28:	9802      	ldr	r0, [sp, #8]
 8003b2a:	435d      	muls	r5, r3
 8003b2c:	0feb      	lsrs	r3, r5, #31
 8003b2e:	195d      	adds	r5, r3, r5
 8003b30:	9b01      	ldr	r3, [sp, #4]
 8003b32:	106d      	asrs	r5, r5, #1
 8003b34:	3301      	adds	r3, #1
 8003b36:	181b      	adds	r3, r3, r0
 8003b38:	42ab      	cmp	r3, r5
 8003b3a:	d900      	bls.n	8003b3e <__ssputs_r+0x3e>
 8003b3c:	001d      	movs	r5, r3
 8003b3e:	0553      	lsls	r3, r2, #21
 8003b40:	d532      	bpl.n	8003ba8 <__ssputs_r+0xa8>
 8003b42:	0029      	movs	r1, r5
 8003b44:	0038      	movs	r0, r7
 8003b46:	f000 fb31 	bl	80041ac <_malloc_r>
 8003b4a:	1e06      	subs	r6, r0, #0
 8003b4c:	d109      	bne.n	8003b62 <__ssputs_r+0x62>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	2340      	movs	r3, #64	; 0x40
 8003b54:	2001      	movs	r0, #1
 8003b56:	89a2      	ldrh	r2, [r4, #12]
 8003b58:	4240      	negs	r0, r0
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	b005      	add	sp, #20
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b62:	9a02      	ldr	r2, [sp, #8]
 8003b64:	6921      	ldr	r1, [r4, #16]
 8003b66:	f000 faba 	bl	80040de <memcpy>
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <__ssputs_r+0xc0>)
 8003b6e:	401a      	ands	r2, r3
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	4313      	orrs	r3, r2
 8003b74:	81a3      	strh	r3, [r4, #12]
 8003b76:	9b02      	ldr	r3, [sp, #8]
 8003b78:	6126      	str	r6, [r4, #16]
 8003b7a:	18f6      	adds	r6, r6, r3
 8003b7c:	6026      	str	r6, [r4, #0]
 8003b7e:	6165      	str	r5, [r4, #20]
 8003b80:	9e01      	ldr	r6, [sp, #4]
 8003b82:	1aed      	subs	r5, r5, r3
 8003b84:	60a5      	str	r5, [r4, #8]
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	429e      	cmp	r6, r3
 8003b8a:	d900      	bls.n	8003b8e <__ssputs_r+0x8e>
 8003b8c:	9e01      	ldr	r6, [sp, #4]
 8003b8e:	0032      	movs	r2, r6
 8003b90:	9903      	ldr	r1, [sp, #12]
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	f000 faac 	bl	80040f0 <memmove>
 8003b98:	68a3      	ldr	r3, [r4, #8]
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	1b9b      	subs	r3, r3, r6
 8003b9e:	60a3      	str	r3, [r4, #8]
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	199e      	adds	r6, r3, r6
 8003ba4:	6026      	str	r6, [r4, #0]
 8003ba6:	e7da      	b.n	8003b5e <__ssputs_r+0x5e>
 8003ba8:	002a      	movs	r2, r5
 8003baa:	0038      	movs	r0, r7
 8003bac:	f000 fb5c 	bl	8004268 <_realloc_r>
 8003bb0:	1e06      	subs	r6, r0, #0
 8003bb2:	d1e0      	bne.n	8003b76 <__ssputs_r+0x76>
 8003bb4:	0038      	movs	r0, r7
 8003bb6:	6921      	ldr	r1, [r4, #16]
 8003bb8:	f000 faae 	bl	8004118 <_free_r>
 8003bbc:	e7c7      	b.n	8003b4e <__ssputs_r+0x4e>
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	fffffb7f 	.word	0xfffffb7f

08003bc4 <_svfiprintf_r>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b0a1      	sub	sp, #132	; 0x84
 8003bc8:	9003      	str	r0, [sp, #12]
 8003bca:	001d      	movs	r5, r3
 8003bcc:	898b      	ldrh	r3, [r1, #12]
 8003bce:	000f      	movs	r7, r1
 8003bd0:	0016      	movs	r6, r2
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	d511      	bpl.n	8003bfa <_svfiprintf_r+0x36>
 8003bd6:	690b      	ldr	r3, [r1, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10e      	bne.n	8003bfa <_svfiprintf_r+0x36>
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	f000 fae5 	bl	80041ac <_malloc_r>
 8003be2:	6038      	str	r0, [r7, #0]
 8003be4:	6138      	str	r0, [r7, #16]
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d105      	bne.n	8003bf6 <_svfiprintf_r+0x32>
 8003bea:	230c      	movs	r3, #12
 8003bec:	9a03      	ldr	r2, [sp, #12]
 8003bee:	3801      	subs	r0, #1
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	b021      	add	sp, #132	; 0x84
 8003bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf6:	2340      	movs	r3, #64	; 0x40
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	ac08      	add	r4, sp, #32
 8003bfe:	6163      	str	r3, [r4, #20]
 8003c00:	3320      	adds	r3, #32
 8003c02:	7663      	strb	r3, [r4, #25]
 8003c04:	3310      	adds	r3, #16
 8003c06:	76a3      	strb	r3, [r4, #26]
 8003c08:	9507      	str	r5, [sp, #28]
 8003c0a:	0035      	movs	r5, r6
 8003c0c:	782b      	ldrb	r3, [r5, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <_svfiprintf_r+0x52>
 8003c12:	2b25      	cmp	r3, #37	; 0x25
 8003c14:	d147      	bne.n	8003ca6 <_svfiprintf_r+0xe2>
 8003c16:	1bab      	subs	r3, r5, r6
 8003c18:	9305      	str	r3, [sp, #20]
 8003c1a:	42b5      	cmp	r5, r6
 8003c1c:	d00c      	beq.n	8003c38 <_svfiprintf_r+0x74>
 8003c1e:	0032      	movs	r2, r6
 8003c20:	0039      	movs	r1, r7
 8003c22:	9803      	ldr	r0, [sp, #12]
 8003c24:	f7ff ff6c 	bl	8003b00 <__ssputs_r>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d100      	bne.n	8003c2e <_svfiprintf_r+0x6a>
 8003c2c:	e0ae      	b.n	8003d8c <_svfiprintf_r+0x1c8>
 8003c2e:	6962      	ldr	r2, [r4, #20]
 8003c30:	9b05      	ldr	r3, [sp, #20]
 8003c32:	4694      	mov	ip, r2
 8003c34:	4463      	add	r3, ip
 8003c36:	6163      	str	r3, [r4, #20]
 8003c38:	782b      	ldrb	r3, [r5, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d100      	bne.n	8003c40 <_svfiprintf_r+0x7c>
 8003c3e:	e0a5      	b.n	8003d8c <_svfiprintf_r+0x1c8>
 8003c40:	2201      	movs	r2, #1
 8003c42:	2300      	movs	r3, #0
 8003c44:	4252      	negs	r2, r2
 8003c46:	6062      	str	r2, [r4, #4]
 8003c48:	a904      	add	r1, sp, #16
 8003c4a:	3254      	adds	r2, #84	; 0x54
 8003c4c:	1852      	adds	r2, r2, r1
 8003c4e:	1c6e      	adds	r6, r5, #1
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	60e3      	str	r3, [r4, #12]
 8003c54:	60a3      	str	r3, [r4, #8]
 8003c56:	7013      	strb	r3, [r2, #0]
 8003c58:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	7831      	ldrb	r1, [r6, #0]
 8003c5e:	4854      	ldr	r0, [pc, #336]	; (8003db0 <_svfiprintf_r+0x1ec>)
 8003c60:	f000 fa32 	bl	80040c8 <memchr>
 8003c64:	1c75      	adds	r5, r6, #1
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d11f      	bne.n	8003caa <_svfiprintf_r+0xe6>
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	06d3      	lsls	r3, r2, #27
 8003c6e:	d504      	bpl.n	8003c7a <_svfiprintf_r+0xb6>
 8003c70:	2353      	movs	r3, #83	; 0x53
 8003c72:	a904      	add	r1, sp, #16
 8003c74:	185b      	adds	r3, r3, r1
 8003c76:	2120      	movs	r1, #32
 8003c78:	7019      	strb	r1, [r3, #0]
 8003c7a:	0713      	lsls	r3, r2, #28
 8003c7c:	d504      	bpl.n	8003c88 <_svfiprintf_r+0xc4>
 8003c7e:	2353      	movs	r3, #83	; 0x53
 8003c80:	a904      	add	r1, sp, #16
 8003c82:	185b      	adds	r3, r3, r1
 8003c84:	212b      	movs	r1, #43	; 0x2b
 8003c86:	7019      	strb	r1, [r3, #0]
 8003c88:	7833      	ldrb	r3, [r6, #0]
 8003c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c8c:	d016      	beq.n	8003cbc <_svfiprintf_r+0xf8>
 8003c8e:	0035      	movs	r5, r6
 8003c90:	2100      	movs	r1, #0
 8003c92:	200a      	movs	r0, #10
 8003c94:	68e3      	ldr	r3, [r4, #12]
 8003c96:	782a      	ldrb	r2, [r5, #0]
 8003c98:	1c6e      	adds	r6, r5, #1
 8003c9a:	3a30      	subs	r2, #48	; 0x30
 8003c9c:	2a09      	cmp	r2, #9
 8003c9e:	d94e      	bls.n	8003d3e <_svfiprintf_r+0x17a>
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d111      	bne.n	8003cc8 <_svfiprintf_r+0x104>
 8003ca4:	e017      	b.n	8003cd6 <_svfiprintf_r+0x112>
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	e7b0      	b.n	8003c0c <_svfiprintf_r+0x48>
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <_svfiprintf_r+0x1ec>)
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	1ac0      	subs	r0, r0, r3
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4083      	lsls	r3, r0
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	002e      	movs	r6, r5
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	e7ce      	b.n	8003c5a <_svfiprintf_r+0x96>
 8003cbc:	9b07      	ldr	r3, [sp, #28]
 8003cbe:	1d19      	adds	r1, r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	9107      	str	r1, [sp, #28]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	db01      	blt.n	8003ccc <_svfiprintf_r+0x108>
 8003cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cca:	e004      	b.n	8003cd6 <_svfiprintf_r+0x112>
 8003ccc:	425b      	negs	r3, r3
 8003cce:	60e3      	str	r3, [r4, #12]
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	782b      	ldrb	r3, [r5, #0]
 8003cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8003cda:	d10a      	bne.n	8003cf2 <_svfiprintf_r+0x12e>
 8003cdc:	786b      	ldrb	r3, [r5, #1]
 8003cde:	2b2a      	cmp	r3, #42	; 0x2a
 8003ce0:	d135      	bne.n	8003d4e <_svfiprintf_r+0x18a>
 8003ce2:	9b07      	ldr	r3, [sp, #28]
 8003ce4:	3502      	adds	r5, #2
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	9207      	str	r2, [sp, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db2b      	blt.n	8003d48 <_svfiprintf_r+0x184>
 8003cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf2:	4e30      	ldr	r6, [pc, #192]	; (8003db4 <_svfiprintf_r+0x1f0>)
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	0030      	movs	r0, r6
 8003cf8:	7829      	ldrb	r1, [r5, #0]
 8003cfa:	f000 f9e5 	bl	80040c8 <memchr>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d006      	beq.n	8003d10 <_svfiprintf_r+0x14c>
 8003d02:	2340      	movs	r3, #64	; 0x40
 8003d04:	1b80      	subs	r0, r0, r6
 8003d06:	4083      	lsls	r3, r0
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	3501      	adds	r5, #1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	7829      	ldrb	r1, [r5, #0]
 8003d12:	2206      	movs	r2, #6
 8003d14:	4828      	ldr	r0, [pc, #160]	; (8003db8 <_svfiprintf_r+0x1f4>)
 8003d16:	1c6e      	adds	r6, r5, #1
 8003d18:	7621      	strb	r1, [r4, #24]
 8003d1a:	f000 f9d5 	bl	80040c8 <memchr>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d03c      	beq.n	8003d9c <_svfiprintf_r+0x1d8>
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <_svfiprintf_r+0x1f8>)
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d125      	bne.n	8003d74 <_svfiprintf_r+0x1b0>
 8003d28:	2207      	movs	r2, #7
 8003d2a:	9b07      	ldr	r3, [sp, #28]
 8003d2c:	3307      	adds	r3, #7
 8003d2e:	4393      	bics	r3, r2
 8003d30:	3308      	adds	r3, #8
 8003d32:	9307      	str	r3, [sp, #28]
 8003d34:	6963      	ldr	r3, [r4, #20]
 8003d36:	9a04      	ldr	r2, [sp, #16]
 8003d38:	189b      	adds	r3, r3, r2
 8003d3a:	6163      	str	r3, [r4, #20]
 8003d3c:	e765      	b.n	8003c0a <_svfiprintf_r+0x46>
 8003d3e:	4343      	muls	r3, r0
 8003d40:	0035      	movs	r5, r6
 8003d42:	2101      	movs	r1, #1
 8003d44:	189b      	adds	r3, r3, r2
 8003d46:	e7a6      	b.n	8003c96 <_svfiprintf_r+0xd2>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	425b      	negs	r3, r3
 8003d4c:	e7d0      	b.n	8003cf0 <_svfiprintf_r+0x12c>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	200a      	movs	r0, #10
 8003d52:	001a      	movs	r2, r3
 8003d54:	3501      	adds	r5, #1
 8003d56:	6063      	str	r3, [r4, #4]
 8003d58:	7829      	ldrb	r1, [r5, #0]
 8003d5a:	1c6e      	adds	r6, r5, #1
 8003d5c:	3930      	subs	r1, #48	; 0x30
 8003d5e:	2909      	cmp	r1, #9
 8003d60:	d903      	bls.n	8003d6a <_svfiprintf_r+0x1a6>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0c5      	beq.n	8003cf2 <_svfiprintf_r+0x12e>
 8003d66:	9209      	str	r2, [sp, #36]	; 0x24
 8003d68:	e7c3      	b.n	8003cf2 <_svfiprintf_r+0x12e>
 8003d6a:	4342      	muls	r2, r0
 8003d6c:	0035      	movs	r5, r6
 8003d6e:	2301      	movs	r3, #1
 8003d70:	1852      	adds	r2, r2, r1
 8003d72:	e7f1      	b.n	8003d58 <_svfiprintf_r+0x194>
 8003d74:	ab07      	add	r3, sp, #28
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	003a      	movs	r2, r7
 8003d7a:	0021      	movs	r1, r4
 8003d7c:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <_svfiprintf_r+0x1fc>)
 8003d7e:	9803      	ldr	r0, [sp, #12]
 8003d80:	e000      	b.n	8003d84 <_svfiprintf_r+0x1c0>
 8003d82:	bf00      	nop
 8003d84:	9004      	str	r0, [sp, #16]
 8003d86:	9b04      	ldr	r3, [sp, #16]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	d1d3      	bne.n	8003d34 <_svfiprintf_r+0x170>
 8003d8c:	89bb      	ldrh	r3, [r7, #12]
 8003d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d90:	065b      	lsls	r3, r3, #25
 8003d92:	d400      	bmi.n	8003d96 <_svfiprintf_r+0x1d2>
 8003d94:	e72d      	b.n	8003bf2 <_svfiprintf_r+0x2e>
 8003d96:	2001      	movs	r0, #1
 8003d98:	4240      	negs	r0, r0
 8003d9a:	e72a      	b.n	8003bf2 <_svfiprintf_r+0x2e>
 8003d9c:	ab07      	add	r3, sp, #28
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	003a      	movs	r2, r7
 8003da2:	0021      	movs	r1, r4
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <_svfiprintf_r+0x1fc>)
 8003da6:	9803      	ldr	r0, [sp, #12]
 8003da8:	f000 f87c 	bl	8003ea4 <_printf_i>
 8003dac:	e7ea      	b.n	8003d84 <_svfiprintf_r+0x1c0>
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	08004400 	.word	0x08004400
 8003db4:	08004406 	.word	0x08004406
 8003db8:	0800440a 	.word	0x0800440a
 8003dbc:	00000000 	.word	0x00000000
 8003dc0:	08003b01 	.word	0x08003b01

08003dc4 <_printf_common>:
 8003dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dc6:	0015      	movs	r5, r2
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	688a      	ldr	r2, [r1, #8]
 8003dcc:	690b      	ldr	r3, [r1, #16]
 8003dce:	000c      	movs	r4, r1
 8003dd0:	9000      	str	r0, [sp, #0]
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	da00      	bge.n	8003dd8 <_printf_common+0x14>
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	0022      	movs	r2, r4
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	3243      	adds	r2, #67	; 0x43
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	2a00      	cmp	r2, #0
 8003de2:	d001      	beq.n	8003de8 <_printf_common+0x24>
 8003de4:	3301      	adds	r3, #1
 8003de6:	602b      	str	r3, [r5, #0]
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	069b      	lsls	r3, r3, #26
 8003dec:	d502      	bpl.n	8003df4 <_printf_common+0x30>
 8003dee:	682b      	ldr	r3, [r5, #0]
 8003df0:	3302      	adds	r3, #2
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	2306      	movs	r3, #6
 8003df8:	0017      	movs	r7, r2
 8003dfa:	401f      	ands	r7, r3
 8003dfc:	421a      	tst	r2, r3
 8003dfe:	d027      	beq.n	8003e50 <_printf_common+0x8c>
 8003e00:	0023      	movs	r3, r4
 8003e02:	3343      	adds	r3, #67	; 0x43
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	4193      	sbcs	r3, r2
 8003e0a:	6822      	ldr	r2, [r4, #0]
 8003e0c:	0692      	lsls	r2, r2, #26
 8003e0e:	d430      	bmi.n	8003e72 <_printf_common+0xae>
 8003e10:	0022      	movs	r2, r4
 8003e12:	9901      	ldr	r1, [sp, #4]
 8003e14:	9800      	ldr	r0, [sp, #0]
 8003e16:	9e08      	ldr	r6, [sp, #32]
 8003e18:	3243      	adds	r2, #67	; 0x43
 8003e1a:	47b0      	blx	r6
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d025      	beq.n	8003e6c <_printf_common+0xa8>
 8003e20:	2306      	movs	r3, #6
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	682a      	ldr	r2, [r5, #0]
 8003e26:	68e1      	ldr	r1, [r4, #12]
 8003e28:	2500      	movs	r5, #0
 8003e2a:	4003      	ands	r3, r0
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d103      	bne.n	8003e38 <_printf_common+0x74>
 8003e30:	1a8d      	subs	r5, r1, r2
 8003e32:	43eb      	mvns	r3, r5
 8003e34:	17db      	asrs	r3, r3, #31
 8003e36:	401d      	ands	r5, r3
 8003e38:	68a3      	ldr	r3, [r4, #8]
 8003e3a:	6922      	ldr	r2, [r4, #16]
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	dd01      	ble.n	8003e44 <_printf_common+0x80>
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	18ed      	adds	r5, r5, r3
 8003e44:	2700      	movs	r7, #0
 8003e46:	42bd      	cmp	r5, r7
 8003e48:	d120      	bne.n	8003e8c <_printf_common+0xc8>
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	e010      	b.n	8003e70 <_printf_common+0xac>
 8003e4e:	3701      	adds	r7, #1
 8003e50:	68e3      	ldr	r3, [r4, #12]
 8003e52:	682a      	ldr	r2, [r5, #0]
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	42bb      	cmp	r3, r7
 8003e58:	ddd2      	ble.n	8003e00 <_printf_common+0x3c>
 8003e5a:	0022      	movs	r2, r4
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	9901      	ldr	r1, [sp, #4]
 8003e60:	9800      	ldr	r0, [sp, #0]
 8003e62:	9e08      	ldr	r6, [sp, #32]
 8003e64:	3219      	adds	r2, #25
 8003e66:	47b0      	blx	r6
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d1f0      	bne.n	8003e4e <_printf_common+0x8a>
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	4240      	negs	r0, r0
 8003e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e72:	2030      	movs	r0, #48	; 0x30
 8003e74:	18e1      	adds	r1, r4, r3
 8003e76:	3143      	adds	r1, #67	; 0x43
 8003e78:	7008      	strb	r0, [r1, #0]
 8003e7a:	0021      	movs	r1, r4
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	3145      	adds	r1, #69	; 0x45
 8003e80:	7809      	ldrb	r1, [r1, #0]
 8003e82:	18a2      	adds	r2, r4, r2
 8003e84:	3243      	adds	r2, #67	; 0x43
 8003e86:	3302      	adds	r3, #2
 8003e88:	7011      	strb	r1, [r2, #0]
 8003e8a:	e7c1      	b.n	8003e10 <_printf_common+0x4c>
 8003e8c:	0022      	movs	r2, r4
 8003e8e:	2301      	movs	r3, #1
 8003e90:	9901      	ldr	r1, [sp, #4]
 8003e92:	9800      	ldr	r0, [sp, #0]
 8003e94:	9e08      	ldr	r6, [sp, #32]
 8003e96:	321a      	adds	r2, #26
 8003e98:	47b0      	blx	r6
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d0e6      	beq.n	8003e6c <_printf_common+0xa8>
 8003e9e:	3701      	adds	r7, #1
 8003ea0:	e7d1      	b.n	8003e46 <_printf_common+0x82>
	...

08003ea4 <_printf_i>:
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea6:	b08b      	sub	sp, #44	; 0x2c
 8003ea8:	9206      	str	r2, [sp, #24]
 8003eaa:	000a      	movs	r2, r1
 8003eac:	3243      	adds	r2, #67	; 0x43
 8003eae:	9307      	str	r3, [sp, #28]
 8003eb0:	9005      	str	r0, [sp, #20]
 8003eb2:	9204      	str	r2, [sp, #16]
 8003eb4:	7e0a      	ldrb	r2, [r1, #24]
 8003eb6:	000c      	movs	r4, r1
 8003eb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003eba:	2a78      	cmp	r2, #120	; 0x78
 8003ebc:	d806      	bhi.n	8003ecc <_printf_i+0x28>
 8003ebe:	2a62      	cmp	r2, #98	; 0x62
 8003ec0:	d808      	bhi.n	8003ed4 <_printf_i+0x30>
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	d100      	bne.n	8003ec8 <_printf_i+0x24>
 8003ec6:	e0c0      	b.n	800404a <_printf_i+0x1a6>
 8003ec8:	2a58      	cmp	r2, #88	; 0x58
 8003eca:	d052      	beq.n	8003f72 <_printf_i+0xce>
 8003ecc:	0026      	movs	r6, r4
 8003ece:	3642      	adds	r6, #66	; 0x42
 8003ed0:	7032      	strb	r2, [r6, #0]
 8003ed2:	e022      	b.n	8003f1a <_printf_i+0x76>
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	3863      	subs	r0, #99	; 0x63
 8003ed8:	2815      	cmp	r0, #21
 8003eda:	d8f7      	bhi.n	8003ecc <_printf_i+0x28>
 8003edc:	f7fc f914 	bl	8000108 <__gnu_thumb1_case_shi>
 8003ee0:	001f0016 	.word	0x001f0016
 8003ee4:	fff6fff6 	.word	0xfff6fff6
 8003ee8:	fff6fff6 	.word	0xfff6fff6
 8003eec:	fff6001f 	.word	0xfff6001f
 8003ef0:	fff6fff6 	.word	0xfff6fff6
 8003ef4:	00a8fff6 	.word	0x00a8fff6
 8003ef8:	009a0036 	.word	0x009a0036
 8003efc:	fff6fff6 	.word	0xfff6fff6
 8003f00:	fff600b9 	.word	0xfff600b9
 8003f04:	fff60036 	.word	0xfff60036
 8003f08:	009efff6 	.word	0x009efff6
 8003f0c:	0026      	movs	r6, r4
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	3642      	adds	r6, #66	; 0x42
 8003f12:	1d11      	adds	r1, r2, #4
 8003f14:	6019      	str	r1, [r3, #0]
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	7033      	strb	r3, [r6, #0]
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e0a7      	b.n	800406e <_printf_i+0x1ca>
 8003f1e:	6808      	ldr	r0, [r1, #0]
 8003f20:	6819      	ldr	r1, [r3, #0]
 8003f22:	1d0a      	adds	r2, r1, #4
 8003f24:	0605      	lsls	r5, r0, #24
 8003f26:	d50b      	bpl.n	8003f40 <_printf_i+0x9c>
 8003f28:	680d      	ldr	r5, [r1, #0]
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0x94>
 8003f30:	232d      	movs	r3, #45	; 0x2d
 8003f32:	9a04      	ldr	r2, [sp, #16]
 8003f34:	426d      	negs	r5, r5
 8003f36:	7013      	strb	r3, [r2, #0]
 8003f38:	4b61      	ldr	r3, [pc, #388]	; (80040c0 <_printf_i+0x21c>)
 8003f3a:	270a      	movs	r7, #10
 8003f3c:	9303      	str	r3, [sp, #12]
 8003f3e:	e032      	b.n	8003fa6 <_printf_i+0x102>
 8003f40:	680d      	ldr	r5, [r1, #0]
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	0641      	lsls	r1, r0, #25
 8003f46:	d5f1      	bpl.n	8003f2c <_printf_i+0x88>
 8003f48:	b22d      	sxth	r5, r5
 8003f4a:	e7ef      	b.n	8003f2c <_printf_i+0x88>
 8003f4c:	680d      	ldr	r5, [r1, #0]
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	1d08      	adds	r0, r1, #4
 8003f52:	6018      	str	r0, [r3, #0]
 8003f54:	062e      	lsls	r6, r5, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xb8>
 8003f58:	680d      	ldr	r5, [r1, #0]
 8003f5a:	e003      	b.n	8003f64 <_printf_i+0xc0>
 8003f5c:	066d      	lsls	r5, r5, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xb4>
 8003f60:	680d      	ldr	r5, [r1, #0]
 8003f62:	b2ad      	uxth	r5, r5
 8003f64:	4b56      	ldr	r3, [pc, #344]	; (80040c0 <_printf_i+0x21c>)
 8003f66:	270a      	movs	r7, #10
 8003f68:	9303      	str	r3, [sp, #12]
 8003f6a:	2a6f      	cmp	r2, #111	; 0x6f
 8003f6c:	d117      	bne.n	8003f9e <_printf_i+0xfa>
 8003f6e:	2708      	movs	r7, #8
 8003f70:	e015      	b.n	8003f9e <_printf_i+0xfa>
 8003f72:	3145      	adds	r1, #69	; 0x45
 8003f74:	700a      	strb	r2, [r1, #0]
 8003f76:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <_printf_i+0x21c>)
 8003f78:	9203      	str	r2, [sp, #12]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	6821      	ldr	r1, [r4, #0]
 8003f7e:	ca20      	ldmia	r2!, {r5}
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	0608      	lsls	r0, r1, #24
 8003f84:	d550      	bpl.n	8004028 <_printf_i+0x184>
 8003f86:	07cb      	lsls	r3, r1, #31
 8003f88:	d502      	bpl.n	8003f90 <_printf_i+0xec>
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	4319      	orrs	r1, r3
 8003f8e:	6021      	str	r1, [r4, #0]
 8003f90:	2710      	movs	r7, #16
 8003f92:	2d00      	cmp	r5, #0
 8003f94:	d103      	bne.n	8003f9e <_printf_i+0xfa>
 8003f96:	2320      	movs	r3, #32
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	439a      	bics	r2, r3
 8003f9c:	6022      	str	r2, [r4, #0]
 8003f9e:	0023      	movs	r3, r4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	3343      	adds	r3, #67	; 0x43
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	6863      	ldr	r3, [r4, #4]
 8003fa8:	60a3      	str	r3, [r4, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db03      	blt.n	8003fb6 <_printf_i+0x112>
 8003fae:	2204      	movs	r2, #4
 8003fb0:	6821      	ldr	r1, [r4, #0]
 8003fb2:	4391      	bics	r1, r2
 8003fb4:	6021      	str	r1, [r4, #0]
 8003fb6:	2d00      	cmp	r5, #0
 8003fb8:	d102      	bne.n	8003fc0 <_printf_i+0x11c>
 8003fba:	9e04      	ldr	r6, [sp, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00c      	beq.n	8003fda <_printf_i+0x136>
 8003fc0:	9e04      	ldr	r6, [sp, #16]
 8003fc2:	0028      	movs	r0, r5
 8003fc4:	0039      	movs	r1, r7
 8003fc6:	f7fc f92f 	bl	8000228 <__aeabi_uidivmod>
 8003fca:	9b03      	ldr	r3, [sp, #12]
 8003fcc:	3e01      	subs	r6, #1
 8003fce:	5c5b      	ldrb	r3, [r3, r1]
 8003fd0:	7033      	strb	r3, [r6, #0]
 8003fd2:	002b      	movs	r3, r5
 8003fd4:	0005      	movs	r5, r0
 8003fd6:	429f      	cmp	r7, r3
 8003fd8:	d9f3      	bls.n	8003fc2 <_printf_i+0x11e>
 8003fda:	2f08      	cmp	r7, #8
 8003fdc:	d109      	bne.n	8003ff2 <_printf_i+0x14e>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	07db      	lsls	r3, r3, #31
 8003fe2:	d506      	bpl.n	8003ff2 <_printf_i+0x14e>
 8003fe4:	6863      	ldr	r3, [r4, #4]
 8003fe6:	6922      	ldr	r2, [r4, #16]
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	dc02      	bgt.n	8003ff2 <_printf_i+0x14e>
 8003fec:	2330      	movs	r3, #48	; 0x30
 8003fee:	3e01      	subs	r6, #1
 8003ff0:	7033      	strb	r3, [r6, #0]
 8003ff2:	9b04      	ldr	r3, [sp, #16]
 8003ff4:	1b9b      	subs	r3, r3, r6
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	9b07      	ldr	r3, [sp, #28]
 8003ffa:	0021      	movs	r1, r4
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	9805      	ldr	r0, [sp, #20]
 8004000:	9b06      	ldr	r3, [sp, #24]
 8004002:	aa09      	add	r2, sp, #36	; 0x24
 8004004:	f7ff fede 	bl	8003dc4 <_printf_common>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d135      	bne.n	8004078 <_printf_i+0x1d4>
 800400c:	2001      	movs	r0, #1
 800400e:	4240      	negs	r0, r0
 8004010:	b00b      	add	sp, #44	; 0x2c
 8004012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004014:	2220      	movs	r2, #32
 8004016:	6809      	ldr	r1, [r1, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	6022      	str	r2, [r4, #0]
 800401c:	0022      	movs	r2, r4
 800401e:	2178      	movs	r1, #120	; 0x78
 8004020:	3245      	adds	r2, #69	; 0x45
 8004022:	7011      	strb	r1, [r2, #0]
 8004024:	4a27      	ldr	r2, [pc, #156]	; (80040c4 <_printf_i+0x220>)
 8004026:	e7a7      	b.n	8003f78 <_printf_i+0xd4>
 8004028:	0648      	lsls	r0, r1, #25
 800402a:	d5ac      	bpl.n	8003f86 <_printf_i+0xe2>
 800402c:	b2ad      	uxth	r5, r5
 800402e:	e7aa      	b.n	8003f86 <_printf_i+0xe2>
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	680d      	ldr	r5, [r1, #0]
 8004034:	1d10      	adds	r0, r2, #4
 8004036:	6949      	ldr	r1, [r1, #20]
 8004038:	6018      	str	r0, [r3, #0]
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	062e      	lsls	r6, r5, #24
 800403e:	d501      	bpl.n	8004044 <_printf_i+0x1a0>
 8004040:	6019      	str	r1, [r3, #0]
 8004042:	e002      	b.n	800404a <_printf_i+0x1a6>
 8004044:	066d      	lsls	r5, r5, #25
 8004046:	d5fb      	bpl.n	8004040 <_printf_i+0x19c>
 8004048:	8019      	strh	r1, [r3, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	9e04      	ldr	r6, [sp, #16]
 800404e:	6123      	str	r3, [r4, #16]
 8004050:	e7d2      	b.n	8003ff8 <_printf_i+0x154>
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	1d11      	adds	r1, r2, #4
 8004056:	6019      	str	r1, [r3, #0]
 8004058:	6816      	ldr	r6, [r2, #0]
 800405a:	2100      	movs	r1, #0
 800405c:	0030      	movs	r0, r6
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	f000 f832 	bl	80040c8 <memchr>
 8004064:	2800      	cmp	r0, #0
 8004066:	d001      	beq.n	800406c <_printf_i+0x1c8>
 8004068:	1b80      	subs	r0, r0, r6
 800406a:	6060      	str	r0, [r4, #4]
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	6123      	str	r3, [r4, #16]
 8004070:	2300      	movs	r3, #0
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	7013      	strb	r3, [r2, #0]
 8004076:	e7bf      	b.n	8003ff8 <_printf_i+0x154>
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	0032      	movs	r2, r6
 800407c:	9906      	ldr	r1, [sp, #24]
 800407e:	9805      	ldr	r0, [sp, #20]
 8004080:	9d07      	ldr	r5, [sp, #28]
 8004082:	47a8      	blx	r5
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d0c1      	beq.n	800400c <_printf_i+0x168>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	079b      	lsls	r3, r3, #30
 800408c:	d415      	bmi.n	80040ba <_printf_i+0x216>
 800408e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004090:	68e0      	ldr	r0, [r4, #12]
 8004092:	4298      	cmp	r0, r3
 8004094:	dabc      	bge.n	8004010 <_printf_i+0x16c>
 8004096:	0018      	movs	r0, r3
 8004098:	e7ba      	b.n	8004010 <_printf_i+0x16c>
 800409a:	0022      	movs	r2, r4
 800409c:	2301      	movs	r3, #1
 800409e:	9906      	ldr	r1, [sp, #24]
 80040a0:	9805      	ldr	r0, [sp, #20]
 80040a2:	9e07      	ldr	r6, [sp, #28]
 80040a4:	3219      	adds	r2, #25
 80040a6:	47b0      	blx	r6
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d0af      	beq.n	800400c <_printf_i+0x168>
 80040ac:	3501      	adds	r5, #1
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	42ab      	cmp	r3, r5
 80040b6:	dcf0      	bgt.n	800409a <_printf_i+0x1f6>
 80040b8:	e7e9      	b.n	800408e <_printf_i+0x1ea>
 80040ba:	2500      	movs	r5, #0
 80040bc:	e7f7      	b.n	80040ae <_printf_i+0x20a>
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	08004411 	.word	0x08004411
 80040c4:	08004422 	.word	0x08004422

080040c8 <memchr>:
 80040c8:	b2c9      	uxtb	r1, r1
 80040ca:	1882      	adds	r2, r0, r2
 80040cc:	4290      	cmp	r0, r2
 80040ce:	d101      	bne.n	80040d4 <memchr+0xc>
 80040d0:	2000      	movs	r0, #0
 80040d2:	4770      	bx	lr
 80040d4:	7803      	ldrb	r3, [r0, #0]
 80040d6:	428b      	cmp	r3, r1
 80040d8:	d0fb      	beq.n	80040d2 <memchr+0xa>
 80040da:	3001      	adds	r0, #1
 80040dc:	e7f6      	b.n	80040cc <memchr+0x4>

080040de <memcpy>:
 80040de:	2300      	movs	r3, #0
 80040e0:	b510      	push	{r4, lr}
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d100      	bne.n	80040e8 <memcpy+0xa>
 80040e6:	bd10      	pop	{r4, pc}
 80040e8:	5ccc      	ldrb	r4, [r1, r3]
 80040ea:	54c4      	strb	r4, [r0, r3]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e7f8      	b.n	80040e2 <memcpy+0x4>

080040f0 <memmove>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4288      	cmp	r0, r1
 80040f4:	d902      	bls.n	80040fc <memmove+0xc>
 80040f6:	188b      	adds	r3, r1, r2
 80040f8:	4298      	cmp	r0, r3
 80040fa:	d303      	bcc.n	8004104 <memmove+0x14>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e007      	b.n	8004110 <memmove+0x20>
 8004100:	5c8b      	ldrb	r3, [r1, r2]
 8004102:	5483      	strb	r3, [r0, r2]
 8004104:	3a01      	subs	r2, #1
 8004106:	d2fb      	bcs.n	8004100 <memmove+0x10>
 8004108:	bd10      	pop	{r4, pc}
 800410a:	5ccc      	ldrb	r4, [r1, r3]
 800410c:	54c4      	strb	r4, [r0, r3]
 800410e:	3301      	adds	r3, #1
 8004110:	429a      	cmp	r2, r3
 8004112:	d1fa      	bne.n	800410a <memmove+0x1a>
 8004114:	e7f8      	b.n	8004108 <memmove+0x18>
	...

08004118 <_free_r>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	0005      	movs	r5, r0
 800411c:	2900      	cmp	r1, #0
 800411e:	d010      	beq.n	8004142 <_free_r+0x2a>
 8004120:	1f0c      	subs	r4, r1, #4
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da00      	bge.n	800412a <_free_r+0x12>
 8004128:	18e4      	adds	r4, r4, r3
 800412a:	0028      	movs	r0, r5
 800412c:	f000 f8d4 	bl	80042d8 <__malloc_lock>
 8004130:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <_free_r+0x90>)
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <_free_r+0x2c>
 8004138:	6063      	str	r3, [r4, #4]
 800413a:	6014      	str	r4, [r2, #0]
 800413c:	0028      	movs	r0, r5
 800413e:	f000 f8d3 	bl	80042e8 <__malloc_unlock>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	42a3      	cmp	r3, r4
 8004146:	d908      	bls.n	800415a <_free_r+0x42>
 8004148:	6821      	ldr	r1, [r4, #0]
 800414a:	1860      	adds	r0, r4, r1
 800414c:	4283      	cmp	r3, r0
 800414e:	d1f3      	bne.n	8004138 <_free_r+0x20>
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	1841      	adds	r1, r0, r1
 8004156:	6021      	str	r1, [r4, #0]
 8004158:	e7ee      	b.n	8004138 <_free_r+0x20>
 800415a:	001a      	movs	r2, r3
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <_free_r+0x4e>
 8004162:	42a3      	cmp	r3, r4
 8004164:	d9f9      	bls.n	800415a <_free_r+0x42>
 8004166:	6811      	ldr	r1, [r2, #0]
 8004168:	1850      	adds	r0, r2, r1
 800416a:	42a0      	cmp	r0, r4
 800416c:	d10b      	bne.n	8004186 <_free_r+0x6e>
 800416e:	6820      	ldr	r0, [r4, #0]
 8004170:	1809      	adds	r1, r1, r0
 8004172:	1850      	adds	r0, r2, r1
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	4283      	cmp	r3, r0
 8004178:	d1e0      	bne.n	800413c <_free_r+0x24>
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	1841      	adds	r1, r0, r1
 8004180:	6011      	str	r1, [r2, #0]
 8004182:	6053      	str	r3, [r2, #4]
 8004184:	e7da      	b.n	800413c <_free_r+0x24>
 8004186:	42a0      	cmp	r0, r4
 8004188:	d902      	bls.n	8004190 <_free_r+0x78>
 800418a:	230c      	movs	r3, #12
 800418c:	602b      	str	r3, [r5, #0]
 800418e:	e7d5      	b.n	800413c <_free_r+0x24>
 8004190:	6821      	ldr	r1, [r4, #0]
 8004192:	1860      	adds	r0, r4, r1
 8004194:	4283      	cmp	r3, r0
 8004196:	d103      	bne.n	80041a0 <_free_r+0x88>
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	1841      	adds	r1, r0, r1
 800419e:	6021      	str	r1, [r4, #0]
 80041a0:	6063      	str	r3, [r4, #4]
 80041a2:	6054      	str	r4, [r2, #4]
 80041a4:	e7ca      	b.n	800413c <_free_r+0x24>
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	20000090 	.word	0x20000090

080041ac <_malloc_r>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	2303      	movs	r3, #3
 80041b0:	1ccd      	adds	r5, r1, #3
 80041b2:	439d      	bics	r5, r3
 80041b4:	3508      	adds	r5, #8
 80041b6:	0006      	movs	r6, r0
 80041b8:	2d0c      	cmp	r5, #12
 80041ba:	d21f      	bcs.n	80041fc <_malloc_r+0x50>
 80041bc:	250c      	movs	r5, #12
 80041be:	42a9      	cmp	r1, r5
 80041c0:	d81e      	bhi.n	8004200 <_malloc_r+0x54>
 80041c2:	0030      	movs	r0, r6
 80041c4:	f000 f888 	bl	80042d8 <__malloc_lock>
 80041c8:	4925      	ldr	r1, [pc, #148]	; (8004260 <_malloc_r+0xb4>)
 80041ca:	680a      	ldr	r2, [r1, #0]
 80041cc:	0014      	movs	r4, r2
 80041ce:	2c00      	cmp	r4, #0
 80041d0:	d11a      	bne.n	8004208 <_malloc_r+0x5c>
 80041d2:	4f24      	ldr	r7, [pc, #144]	; (8004264 <_malloc_r+0xb8>)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <_malloc_r+0x38>
 80041da:	0021      	movs	r1, r4
 80041dc:	0030      	movs	r0, r6
 80041de:	f000 f869 	bl	80042b4 <_sbrk_r>
 80041e2:	6038      	str	r0, [r7, #0]
 80041e4:	0029      	movs	r1, r5
 80041e6:	0030      	movs	r0, r6
 80041e8:	f000 f864 	bl	80042b4 <_sbrk_r>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d12b      	bne.n	8004248 <_malloc_r+0x9c>
 80041f0:	230c      	movs	r3, #12
 80041f2:	0030      	movs	r0, r6
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	f000 f877 	bl	80042e8 <__malloc_unlock>
 80041fa:	e003      	b.n	8004204 <_malloc_r+0x58>
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	dade      	bge.n	80041be <_malloc_r+0x12>
 8004200:	230c      	movs	r3, #12
 8004202:	6033      	str	r3, [r6, #0]
 8004204:	2000      	movs	r0, #0
 8004206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	1b5b      	subs	r3, r3, r5
 800420c:	d419      	bmi.n	8004242 <_malloc_r+0x96>
 800420e:	2b0b      	cmp	r3, #11
 8004210:	d903      	bls.n	800421a <_malloc_r+0x6e>
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	18e4      	adds	r4, r4, r3
 8004216:	6025      	str	r5, [r4, #0]
 8004218:	e003      	b.n	8004222 <_malloc_r+0x76>
 800421a:	6863      	ldr	r3, [r4, #4]
 800421c:	42a2      	cmp	r2, r4
 800421e:	d10e      	bne.n	800423e <_malloc_r+0x92>
 8004220:	600b      	str	r3, [r1, #0]
 8004222:	0030      	movs	r0, r6
 8004224:	f000 f860 	bl	80042e8 <__malloc_unlock>
 8004228:	0020      	movs	r0, r4
 800422a:	2207      	movs	r2, #7
 800422c:	300b      	adds	r0, #11
 800422e:	1d23      	adds	r3, r4, #4
 8004230:	4390      	bics	r0, r2
 8004232:	1ac2      	subs	r2, r0, r3
 8004234:	4298      	cmp	r0, r3
 8004236:	d0e6      	beq.n	8004206 <_malloc_r+0x5a>
 8004238:	1a1b      	subs	r3, r3, r0
 800423a:	50a3      	str	r3, [r4, r2]
 800423c:	e7e3      	b.n	8004206 <_malloc_r+0x5a>
 800423e:	6053      	str	r3, [r2, #4]
 8004240:	e7ef      	b.n	8004222 <_malloc_r+0x76>
 8004242:	0022      	movs	r2, r4
 8004244:	6864      	ldr	r4, [r4, #4]
 8004246:	e7c2      	b.n	80041ce <_malloc_r+0x22>
 8004248:	2303      	movs	r3, #3
 800424a:	1cc4      	adds	r4, r0, #3
 800424c:	439c      	bics	r4, r3
 800424e:	42a0      	cmp	r0, r4
 8004250:	d0e1      	beq.n	8004216 <_malloc_r+0x6a>
 8004252:	1a21      	subs	r1, r4, r0
 8004254:	0030      	movs	r0, r6
 8004256:	f000 f82d 	bl	80042b4 <_sbrk_r>
 800425a:	1c43      	adds	r3, r0, #1
 800425c:	d1db      	bne.n	8004216 <_malloc_r+0x6a>
 800425e:	e7c7      	b.n	80041f0 <_malloc_r+0x44>
 8004260:	20000090 	.word	0x20000090
 8004264:	20000094 	.word	0x20000094

08004268 <_realloc_r>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	0007      	movs	r7, r0
 800426c:	000d      	movs	r5, r1
 800426e:	0016      	movs	r6, r2
 8004270:	2900      	cmp	r1, #0
 8004272:	d105      	bne.n	8004280 <_realloc_r+0x18>
 8004274:	0011      	movs	r1, r2
 8004276:	f7ff ff99 	bl	80041ac <_malloc_r>
 800427a:	0004      	movs	r4, r0
 800427c:	0020      	movs	r0, r4
 800427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004280:	2a00      	cmp	r2, #0
 8004282:	d103      	bne.n	800428c <_realloc_r+0x24>
 8004284:	f7ff ff48 	bl	8004118 <_free_r>
 8004288:	0034      	movs	r4, r6
 800428a:	e7f7      	b.n	800427c <_realloc_r+0x14>
 800428c:	f000 f834 	bl	80042f8 <_malloc_usable_size_r>
 8004290:	002c      	movs	r4, r5
 8004292:	42b0      	cmp	r0, r6
 8004294:	d2f2      	bcs.n	800427c <_realloc_r+0x14>
 8004296:	0031      	movs	r1, r6
 8004298:	0038      	movs	r0, r7
 800429a:	f7ff ff87 	bl	80041ac <_malloc_r>
 800429e:	1e04      	subs	r4, r0, #0
 80042a0:	d0ec      	beq.n	800427c <_realloc_r+0x14>
 80042a2:	0029      	movs	r1, r5
 80042a4:	0032      	movs	r2, r6
 80042a6:	f7ff ff1a 	bl	80040de <memcpy>
 80042aa:	0029      	movs	r1, r5
 80042ac:	0038      	movs	r0, r7
 80042ae:	f7ff ff33 	bl	8004118 <_free_r>
 80042b2:	e7e3      	b.n	800427c <_realloc_r+0x14>

080042b4 <_sbrk_r>:
 80042b4:	2300      	movs	r3, #0
 80042b6:	b570      	push	{r4, r5, r6, lr}
 80042b8:	4d06      	ldr	r5, [pc, #24]	; (80042d4 <_sbrk_r+0x20>)
 80042ba:	0004      	movs	r4, r0
 80042bc:	0008      	movs	r0, r1
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	f7fc fe98 	bl	8000ff4 <_sbrk>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d103      	bne.n	80042d0 <_sbrk_r+0x1c>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d000      	beq.n	80042d0 <_sbrk_r+0x1c>
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	200005d8 	.word	0x200005d8

080042d8 <__malloc_lock>:
 80042d8:	b510      	push	{r4, lr}
 80042da:	4802      	ldr	r0, [pc, #8]	; (80042e4 <__malloc_lock+0xc>)
 80042dc:	f000 f814 	bl	8004308 <__retarget_lock_acquire_recursive>
 80042e0:	bd10      	pop	{r4, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	200005e0 	.word	0x200005e0

080042e8 <__malloc_unlock>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	4802      	ldr	r0, [pc, #8]	; (80042f4 <__malloc_unlock+0xc>)
 80042ec:	f000 f80d 	bl	800430a <__retarget_lock_release_recursive>
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	200005e0 	.word	0x200005e0

080042f8 <_malloc_usable_size_r>:
 80042f8:	1f0b      	subs	r3, r1, #4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	1f18      	subs	r0, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da01      	bge.n	8004306 <_malloc_usable_size_r+0xe>
 8004302:	580b      	ldr	r3, [r1, r0]
 8004304:	18c0      	adds	r0, r0, r3
 8004306:	4770      	bx	lr

08004308 <__retarget_lock_acquire_recursive>:
 8004308:	4770      	bx	lr

0800430a <__retarget_lock_release_recursive>:
 800430a:	4770      	bx	lr

0800430c <_init>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr

08004318 <_fini>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr
