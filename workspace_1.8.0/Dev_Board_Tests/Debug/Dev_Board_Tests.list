
Dev_Board_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007798  08007798  00017798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b3c  08007b3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b44  08007b44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000000c  08007b58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08007b58  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139b4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ea  00000000  00000000  000339e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  000361d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00037138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149c2  00000000  00000000  00037fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013303  00000000  00000000  0004c962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d7e3  00000000  00000000  0005fc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a24  00000000  00000000  000dd49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800777c 	.word	0x0800777c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800777c 	.word	0x0800777c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f865 	bl	80014d4 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ffaf 	bl	8001378 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f857 	bl	80014d4 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f84d 	bl	80014d4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd1 	bl	80013f0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffc7 	bl	80013f0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f84c 	bl	800053c <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_lmul>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	0415      	lsls	r5, r2, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	000f      	movs	r7, r1
 80004b8:	0001      	movs	r1, r0
 80004ba:	002e      	movs	r6, r5
 80004bc:	46c6      	mov	lr, r8
 80004be:	4684      	mov	ip, r0
 80004c0:	0400      	lsls	r0, r0, #16
 80004c2:	0c14      	lsrs	r4, r2, #16
 80004c4:	0c00      	lsrs	r0, r0, #16
 80004c6:	0c09      	lsrs	r1, r1, #16
 80004c8:	4346      	muls	r6, r0
 80004ca:	434d      	muls	r5, r1
 80004cc:	4360      	muls	r0, r4
 80004ce:	4361      	muls	r1, r4
 80004d0:	1940      	adds	r0, r0, r5
 80004d2:	0c34      	lsrs	r4, r6, #16
 80004d4:	1824      	adds	r4, r4, r0
 80004d6:	b500      	push	{lr}
 80004d8:	42a5      	cmp	r5, r4
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x34>
 80004dc:	2080      	movs	r0, #128	; 0x80
 80004de:	0240      	lsls	r0, r0, #9
 80004e0:	4680      	mov	r8, r0
 80004e2:	4441      	add	r1, r8
 80004e4:	0c25      	lsrs	r5, r4, #16
 80004e6:	186d      	adds	r5, r5, r1
 80004e8:	4661      	mov	r1, ip
 80004ea:	4359      	muls	r1, r3
 80004ec:	437a      	muls	r2, r7
 80004ee:	0430      	lsls	r0, r6, #16
 80004f0:	1949      	adds	r1, r1, r5
 80004f2:	0424      	lsls	r4, r4, #16
 80004f4:	0c00      	lsrs	r0, r0, #16
 80004f6:	1820      	adds	r0, r4, r0
 80004f8:	1889      	adds	r1, r1, r2
 80004fa:	bc80      	pop	{r7}
 80004fc:	46b8      	mov	r8, r7
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000500 <__aeabi_d2uiz>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	2200      	movs	r2, #0
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <__aeabi_d2uiz+0x38>)
 8000506:	0004      	movs	r4, r0
 8000508:	000d      	movs	r5, r1
 800050a:	f7ff ffa7 	bl	800045c <__aeabi_dcmpge>
 800050e:	2800      	cmp	r0, #0
 8000510:	d104      	bne.n	800051c <__aeabi_d2uiz+0x1c>
 8000512:	0020      	movs	r0, r4
 8000514:	0029      	movs	r1, r5
 8000516:	f001 fe4b 	bl	80021b0 <__aeabi_d2iz>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <__aeabi_d2uiz+0x38>)
 800051e:	2200      	movs	r2, #0
 8000520:	0020      	movs	r0, r4
 8000522:	0029      	movs	r1, r5
 8000524:	f001 fab2 	bl	8001a8c <__aeabi_dsub>
 8000528:	f001 fe42 	bl	80021b0 <__aeabi_d2iz>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	061b      	lsls	r3, r3, #24
 8000530:	469c      	mov	ip, r3
 8000532:	4460      	add	r0, ip
 8000534:	e7f1      	b.n	800051a <__aeabi_d2uiz+0x1a>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	41e00000 	.word	0x41e00000

0800053c <__udivmoddi4>:
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	4657      	mov	r7, sl
 8000540:	464e      	mov	r6, r9
 8000542:	4645      	mov	r5, r8
 8000544:	46de      	mov	lr, fp
 8000546:	b5e0      	push	{r5, r6, r7, lr}
 8000548:	0004      	movs	r4, r0
 800054a:	000d      	movs	r5, r1
 800054c:	4692      	mov	sl, r2
 800054e:	4699      	mov	r9, r3
 8000550:	b083      	sub	sp, #12
 8000552:	428b      	cmp	r3, r1
 8000554:	d830      	bhi.n	80005b8 <__udivmoddi4+0x7c>
 8000556:	d02d      	beq.n	80005b4 <__udivmoddi4+0x78>
 8000558:	4649      	mov	r1, r9
 800055a:	4650      	mov	r0, sl
 800055c:	f001 fed2 	bl	8002304 <__clzdi2>
 8000560:	0029      	movs	r1, r5
 8000562:	0006      	movs	r6, r0
 8000564:	0020      	movs	r0, r4
 8000566:	f001 fecd 	bl	8002304 <__clzdi2>
 800056a:	1a33      	subs	r3, r6, r0
 800056c:	4698      	mov	r8, r3
 800056e:	3b20      	subs	r3, #32
 8000570:	469b      	mov	fp, r3
 8000572:	d433      	bmi.n	80005dc <__udivmoddi4+0xa0>
 8000574:	465a      	mov	r2, fp
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	4642      	mov	r2, r8
 800057c:	001f      	movs	r7, r3
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	001e      	movs	r6, r3
 8000584:	42af      	cmp	r7, r5
 8000586:	d83a      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000588:	42af      	cmp	r7, r5
 800058a:	d100      	bne.n	800058e <__udivmoddi4+0x52>
 800058c:	e078      	b.n	8000680 <__udivmoddi4+0x144>
 800058e:	465b      	mov	r3, fp
 8000590:	1ba4      	subs	r4, r4, r6
 8000592:	41bd      	sbcs	r5, r7
 8000594:	2b00      	cmp	r3, #0
 8000596:	da00      	bge.n	800059a <__udivmoddi4+0x5e>
 8000598:	e075      	b.n	8000686 <__udivmoddi4+0x14a>
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	465a      	mov	r2, fp
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	4642      	mov	r2, r8
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	e028      	b.n	8000606 <__udivmoddi4+0xca>
 80005b4:	4282      	cmp	r2, r0
 80005b6:	d9cf      	bls.n	8000558 <__udivmoddi4+0x1c>
 80005b8:	2200      	movs	r2, #0
 80005ba:	2300      	movs	r3, #0
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <__udivmoddi4+0x8e>
 80005c6:	601c      	str	r4, [r3, #0]
 80005c8:	605d      	str	r5, [r3, #4]
 80005ca:	9800      	ldr	r0, [sp, #0]
 80005cc:	9901      	ldr	r1, [sp, #4]
 80005ce:	b003      	add	sp, #12
 80005d0:	bcf0      	pop	{r4, r5, r6, r7}
 80005d2:	46bb      	mov	fp, r7
 80005d4:	46b2      	mov	sl, r6
 80005d6:	46a9      	mov	r9, r5
 80005d8:	46a0      	mov	r8, r4
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	4652      	mov	r2, sl
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	4641      	mov	r1, r8
 80005e8:	0013      	movs	r3, r2
 80005ea:	464a      	mov	r2, r9
 80005ec:	408a      	lsls	r2, r1
 80005ee:	0017      	movs	r7, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	431f      	orrs	r7, r3
 80005f4:	4653      	mov	r3, sl
 80005f6:	4093      	lsls	r3, r2
 80005f8:	001e      	movs	r6, r3
 80005fa:	42af      	cmp	r7, r5
 80005fc:	d9c4      	bls.n	8000588 <__udivmoddi4+0x4c>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	4643      	mov	r3, r8
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0d9      	beq.n	80005c0 <__udivmoddi4+0x84>
 800060c:	07fb      	lsls	r3, r7, #31
 800060e:	0872      	lsrs	r2, r6, #1
 8000610:	431a      	orrs	r2, r3
 8000612:	4646      	mov	r6, r8
 8000614:	087b      	lsrs	r3, r7, #1
 8000616:	e00e      	b.n	8000636 <__udivmoddi4+0xfa>
 8000618:	42ab      	cmp	r3, r5
 800061a:	d101      	bne.n	8000620 <__udivmoddi4+0xe4>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d80c      	bhi.n	800063a <__udivmoddi4+0xfe>
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	419d      	sbcs	r5, r3
 8000624:	2001      	movs	r0, #1
 8000626:	1924      	adds	r4, r4, r4
 8000628:	416d      	adcs	r5, r5
 800062a:	2100      	movs	r1, #0
 800062c:	3e01      	subs	r6, #1
 800062e:	1824      	adds	r4, r4, r0
 8000630:	414d      	adcs	r5, r1
 8000632:	2e00      	cmp	r6, #0
 8000634:	d006      	beq.n	8000644 <__udivmoddi4+0x108>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d9ee      	bls.n	8000618 <__udivmoddi4+0xdc>
 800063a:	3e01      	subs	r6, #1
 800063c:	1924      	adds	r4, r4, r4
 800063e:	416d      	adcs	r5, r5
 8000640:	2e00      	cmp	r6, #0
 8000642:	d1f8      	bne.n	8000636 <__udivmoddi4+0xfa>
 8000644:	9800      	ldr	r0, [sp, #0]
 8000646:	9901      	ldr	r1, [sp, #4]
 8000648:	465b      	mov	r3, fp
 800064a:	1900      	adds	r0, r0, r4
 800064c:	4169      	adcs	r1, r5
 800064e:	2b00      	cmp	r3, #0
 8000650:	db24      	blt.n	800069c <__udivmoddi4+0x160>
 8000652:	002b      	movs	r3, r5
 8000654:	465a      	mov	r2, fp
 8000656:	4644      	mov	r4, r8
 8000658:	40d3      	lsrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	db2a      	blt.n	80006be <__udivmoddi4+0x182>
 8000668:	0026      	movs	r6, r4
 800066a:	409e      	lsls	r6, r3
 800066c:	0033      	movs	r3, r6
 800066e:	0026      	movs	r6, r4
 8000670:	4647      	mov	r7, r8
 8000672:	40be      	lsls	r6, r7
 8000674:	0032      	movs	r2, r6
 8000676:	1a80      	subs	r0, r0, r2
 8000678:	4199      	sbcs	r1, r3
 800067a:	9000      	str	r0, [sp, #0]
 800067c:	9101      	str	r1, [sp, #4]
 800067e:	e79f      	b.n	80005c0 <__udivmoddi4+0x84>
 8000680:	42a3      	cmp	r3, r4
 8000682:	d8bc      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000684:	e783      	b.n	800058e <__udivmoddi4+0x52>
 8000686:	4642      	mov	r2, r8
 8000688:	2320      	movs	r3, #32
 800068a:	2100      	movs	r1, #0
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	9100      	str	r1, [sp, #0]
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	40da      	lsrs	r2, r3
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	e786      	b.n	80005aa <__udivmoddi4+0x6e>
 800069c:	4642      	mov	r2, r8
 800069e:	2320      	movs	r3, #32
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	002a      	movs	r2, r5
 80006a4:	4646      	mov	r6, r8
 80006a6:	409a      	lsls	r2, r3
 80006a8:	0023      	movs	r3, r4
 80006aa:	40f3      	lsrs	r3, r6
 80006ac:	4644      	mov	r4, r8
 80006ae:	4313      	orrs	r3, r2
 80006b0:	002a      	movs	r2, r5
 80006b2:	40e2      	lsrs	r2, r4
 80006b4:	001c      	movs	r4, r3
 80006b6:	465b      	mov	r3, fp
 80006b8:	0015      	movs	r5, r2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dad4      	bge.n	8000668 <__udivmoddi4+0x12c>
 80006be:	4642      	mov	r2, r8
 80006c0:	002f      	movs	r7, r5
 80006c2:	2320      	movs	r3, #32
 80006c4:	0026      	movs	r6, r4
 80006c6:	4097      	lsls	r7, r2
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	40de      	lsrs	r6, r3
 80006cc:	003b      	movs	r3, r7
 80006ce:	4333      	orrs	r3, r6
 80006d0:	e7cd      	b.n	800066e <__udivmoddi4+0x132>
 80006d2:	46c0      	nop			; (mov r8, r8)

080006d4 <__aeabi_dadd>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	464f      	mov	r7, r9
 80006d8:	46d6      	mov	lr, sl
 80006da:	4646      	mov	r6, r8
 80006dc:	000d      	movs	r5, r1
 80006de:	0001      	movs	r1, r0
 80006e0:	0018      	movs	r0, r3
 80006e2:	b5c0      	push	{r6, r7, lr}
 80006e4:	0017      	movs	r7, r2
 80006e6:	032b      	lsls	r3, r5, #12
 80006e8:	0a5a      	lsrs	r2, r3, #9
 80006ea:	0f4b      	lsrs	r3, r1, #29
 80006ec:	4313      	orrs	r3, r2
 80006ee:	00ca      	lsls	r2, r1, #3
 80006f0:	4691      	mov	r9, r2
 80006f2:	0302      	lsls	r2, r0, #12
 80006f4:	006e      	lsls	r6, r5, #1
 80006f6:	0041      	lsls	r1, r0, #1
 80006f8:	0a52      	lsrs	r2, r2, #9
 80006fa:	0fec      	lsrs	r4, r5, #31
 80006fc:	0f7d      	lsrs	r5, r7, #29
 80006fe:	4315      	orrs	r5, r2
 8000700:	0d76      	lsrs	r6, r6, #21
 8000702:	0d49      	lsrs	r1, r1, #21
 8000704:	0fc0      	lsrs	r0, r0, #31
 8000706:	4682      	mov	sl, r0
 8000708:	46ac      	mov	ip, r5
 800070a:	00ff      	lsls	r7, r7, #3
 800070c:	1a72      	subs	r2, r6, r1
 800070e:	4284      	cmp	r4, r0
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x40>
 8000712:	e098      	b.n	8000846 <__aeabi_dadd+0x172>
 8000714:	2a00      	cmp	r2, #0
 8000716:	dc00      	bgt.n	800071a <__aeabi_dadd+0x46>
 8000718:	e081      	b.n	800081e <__aeabi_dadd+0x14a>
 800071a:	2900      	cmp	r1, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x4c>
 800071e:	e0b6      	b.n	800088e <__aeabi_dadd+0x1ba>
 8000720:	49c9      	ldr	r1, [pc, #804]	; (8000a48 <__aeabi_dadd+0x374>)
 8000722:	428e      	cmp	r6, r1
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x54>
 8000726:	e172      	b.n	8000a0e <__aeabi_dadd+0x33a>
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0028      	movs	r0, r5
 800072c:	0409      	lsls	r1, r1, #16
 800072e:	4308      	orrs	r0, r1
 8000730:	4684      	mov	ip, r0
 8000732:	2a38      	cmp	r2, #56	; 0x38
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0x64>
 8000736:	e15e      	b.n	80009f6 <__aeabi_dadd+0x322>
 8000738:	2a1f      	cmp	r2, #31
 800073a:	dd00      	ble.n	800073e <__aeabi_dadd+0x6a>
 800073c:	e1ee      	b.n	8000b1c <__aeabi_dadd+0x448>
 800073e:	2020      	movs	r0, #32
 8000740:	0039      	movs	r1, r7
 8000742:	4665      	mov	r5, ip
 8000744:	1a80      	subs	r0, r0, r2
 8000746:	4087      	lsls	r7, r0
 8000748:	40d1      	lsrs	r1, r2
 800074a:	4085      	lsls	r5, r0
 800074c:	430d      	orrs	r5, r1
 800074e:	0039      	movs	r1, r7
 8000750:	1e4f      	subs	r7, r1, #1
 8000752:	41b9      	sbcs	r1, r7
 8000754:	4667      	mov	r7, ip
 8000756:	40d7      	lsrs	r7, r2
 8000758:	4329      	orrs	r1, r5
 800075a:	1bdb      	subs	r3, r3, r7
 800075c:	464a      	mov	r2, r9
 800075e:	1a55      	subs	r5, r2, r1
 8000760:	45a9      	cmp	r9, r5
 8000762:	4189      	sbcs	r1, r1
 8000764:	4249      	negs	r1, r1
 8000766:	1a5b      	subs	r3, r3, r1
 8000768:	4698      	mov	r8, r3
 800076a:	4643      	mov	r3, r8
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	d400      	bmi.n	8000772 <__aeabi_dadd+0x9e>
 8000770:	e0cc      	b.n	800090c <__aeabi_dadd+0x238>
 8000772:	4643      	mov	r3, r8
 8000774:	025b      	lsls	r3, r3, #9
 8000776:	0a5b      	lsrs	r3, r3, #9
 8000778:	4698      	mov	r8, r3
 800077a:	4643      	mov	r3, r8
 800077c:	2b00      	cmp	r3, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0xae>
 8000780:	e12c      	b.n	80009dc <__aeabi_dadd+0x308>
 8000782:	4640      	mov	r0, r8
 8000784:	f001 fda0 	bl	80022c8 <__clzsi2>
 8000788:	0001      	movs	r1, r0
 800078a:	3908      	subs	r1, #8
 800078c:	2220      	movs	r2, #32
 800078e:	0028      	movs	r0, r5
 8000790:	4643      	mov	r3, r8
 8000792:	1a52      	subs	r2, r2, r1
 8000794:	408b      	lsls	r3, r1
 8000796:	40d0      	lsrs	r0, r2
 8000798:	408d      	lsls	r5, r1
 800079a:	4303      	orrs	r3, r0
 800079c:	428e      	cmp	r6, r1
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dadd+0xce>
 80007a0:	e117      	b.n	80009d2 <__aeabi_dadd+0x2fe>
 80007a2:	1b8e      	subs	r6, r1, r6
 80007a4:	1c72      	adds	r2, r6, #1
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0xd8>
 80007aa:	e1a7      	b.n	8000afc <__aeabi_dadd+0x428>
 80007ac:	2120      	movs	r1, #32
 80007ae:	0018      	movs	r0, r3
 80007b0:	002e      	movs	r6, r5
 80007b2:	1a89      	subs	r1, r1, r2
 80007b4:	408d      	lsls	r5, r1
 80007b6:	4088      	lsls	r0, r1
 80007b8:	40d6      	lsrs	r6, r2
 80007ba:	40d3      	lsrs	r3, r2
 80007bc:	1e69      	subs	r1, r5, #1
 80007be:	418d      	sbcs	r5, r1
 80007c0:	4330      	orrs	r0, r6
 80007c2:	4698      	mov	r8, r3
 80007c4:	2600      	movs	r6, #0
 80007c6:	4305      	orrs	r5, r0
 80007c8:	076b      	lsls	r3, r5, #29
 80007ca:	d009      	beq.n	80007e0 <__aeabi_dadd+0x10c>
 80007cc:	230f      	movs	r3, #15
 80007ce:	402b      	ands	r3, r5
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d005      	beq.n	80007e0 <__aeabi_dadd+0x10c>
 80007d4:	1d2b      	adds	r3, r5, #4
 80007d6:	42ab      	cmp	r3, r5
 80007d8:	41ad      	sbcs	r5, r5
 80007da:	426d      	negs	r5, r5
 80007dc:	44a8      	add	r8, r5
 80007de:	001d      	movs	r5, r3
 80007e0:	4643      	mov	r3, r8
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_dadd+0x114>
 80007e6:	e094      	b.n	8000912 <__aeabi_dadd+0x23e>
 80007e8:	4b97      	ldr	r3, [pc, #604]	; (8000a48 <__aeabi_dadd+0x374>)
 80007ea:	1c72      	adds	r2, r6, #1
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x11e>
 80007f0:	e09d      	b.n	800092e <__aeabi_dadd+0x25a>
 80007f2:	4641      	mov	r1, r8
 80007f4:	4b95      	ldr	r3, [pc, #596]	; (8000a4c <__aeabi_dadd+0x378>)
 80007f6:	08ed      	lsrs	r5, r5, #3
 80007f8:	4019      	ands	r1, r3
 80007fa:	000b      	movs	r3, r1
 80007fc:	0552      	lsls	r2, r2, #21
 80007fe:	0749      	lsls	r1, r1, #29
 8000800:	025b      	lsls	r3, r3, #9
 8000802:	4329      	orrs	r1, r5
 8000804:	0b1b      	lsrs	r3, r3, #12
 8000806:	0d52      	lsrs	r2, r2, #21
 8000808:	0512      	lsls	r2, r2, #20
 800080a:	4313      	orrs	r3, r2
 800080c:	07e4      	lsls	r4, r4, #31
 800080e:	4323      	orrs	r3, r4
 8000810:	0008      	movs	r0, r1
 8000812:	0019      	movs	r1, r3
 8000814:	bce0      	pop	{r5, r6, r7}
 8000816:	46ba      	mov	sl, r7
 8000818:	46b1      	mov	r9, r6
 800081a:	46a8      	mov	r8, r5
 800081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081e:	2a00      	cmp	r2, #0
 8000820:	d043      	beq.n	80008aa <__aeabi_dadd+0x1d6>
 8000822:	1b8a      	subs	r2, r1, r6
 8000824:	2e00      	cmp	r6, #0
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x156>
 8000828:	e12a      	b.n	8000a80 <__aeabi_dadd+0x3ac>
 800082a:	464c      	mov	r4, r9
 800082c:	431c      	orrs	r4, r3
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x15e>
 8000830:	e1d1      	b.n	8000bd6 <__aeabi_dadd+0x502>
 8000832:	1e54      	subs	r4, r2, #1
 8000834:	2a01      	cmp	r2, #1
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x166>
 8000838:	e21f      	b.n	8000c7a <__aeabi_dadd+0x5a6>
 800083a:	4d83      	ldr	r5, [pc, #524]	; (8000a48 <__aeabi_dadd+0x374>)
 800083c:	42aa      	cmp	r2, r5
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x16e>
 8000840:	e272      	b.n	8000d28 <__aeabi_dadd+0x654>
 8000842:	0022      	movs	r2, r4
 8000844:	e123      	b.n	8000a8e <__aeabi_dadd+0x3ba>
 8000846:	2a00      	cmp	r2, #0
 8000848:	dc00      	bgt.n	800084c <__aeabi_dadd+0x178>
 800084a:	e098      	b.n	800097e <__aeabi_dadd+0x2aa>
 800084c:	2900      	cmp	r1, #0
 800084e:	d042      	beq.n	80008d6 <__aeabi_dadd+0x202>
 8000850:	497d      	ldr	r1, [pc, #500]	; (8000a48 <__aeabi_dadd+0x374>)
 8000852:	428e      	cmp	r6, r1
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x184>
 8000856:	e0da      	b.n	8000a0e <__aeabi_dadd+0x33a>
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0028      	movs	r0, r5
 800085c:	0409      	lsls	r1, r1, #16
 800085e:	4308      	orrs	r0, r1
 8000860:	4684      	mov	ip, r0
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x194>
 8000866:	e129      	b.n	8000abc <__aeabi_dadd+0x3e8>
 8000868:	2a1f      	cmp	r2, #31
 800086a:	dc00      	bgt.n	800086e <__aeabi_dadd+0x19a>
 800086c:	e187      	b.n	8000b7e <__aeabi_dadd+0x4aa>
 800086e:	0011      	movs	r1, r2
 8000870:	4665      	mov	r5, ip
 8000872:	3920      	subs	r1, #32
 8000874:	40cd      	lsrs	r5, r1
 8000876:	2a20      	cmp	r2, #32
 8000878:	d004      	beq.n	8000884 <__aeabi_dadd+0x1b0>
 800087a:	2040      	movs	r0, #64	; 0x40
 800087c:	4661      	mov	r1, ip
 800087e:	1a82      	subs	r2, r0, r2
 8000880:	4091      	lsls	r1, r2
 8000882:	430f      	orrs	r7, r1
 8000884:	0039      	movs	r1, r7
 8000886:	1e4f      	subs	r7, r1, #1
 8000888:	41b9      	sbcs	r1, r7
 800088a:	430d      	orrs	r5, r1
 800088c:	e11b      	b.n	8000ac6 <__aeabi_dadd+0x3f2>
 800088e:	0029      	movs	r1, r5
 8000890:	4339      	orrs	r1, r7
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x1c2>
 8000894:	e0b5      	b.n	8000a02 <__aeabi_dadd+0x32e>
 8000896:	1e51      	subs	r1, r2, #1
 8000898:	2a01      	cmp	r2, #1
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x1ca>
 800089c:	e1ab      	b.n	8000bf6 <__aeabi_dadd+0x522>
 800089e:	486a      	ldr	r0, [pc, #424]	; (8000a48 <__aeabi_dadd+0x374>)
 80008a0:	4282      	cmp	r2, r0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x1d2>
 80008a4:	e1b2      	b.n	8000c0c <__aeabi_dadd+0x538>
 80008a6:	000a      	movs	r2, r1
 80008a8:	e743      	b.n	8000732 <__aeabi_dadd+0x5e>
 80008aa:	4969      	ldr	r1, [pc, #420]	; (8000a50 <__aeabi_dadd+0x37c>)
 80008ac:	1c75      	adds	r5, r6, #1
 80008ae:	420d      	tst	r5, r1
 80008b0:	d000      	beq.n	80008b4 <__aeabi_dadd+0x1e0>
 80008b2:	e0cf      	b.n	8000a54 <__aeabi_dadd+0x380>
 80008b4:	2e00      	cmp	r6, #0
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x1e6>
 80008b8:	e193      	b.n	8000be2 <__aeabi_dadd+0x50e>
 80008ba:	4649      	mov	r1, r9
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ee>
 80008c0:	e1d1      	b.n	8000c66 <__aeabi_dadd+0x592>
 80008c2:	4661      	mov	r1, ip
 80008c4:	4339      	orrs	r1, r7
 80008c6:	d000      	beq.n	80008ca <__aeabi_dadd+0x1f6>
 80008c8:	e1e3      	b.n	8000c92 <__aeabi_dadd+0x5be>
 80008ca:	4649      	mov	r1, r9
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	08c9      	lsrs	r1, r1, #3
 80008d0:	4301      	orrs	r1, r0
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	e026      	b.n	8000924 <__aeabi_dadd+0x250>
 80008d6:	0029      	movs	r1, r5
 80008d8:	4339      	orrs	r1, r7
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x20a>
 80008dc:	e091      	b.n	8000a02 <__aeabi_dadd+0x32e>
 80008de:	1e51      	subs	r1, r2, #1
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	d005      	beq.n	80008f0 <__aeabi_dadd+0x21c>
 80008e4:	4858      	ldr	r0, [pc, #352]	; (8000a48 <__aeabi_dadd+0x374>)
 80008e6:	4282      	cmp	r2, r0
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x218>
 80008ea:	e18f      	b.n	8000c0c <__aeabi_dadd+0x538>
 80008ec:	000a      	movs	r2, r1
 80008ee:	e7b8      	b.n	8000862 <__aeabi_dadd+0x18e>
 80008f0:	003d      	movs	r5, r7
 80008f2:	444d      	add	r5, r9
 80008f4:	454d      	cmp	r5, r9
 80008f6:	4189      	sbcs	r1, r1
 80008f8:	4463      	add	r3, ip
 80008fa:	4698      	mov	r8, r3
 80008fc:	4249      	negs	r1, r1
 80008fe:	4488      	add	r8, r1
 8000900:	4643      	mov	r3, r8
 8000902:	2602      	movs	r6, #2
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	d500      	bpl.n	800090a <__aeabi_dadd+0x236>
 8000908:	e0eb      	b.n	8000ae2 <__aeabi_dadd+0x40e>
 800090a:	3e01      	subs	r6, #1
 800090c:	076b      	lsls	r3, r5, #29
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x23e>
 8000910:	e75c      	b.n	80007cc <__aeabi_dadd+0xf8>
 8000912:	4643      	mov	r3, r8
 8000914:	08e9      	lsrs	r1, r5, #3
 8000916:	075a      	lsls	r2, r3, #29
 8000918:	4311      	orrs	r1, r2
 800091a:	0032      	movs	r2, r6
 800091c:	08db      	lsrs	r3, r3, #3
 800091e:	484a      	ldr	r0, [pc, #296]	; (8000a48 <__aeabi_dadd+0x374>)
 8000920:	4282      	cmp	r2, r0
 8000922:	d021      	beq.n	8000968 <__aeabi_dadd+0x294>
 8000924:	031b      	lsls	r3, r3, #12
 8000926:	0552      	lsls	r2, r2, #21
 8000928:	0b1b      	lsrs	r3, r3, #12
 800092a:	0d52      	lsrs	r2, r2, #21
 800092c:	e76c      	b.n	8000808 <__aeabi_dadd+0x134>
 800092e:	2300      	movs	r3, #0
 8000930:	2100      	movs	r1, #0
 8000932:	e769      	b.n	8000808 <__aeabi_dadd+0x134>
 8000934:	002a      	movs	r2, r5
 8000936:	433a      	orrs	r2, r7
 8000938:	d069      	beq.n	8000a0e <__aeabi_dadd+0x33a>
 800093a:	464a      	mov	r2, r9
 800093c:	0758      	lsls	r0, r3, #29
 800093e:	08d1      	lsrs	r1, r2, #3
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	031b      	lsls	r3, r3, #12
 8000946:	4308      	orrs	r0, r1
 8000948:	421a      	tst	r2, r3
 800094a:	d007      	beq.n	800095c <__aeabi_dadd+0x288>
 800094c:	0029      	movs	r1, r5
 800094e:	08ed      	lsrs	r5, r5, #3
 8000950:	421d      	tst	r5, r3
 8000952:	d103      	bne.n	800095c <__aeabi_dadd+0x288>
 8000954:	002a      	movs	r2, r5
 8000956:	08ff      	lsrs	r7, r7, #3
 8000958:	0748      	lsls	r0, r1, #29
 800095a:	4338      	orrs	r0, r7
 800095c:	0f43      	lsrs	r3, r0, #29
 800095e:	00c1      	lsls	r1, r0, #3
 8000960:	075b      	lsls	r3, r3, #29
 8000962:	08c9      	lsrs	r1, r1, #3
 8000964:	4319      	orrs	r1, r3
 8000966:	0013      	movs	r3, r2
 8000968:	000a      	movs	r2, r1
 800096a:	431a      	orrs	r2, r3
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x29c>
 800096e:	e213      	b.n	8000d98 <__aeabi_dadd+0x6c4>
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0312      	lsls	r2, r2, #12
 8000974:	4313      	orrs	r3, r2
 8000976:	031b      	lsls	r3, r3, #12
 8000978:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <__aeabi_dadd+0x374>)
 800097a:	0b1b      	lsrs	r3, r3, #12
 800097c:	e744      	b.n	8000808 <__aeabi_dadd+0x134>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d04b      	beq.n	8000a1a <__aeabi_dadd+0x346>
 8000982:	1b8a      	subs	r2, r1, r6
 8000984:	2e00      	cmp	r6, #0
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x2b6>
 8000988:	e0e7      	b.n	8000b5a <__aeabi_dadd+0x486>
 800098a:	482f      	ldr	r0, [pc, #188]	; (8000a48 <__aeabi_dadd+0x374>)
 800098c:	4281      	cmp	r1, r0
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x2be>
 8000990:	e195      	b.n	8000cbe <__aeabi_dadd+0x5ea>
 8000992:	2080      	movs	r0, #128	; 0x80
 8000994:	0400      	lsls	r0, r0, #16
 8000996:	4303      	orrs	r3, r0
 8000998:	2a38      	cmp	r2, #56	; 0x38
 800099a:	dd00      	ble.n	800099e <__aeabi_dadd+0x2ca>
 800099c:	e143      	b.n	8000c26 <__aeabi_dadd+0x552>
 800099e:	2a1f      	cmp	r2, #31
 80009a0:	dd00      	ble.n	80009a4 <__aeabi_dadd+0x2d0>
 80009a2:	e1db      	b.n	8000d5c <__aeabi_dadd+0x688>
 80009a4:	2020      	movs	r0, #32
 80009a6:	001d      	movs	r5, r3
 80009a8:	464e      	mov	r6, r9
 80009aa:	1a80      	subs	r0, r0, r2
 80009ac:	4085      	lsls	r5, r0
 80009ae:	40d6      	lsrs	r6, r2
 80009b0:	4335      	orrs	r5, r6
 80009b2:	464e      	mov	r6, r9
 80009b4:	4086      	lsls	r6, r0
 80009b6:	0030      	movs	r0, r6
 80009b8:	40d3      	lsrs	r3, r2
 80009ba:	1e46      	subs	r6, r0, #1
 80009bc:	41b0      	sbcs	r0, r6
 80009be:	449c      	add	ip, r3
 80009c0:	4305      	orrs	r5, r0
 80009c2:	19ed      	adds	r5, r5, r7
 80009c4:	42bd      	cmp	r5, r7
 80009c6:	419b      	sbcs	r3, r3
 80009c8:	425b      	negs	r3, r3
 80009ca:	4463      	add	r3, ip
 80009cc:	4698      	mov	r8, r3
 80009ce:	000e      	movs	r6, r1
 80009d0:	e07f      	b.n	8000ad2 <__aeabi_dadd+0x3fe>
 80009d2:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <__aeabi_dadd+0x378>)
 80009d4:	1a76      	subs	r6, r6, r1
 80009d6:	4013      	ands	r3, r2
 80009d8:	4698      	mov	r8, r3
 80009da:	e6f5      	b.n	80007c8 <__aeabi_dadd+0xf4>
 80009dc:	0028      	movs	r0, r5
 80009de:	f001 fc73 	bl	80022c8 <__clzsi2>
 80009e2:	0001      	movs	r1, r0
 80009e4:	3118      	adds	r1, #24
 80009e6:	291f      	cmp	r1, #31
 80009e8:	dc00      	bgt.n	80009ec <__aeabi_dadd+0x318>
 80009ea:	e6cf      	b.n	800078c <__aeabi_dadd+0xb8>
 80009ec:	002b      	movs	r3, r5
 80009ee:	3808      	subs	r0, #8
 80009f0:	4083      	lsls	r3, r0
 80009f2:	2500      	movs	r5, #0
 80009f4:	e6d2      	b.n	800079c <__aeabi_dadd+0xc8>
 80009f6:	4662      	mov	r2, ip
 80009f8:	433a      	orrs	r2, r7
 80009fa:	0011      	movs	r1, r2
 80009fc:	1e4f      	subs	r7, r1, #1
 80009fe:	41b9      	sbcs	r1, r7
 8000a00:	e6ac      	b.n	800075c <__aeabi_dadd+0x88>
 8000a02:	4649      	mov	r1, r9
 8000a04:	0758      	lsls	r0, r3, #29
 8000a06:	08c9      	lsrs	r1, r1, #3
 8000a08:	4301      	orrs	r1, r0
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	e787      	b.n	800091e <__aeabi_dadd+0x24a>
 8000a0e:	4649      	mov	r1, r9
 8000a10:	075a      	lsls	r2, r3, #29
 8000a12:	08c9      	lsrs	r1, r1, #3
 8000a14:	4311      	orrs	r1, r2
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	e7a6      	b.n	8000968 <__aeabi_dadd+0x294>
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <__aeabi_dadd+0x37c>)
 8000a1c:	1c70      	adds	r0, r6, #1
 8000a1e:	4208      	tst	r0, r1
 8000a20:	d000      	beq.n	8000a24 <__aeabi_dadd+0x350>
 8000a22:	e0bb      	b.n	8000b9c <__aeabi_dadd+0x4c8>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x356>
 8000a28:	e114      	b.n	8000c54 <__aeabi_dadd+0x580>
 8000a2a:	4649      	mov	r1, r9
 8000a2c:	4319      	orrs	r1, r3
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x35e>
 8000a30:	e175      	b.n	8000d1e <__aeabi_dadd+0x64a>
 8000a32:	0029      	movs	r1, r5
 8000a34:	4339      	orrs	r1, r7
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x366>
 8000a38:	e17e      	b.n	8000d38 <__aeabi_dadd+0x664>
 8000a3a:	4649      	mov	r1, r9
 8000a3c:	0758      	lsls	r0, r3, #29
 8000a3e:	08c9      	lsrs	r1, r1, #3
 8000a40:	4301      	orrs	r1, r0
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	e76e      	b.n	8000924 <__aeabi_dadd+0x250>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	000007ff 	.word	0x000007ff
 8000a4c:	ff7fffff 	.word	0xff7fffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	4649      	mov	r1, r9
 8000a56:	1bcd      	subs	r5, r1, r7
 8000a58:	4661      	mov	r1, ip
 8000a5a:	1a58      	subs	r0, r3, r1
 8000a5c:	45a9      	cmp	r9, r5
 8000a5e:	4189      	sbcs	r1, r1
 8000a60:	4249      	negs	r1, r1
 8000a62:	4688      	mov	r8, r1
 8000a64:	0001      	movs	r1, r0
 8000a66:	4640      	mov	r0, r8
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	0209      	lsls	r1, r1, #8
 8000a6e:	d500      	bpl.n	8000a72 <__aeabi_dadd+0x39e>
 8000a70:	e0a6      	b.n	8000bc0 <__aeabi_dadd+0x4ec>
 8000a72:	4641      	mov	r1, r8
 8000a74:	4329      	orrs	r1, r5
 8000a76:	d000      	beq.n	8000a7a <__aeabi_dadd+0x3a6>
 8000a78:	e67f      	b.n	800077a <__aeabi_dadd+0xa6>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	e751      	b.n	8000924 <__aeabi_dadd+0x250>
 8000a80:	4cc7      	ldr	r4, [pc, #796]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000a82:	42a1      	cmp	r1, r4
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x3b4>
 8000a86:	e0c7      	b.n	8000c18 <__aeabi_dadd+0x544>
 8000a88:	2480      	movs	r4, #128	; 0x80
 8000a8a:	0424      	lsls	r4, r4, #16
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	2a38      	cmp	r2, #56	; 0x38
 8000a90:	dc54      	bgt.n	8000b3c <__aeabi_dadd+0x468>
 8000a92:	2a1f      	cmp	r2, #31
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_dadd+0x3c4>
 8000a96:	e0cc      	b.n	8000c32 <__aeabi_dadd+0x55e>
 8000a98:	2420      	movs	r4, #32
 8000a9a:	4648      	mov	r0, r9
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	001d      	movs	r5, r3
 8000aa0:	464e      	mov	r6, r9
 8000aa2:	40a0      	lsls	r0, r4
 8000aa4:	40d6      	lsrs	r6, r2
 8000aa6:	40a5      	lsls	r5, r4
 8000aa8:	0004      	movs	r4, r0
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	4335      	orrs	r5, r6
 8000ab0:	1e66      	subs	r6, r4, #1
 8000ab2:	41b4      	sbcs	r4, r6
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	469c      	mov	ip, r3
 8000ab8:	4325      	orrs	r5, r4
 8000aba:	e044      	b.n	8000b46 <__aeabi_dadd+0x472>
 8000abc:	4662      	mov	r2, ip
 8000abe:	433a      	orrs	r2, r7
 8000ac0:	0015      	movs	r5, r2
 8000ac2:	1e6f      	subs	r7, r5, #1
 8000ac4:	41bd      	sbcs	r5, r7
 8000ac6:	444d      	add	r5, r9
 8000ac8:	454d      	cmp	r5, r9
 8000aca:	4189      	sbcs	r1, r1
 8000acc:	4249      	negs	r1, r1
 8000ace:	4688      	mov	r8, r1
 8000ad0:	4498      	add	r8, r3
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	d400      	bmi.n	8000ada <__aeabi_dadd+0x406>
 8000ad8:	e718      	b.n	800090c <__aeabi_dadd+0x238>
 8000ada:	4bb1      	ldr	r3, [pc, #708]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000adc:	3601      	adds	r6, #1
 8000ade:	429e      	cmp	r6, r3
 8000ae0:	d049      	beq.n	8000b76 <__aeabi_dadd+0x4a2>
 8000ae2:	4642      	mov	r2, r8
 8000ae4:	4baf      	ldr	r3, [pc, #700]	; (8000da4 <__aeabi_dadd+0x6d0>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	401a      	ands	r2, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	086a      	lsrs	r2, r5, #1
 8000aee:	400d      	ands	r5, r1
 8000af0:	4315      	orrs	r5, r2
 8000af2:	07d9      	lsls	r1, r3, #31
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	4698      	mov	r8, r3
 8000af8:	430d      	orrs	r5, r1
 8000afa:	e665      	b.n	80007c8 <__aeabi_dadd+0xf4>
 8000afc:	0018      	movs	r0, r3
 8000afe:	3e1f      	subs	r6, #31
 8000b00:	40f0      	lsrs	r0, r6
 8000b02:	2a20      	cmp	r2, #32
 8000b04:	d003      	beq.n	8000b0e <__aeabi_dadd+0x43a>
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	1a8a      	subs	r2, r1, r2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	431d      	orrs	r5, r3
 8000b0e:	1e69      	subs	r1, r5, #1
 8000b10:	418d      	sbcs	r5, r1
 8000b12:	2300      	movs	r3, #0
 8000b14:	2600      	movs	r6, #0
 8000b16:	4698      	mov	r8, r3
 8000b18:	4305      	orrs	r5, r0
 8000b1a:	e6f7      	b.n	800090c <__aeabi_dadd+0x238>
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	4665      	mov	r5, ip
 8000b20:	3920      	subs	r1, #32
 8000b22:	40cd      	lsrs	r5, r1
 8000b24:	2a20      	cmp	r2, #32
 8000b26:	d004      	beq.n	8000b32 <__aeabi_dadd+0x45e>
 8000b28:	2040      	movs	r0, #64	; 0x40
 8000b2a:	4661      	mov	r1, ip
 8000b2c:	1a82      	subs	r2, r0, r2
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	430f      	orrs	r7, r1
 8000b32:	0039      	movs	r1, r7
 8000b34:	1e4f      	subs	r7, r1, #1
 8000b36:	41b9      	sbcs	r1, r7
 8000b38:	4329      	orrs	r1, r5
 8000b3a:	e60f      	b.n	800075c <__aeabi_dadd+0x88>
 8000b3c:	464a      	mov	r2, r9
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	001d      	movs	r5, r3
 8000b42:	1e6b      	subs	r3, r5, #1
 8000b44:	419d      	sbcs	r5, r3
 8000b46:	1b7d      	subs	r5, r7, r5
 8000b48:	42af      	cmp	r7, r5
 8000b4a:	419b      	sbcs	r3, r3
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	425b      	negs	r3, r3
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4698      	mov	r8, r3
 8000b54:	4654      	mov	r4, sl
 8000b56:	000e      	movs	r6, r1
 8000b58:	e607      	b.n	800076a <__aeabi_dadd+0x96>
 8000b5a:	4648      	mov	r0, r9
 8000b5c:	4318      	orrs	r0, r3
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x48e>
 8000b60:	e0b3      	b.n	8000cca <__aeabi_dadd+0x5f6>
 8000b62:	1e50      	subs	r0, r2, #1
 8000b64:	2a01      	cmp	r2, #1
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dadd+0x496>
 8000b68:	e10d      	b.n	8000d86 <__aeabi_dadd+0x6b2>
 8000b6a:	4d8d      	ldr	r5, [pc, #564]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000b6c:	42aa      	cmp	r2, r5
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x49e>
 8000b70:	e0a5      	b.n	8000cbe <__aeabi_dadd+0x5ea>
 8000b72:	0002      	movs	r2, r0
 8000b74:	e710      	b.n	8000998 <__aeabi_dadd+0x2c4>
 8000b76:	0032      	movs	r2, r6
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	e644      	b.n	8000808 <__aeabi_dadd+0x134>
 8000b7e:	2120      	movs	r1, #32
 8000b80:	0038      	movs	r0, r7
 8000b82:	1a89      	subs	r1, r1, r2
 8000b84:	4665      	mov	r5, ip
 8000b86:	408f      	lsls	r7, r1
 8000b88:	408d      	lsls	r5, r1
 8000b8a:	40d0      	lsrs	r0, r2
 8000b8c:	1e79      	subs	r1, r7, #1
 8000b8e:	418f      	sbcs	r7, r1
 8000b90:	4305      	orrs	r5, r0
 8000b92:	433d      	orrs	r5, r7
 8000b94:	4667      	mov	r7, ip
 8000b96:	40d7      	lsrs	r7, r2
 8000b98:	19db      	adds	r3, r3, r7
 8000b9a:	e794      	b.n	8000ac6 <__aeabi_dadd+0x3f2>
 8000b9c:	4a80      	ldr	r2, [pc, #512]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000b9e:	4290      	cmp	r0, r2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x4d0>
 8000ba2:	e0ec      	b.n	8000d7e <__aeabi_dadd+0x6aa>
 8000ba4:	0039      	movs	r1, r7
 8000ba6:	4449      	add	r1, r9
 8000ba8:	4549      	cmp	r1, r9
 8000baa:	4192      	sbcs	r2, r2
 8000bac:	4463      	add	r3, ip
 8000bae:	4252      	negs	r2, r2
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	07dd      	lsls	r5, r3, #31
 8000bb4:	0849      	lsrs	r1, r1, #1
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	4698      	mov	r8, r3
 8000bba:	0006      	movs	r6, r0
 8000bbc:	430d      	orrs	r5, r1
 8000bbe:	e6a5      	b.n	800090c <__aeabi_dadd+0x238>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	1abd      	subs	r5, r7, r2
 8000bc4:	42af      	cmp	r7, r5
 8000bc6:	4189      	sbcs	r1, r1
 8000bc8:	4662      	mov	r2, ip
 8000bca:	4249      	negs	r1, r1
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	4654      	mov	r4, sl
 8000bd4:	e5d1      	b.n	800077a <__aeabi_dadd+0xa6>
 8000bd6:	076c      	lsls	r4, r5, #29
 8000bd8:	08f9      	lsrs	r1, r7, #3
 8000bda:	4321      	orrs	r1, r4
 8000bdc:	08eb      	lsrs	r3, r5, #3
 8000bde:	0004      	movs	r4, r0
 8000be0:	e69d      	b.n	800091e <__aeabi_dadd+0x24a>
 8000be2:	464a      	mov	r2, r9
 8000be4:	431a      	orrs	r2, r3
 8000be6:	d175      	bne.n	8000cd4 <__aeabi_dadd+0x600>
 8000be8:	4661      	mov	r1, ip
 8000bea:	4339      	orrs	r1, r7
 8000bec:	d114      	bne.n	8000c18 <__aeabi_dadd+0x544>
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	031b      	lsls	r3, r3, #12
 8000bf4:	e6bc      	b.n	8000970 <__aeabi_dadd+0x29c>
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	1bd5      	subs	r5, r2, r7
 8000bfa:	45a9      	cmp	r9, r5
 8000bfc:	4189      	sbcs	r1, r1
 8000bfe:	4662      	mov	r2, ip
 8000c00:	4249      	negs	r1, r1
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	4698      	mov	r8, r3
 8000c08:	2601      	movs	r6, #1
 8000c0a:	e5ae      	b.n	800076a <__aeabi_dadd+0x96>
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	08d1      	lsrs	r1, r2, #3
 8000c10:	075a      	lsls	r2, r3, #29
 8000c12:	4311      	orrs	r1, r2
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	e6a7      	b.n	8000968 <__aeabi_dadd+0x294>
 8000c18:	4663      	mov	r3, ip
 8000c1a:	08f9      	lsrs	r1, r7, #3
 8000c1c:	075a      	lsls	r2, r3, #29
 8000c1e:	4654      	mov	r4, sl
 8000c20:	4311      	orrs	r1, r2
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	e6a0      	b.n	8000968 <__aeabi_dadd+0x294>
 8000c26:	464a      	mov	r2, r9
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	001d      	movs	r5, r3
 8000c2c:	1e6b      	subs	r3, r5, #1
 8000c2e:	419d      	sbcs	r5, r3
 8000c30:	e6c7      	b.n	80009c2 <__aeabi_dadd+0x2ee>
 8000c32:	0014      	movs	r4, r2
 8000c34:	001e      	movs	r6, r3
 8000c36:	3c20      	subs	r4, #32
 8000c38:	40e6      	lsrs	r6, r4
 8000c3a:	2a20      	cmp	r2, #32
 8000c3c:	d005      	beq.n	8000c4a <__aeabi_dadd+0x576>
 8000c3e:	2440      	movs	r4, #64	; 0x40
 8000c40:	1aa2      	subs	r2, r4, r2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	464a      	mov	r2, r9
 8000c46:	431a      	orrs	r2, r3
 8000c48:	4691      	mov	r9, r2
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	1e6b      	subs	r3, r5, #1
 8000c4e:	419d      	sbcs	r5, r3
 8000c50:	4335      	orrs	r5, r6
 8000c52:	e778      	b.n	8000b46 <__aeabi_dadd+0x472>
 8000c54:	464a      	mov	r2, r9
 8000c56:	431a      	orrs	r2, r3
 8000c58:	d000      	beq.n	8000c5c <__aeabi_dadd+0x588>
 8000c5a:	e66b      	b.n	8000934 <__aeabi_dadd+0x260>
 8000c5c:	076b      	lsls	r3, r5, #29
 8000c5e:	08f9      	lsrs	r1, r7, #3
 8000c60:	4319      	orrs	r1, r3
 8000c62:	08eb      	lsrs	r3, r5, #3
 8000c64:	e680      	b.n	8000968 <__aeabi_dadd+0x294>
 8000c66:	4661      	mov	r1, ip
 8000c68:	4339      	orrs	r1, r7
 8000c6a:	d054      	beq.n	8000d16 <__aeabi_dadd+0x642>
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	08f9      	lsrs	r1, r7, #3
 8000c70:	075c      	lsls	r4, r3, #29
 8000c72:	4321      	orrs	r1, r4
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	0004      	movs	r4, r0
 8000c78:	e654      	b.n	8000924 <__aeabi_dadd+0x250>
 8000c7a:	464a      	mov	r2, r9
 8000c7c:	1abd      	subs	r5, r7, r2
 8000c7e:	42af      	cmp	r7, r5
 8000c80:	4189      	sbcs	r1, r1
 8000c82:	4662      	mov	r2, ip
 8000c84:	4249      	negs	r1, r1
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	4698      	mov	r8, r3
 8000c8c:	0004      	movs	r4, r0
 8000c8e:	2601      	movs	r6, #1
 8000c90:	e56b      	b.n	800076a <__aeabi_dadd+0x96>
 8000c92:	464a      	mov	r2, r9
 8000c94:	1bd5      	subs	r5, r2, r7
 8000c96:	45a9      	cmp	r9, r5
 8000c98:	4189      	sbcs	r1, r1
 8000c9a:	4662      	mov	r2, ip
 8000c9c:	4249      	negs	r1, r1
 8000c9e:	1a9a      	subs	r2, r3, r2
 8000ca0:	1a52      	subs	r2, r2, r1
 8000ca2:	4690      	mov	r8, r2
 8000ca4:	0212      	lsls	r2, r2, #8
 8000ca6:	d532      	bpl.n	8000d0e <__aeabi_dadd+0x63a>
 8000ca8:	464a      	mov	r2, r9
 8000caa:	1abd      	subs	r5, r7, r2
 8000cac:	42af      	cmp	r7, r5
 8000cae:	4189      	sbcs	r1, r1
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	4249      	negs	r1, r1
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	1a5b      	subs	r3, r3, r1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	0004      	movs	r4, r0
 8000cbc:	e584      	b.n	80007c8 <__aeabi_dadd+0xf4>
 8000cbe:	4663      	mov	r3, ip
 8000cc0:	08f9      	lsrs	r1, r7, #3
 8000cc2:	075a      	lsls	r2, r3, #29
 8000cc4:	4311      	orrs	r1, r2
 8000cc6:	08db      	lsrs	r3, r3, #3
 8000cc8:	e64e      	b.n	8000968 <__aeabi_dadd+0x294>
 8000cca:	08f9      	lsrs	r1, r7, #3
 8000ccc:	0768      	lsls	r0, r5, #29
 8000cce:	4301      	orrs	r1, r0
 8000cd0:	08eb      	lsrs	r3, r5, #3
 8000cd2:	e624      	b.n	800091e <__aeabi_dadd+0x24a>
 8000cd4:	4662      	mov	r2, ip
 8000cd6:	433a      	orrs	r2, r7
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x608>
 8000cda:	e698      	b.n	8000a0e <__aeabi_dadd+0x33a>
 8000cdc:	464a      	mov	r2, r9
 8000cde:	08d1      	lsrs	r1, r2, #3
 8000ce0:	075a      	lsls	r2, r3, #29
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	031b      	lsls	r3, r3, #12
 8000cea:	421a      	tst	r2, r3
 8000cec:	d008      	beq.n	8000d00 <__aeabi_dadd+0x62c>
 8000cee:	4660      	mov	r0, ip
 8000cf0:	08c5      	lsrs	r5, r0, #3
 8000cf2:	421d      	tst	r5, r3
 8000cf4:	d104      	bne.n	8000d00 <__aeabi_dadd+0x62c>
 8000cf6:	4654      	mov	r4, sl
 8000cf8:	002a      	movs	r2, r5
 8000cfa:	08f9      	lsrs	r1, r7, #3
 8000cfc:	0743      	lsls	r3, r0, #29
 8000cfe:	4319      	orrs	r1, r3
 8000d00:	0f4b      	lsrs	r3, r1, #29
 8000d02:	00c9      	lsls	r1, r1, #3
 8000d04:	075b      	lsls	r3, r3, #29
 8000d06:	08c9      	lsrs	r1, r1, #3
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	e62c      	b.n	8000968 <__aeabi_dadd+0x294>
 8000d0e:	4641      	mov	r1, r8
 8000d10:	4329      	orrs	r1, r5
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x642>
 8000d14:	e5fa      	b.n	800090c <__aeabi_dadd+0x238>
 8000d16:	2300      	movs	r3, #0
 8000d18:	000a      	movs	r2, r1
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	e602      	b.n	8000924 <__aeabi_dadd+0x250>
 8000d1e:	076b      	lsls	r3, r5, #29
 8000d20:	08f9      	lsrs	r1, r7, #3
 8000d22:	4319      	orrs	r1, r3
 8000d24:	08eb      	lsrs	r3, r5, #3
 8000d26:	e5fd      	b.n	8000924 <__aeabi_dadd+0x250>
 8000d28:	4663      	mov	r3, ip
 8000d2a:	08f9      	lsrs	r1, r7, #3
 8000d2c:	075b      	lsls	r3, r3, #29
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	4663      	mov	r3, ip
 8000d32:	0004      	movs	r4, r0
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	e617      	b.n	8000968 <__aeabi_dadd+0x294>
 8000d38:	003d      	movs	r5, r7
 8000d3a:	444d      	add	r5, r9
 8000d3c:	4463      	add	r3, ip
 8000d3e:	454d      	cmp	r5, r9
 8000d40:	4189      	sbcs	r1, r1
 8000d42:	4698      	mov	r8, r3
 8000d44:	4249      	negs	r1, r1
 8000d46:	4488      	add	r8, r1
 8000d48:	4643      	mov	r3, r8
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	d400      	bmi.n	8000d50 <__aeabi_dadd+0x67c>
 8000d4e:	e5dd      	b.n	800090c <__aeabi_dadd+0x238>
 8000d50:	4642      	mov	r2, r8
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <__aeabi_dadd+0x6d0>)
 8000d54:	2601      	movs	r6, #1
 8000d56:	401a      	ands	r2, r3
 8000d58:	4690      	mov	r8, r2
 8000d5a:	e5d7      	b.n	800090c <__aeabi_dadd+0x238>
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	001e      	movs	r6, r3
 8000d60:	3820      	subs	r0, #32
 8000d62:	40c6      	lsrs	r6, r0
 8000d64:	2a20      	cmp	r2, #32
 8000d66:	d005      	beq.n	8000d74 <__aeabi_dadd+0x6a0>
 8000d68:	2040      	movs	r0, #64	; 0x40
 8000d6a:	1a82      	subs	r2, r0, r2
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	464a      	mov	r2, r9
 8000d70:	431a      	orrs	r2, r3
 8000d72:	4691      	mov	r9, r2
 8000d74:	464d      	mov	r5, r9
 8000d76:	1e6b      	subs	r3, r5, #1
 8000d78:	419d      	sbcs	r5, r3
 8000d7a:	4335      	orrs	r5, r6
 8000d7c:	e621      	b.n	80009c2 <__aeabi_dadd+0x2ee>
 8000d7e:	0002      	movs	r2, r0
 8000d80:	2300      	movs	r3, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	e540      	b.n	8000808 <__aeabi_dadd+0x134>
 8000d86:	464a      	mov	r2, r9
 8000d88:	19d5      	adds	r5, r2, r7
 8000d8a:	42bd      	cmp	r5, r7
 8000d8c:	4189      	sbcs	r1, r1
 8000d8e:	4463      	add	r3, ip
 8000d90:	4698      	mov	r8, r3
 8000d92:	4249      	negs	r1, r1
 8000d94:	4488      	add	r8, r1
 8000d96:	e5b3      	b.n	8000900 <__aeabi_dadd+0x22c>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4a01      	ldr	r2, [pc, #4]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000d9c:	000b      	movs	r3, r1
 8000d9e:	e533      	b.n	8000808 <__aeabi_dadd+0x134>
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	ff7fffff 	.word	0xff7fffff

08000da8 <__aeabi_ddiv>:
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	4657      	mov	r7, sl
 8000dac:	464e      	mov	r6, r9
 8000dae:	4645      	mov	r5, r8
 8000db0:	46de      	mov	lr, fp
 8000db2:	b5e0      	push	{r5, r6, r7, lr}
 8000db4:	4681      	mov	r9, r0
 8000db6:	0005      	movs	r5, r0
 8000db8:	030c      	lsls	r4, r1, #12
 8000dba:	0048      	lsls	r0, r1, #1
 8000dbc:	4692      	mov	sl, r2
 8000dbe:	001f      	movs	r7, r3
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	0b24      	lsrs	r4, r4, #12
 8000dc4:	0d40      	lsrs	r0, r0, #21
 8000dc6:	0fce      	lsrs	r6, r1, #31
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d059      	beq.n	8000e80 <__aeabi_ddiv+0xd8>
 8000dcc:	4b87      	ldr	r3, [pc, #540]	; (8000fec <__aeabi_ddiv+0x244>)
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_ddiv+0x2c>
 8000dd2:	e098      	b.n	8000f06 <__aeabi_ddiv+0x15e>
 8000dd4:	0f6b      	lsrs	r3, r5, #29
 8000dd6:	00e4      	lsls	r4, r4, #3
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4323      	orrs	r3, r4
 8000de0:	4698      	mov	r8, r3
 8000de2:	4b83      	ldr	r3, [pc, #524]	; (8000ff0 <__aeabi_ddiv+0x248>)
 8000de4:	00ed      	lsls	r5, r5, #3
 8000de6:	469b      	mov	fp, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	4699      	mov	r9, r3
 8000dec:	4483      	add	fp, r0
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	033c      	lsls	r4, r7, #12
 8000df2:	007b      	lsls	r3, r7, #1
 8000df4:	4650      	mov	r0, sl
 8000df6:	0b24      	lsrs	r4, r4, #12
 8000df8:	0d5b      	lsrs	r3, r3, #21
 8000dfa:	0fff      	lsrs	r7, r7, #31
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d067      	beq.n	8000ed0 <__aeabi_ddiv+0x128>
 8000e00:	4a7a      	ldr	r2, [pc, #488]	; (8000fec <__aeabi_ddiv+0x244>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d018      	beq.n	8000e38 <__aeabi_ddiv+0x90>
 8000e06:	497a      	ldr	r1, [pc, #488]	; (8000ff0 <__aeabi_ddiv+0x248>)
 8000e08:	0f42      	lsrs	r2, r0, #29
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	00e4      	lsls	r4, r4, #3
 8000e0e:	4659      	mov	r1, fp
 8000e10:	4314      	orrs	r4, r2
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	4463      	add	r3, ip
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	1acb      	subs	r3, r1, r3
 8000e1a:	4314      	orrs	r4, r2
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	00c2      	lsls	r2, r0, #3
 8000e20:	2000      	movs	r0, #0
 8000e22:	0033      	movs	r3, r6
 8000e24:	407b      	eors	r3, r7
 8000e26:	469a      	mov	sl, r3
 8000e28:	464b      	mov	r3, r9
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	d900      	bls.n	8000e30 <__aeabi_ddiv+0x88>
 8000e2e:	e0ef      	b.n	8001010 <__aeabi_ddiv+0x268>
 8000e30:	4970      	ldr	r1, [pc, #448]	; (8000ff4 <__aeabi_ddiv+0x24c>)
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	58cb      	ldr	r3, [r1, r3]
 8000e36:	469f      	mov	pc, r3
 8000e38:	4b6f      	ldr	r3, [pc, #444]	; (8000ff8 <__aeabi_ddiv+0x250>)
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	469c      	mov	ip, r3
 8000e3e:	4322      	orrs	r2, r4
 8000e40:	44e3      	add	fp, ip
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d000      	beq.n	8000e48 <__aeabi_ddiv+0xa0>
 8000e46:	e095      	b.n	8000f74 <__aeabi_ddiv+0x1cc>
 8000e48:	4649      	mov	r1, r9
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	4689      	mov	r9, r1
 8000e50:	2400      	movs	r4, #0
 8000e52:	2002      	movs	r0, #2
 8000e54:	e7e5      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000e56:	2300      	movs	r3, #0
 8000e58:	2400      	movs	r4, #0
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	051b      	lsls	r3, r3, #20
 8000e60:	4323      	orrs	r3, r4
 8000e62:	07d2      	lsls	r2, r2, #31
 8000e64:	4313      	orrs	r3, r2
 8000e66:	0028      	movs	r0, r5
 8000e68:	0019      	movs	r1, r3
 8000e6a:	b005      	add	sp, #20
 8000e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e6e:	46bb      	mov	fp, r7
 8000e70:	46b2      	mov	sl, r6
 8000e72:	46a9      	mov	r9, r5
 8000e74:	46a0      	mov	r8, r4
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <__aeabi_ddiv+0x244>)
 8000e7e:	e7ed      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000e80:	464b      	mov	r3, r9
 8000e82:	4323      	orrs	r3, r4
 8000e84:	4698      	mov	r8, r3
 8000e86:	d100      	bne.n	8000e8a <__aeabi_ddiv+0xe2>
 8000e88:	e089      	b.n	8000f9e <__aeabi_ddiv+0x1f6>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_ddiv+0xe8>
 8000e8e:	e1e0      	b.n	8001252 <__aeabi_ddiv+0x4aa>
 8000e90:	0020      	movs	r0, r4
 8000e92:	f001 fa19 	bl	80022c8 <__clzsi2>
 8000e96:	0001      	movs	r1, r0
 8000e98:	0002      	movs	r2, r0
 8000e9a:	390b      	subs	r1, #11
 8000e9c:	231d      	movs	r3, #29
 8000e9e:	1a5b      	subs	r3, r3, r1
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	0010      	movs	r0, r2
 8000ea4:	40d9      	lsrs	r1, r3
 8000ea6:	3808      	subs	r0, #8
 8000ea8:	4084      	lsls	r4, r0
 8000eaa:	000b      	movs	r3, r1
 8000eac:	464d      	mov	r5, r9
 8000eae:	4323      	orrs	r3, r4
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	4085      	lsls	r5, r0
 8000eb4:	4851      	ldr	r0, [pc, #324]	; (8000ffc <__aeabi_ddiv+0x254>)
 8000eb6:	033c      	lsls	r4, r7, #12
 8000eb8:	1a83      	subs	r3, r0, r2
 8000eba:	469b      	mov	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	007b      	lsls	r3, r7, #1
 8000ec4:	4650      	mov	r0, sl
 8000ec6:	0b24      	lsrs	r4, r4, #12
 8000ec8:	0d5b      	lsrs	r3, r3, #21
 8000eca:	0fff      	lsrs	r7, r7, #31
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d197      	bne.n	8000e00 <__aeabi_ddiv+0x58>
 8000ed0:	4652      	mov	r2, sl
 8000ed2:	4322      	orrs	r2, r4
 8000ed4:	d055      	beq.n	8000f82 <__aeabi_ddiv+0x1da>
 8000ed6:	2c00      	cmp	r4, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x134>
 8000eda:	e1ca      	b.n	8001272 <__aeabi_ddiv+0x4ca>
 8000edc:	0020      	movs	r0, r4
 8000ede:	f001 f9f3 	bl	80022c8 <__clzsi2>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	3a0b      	subs	r2, #11
 8000ee6:	231d      	movs	r3, #29
 8000ee8:	0001      	movs	r1, r0
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	4652      	mov	r2, sl
 8000eee:	3908      	subs	r1, #8
 8000ef0:	40da      	lsrs	r2, r3
 8000ef2:	408c      	lsls	r4, r1
 8000ef4:	4314      	orrs	r4, r2
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	408a      	lsls	r2, r1
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <__aeabi_ddiv+0x258>)
 8000efc:	4458      	add	r0, fp
 8000efe:	469b      	mov	fp, r3
 8000f00:	4483      	add	fp, r0
 8000f02:	2000      	movs	r0, #0
 8000f04:	e78d      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000f06:	464b      	mov	r3, r9
 8000f08:	4323      	orrs	r3, r4
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	d140      	bne.n	8000f90 <__aeabi_ddiv+0x1e8>
 8000f0e:	2308      	movs	r3, #8
 8000f10:	4699      	mov	r9, r3
 8000f12:	3b06      	subs	r3, #6
 8000f14:	2500      	movs	r5, #0
 8000f16:	4683      	mov	fp, r0
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	e769      	b.n	8000df0 <__aeabi_ddiv+0x48>
 8000f1c:	46b2      	mov	sl, r6
 8000f1e:	9b00      	ldr	r3, [sp, #0]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d0a9      	beq.n	8000e78 <__aeabi_ddiv+0xd0>
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x182>
 8000f28:	e211      	b.n	800134e <__aeabi_ddiv+0x5a6>
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d093      	beq.n	8000e56 <__aeabi_ddiv+0xae>
 8000f2e:	4a35      	ldr	r2, [pc, #212]	; (8001004 <__aeabi_ddiv+0x25c>)
 8000f30:	445a      	add	r2, fp
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	dc00      	bgt.n	8000f38 <__aeabi_ddiv+0x190>
 8000f36:	e13c      	b.n	80011b2 <__aeabi_ddiv+0x40a>
 8000f38:	076b      	lsls	r3, r5, #29
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_ddiv+0x196>
 8000f3c:	e1a7      	b.n	800128e <__aeabi_ddiv+0x4e6>
 8000f3e:	08ed      	lsrs	r5, r5, #3
 8000f40:	4643      	mov	r3, r8
 8000f42:	01db      	lsls	r3, r3, #7
 8000f44:	d506      	bpl.n	8000f54 <__aeabi_ddiv+0x1ac>
 8000f46:	4642      	mov	r2, r8
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <__aeabi_ddiv+0x260>)
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	4690      	mov	r8, r2
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	445a      	add	r2, fp
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <__aeabi_ddiv+0x264>)
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dc8e      	bgt.n	8000e78 <__aeabi_ddiv+0xd0>
 8000f5a:	4643      	mov	r3, r8
 8000f5c:	0552      	lsls	r2, r2, #21
 8000f5e:	0758      	lsls	r0, r3, #29
 8000f60:	025c      	lsls	r4, r3, #9
 8000f62:	4305      	orrs	r5, r0
 8000f64:	0b24      	lsrs	r4, r4, #12
 8000f66:	0d53      	lsrs	r3, r2, #21
 8000f68:	e778      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000f6a:	46ba      	mov	sl, r7
 8000f6c:	46a0      	mov	r8, r4
 8000f6e:	0015      	movs	r5, r2
 8000f70:	9000      	str	r0, [sp, #0]
 8000f72:	e7d4      	b.n	8000f1e <__aeabi_ddiv+0x176>
 8000f74:	464a      	mov	r2, r9
 8000f76:	2303      	movs	r3, #3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	4691      	mov	r9, r2
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	4652      	mov	r2, sl
 8000f80:	e74f      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000f82:	4649      	mov	r1, r9
 8000f84:	2301      	movs	r3, #1
 8000f86:	4319      	orrs	r1, r3
 8000f88:	4689      	mov	r9, r1
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e748      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000f90:	230c      	movs	r3, #12
 8000f92:	4699      	mov	r9, r3
 8000f94:	3b09      	subs	r3, #9
 8000f96:	46a0      	mov	r8, r4
 8000f98:	4683      	mov	fp, r0
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	e728      	b.n	8000df0 <__aeabi_ddiv+0x48>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	469b      	mov	fp, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	2500      	movs	r5, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	e720      	b.n	8000df0 <__aeabi_ddiv+0x48>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2480      	movs	r4, #128	; 0x80
 8000fb2:	469a      	mov	sl, r3
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <__aeabi_ddiv+0x244>)
 8000fb8:	0324      	lsls	r4, r4, #12
 8000fba:	e74f      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	031b      	lsls	r3, r3, #12
 8000fc2:	4219      	tst	r1, r3
 8000fc4:	d008      	beq.n	8000fd8 <__aeabi_ddiv+0x230>
 8000fc6:	421c      	tst	r4, r3
 8000fc8:	d106      	bne.n	8000fd8 <__aeabi_ddiv+0x230>
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	0324      	lsls	r4, r4, #12
 8000fce:	46ba      	mov	sl, r7
 8000fd0:	0015      	movs	r5, r2
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <__aeabi_ddiv+0x244>)
 8000fd4:	0b24      	lsrs	r4, r4, #12
 8000fd6:	e741      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000fd8:	2480      	movs	r4, #128	; 0x80
 8000fda:	4643      	mov	r3, r8
 8000fdc:	0324      	lsls	r4, r4, #12
 8000fde:	431c      	orrs	r4, r3
 8000fe0:	0324      	lsls	r4, r4, #12
 8000fe2:	46b2      	mov	sl, r6
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <__aeabi_ddiv+0x244>)
 8000fe6:	0b24      	lsrs	r4, r4, #12
 8000fe8:	e738      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	000007ff 	.word	0x000007ff
 8000ff0:	fffffc01 	.word	0xfffffc01
 8000ff4:	08007820 	.word	0x08007820
 8000ff8:	fffff801 	.word	0xfffff801
 8000ffc:	fffffc0d 	.word	0xfffffc0d
 8001000:	000003f3 	.word	0x000003f3
 8001004:	000003ff 	.word	0x000003ff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	000007fe 	.word	0x000007fe
 8001010:	4544      	cmp	r4, r8
 8001012:	d200      	bcs.n	8001016 <__aeabi_ddiv+0x26e>
 8001014:	e116      	b.n	8001244 <__aeabi_ddiv+0x49c>
 8001016:	d100      	bne.n	800101a <__aeabi_ddiv+0x272>
 8001018:	e111      	b.n	800123e <__aeabi_ddiv+0x496>
 800101a:	2301      	movs	r3, #1
 800101c:	425b      	negs	r3, r3
 800101e:	469c      	mov	ip, r3
 8001020:	002e      	movs	r6, r5
 8001022:	4640      	mov	r0, r8
 8001024:	2500      	movs	r5, #0
 8001026:	44e3      	add	fp, ip
 8001028:	0223      	lsls	r3, r4, #8
 800102a:	0e14      	lsrs	r4, r2, #24
 800102c:	431c      	orrs	r4, r3
 800102e:	0c1b      	lsrs	r3, r3, #16
 8001030:	4699      	mov	r9, r3
 8001032:	0423      	lsls	r3, r4, #16
 8001034:	0c1f      	lsrs	r7, r3, #16
 8001036:	0212      	lsls	r2, r2, #8
 8001038:	4649      	mov	r1, r9
 800103a:	9200      	str	r2, [sp, #0]
 800103c:	9701      	str	r7, [sp, #4]
 800103e:	f7ff f8e9 	bl	8000214 <__aeabi_uidivmod>
 8001042:	0002      	movs	r2, r0
 8001044:	437a      	muls	r2, r7
 8001046:	040b      	lsls	r3, r1, #16
 8001048:	0c31      	lsrs	r1, r6, #16
 800104a:	4680      	mov	r8, r0
 800104c:	4319      	orrs	r1, r3
 800104e:	428a      	cmp	r2, r1
 8001050:	d90b      	bls.n	800106a <__aeabi_ddiv+0x2c2>
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
 8001056:	469c      	mov	ip, r3
 8001058:	1909      	adds	r1, r1, r4
 800105a:	44e0      	add	r8, ip
 800105c:	428c      	cmp	r4, r1
 800105e:	d804      	bhi.n	800106a <__aeabi_ddiv+0x2c2>
 8001060:	428a      	cmp	r2, r1
 8001062:	d902      	bls.n	800106a <__aeabi_ddiv+0x2c2>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	1a88      	subs	r0, r1, r2
 800106c:	4649      	mov	r1, r9
 800106e:	f7ff f8d1 	bl	8000214 <__aeabi_uidivmod>
 8001072:	0409      	lsls	r1, r1, #16
 8001074:	468c      	mov	ip, r1
 8001076:	0431      	lsls	r1, r6, #16
 8001078:	4666      	mov	r6, ip
 800107a:	9a01      	ldr	r2, [sp, #4]
 800107c:	0c09      	lsrs	r1, r1, #16
 800107e:	4342      	muls	r2, r0
 8001080:	0003      	movs	r3, r0
 8001082:	4331      	orrs	r1, r6
 8001084:	428a      	cmp	r2, r1
 8001086:	d904      	bls.n	8001092 <__aeabi_ddiv+0x2ea>
 8001088:	1909      	adds	r1, r1, r4
 800108a:	3b01      	subs	r3, #1
 800108c:	428c      	cmp	r4, r1
 800108e:	d800      	bhi.n	8001092 <__aeabi_ddiv+0x2ea>
 8001090:	e111      	b.n	80012b6 <__aeabi_ddiv+0x50e>
 8001092:	1a89      	subs	r1, r1, r2
 8001094:	4642      	mov	r2, r8
 8001096:	9e00      	ldr	r6, [sp, #0]
 8001098:	0412      	lsls	r2, r2, #16
 800109a:	431a      	orrs	r2, r3
 800109c:	0c33      	lsrs	r3, r6, #16
 800109e:	001f      	movs	r7, r3
 80010a0:	0c10      	lsrs	r0, r2, #16
 80010a2:	4690      	mov	r8, r2
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	0413      	lsls	r3, r2, #16
 80010a8:	0432      	lsls	r2, r6, #16
 80010aa:	0c16      	lsrs	r6, r2, #16
 80010ac:	0032      	movs	r2, r6
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	435a      	muls	r2, r3
 80010b2:	9603      	str	r6, [sp, #12]
 80010b4:	437b      	muls	r3, r7
 80010b6:	4346      	muls	r6, r0
 80010b8:	4378      	muls	r0, r7
 80010ba:	0c17      	lsrs	r7, r2, #16
 80010bc:	46bc      	mov	ip, r7
 80010be:	199b      	adds	r3, r3, r6
 80010c0:	4463      	add	r3, ip
 80010c2:	429e      	cmp	r6, r3
 80010c4:	d903      	bls.n	80010ce <__aeabi_ddiv+0x326>
 80010c6:	2680      	movs	r6, #128	; 0x80
 80010c8:	0276      	lsls	r6, r6, #9
 80010ca:	46b4      	mov	ip, r6
 80010cc:	4460      	add	r0, ip
 80010ce:	0c1e      	lsrs	r6, r3, #16
 80010d0:	1830      	adds	r0, r6, r0
 80010d2:	0416      	lsls	r6, r2, #16
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	0c36      	lsrs	r6, r6, #16
 80010d8:	199e      	adds	r6, r3, r6
 80010da:	4281      	cmp	r1, r0
 80010dc:	d200      	bcs.n	80010e0 <__aeabi_ddiv+0x338>
 80010de:	e09c      	b.n	800121a <__aeabi_ddiv+0x472>
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0x33c>
 80010e2:	e097      	b.n	8001214 <__aeabi_ddiv+0x46c>
 80010e4:	1bae      	subs	r6, r5, r6
 80010e6:	1a09      	subs	r1, r1, r0
 80010e8:	42b5      	cmp	r5, r6
 80010ea:	4180      	sbcs	r0, r0
 80010ec:	4240      	negs	r0, r0
 80010ee:	1a08      	subs	r0, r1, r0
 80010f0:	4284      	cmp	r4, r0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x34e>
 80010f4:	e111      	b.n	800131a <__aeabi_ddiv+0x572>
 80010f6:	4649      	mov	r1, r9
 80010f8:	f7ff f88c 	bl	8000214 <__aeabi_uidivmod>
 80010fc:	9a01      	ldr	r2, [sp, #4]
 80010fe:	040b      	lsls	r3, r1, #16
 8001100:	4342      	muls	r2, r0
 8001102:	0c31      	lsrs	r1, r6, #16
 8001104:	0005      	movs	r5, r0
 8001106:	4319      	orrs	r1, r3
 8001108:	428a      	cmp	r2, r1
 800110a:	d907      	bls.n	800111c <__aeabi_ddiv+0x374>
 800110c:	1909      	adds	r1, r1, r4
 800110e:	3d01      	subs	r5, #1
 8001110:	428c      	cmp	r4, r1
 8001112:	d803      	bhi.n	800111c <__aeabi_ddiv+0x374>
 8001114:	428a      	cmp	r2, r1
 8001116:	d901      	bls.n	800111c <__aeabi_ddiv+0x374>
 8001118:	1e85      	subs	r5, r0, #2
 800111a:	1909      	adds	r1, r1, r4
 800111c:	1a88      	subs	r0, r1, r2
 800111e:	4649      	mov	r1, r9
 8001120:	f7ff f878 	bl	8000214 <__aeabi_uidivmod>
 8001124:	0409      	lsls	r1, r1, #16
 8001126:	468c      	mov	ip, r1
 8001128:	0431      	lsls	r1, r6, #16
 800112a:	4666      	mov	r6, ip
 800112c:	9a01      	ldr	r2, [sp, #4]
 800112e:	0c09      	lsrs	r1, r1, #16
 8001130:	4342      	muls	r2, r0
 8001132:	0003      	movs	r3, r0
 8001134:	4331      	orrs	r1, r6
 8001136:	428a      	cmp	r2, r1
 8001138:	d907      	bls.n	800114a <__aeabi_ddiv+0x3a2>
 800113a:	1909      	adds	r1, r1, r4
 800113c:	3b01      	subs	r3, #1
 800113e:	428c      	cmp	r4, r1
 8001140:	d803      	bhi.n	800114a <__aeabi_ddiv+0x3a2>
 8001142:	428a      	cmp	r2, r1
 8001144:	d901      	bls.n	800114a <__aeabi_ddiv+0x3a2>
 8001146:	1e83      	subs	r3, r0, #2
 8001148:	1909      	adds	r1, r1, r4
 800114a:	9e03      	ldr	r6, [sp, #12]
 800114c:	1a89      	subs	r1, r1, r2
 800114e:	0032      	movs	r2, r6
 8001150:	042d      	lsls	r5, r5, #16
 8001152:	431d      	orrs	r5, r3
 8001154:	9f02      	ldr	r7, [sp, #8]
 8001156:	042b      	lsls	r3, r5, #16
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	435a      	muls	r2, r3
 800115c:	437b      	muls	r3, r7
 800115e:	469c      	mov	ip, r3
 8001160:	0c28      	lsrs	r0, r5, #16
 8001162:	4346      	muls	r6, r0
 8001164:	0c13      	lsrs	r3, r2, #16
 8001166:	44b4      	add	ip, r6
 8001168:	4463      	add	r3, ip
 800116a:	4378      	muls	r0, r7
 800116c:	429e      	cmp	r6, r3
 800116e:	d903      	bls.n	8001178 <__aeabi_ddiv+0x3d0>
 8001170:	2680      	movs	r6, #128	; 0x80
 8001172:	0276      	lsls	r6, r6, #9
 8001174:	46b4      	mov	ip, r6
 8001176:	4460      	add	r0, ip
 8001178:	0c1e      	lsrs	r6, r3, #16
 800117a:	0412      	lsls	r2, r2, #16
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	0c12      	lsrs	r2, r2, #16
 8001180:	1830      	adds	r0, r6, r0
 8001182:	189b      	adds	r3, r3, r2
 8001184:	4281      	cmp	r1, r0
 8001186:	d306      	bcc.n	8001196 <__aeabi_ddiv+0x3ee>
 8001188:	d002      	beq.n	8001190 <__aeabi_ddiv+0x3e8>
 800118a:	2301      	movs	r3, #1
 800118c:	431d      	orrs	r5, r3
 800118e:	e6ce      	b.n	8000f2e <__aeabi_ddiv+0x186>
 8001190:	2b00      	cmp	r3, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x3ee>
 8001194:	e6cb      	b.n	8000f2e <__aeabi_ddiv+0x186>
 8001196:	1861      	adds	r1, r4, r1
 8001198:	1e6e      	subs	r6, r5, #1
 800119a:	42a1      	cmp	r1, r4
 800119c:	d200      	bcs.n	80011a0 <__aeabi_ddiv+0x3f8>
 800119e:	e0a4      	b.n	80012ea <__aeabi_ddiv+0x542>
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d200      	bcs.n	80011a6 <__aeabi_ddiv+0x3fe>
 80011a4:	e0c9      	b.n	800133a <__aeabi_ddiv+0x592>
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x402>
 80011a8:	e0d9      	b.n	800135e <__aeabi_ddiv+0x5b6>
 80011aa:	0035      	movs	r5, r6
 80011ac:	e7ed      	b.n	800118a <__aeabi_ddiv+0x3e2>
 80011ae:	2501      	movs	r5, #1
 80011b0:	426d      	negs	r5, r5
 80011b2:	2101      	movs	r1, #1
 80011b4:	1a89      	subs	r1, r1, r2
 80011b6:	2938      	cmp	r1, #56	; 0x38
 80011b8:	dd00      	ble.n	80011bc <__aeabi_ddiv+0x414>
 80011ba:	e64c      	b.n	8000e56 <__aeabi_ddiv+0xae>
 80011bc:	291f      	cmp	r1, #31
 80011be:	dc00      	bgt.n	80011c2 <__aeabi_ddiv+0x41a>
 80011c0:	e07f      	b.n	80012c2 <__aeabi_ddiv+0x51a>
 80011c2:	231f      	movs	r3, #31
 80011c4:	425b      	negs	r3, r3
 80011c6:	1a9a      	subs	r2, r3, r2
 80011c8:	4643      	mov	r3, r8
 80011ca:	40d3      	lsrs	r3, r2
 80011cc:	2920      	cmp	r1, #32
 80011ce:	d004      	beq.n	80011da <__aeabi_ddiv+0x432>
 80011d0:	4644      	mov	r4, r8
 80011d2:	4a65      	ldr	r2, [pc, #404]	; (8001368 <__aeabi_ddiv+0x5c0>)
 80011d4:	445a      	add	r2, fp
 80011d6:	4094      	lsls	r4, r2
 80011d8:	4325      	orrs	r5, r4
 80011da:	1e6a      	subs	r2, r5, #1
 80011dc:	4195      	sbcs	r5, r2
 80011de:	2207      	movs	r2, #7
 80011e0:	432b      	orrs	r3, r5
 80011e2:	0015      	movs	r5, r2
 80011e4:	2400      	movs	r4, #0
 80011e6:	401d      	ands	r5, r3
 80011e8:	421a      	tst	r2, r3
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x446>
 80011ec:	e0a1      	b.n	8001332 <__aeabi_ddiv+0x58a>
 80011ee:	220f      	movs	r2, #15
 80011f0:	2400      	movs	r4, #0
 80011f2:	401a      	ands	r2, r3
 80011f4:	2a04      	cmp	r2, #4
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x452>
 80011f8:	e098      	b.n	800132c <__aeabi_ddiv+0x584>
 80011fa:	1d1a      	adds	r2, r3, #4
 80011fc:	429a      	cmp	r2, r3
 80011fe:	419b      	sbcs	r3, r3
 8001200:	425b      	negs	r3, r3
 8001202:	18e4      	adds	r4, r4, r3
 8001204:	0013      	movs	r3, r2
 8001206:	0222      	lsls	r2, r4, #8
 8001208:	d400      	bmi.n	800120c <__aeabi_ddiv+0x464>
 800120a:	e08f      	b.n	800132c <__aeabi_ddiv+0x584>
 800120c:	2301      	movs	r3, #1
 800120e:	2400      	movs	r4, #0
 8001210:	2500      	movs	r5, #0
 8001212:	e623      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8001214:	42b5      	cmp	r5, r6
 8001216:	d300      	bcc.n	800121a <__aeabi_ddiv+0x472>
 8001218:	e764      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 800121a:	4643      	mov	r3, r8
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	9b00      	ldr	r3, [sp, #0]
 8001220:	469c      	mov	ip, r3
 8001222:	4465      	add	r5, ip
 8001224:	001f      	movs	r7, r3
 8001226:	429d      	cmp	r5, r3
 8001228:	419b      	sbcs	r3, r3
 800122a:	425b      	negs	r3, r3
 800122c:	191b      	adds	r3, r3, r4
 800122e:	18c9      	adds	r1, r1, r3
 8001230:	428c      	cmp	r4, r1
 8001232:	d23a      	bcs.n	80012aa <__aeabi_ddiv+0x502>
 8001234:	4288      	cmp	r0, r1
 8001236:	d863      	bhi.n	8001300 <__aeabi_ddiv+0x558>
 8001238:	d060      	beq.n	80012fc <__aeabi_ddiv+0x554>
 800123a:	4690      	mov	r8, r2
 800123c:	e752      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 800123e:	42aa      	cmp	r2, r5
 8001240:	d900      	bls.n	8001244 <__aeabi_ddiv+0x49c>
 8001242:	e6ea      	b.n	800101a <__aeabi_ddiv+0x272>
 8001244:	4643      	mov	r3, r8
 8001246:	07de      	lsls	r6, r3, #31
 8001248:	0858      	lsrs	r0, r3, #1
 800124a:	086b      	lsrs	r3, r5, #1
 800124c:	431e      	orrs	r6, r3
 800124e:	07ed      	lsls	r5, r5, #31
 8001250:	e6ea      	b.n	8001028 <__aeabi_ddiv+0x280>
 8001252:	4648      	mov	r0, r9
 8001254:	f001 f838 	bl	80022c8 <__clzsi2>
 8001258:	0001      	movs	r1, r0
 800125a:	0002      	movs	r2, r0
 800125c:	3115      	adds	r1, #21
 800125e:	3220      	adds	r2, #32
 8001260:	291c      	cmp	r1, #28
 8001262:	dc00      	bgt.n	8001266 <__aeabi_ddiv+0x4be>
 8001264:	e61a      	b.n	8000e9c <__aeabi_ddiv+0xf4>
 8001266:	464b      	mov	r3, r9
 8001268:	3808      	subs	r0, #8
 800126a:	4083      	lsls	r3, r0
 800126c:	2500      	movs	r5, #0
 800126e:	4698      	mov	r8, r3
 8001270:	e620      	b.n	8000eb4 <__aeabi_ddiv+0x10c>
 8001272:	f001 f829 	bl	80022c8 <__clzsi2>
 8001276:	0003      	movs	r3, r0
 8001278:	001a      	movs	r2, r3
 800127a:	3215      	adds	r2, #21
 800127c:	3020      	adds	r0, #32
 800127e:	2a1c      	cmp	r2, #28
 8001280:	dc00      	bgt.n	8001284 <__aeabi_ddiv+0x4dc>
 8001282:	e630      	b.n	8000ee6 <__aeabi_ddiv+0x13e>
 8001284:	4654      	mov	r4, sl
 8001286:	3b08      	subs	r3, #8
 8001288:	2200      	movs	r2, #0
 800128a:	409c      	lsls	r4, r3
 800128c:	e635      	b.n	8000efa <__aeabi_ddiv+0x152>
 800128e:	230f      	movs	r3, #15
 8001290:	402b      	ands	r3, r5
 8001292:	2b04      	cmp	r3, #4
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x4f0>
 8001296:	e652      	b.n	8000f3e <__aeabi_ddiv+0x196>
 8001298:	2305      	movs	r3, #5
 800129a:	425b      	negs	r3, r3
 800129c:	42ab      	cmp	r3, r5
 800129e:	419b      	sbcs	r3, r3
 80012a0:	3504      	adds	r5, #4
 80012a2:	425b      	negs	r3, r3
 80012a4:	08ed      	lsrs	r5, r5, #3
 80012a6:	4498      	add	r8, r3
 80012a8:	e64a      	b.n	8000f40 <__aeabi_ddiv+0x198>
 80012aa:	428c      	cmp	r4, r1
 80012ac:	d1c5      	bne.n	800123a <__aeabi_ddiv+0x492>
 80012ae:	42af      	cmp	r7, r5
 80012b0:	d9c0      	bls.n	8001234 <__aeabi_ddiv+0x48c>
 80012b2:	4690      	mov	r8, r2
 80012b4:	e716      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 80012b6:	428a      	cmp	r2, r1
 80012b8:	d800      	bhi.n	80012bc <__aeabi_ddiv+0x514>
 80012ba:	e6ea      	b.n	8001092 <__aeabi_ddiv+0x2ea>
 80012bc:	1e83      	subs	r3, r0, #2
 80012be:	1909      	adds	r1, r1, r4
 80012c0:	e6e7      	b.n	8001092 <__aeabi_ddiv+0x2ea>
 80012c2:	4a2a      	ldr	r2, [pc, #168]	; (800136c <__aeabi_ddiv+0x5c4>)
 80012c4:	0028      	movs	r0, r5
 80012c6:	445a      	add	r2, fp
 80012c8:	4643      	mov	r3, r8
 80012ca:	4095      	lsls	r5, r2
 80012cc:	4093      	lsls	r3, r2
 80012ce:	40c8      	lsrs	r0, r1
 80012d0:	1e6a      	subs	r2, r5, #1
 80012d2:	4195      	sbcs	r5, r2
 80012d4:	4644      	mov	r4, r8
 80012d6:	4303      	orrs	r3, r0
 80012d8:	432b      	orrs	r3, r5
 80012da:	40cc      	lsrs	r4, r1
 80012dc:	075a      	lsls	r2, r3, #29
 80012de:	d092      	beq.n	8001206 <__aeabi_ddiv+0x45e>
 80012e0:	220f      	movs	r2, #15
 80012e2:	401a      	ands	r2, r3
 80012e4:	2a04      	cmp	r2, #4
 80012e6:	d188      	bne.n	80011fa <__aeabi_ddiv+0x452>
 80012e8:	e78d      	b.n	8001206 <__aeabi_ddiv+0x45e>
 80012ea:	0035      	movs	r5, r6
 80012ec:	4281      	cmp	r1, r0
 80012ee:	d000      	beq.n	80012f2 <__aeabi_ddiv+0x54a>
 80012f0:	e74b      	b.n	800118a <__aeabi_ddiv+0x3e2>
 80012f2:	9a00      	ldr	r2, [sp, #0]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d000      	beq.n	80012fa <__aeabi_ddiv+0x552>
 80012f8:	e747      	b.n	800118a <__aeabi_ddiv+0x3e2>
 80012fa:	e618      	b.n	8000f2e <__aeabi_ddiv+0x186>
 80012fc:	42ae      	cmp	r6, r5
 80012fe:	d99c      	bls.n	800123a <__aeabi_ddiv+0x492>
 8001300:	2302      	movs	r3, #2
 8001302:	425b      	negs	r3, r3
 8001304:	469c      	mov	ip, r3
 8001306:	9b00      	ldr	r3, [sp, #0]
 8001308:	44e0      	add	r8, ip
 800130a:	469c      	mov	ip, r3
 800130c:	4465      	add	r5, ip
 800130e:	429d      	cmp	r5, r3
 8001310:	419b      	sbcs	r3, r3
 8001312:	425b      	negs	r3, r3
 8001314:	191b      	adds	r3, r3, r4
 8001316:	18c9      	adds	r1, r1, r3
 8001318:	e6e4      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 800131a:	4a15      	ldr	r2, [pc, #84]	; (8001370 <__aeabi_ddiv+0x5c8>)
 800131c:	445a      	add	r2, fp
 800131e:	2a00      	cmp	r2, #0
 8001320:	dc00      	bgt.n	8001324 <__aeabi_ddiv+0x57c>
 8001322:	e744      	b.n	80011ae <__aeabi_ddiv+0x406>
 8001324:	2301      	movs	r3, #1
 8001326:	2500      	movs	r5, #0
 8001328:	4498      	add	r8, r3
 800132a:	e609      	b.n	8000f40 <__aeabi_ddiv+0x198>
 800132c:	0765      	lsls	r5, r4, #29
 800132e:	0264      	lsls	r4, r4, #9
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	08db      	lsrs	r3, r3, #3
 8001334:	431d      	orrs	r5, r3
 8001336:	2300      	movs	r3, #0
 8001338:	e590      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 800133a:	9e00      	ldr	r6, [sp, #0]
 800133c:	3d02      	subs	r5, #2
 800133e:	0072      	lsls	r2, r6, #1
 8001340:	42b2      	cmp	r2, r6
 8001342:	41bf      	sbcs	r7, r7
 8001344:	427f      	negs	r7, r7
 8001346:	193c      	adds	r4, r7, r4
 8001348:	1909      	adds	r1, r1, r4
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	e7ce      	b.n	80012ec <__aeabi_ddiv+0x544>
 800134e:	2480      	movs	r4, #128	; 0x80
 8001350:	4643      	mov	r3, r8
 8001352:	0324      	lsls	r4, r4, #12
 8001354:	431c      	orrs	r4, r3
 8001356:	0324      	lsls	r4, r4, #12
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <__aeabi_ddiv+0x5cc>)
 800135a:	0b24      	lsrs	r4, r4, #12
 800135c:	e57e      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 800135e:	9a00      	ldr	r2, [sp, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d3ea      	bcc.n	800133a <__aeabi_ddiv+0x592>
 8001364:	0035      	movs	r5, r6
 8001366:	e7c4      	b.n	80012f2 <__aeabi_ddiv+0x54a>
 8001368:	0000043e 	.word	0x0000043e
 800136c:	0000041e 	.word	0x0000041e
 8001370:	000003ff 	.word	0x000003ff
 8001374:	000007ff 	.word	0x000007ff

08001378 <__eqdf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	464f      	mov	r7, r9
 800137c:	4646      	mov	r6, r8
 800137e:	46d6      	mov	lr, sl
 8001380:	4694      	mov	ip, r2
 8001382:	4691      	mov	r9, r2
 8001384:	031a      	lsls	r2, r3, #12
 8001386:	0b12      	lsrs	r2, r2, #12
 8001388:	4d18      	ldr	r5, [pc, #96]	; (80013ec <__eqdf2+0x74>)
 800138a:	b5c0      	push	{r6, r7, lr}
 800138c:	004c      	lsls	r4, r1, #1
 800138e:	030f      	lsls	r7, r1, #12
 8001390:	4692      	mov	sl, r2
 8001392:	005a      	lsls	r2, r3, #1
 8001394:	0006      	movs	r6, r0
 8001396:	4680      	mov	r8, r0
 8001398:	0b3f      	lsrs	r7, r7, #12
 800139a:	2001      	movs	r0, #1
 800139c:	0d64      	lsrs	r4, r4, #21
 800139e:	0fc9      	lsrs	r1, r1, #31
 80013a0:	0d52      	lsrs	r2, r2, #21
 80013a2:	0fdb      	lsrs	r3, r3, #31
 80013a4:	42ac      	cmp	r4, r5
 80013a6:	d00a      	beq.n	80013be <__eqdf2+0x46>
 80013a8:	42aa      	cmp	r2, r5
 80013aa:	d003      	beq.n	80013b4 <__eqdf2+0x3c>
 80013ac:	4294      	cmp	r4, r2
 80013ae:	d101      	bne.n	80013b4 <__eqdf2+0x3c>
 80013b0:	4557      	cmp	r7, sl
 80013b2:	d00d      	beq.n	80013d0 <__eqdf2+0x58>
 80013b4:	bce0      	pop	{r5, r6, r7}
 80013b6:	46ba      	mov	sl, r7
 80013b8:	46b1      	mov	r9, r6
 80013ba:	46a8      	mov	r8, r5
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	003d      	movs	r5, r7
 80013c0:	4335      	orrs	r5, r6
 80013c2:	d1f7      	bne.n	80013b4 <__eqdf2+0x3c>
 80013c4:	42a2      	cmp	r2, r4
 80013c6:	d1f5      	bne.n	80013b4 <__eqdf2+0x3c>
 80013c8:	4652      	mov	r2, sl
 80013ca:	4665      	mov	r5, ip
 80013cc:	432a      	orrs	r2, r5
 80013ce:	d1f1      	bne.n	80013b4 <__eqdf2+0x3c>
 80013d0:	2001      	movs	r0, #1
 80013d2:	45c8      	cmp	r8, r9
 80013d4:	d1ee      	bne.n	80013b4 <__eqdf2+0x3c>
 80013d6:	4299      	cmp	r1, r3
 80013d8:	d006      	beq.n	80013e8 <__eqdf2+0x70>
 80013da:	2c00      	cmp	r4, #0
 80013dc:	d1ea      	bne.n	80013b4 <__eqdf2+0x3c>
 80013de:	433e      	orrs	r6, r7
 80013e0:	0030      	movs	r0, r6
 80013e2:	1e46      	subs	r6, r0, #1
 80013e4:	41b0      	sbcs	r0, r6
 80013e6:	e7e5      	b.n	80013b4 <__eqdf2+0x3c>
 80013e8:	2000      	movs	r0, #0
 80013ea:	e7e3      	b.n	80013b4 <__eqdf2+0x3c>
 80013ec:	000007ff 	.word	0x000007ff

080013f0 <__gedf2>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	464e      	mov	r6, r9
 80013f4:	4645      	mov	r5, r8
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	0004      	movs	r4, r0
 80013fc:	0018      	movs	r0, r3
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	0016      	movs	r6, r2
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	0b1b      	lsrs	r3, r3, #12
 8001406:	4d32      	ldr	r5, [pc, #200]	; (80014d0 <__gedf2+0xe0>)
 8001408:	030f      	lsls	r7, r1, #12
 800140a:	004a      	lsls	r2, r1, #1
 800140c:	4699      	mov	r9, r3
 800140e:	0043      	lsls	r3, r0, #1
 8001410:	46a4      	mov	ip, r4
 8001412:	46b0      	mov	r8, r6
 8001414:	0b3f      	lsrs	r7, r7, #12
 8001416:	0d52      	lsrs	r2, r2, #21
 8001418:	0fc9      	lsrs	r1, r1, #31
 800141a:	0d5b      	lsrs	r3, r3, #21
 800141c:	0fc0      	lsrs	r0, r0, #31
 800141e:	42aa      	cmp	r2, r5
 8001420:	d029      	beq.n	8001476 <__gedf2+0x86>
 8001422:	42ab      	cmp	r3, r5
 8001424:	d018      	beq.n	8001458 <__gedf2+0x68>
 8001426:	2a00      	cmp	r2, #0
 8001428:	d12a      	bne.n	8001480 <__gedf2+0x90>
 800142a:	433c      	orrs	r4, r7
 800142c:	46a3      	mov	fp, r4
 800142e:	4265      	negs	r5, r4
 8001430:	4165      	adcs	r5, r4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <__gedf2+0x4c>
 8001436:	464c      	mov	r4, r9
 8001438:	4326      	orrs	r6, r4
 800143a:	d027      	beq.n	800148c <__gedf2+0x9c>
 800143c:	2d00      	cmp	r5, #0
 800143e:	d115      	bne.n	800146c <__gedf2+0x7c>
 8001440:	4281      	cmp	r1, r0
 8001442:	d028      	beq.n	8001496 <__gedf2+0xa6>
 8001444:	2002      	movs	r0, #2
 8001446:	3901      	subs	r1, #1
 8001448:	4008      	ands	r0, r1
 800144a:	3801      	subs	r0, #1
 800144c:	bcf0      	pop	{r4, r5, r6, r7}
 800144e:	46bb      	mov	fp, r7
 8001450:	46b2      	mov	sl, r6
 8001452:	46a9      	mov	r9, r5
 8001454:	46a0      	mov	r8, r4
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	464d      	mov	r5, r9
 800145a:	432e      	orrs	r6, r5
 800145c:	d12f      	bne.n	80014be <__gedf2+0xce>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d1ee      	bne.n	8001440 <__gedf2+0x50>
 8001462:	433c      	orrs	r4, r7
 8001464:	4265      	negs	r5, r4
 8001466:	4165      	adcs	r5, r4
 8001468:	2d00      	cmp	r5, #0
 800146a:	d0e9      	beq.n	8001440 <__gedf2+0x50>
 800146c:	2800      	cmp	r0, #0
 800146e:	d1ed      	bne.n	800144c <__gedf2+0x5c>
 8001470:	2001      	movs	r0, #1
 8001472:	4240      	negs	r0, r0
 8001474:	e7ea      	b.n	800144c <__gedf2+0x5c>
 8001476:	003d      	movs	r5, r7
 8001478:	4325      	orrs	r5, r4
 800147a:	d120      	bne.n	80014be <__gedf2+0xce>
 800147c:	4293      	cmp	r3, r2
 800147e:	d0eb      	beq.n	8001458 <__gedf2+0x68>
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1dd      	bne.n	8001440 <__gedf2+0x50>
 8001484:	464c      	mov	r4, r9
 8001486:	4326      	orrs	r6, r4
 8001488:	d1da      	bne.n	8001440 <__gedf2+0x50>
 800148a:	e7db      	b.n	8001444 <__gedf2+0x54>
 800148c:	465b      	mov	r3, fp
 800148e:	2000      	movs	r0, #0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0db      	beq.n	800144c <__gedf2+0x5c>
 8001494:	e7d6      	b.n	8001444 <__gedf2+0x54>
 8001496:	429a      	cmp	r2, r3
 8001498:	dc0a      	bgt.n	80014b0 <__gedf2+0xc0>
 800149a:	dbe7      	blt.n	800146c <__gedf2+0x7c>
 800149c:	454f      	cmp	r7, r9
 800149e:	d8d1      	bhi.n	8001444 <__gedf2+0x54>
 80014a0:	d010      	beq.n	80014c4 <__gedf2+0xd4>
 80014a2:	2000      	movs	r0, #0
 80014a4:	454f      	cmp	r7, r9
 80014a6:	d2d1      	bcs.n	800144c <__gedf2+0x5c>
 80014a8:	2900      	cmp	r1, #0
 80014aa:	d0e1      	beq.n	8001470 <__gedf2+0x80>
 80014ac:	0008      	movs	r0, r1
 80014ae:	e7cd      	b.n	800144c <__gedf2+0x5c>
 80014b0:	4243      	negs	r3, r0
 80014b2:	4158      	adcs	r0, r3
 80014b4:	2302      	movs	r3, #2
 80014b6:	4240      	negs	r0, r0
 80014b8:	4018      	ands	r0, r3
 80014ba:	3801      	subs	r0, #1
 80014bc:	e7c6      	b.n	800144c <__gedf2+0x5c>
 80014be:	2002      	movs	r0, #2
 80014c0:	4240      	negs	r0, r0
 80014c2:	e7c3      	b.n	800144c <__gedf2+0x5c>
 80014c4:	45c4      	cmp	ip, r8
 80014c6:	d8bd      	bhi.n	8001444 <__gedf2+0x54>
 80014c8:	2000      	movs	r0, #0
 80014ca:	45c4      	cmp	ip, r8
 80014cc:	d2be      	bcs.n	800144c <__gedf2+0x5c>
 80014ce:	e7eb      	b.n	80014a8 <__gedf2+0xb8>
 80014d0:	000007ff 	.word	0x000007ff

080014d4 <__ledf2>:
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	464e      	mov	r6, r9
 80014d8:	4645      	mov	r5, r8
 80014da:	4657      	mov	r7, sl
 80014dc:	46de      	mov	lr, fp
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	b5e0      	push	{r5, r6, r7, lr}
 80014e4:	0016      	movs	r6, r2
 80014e6:	031b      	lsls	r3, r3, #12
 80014e8:	0b1b      	lsrs	r3, r3, #12
 80014ea:	4d31      	ldr	r5, [pc, #196]	; (80015b0 <__ledf2+0xdc>)
 80014ec:	030f      	lsls	r7, r1, #12
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	0043      	lsls	r3, r0, #1
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d011      	beq.n	800152a <__ledf2+0x56>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d014      	beq.n	8001534 <__ledf2+0x60>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d12f      	bne.n	800156e <__ledf2+0x9a>
 800150e:	433c      	orrs	r4, r7
 8001510:	46a3      	mov	fp, r4
 8001512:	4265      	negs	r5, r4
 8001514:	4165      	adcs	r5, r4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d114      	bne.n	8001544 <__ledf2+0x70>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d111      	bne.n	8001544 <__ledf2+0x70>
 8001520:	465b      	mov	r3, fp
 8001522:	2000      	movs	r0, #0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d017      	beq.n	8001558 <__ledf2+0x84>
 8001528:	e010      	b.n	800154c <__ledf2+0x78>
 800152a:	003d      	movs	r5, r7
 800152c:	4325      	orrs	r5, r4
 800152e:	d112      	bne.n	8001556 <__ledf2+0x82>
 8001530:	4293      	cmp	r3, r2
 8001532:	d11c      	bne.n	800156e <__ledf2+0x9a>
 8001534:	464d      	mov	r5, r9
 8001536:	432e      	orrs	r6, r5
 8001538:	d10d      	bne.n	8001556 <__ledf2+0x82>
 800153a:	2a00      	cmp	r2, #0
 800153c:	d104      	bne.n	8001548 <__ledf2+0x74>
 800153e:	433c      	orrs	r4, r7
 8001540:	4265      	negs	r5, r4
 8001542:	4165      	adcs	r5, r4
 8001544:	2d00      	cmp	r5, #0
 8001546:	d10d      	bne.n	8001564 <__ledf2+0x90>
 8001548:	4281      	cmp	r1, r0
 800154a:	d016      	beq.n	800157a <__ledf2+0xa6>
 800154c:	2002      	movs	r0, #2
 800154e:	3901      	subs	r1, #1
 8001550:	4008      	ands	r0, r1
 8001552:	3801      	subs	r0, #1
 8001554:	e000      	b.n	8001558 <__ledf2+0x84>
 8001556:	2002      	movs	r0, #2
 8001558:	bcf0      	pop	{r4, r5, r6, r7}
 800155a:	46bb      	mov	fp, r7
 800155c:	46b2      	mov	sl, r6
 800155e:	46a9      	mov	r9, r5
 8001560:	46a0      	mov	r8, r4
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	2800      	cmp	r0, #0
 8001566:	d1f7      	bne.n	8001558 <__ledf2+0x84>
 8001568:	2001      	movs	r0, #1
 800156a:	4240      	negs	r0, r0
 800156c:	e7f4      	b.n	8001558 <__ledf2+0x84>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ea      	bne.n	8001548 <__ledf2+0x74>
 8001572:	464c      	mov	r4, r9
 8001574:	4326      	orrs	r6, r4
 8001576:	d1e7      	bne.n	8001548 <__ledf2+0x74>
 8001578:	e7e8      	b.n	800154c <__ledf2+0x78>
 800157a:	429a      	cmp	r2, r3
 800157c:	dd06      	ble.n	800158c <__ledf2+0xb8>
 800157e:	4243      	negs	r3, r0
 8001580:	4158      	adcs	r0, r3
 8001582:	2302      	movs	r3, #2
 8001584:	4240      	negs	r0, r0
 8001586:	4018      	ands	r0, r3
 8001588:	3801      	subs	r0, #1
 800158a:	e7e5      	b.n	8001558 <__ledf2+0x84>
 800158c:	429a      	cmp	r2, r3
 800158e:	dbe9      	blt.n	8001564 <__ledf2+0x90>
 8001590:	454f      	cmp	r7, r9
 8001592:	d8db      	bhi.n	800154c <__ledf2+0x78>
 8001594:	d006      	beq.n	80015a4 <__ledf2+0xd0>
 8001596:	2000      	movs	r0, #0
 8001598:	454f      	cmp	r7, r9
 800159a:	d2dd      	bcs.n	8001558 <__ledf2+0x84>
 800159c:	2900      	cmp	r1, #0
 800159e:	d0e3      	beq.n	8001568 <__ledf2+0x94>
 80015a0:	0008      	movs	r0, r1
 80015a2:	e7d9      	b.n	8001558 <__ledf2+0x84>
 80015a4:	45c4      	cmp	ip, r8
 80015a6:	d8d1      	bhi.n	800154c <__ledf2+0x78>
 80015a8:	2000      	movs	r0, #0
 80015aa:	45c4      	cmp	ip, r8
 80015ac:	d2d4      	bcs.n	8001558 <__ledf2+0x84>
 80015ae:	e7f5      	b.n	800159c <__ledf2+0xc8>
 80015b0:	000007ff 	.word	0x000007ff

080015b4 <__aeabi_dmul>:
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	4657      	mov	r7, sl
 80015b8:	464e      	mov	r6, r9
 80015ba:	4645      	mov	r5, r8
 80015bc:	46de      	mov	lr, fp
 80015be:	b5e0      	push	{r5, r6, r7, lr}
 80015c0:	4698      	mov	r8, r3
 80015c2:	030c      	lsls	r4, r1, #12
 80015c4:	004b      	lsls	r3, r1, #1
 80015c6:	0006      	movs	r6, r0
 80015c8:	4692      	mov	sl, r2
 80015ca:	b087      	sub	sp, #28
 80015cc:	0b24      	lsrs	r4, r4, #12
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fcf      	lsrs	r7, r1, #31
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d06c      	beq.n	80016b0 <__aeabi_dmul+0xfc>
 80015d6:	4add      	ldr	r2, [pc, #884]	; (800194c <__aeabi_dmul+0x398>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d100      	bne.n	80015de <__aeabi_dmul+0x2a>
 80015dc:	e086      	b.n	80016ec <__aeabi_dmul+0x138>
 80015de:	0f42      	lsrs	r2, r0, #29
 80015e0:	00e4      	lsls	r4, r4, #3
 80015e2:	4314      	orrs	r4, r2
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	0412      	lsls	r2, r2, #16
 80015e8:	4314      	orrs	r4, r2
 80015ea:	4ad9      	ldr	r2, [pc, #868]	; (8001950 <__aeabi_dmul+0x39c>)
 80015ec:	00c5      	lsls	r5, r0, #3
 80015ee:	4694      	mov	ip, r2
 80015f0:	4463      	add	r3, ip
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	4699      	mov	r9, r3
 80015f8:	469b      	mov	fp, r3
 80015fa:	4643      	mov	r3, r8
 80015fc:	4642      	mov	r2, r8
 80015fe:	031e      	lsls	r6, r3, #12
 8001600:	0fd2      	lsrs	r2, r2, #31
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4650      	mov	r0, sl
 8001606:	4690      	mov	r8, r2
 8001608:	0b36      	lsrs	r6, r6, #12
 800160a:	0d5b      	lsrs	r3, r3, #21
 800160c:	d100      	bne.n	8001610 <__aeabi_dmul+0x5c>
 800160e:	e078      	b.n	8001702 <__aeabi_dmul+0x14e>
 8001610:	4ace      	ldr	r2, [pc, #824]	; (800194c <__aeabi_dmul+0x398>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01d      	beq.n	8001652 <__aeabi_dmul+0x9e>
 8001616:	49ce      	ldr	r1, [pc, #824]	; (8001950 <__aeabi_dmul+0x39c>)
 8001618:	0f42      	lsrs	r2, r0, #29
 800161a:	468c      	mov	ip, r1
 800161c:	9900      	ldr	r1, [sp, #0]
 800161e:	4463      	add	r3, ip
 8001620:	00f6      	lsls	r6, r6, #3
 8001622:	468c      	mov	ip, r1
 8001624:	4316      	orrs	r6, r2
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	449c      	add	ip, r3
 800162a:	0412      	lsls	r2, r2, #16
 800162c:	4663      	mov	r3, ip
 800162e:	4316      	orrs	r6, r2
 8001630:	00c2      	lsls	r2, r0, #3
 8001632:	2000      	movs	r0, #0
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	9900      	ldr	r1, [sp, #0]
 8001638:	4643      	mov	r3, r8
 800163a:	3101      	adds	r1, #1
 800163c:	468c      	mov	ip, r1
 800163e:	4649      	mov	r1, r9
 8001640:	407b      	eors	r3, r7
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	290f      	cmp	r1, #15
 8001646:	d900      	bls.n	800164a <__aeabi_dmul+0x96>
 8001648:	e07e      	b.n	8001748 <__aeabi_dmul+0x194>
 800164a:	4bc2      	ldr	r3, [pc, #776]	; (8001954 <__aeabi_dmul+0x3a0>)
 800164c:	0089      	lsls	r1, r1, #2
 800164e:	5859      	ldr	r1, [r3, r1]
 8001650:	468f      	mov	pc, r1
 8001652:	4652      	mov	r2, sl
 8001654:	9b00      	ldr	r3, [sp, #0]
 8001656:	4332      	orrs	r2, r6
 8001658:	d000      	beq.n	800165c <__aeabi_dmul+0xa8>
 800165a:	e156      	b.n	800190a <__aeabi_dmul+0x356>
 800165c:	49bb      	ldr	r1, [pc, #748]	; (800194c <__aeabi_dmul+0x398>)
 800165e:	2600      	movs	r6, #0
 8001660:	468c      	mov	ip, r1
 8001662:	4463      	add	r3, ip
 8001664:	4649      	mov	r1, r9
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2302      	movs	r3, #2
 800166a:	4319      	orrs	r1, r3
 800166c:	4689      	mov	r9, r1
 800166e:	2002      	movs	r0, #2
 8001670:	e7e1      	b.n	8001636 <__aeabi_dmul+0x82>
 8001672:	4643      	mov	r3, r8
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	0034      	movs	r4, r6
 8001678:	0015      	movs	r5, r2
 800167a:	4683      	mov	fp, r0
 800167c:	465b      	mov	r3, fp
 800167e:	2b02      	cmp	r3, #2
 8001680:	d05e      	beq.n	8001740 <__aeabi_dmul+0x18c>
 8001682:	2b03      	cmp	r3, #3
 8001684:	d100      	bne.n	8001688 <__aeabi_dmul+0xd4>
 8001686:	e1f3      	b.n	8001a70 <__aeabi_dmul+0x4bc>
 8001688:	2b01      	cmp	r3, #1
 800168a:	d000      	beq.n	800168e <__aeabi_dmul+0xda>
 800168c:	e118      	b.n	80018c0 <__aeabi_dmul+0x30c>
 800168e:	2200      	movs	r2, #0
 8001690:	2400      	movs	r4, #0
 8001692:	2500      	movs	r5, #0
 8001694:	9b01      	ldr	r3, [sp, #4]
 8001696:	0512      	lsls	r2, r2, #20
 8001698:	4322      	orrs	r2, r4
 800169a:	07db      	lsls	r3, r3, #31
 800169c:	431a      	orrs	r2, r3
 800169e:	0028      	movs	r0, r5
 80016a0:	0011      	movs	r1, r2
 80016a2:	b007      	add	sp, #28
 80016a4:	bcf0      	pop	{r4, r5, r6, r7}
 80016a6:	46bb      	mov	fp, r7
 80016a8:	46b2      	mov	sl, r6
 80016aa:	46a9      	mov	r9, r5
 80016ac:	46a0      	mov	r8, r4
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b0:	0025      	movs	r5, r4
 80016b2:	4305      	orrs	r5, r0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x104>
 80016b6:	e141      	b.n	800193c <__aeabi_dmul+0x388>
 80016b8:	2c00      	cmp	r4, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x10a>
 80016bc:	e1ad      	b.n	8001a1a <__aeabi_dmul+0x466>
 80016be:	0020      	movs	r0, r4
 80016c0:	f000 fe02 	bl	80022c8 <__clzsi2>
 80016c4:	0001      	movs	r1, r0
 80016c6:	0002      	movs	r2, r0
 80016c8:	390b      	subs	r1, #11
 80016ca:	231d      	movs	r3, #29
 80016cc:	0010      	movs	r0, r2
 80016ce:	1a5b      	subs	r3, r3, r1
 80016d0:	0031      	movs	r1, r6
 80016d2:	0035      	movs	r5, r6
 80016d4:	3808      	subs	r0, #8
 80016d6:	4084      	lsls	r4, r0
 80016d8:	40d9      	lsrs	r1, r3
 80016da:	4085      	lsls	r5, r0
 80016dc:	430c      	orrs	r4, r1
 80016de:	489e      	ldr	r0, [pc, #632]	; (8001958 <__aeabi_dmul+0x3a4>)
 80016e0:	1a83      	subs	r3, r0, r2
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	4699      	mov	r9, r3
 80016e8:	469b      	mov	fp, r3
 80016ea:	e786      	b.n	80015fa <__aeabi_dmul+0x46>
 80016ec:	0005      	movs	r5, r0
 80016ee:	4325      	orrs	r5, r4
 80016f0:	d000      	beq.n	80016f4 <__aeabi_dmul+0x140>
 80016f2:	e11c      	b.n	800192e <__aeabi_dmul+0x37a>
 80016f4:	2208      	movs	r2, #8
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2302      	movs	r3, #2
 80016fa:	2400      	movs	r4, #0
 80016fc:	4691      	mov	r9, r2
 80016fe:	469b      	mov	fp, r3
 8001700:	e77b      	b.n	80015fa <__aeabi_dmul+0x46>
 8001702:	4652      	mov	r2, sl
 8001704:	4332      	orrs	r2, r6
 8001706:	d100      	bne.n	800170a <__aeabi_dmul+0x156>
 8001708:	e10a      	b.n	8001920 <__aeabi_dmul+0x36c>
 800170a:	2e00      	cmp	r6, #0
 800170c:	d100      	bne.n	8001710 <__aeabi_dmul+0x15c>
 800170e:	e176      	b.n	80019fe <__aeabi_dmul+0x44a>
 8001710:	0030      	movs	r0, r6
 8001712:	f000 fdd9 	bl	80022c8 <__clzsi2>
 8001716:	0002      	movs	r2, r0
 8001718:	3a0b      	subs	r2, #11
 800171a:	231d      	movs	r3, #29
 800171c:	0001      	movs	r1, r0
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	4652      	mov	r2, sl
 8001722:	3908      	subs	r1, #8
 8001724:	40da      	lsrs	r2, r3
 8001726:	408e      	lsls	r6, r1
 8001728:	4316      	orrs	r6, r2
 800172a:	4652      	mov	r2, sl
 800172c:	408a      	lsls	r2, r1
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	4989      	ldr	r1, [pc, #548]	; (8001958 <__aeabi_dmul+0x3a4>)
 8001732:	1a18      	subs	r0, r3, r0
 8001734:	0003      	movs	r3, r0
 8001736:	468c      	mov	ip, r1
 8001738:	4463      	add	r3, ip
 800173a:	2000      	movs	r0, #0
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	e77a      	b.n	8001636 <__aeabi_dmul+0x82>
 8001740:	2400      	movs	r4, #0
 8001742:	2500      	movs	r5, #0
 8001744:	4a81      	ldr	r2, [pc, #516]	; (800194c <__aeabi_dmul+0x398>)
 8001746:	e7a5      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001748:	0c2f      	lsrs	r7, r5, #16
 800174a:	042d      	lsls	r5, r5, #16
 800174c:	0c2d      	lsrs	r5, r5, #16
 800174e:	002b      	movs	r3, r5
 8001750:	0c11      	lsrs	r1, r2, #16
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	0c12      	lsrs	r2, r2, #16
 8001756:	4353      	muls	r3, r2
 8001758:	4698      	mov	r8, r3
 800175a:	0013      	movs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	437b      	muls	r3, r7
 8001760:	4699      	mov	r9, r3
 8001762:	4348      	muls	r0, r1
 8001764:	4448      	add	r0, r9
 8001766:	4683      	mov	fp, r0
 8001768:	4640      	mov	r0, r8
 800176a:	000b      	movs	r3, r1
 800176c:	0c00      	lsrs	r0, r0, #16
 800176e:	4682      	mov	sl, r0
 8001770:	4658      	mov	r0, fp
 8001772:	437b      	muls	r3, r7
 8001774:	4450      	add	r0, sl
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	4581      	cmp	r9, r0
 800177a:	d906      	bls.n	800178a <__aeabi_dmul+0x1d6>
 800177c:	469a      	mov	sl, r3
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	4699      	mov	r9, r3
 8001784:	44ca      	add	sl, r9
 8001786:	4653      	mov	r3, sl
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	0c03      	lsrs	r3, r0, #16
 800178c:	469b      	mov	fp, r3
 800178e:	4643      	mov	r3, r8
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	0400      	lsls	r0, r0, #16
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	4698      	mov	r8, r3
 8001798:	0003      	movs	r3, r0
 800179a:	4443      	add	r3, r8
 800179c:	9304      	str	r3, [sp, #16]
 800179e:	0c33      	lsrs	r3, r6, #16
 80017a0:	4699      	mov	r9, r3
 80017a2:	002b      	movs	r3, r5
 80017a4:	0436      	lsls	r6, r6, #16
 80017a6:	0c36      	lsrs	r6, r6, #16
 80017a8:	4373      	muls	r3, r6
 80017aa:	4698      	mov	r8, r3
 80017ac:	0033      	movs	r3, r6
 80017ae:	437b      	muls	r3, r7
 80017b0:	469a      	mov	sl, r3
 80017b2:	464b      	mov	r3, r9
 80017b4:	435d      	muls	r5, r3
 80017b6:	435f      	muls	r7, r3
 80017b8:	4643      	mov	r3, r8
 80017ba:	4455      	add	r5, sl
 80017bc:	0c18      	lsrs	r0, r3, #16
 80017be:	1940      	adds	r0, r0, r5
 80017c0:	4582      	cmp	sl, r0
 80017c2:	d903      	bls.n	80017cc <__aeabi_dmul+0x218>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	469a      	mov	sl, r3
 80017ca:	4457      	add	r7, sl
 80017cc:	0c05      	lsrs	r5, r0, #16
 80017ce:	19eb      	adds	r3, r5, r7
 80017d0:	9305      	str	r3, [sp, #20]
 80017d2:	4643      	mov	r3, r8
 80017d4:	041d      	lsls	r5, r3, #16
 80017d6:	0c2d      	lsrs	r5, r5, #16
 80017d8:	0400      	lsls	r0, r0, #16
 80017da:	1940      	adds	r0, r0, r5
 80017dc:	0c25      	lsrs	r5, r4, #16
 80017de:	0424      	lsls	r4, r4, #16
 80017e0:	0c24      	lsrs	r4, r4, #16
 80017e2:	0027      	movs	r7, r4
 80017e4:	4357      	muls	r7, r2
 80017e6:	436a      	muls	r2, r5
 80017e8:	4690      	mov	r8, r2
 80017ea:	002a      	movs	r2, r5
 80017ec:	0c3b      	lsrs	r3, r7, #16
 80017ee:	469a      	mov	sl, r3
 80017f0:	434a      	muls	r2, r1
 80017f2:	4361      	muls	r1, r4
 80017f4:	4441      	add	r1, r8
 80017f6:	4451      	add	r1, sl
 80017f8:	4483      	add	fp, r0
 80017fa:	4588      	cmp	r8, r1
 80017fc:	d903      	bls.n	8001806 <__aeabi_dmul+0x252>
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	4698      	mov	r8, r3
 8001804:	4442      	add	r2, r8
 8001806:	043f      	lsls	r7, r7, #16
 8001808:	0c0b      	lsrs	r3, r1, #16
 800180a:	0c3f      	lsrs	r7, r7, #16
 800180c:	0409      	lsls	r1, r1, #16
 800180e:	19c9      	adds	r1, r1, r7
 8001810:	0027      	movs	r7, r4
 8001812:	4698      	mov	r8, r3
 8001814:	464b      	mov	r3, r9
 8001816:	4377      	muls	r7, r6
 8001818:	435c      	muls	r4, r3
 800181a:	436e      	muls	r6, r5
 800181c:	435d      	muls	r5, r3
 800181e:	0c3b      	lsrs	r3, r7, #16
 8001820:	4699      	mov	r9, r3
 8001822:	19a4      	adds	r4, r4, r6
 8001824:	444c      	add	r4, r9
 8001826:	4442      	add	r2, r8
 8001828:	9503      	str	r5, [sp, #12]
 800182a:	42a6      	cmp	r6, r4
 800182c:	d904      	bls.n	8001838 <__aeabi_dmul+0x284>
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	025b      	lsls	r3, r3, #9
 8001832:	4698      	mov	r8, r3
 8001834:	4445      	add	r5, r8
 8001836:	9503      	str	r5, [sp, #12]
 8001838:	9b02      	ldr	r3, [sp, #8]
 800183a:	043f      	lsls	r7, r7, #16
 800183c:	445b      	add	r3, fp
 800183e:	001e      	movs	r6, r3
 8001840:	4283      	cmp	r3, r0
 8001842:	4180      	sbcs	r0, r0
 8001844:	0423      	lsls	r3, r4, #16
 8001846:	4698      	mov	r8, r3
 8001848:	9b05      	ldr	r3, [sp, #20]
 800184a:	0c3f      	lsrs	r7, r7, #16
 800184c:	4447      	add	r7, r8
 800184e:	4698      	mov	r8, r3
 8001850:	1876      	adds	r6, r6, r1
 8001852:	428e      	cmp	r6, r1
 8001854:	4189      	sbcs	r1, r1
 8001856:	4447      	add	r7, r8
 8001858:	4240      	negs	r0, r0
 800185a:	183d      	adds	r5, r7, r0
 800185c:	46a8      	mov	r8, r5
 800185e:	4693      	mov	fp, r2
 8001860:	4249      	negs	r1, r1
 8001862:	468a      	mov	sl, r1
 8001864:	44c3      	add	fp, r8
 8001866:	429f      	cmp	r7, r3
 8001868:	41bf      	sbcs	r7, r7
 800186a:	4580      	cmp	r8, r0
 800186c:	4180      	sbcs	r0, r0
 800186e:	9b03      	ldr	r3, [sp, #12]
 8001870:	44da      	add	sl, fp
 8001872:	4698      	mov	r8, r3
 8001874:	4653      	mov	r3, sl
 8001876:	4240      	negs	r0, r0
 8001878:	427f      	negs	r7, r7
 800187a:	4307      	orrs	r7, r0
 800187c:	0c24      	lsrs	r4, r4, #16
 800187e:	4593      	cmp	fp, r2
 8001880:	4192      	sbcs	r2, r2
 8001882:	458a      	cmp	sl, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	193f      	adds	r7, r7, r4
 8001888:	0ddc      	lsrs	r4, r3, #23
 800188a:	9b04      	ldr	r3, [sp, #16]
 800188c:	0275      	lsls	r5, r6, #9
 800188e:	431d      	orrs	r5, r3
 8001890:	1e68      	subs	r0, r5, #1
 8001892:	4185      	sbcs	r5, r0
 8001894:	4653      	mov	r3, sl
 8001896:	4252      	negs	r2, r2
 8001898:	4249      	negs	r1, r1
 800189a:	430a      	orrs	r2, r1
 800189c:	18bf      	adds	r7, r7, r2
 800189e:	4447      	add	r7, r8
 80018a0:	0df6      	lsrs	r6, r6, #23
 80018a2:	027f      	lsls	r7, r7, #9
 80018a4:	4335      	orrs	r5, r6
 80018a6:	025a      	lsls	r2, r3, #9
 80018a8:	433c      	orrs	r4, r7
 80018aa:	4315      	orrs	r5, r2
 80018ac:	01fb      	lsls	r3, r7, #7
 80018ae:	d400      	bmi.n	80018b2 <__aeabi_dmul+0x2fe>
 80018b0:	e0c1      	b.n	8001a36 <__aeabi_dmul+0x482>
 80018b2:	2101      	movs	r1, #1
 80018b4:	086a      	lsrs	r2, r5, #1
 80018b6:	400d      	ands	r5, r1
 80018b8:	4315      	orrs	r5, r2
 80018ba:	07e2      	lsls	r2, r4, #31
 80018bc:	4315      	orrs	r5, r2
 80018be:	0864      	lsrs	r4, r4, #1
 80018c0:	4926      	ldr	r1, [pc, #152]	; (800195c <__aeabi_dmul+0x3a8>)
 80018c2:	4461      	add	r1, ip
 80018c4:	2900      	cmp	r1, #0
 80018c6:	dd56      	ble.n	8001976 <__aeabi_dmul+0x3c2>
 80018c8:	076b      	lsls	r3, r5, #29
 80018ca:	d009      	beq.n	80018e0 <__aeabi_dmul+0x32c>
 80018cc:	220f      	movs	r2, #15
 80018ce:	402a      	ands	r2, r5
 80018d0:	2a04      	cmp	r2, #4
 80018d2:	d005      	beq.n	80018e0 <__aeabi_dmul+0x32c>
 80018d4:	1d2a      	adds	r2, r5, #4
 80018d6:	42aa      	cmp	r2, r5
 80018d8:	41ad      	sbcs	r5, r5
 80018da:	426d      	negs	r5, r5
 80018dc:	1964      	adds	r4, r4, r5
 80018de:	0015      	movs	r5, r2
 80018e0:	01e3      	lsls	r3, r4, #7
 80018e2:	d504      	bpl.n	80018ee <__aeabi_dmul+0x33a>
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <__aeabi_dmul+0x3ac>)
 80018e8:	00c9      	lsls	r1, r1, #3
 80018ea:	4014      	ands	r4, r2
 80018ec:	4461      	add	r1, ip
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <__aeabi_dmul+0x3b0>)
 80018f0:	4291      	cmp	r1, r2
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_dmul+0x342>
 80018f4:	e724      	b.n	8001740 <__aeabi_dmul+0x18c>
 80018f6:	0762      	lsls	r2, r4, #29
 80018f8:	08ed      	lsrs	r5, r5, #3
 80018fa:	0264      	lsls	r4, r4, #9
 80018fc:	0549      	lsls	r1, r1, #21
 80018fe:	4315      	orrs	r5, r2
 8001900:	0b24      	lsrs	r4, r4, #12
 8001902:	0d4a      	lsrs	r2, r1, #21
 8001904:	e6c6      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001906:	9701      	str	r7, [sp, #4]
 8001908:	e6b8      	b.n	800167c <__aeabi_dmul+0xc8>
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <__aeabi_dmul+0x398>)
 800190c:	2003      	movs	r0, #3
 800190e:	4694      	mov	ip, r2
 8001910:	4463      	add	r3, ip
 8001912:	464a      	mov	r2, r9
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2303      	movs	r3, #3
 8001918:	431a      	orrs	r2, r3
 800191a:	4691      	mov	r9, r2
 800191c:	4652      	mov	r2, sl
 800191e:	e68a      	b.n	8001636 <__aeabi_dmul+0x82>
 8001920:	4649      	mov	r1, r9
 8001922:	2301      	movs	r3, #1
 8001924:	4319      	orrs	r1, r3
 8001926:	4689      	mov	r9, r1
 8001928:	2600      	movs	r6, #0
 800192a:	2001      	movs	r0, #1
 800192c:	e683      	b.n	8001636 <__aeabi_dmul+0x82>
 800192e:	220c      	movs	r2, #12
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2303      	movs	r3, #3
 8001934:	0005      	movs	r5, r0
 8001936:	4691      	mov	r9, r2
 8001938:	469b      	mov	fp, r3
 800193a:	e65e      	b.n	80015fa <__aeabi_dmul+0x46>
 800193c:	2304      	movs	r3, #4
 800193e:	4699      	mov	r9, r3
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	2400      	movs	r4, #0
 8001948:	469b      	mov	fp, r3
 800194a:	e656      	b.n	80015fa <__aeabi_dmul+0x46>
 800194c:	000007ff 	.word	0x000007ff
 8001950:	fffffc01 	.word	0xfffffc01
 8001954:	08007860 	.word	0x08007860
 8001958:	fffffc0d 	.word	0xfffffc0d
 800195c:	000003ff 	.word	0x000003ff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	000007fe 	.word	0x000007fe
 8001968:	2300      	movs	r3, #0
 800196a:	2480      	movs	r4, #128	; 0x80
 800196c:	2500      	movs	r5, #0
 800196e:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <__aeabi_dmul+0x4cc>)
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	0324      	lsls	r4, r4, #12
 8001974:	e68e      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001976:	2001      	movs	r0, #1
 8001978:	1a40      	subs	r0, r0, r1
 800197a:	2838      	cmp	r0, #56	; 0x38
 800197c:	dd00      	ble.n	8001980 <__aeabi_dmul+0x3cc>
 800197e:	e686      	b.n	800168e <__aeabi_dmul+0xda>
 8001980:	281f      	cmp	r0, #31
 8001982:	dd5b      	ble.n	8001a3c <__aeabi_dmul+0x488>
 8001984:	221f      	movs	r2, #31
 8001986:	0023      	movs	r3, r4
 8001988:	4252      	negs	r2, r2
 800198a:	1a51      	subs	r1, r2, r1
 800198c:	40cb      	lsrs	r3, r1
 800198e:	0019      	movs	r1, r3
 8001990:	2820      	cmp	r0, #32
 8001992:	d003      	beq.n	800199c <__aeabi_dmul+0x3e8>
 8001994:	4a3b      	ldr	r2, [pc, #236]	; (8001a84 <__aeabi_dmul+0x4d0>)
 8001996:	4462      	add	r2, ip
 8001998:	4094      	lsls	r4, r2
 800199a:	4325      	orrs	r5, r4
 800199c:	1e6a      	subs	r2, r5, #1
 800199e:	4195      	sbcs	r5, r2
 80019a0:	002a      	movs	r2, r5
 80019a2:	430a      	orrs	r2, r1
 80019a4:	2107      	movs	r1, #7
 80019a6:	000d      	movs	r5, r1
 80019a8:	2400      	movs	r4, #0
 80019aa:	4015      	ands	r5, r2
 80019ac:	4211      	tst	r1, r2
 80019ae:	d05b      	beq.n	8001a68 <__aeabi_dmul+0x4b4>
 80019b0:	210f      	movs	r1, #15
 80019b2:	2400      	movs	r4, #0
 80019b4:	4011      	ands	r1, r2
 80019b6:	2904      	cmp	r1, #4
 80019b8:	d053      	beq.n	8001a62 <__aeabi_dmul+0x4ae>
 80019ba:	1d11      	adds	r1, r2, #4
 80019bc:	4291      	cmp	r1, r2
 80019be:	4192      	sbcs	r2, r2
 80019c0:	4252      	negs	r2, r2
 80019c2:	18a4      	adds	r4, r4, r2
 80019c4:	000a      	movs	r2, r1
 80019c6:	0223      	lsls	r3, r4, #8
 80019c8:	d54b      	bpl.n	8001a62 <__aeabi_dmul+0x4ae>
 80019ca:	2201      	movs	r2, #1
 80019cc:	2400      	movs	r4, #0
 80019ce:	2500      	movs	r5, #0
 80019d0:	e660      	b.n	8001694 <__aeabi_dmul+0xe0>
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	031b      	lsls	r3, r3, #12
 80019d6:	421c      	tst	r4, r3
 80019d8:	d009      	beq.n	80019ee <__aeabi_dmul+0x43a>
 80019da:	421e      	tst	r6, r3
 80019dc:	d107      	bne.n	80019ee <__aeabi_dmul+0x43a>
 80019de:	4333      	orrs	r3, r6
 80019e0:	031c      	lsls	r4, r3, #12
 80019e2:	4643      	mov	r3, r8
 80019e4:	0015      	movs	r5, r2
 80019e6:	0b24      	lsrs	r4, r4, #12
 80019e8:	4a25      	ldr	r2, [pc, #148]	; (8001a80 <__aeabi_dmul+0x4cc>)
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	e652      	b.n	8001694 <__aeabi_dmul+0xe0>
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	0312      	lsls	r2, r2, #12
 80019f2:	4314      	orrs	r4, r2
 80019f4:	0324      	lsls	r4, r4, #12
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <__aeabi_dmul+0x4cc>)
 80019f8:	0b24      	lsrs	r4, r4, #12
 80019fa:	9701      	str	r7, [sp, #4]
 80019fc:	e64a      	b.n	8001694 <__aeabi_dmul+0xe0>
 80019fe:	f000 fc63 	bl	80022c8 <__clzsi2>
 8001a02:	0003      	movs	r3, r0
 8001a04:	001a      	movs	r2, r3
 8001a06:	3215      	adds	r2, #21
 8001a08:	3020      	adds	r0, #32
 8001a0a:	2a1c      	cmp	r2, #28
 8001a0c:	dc00      	bgt.n	8001a10 <__aeabi_dmul+0x45c>
 8001a0e:	e684      	b.n	800171a <__aeabi_dmul+0x166>
 8001a10:	4656      	mov	r6, sl
 8001a12:	3b08      	subs	r3, #8
 8001a14:	2200      	movs	r2, #0
 8001a16:	409e      	lsls	r6, r3
 8001a18:	e689      	b.n	800172e <__aeabi_dmul+0x17a>
 8001a1a:	f000 fc55 	bl	80022c8 <__clzsi2>
 8001a1e:	0001      	movs	r1, r0
 8001a20:	0002      	movs	r2, r0
 8001a22:	3115      	adds	r1, #21
 8001a24:	3220      	adds	r2, #32
 8001a26:	291c      	cmp	r1, #28
 8001a28:	dc00      	bgt.n	8001a2c <__aeabi_dmul+0x478>
 8001a2a:	e64e      	b.n	80016ca <__aeabi_dmul+0x116>
 8001a2c:	0034      	movs	r4, r6
 8001a2e:	3808      	subs	r0, #8
 8001a30:	2500      	movs	r5, #0
 8001a32:	4084      	lsls	r4, r0
 8001a34:	e653      	b.n	80016de <__aeabi_dmul+0x12a>
 8001a36:	9b00      	ldr	r3, [sp, #0]
 8001a38:	469c      	mov	ip, r3
 8001a3a:	e741      	b.n	80018c0 <__aeabi_dmul+0x30c>
 8001a3c:	4912      	ldr	r1, [pc, #72]	; (8001a88 <__aeabi_dmul+0x4d4>)
 8001a3e:	0022      	movs	r2, r4
 8001a40:	4461      	add	r1, ip
 8001a42:	002e      	movs	r6, r5
 8001a44:	408d      	lsls	r5, r1
 8001a46:	408a      	lsls	r2, r1
 8001a48:	40c6      	lsrs	r6, r0
 8001a4a:	1e69      	subs	r1, r5, #1
 8001a4c:	418d      	sbcs	r5, r1
 8001a4e:	4332      	orrs	r2, r6
 8001a50:	432a      	orrs	r2, r5
 8001a52:	40c4      	lsrs	r4, r0
 8001a54:	0753      	lsls	r3, r2, #29
 8001a56:	d0b6      	beq.n	80019c6 <__aeabi_dmul+0x412>
 8001a58:	210f      	movs	r1, #15
 8001a5a:	4011      	ands	r1, r2
 8001a5c:	2904      	cmp	r1, #4
 8001a5e:	d1ac      	bne.n	80019ba <__aeabi_dmul+0x406>
 8001a60:	e7b1      	b.n	80019c6 <__aeabi_dmul+0x412>
 8001a62:	0765      	lsls	r5, r4, #29
 8001a64:	0264      	lsls	r4, r4, #9
 8001a66:	0b24      	lsrs	r4, r4, #12
 8001a68:	08d2      	lsrs	r2, r2, #3
 8001a6a:	4315      	orrs	r5, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	e611      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	0312      	lsls	r2, r2, #12
 8001a74:	4314      	orrs	r4, r2
 8001a76:	0324      	lsls	r4, r4, #12
 8001a78:	4a01      	ldr	r2, [pc, #4]	; (8001a80 <__aeabi_dmul+0x4cc>)
 8001a7a:	0b24      	lsrs	r4, r4, #12
 8001a7c:	e60a      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000007ff 	.word	0x000007ff
 8001a84:	0000043e 	.word	0x0000043e
 8001a88:	0000041e 	.word	0x0000041e

08001a8c <__aeabi_dsub>:
 8001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	464e      	mov	r6, r9
 8001a92:	4645      	mov	r5, r8
 8001a94:	46de      	mov	lr, fp
 8001a96:	0004      	movs	r4, r0
 8001a98:	b5e0      	push	{r5, r6, r7, lr}
 8001a9a:	001f      	movs	r7, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	030b      	lsls	r3, r1, #12
 8001aa0:	0f62      	lsrs	r2, r4, #29
 8001aa2:	004e      	lsls	r6, r1, #1
 8001aa4:	0fcd      	lsrs	r5, r1, #31
 8001aa6:	0a5b      	lsrs	r3, r3, #9
 8001aa8:	0339      	lsls	r1, r7, #12
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	0a49      	lsrs	r1, r1, #9
 8001aae:	00e2      	lsls	r2, r4, #3
 8001ab0:	0f44      	lsrs	r4, r0, #29
 8001ab2:	4321      	orrs	r1, r4
 8001ab4:	4cc2      	ldr	r4, [pc, #776]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	4692      	mov	sl, r2
 8001aba:	00c0      	lsls	r0, r0, #3
 8001abc:	007a      	lsls	r2, r7, #1
 8001abe:	4680      	mov	r8, r0
 8001ac0:	0d76      	lsrs	r6, r6, #21
 8001ac2:	0d52      	lsrs	r2, r2, #21
 8001ac4:	0fff      	lsrs	r7, r7, #31
 8001ac6:	42a2      	cmp	r2, r4
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x40>
 8001aca:	e0b4      	b.n	8001c36 <__aeabi_dsub+0x1aa>
 8001acc:	2401      	movs	r4, #1
 8001ace:	4067      	eors	r7, r4
 8001ad0:	46bb      	mov	fp, r7
 8001ad2:	42bd      	cmp	r5, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x4c>
 8001ad6:	e088      	b.n	8001bea <__aeabi_dsub+0x15e>
 8001ad8:	1ab4      	subs	r4, r6, r2
 8001ada:	46a4      	mov	ip, r4
 8001adc:	2c00      	cmp	r4, #0
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_dsub+0x56>
 8001ae0:	e0b2      	b.n	8001c48 <__aeabi_dsub+0x1bc>
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x5c>
 8001ae6:	e0c5      	b.n	8001c74 <__aeabi_dsub+0x1e8>
 8001ae8:	4ab5      	ldr	r2, [pc, #724]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001aea:	4296      	cmp	r6, r2
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x64>
 8001aee:	e28b      	b.n	8002008 <__aeabi_dsub+0x57c>
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	0412      	lsls	r2, r2, #16
 8001af4:	4311      	orrs	r1, r2
 8001af6:	4662      	mov	r2, ip
 8001af8:	2a38      	cmp	r2, #56	; 0x38
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dsub+0x72>
 8001afc:	e1a1      	b.n	8001e42 <__aeabi_dsub+0x3b6>
 8001afe:	2a1f      	cmp	r2, #31
 8001b00:	dd00      	ble.n	8001b04 <__aeabi_dsub+0x78>
 8001b02:	e216      	b.n	8001f32 <__aeabi_dsub+0x4a6>
 8001b04:	2720      	movs	r7, #32
 8001b06:	000c      	movs	r4, r1
 8001b08:	1abf      	subs	r7, r7, r2
 8001b0a:	40bc      	lsls	r4, r7
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	46a0      	mov	r8, r4
 8001b10:	4664      	mov	r4, ip
 8001b12:	40b8      	lsls	r0, r7
 8001b14:	40e2      	lsrs	r2, r4
 8001b16:	4644      	mov	r4, r8
 8001b18:	4314      	orrs	r4, r2
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	1e50      	subs	r0, r2, #1
 8001b1e:	4182      	sbcs	r2, r0
 8001b20:	4660      	mov	r0, ip
 8001b22:	40c1      	lsrs	r1, r0
 8001b24:	4322      	orrs	r2, r4
 8001b26:	1a5b      	subs	r3, r3, r1
 8001b28:	4649      	mov	r1, r9
 8001b2a:	1a8c      	subs	r4, r1, r2
 8001b2c:	45a1      	cmp	r9, r4
 8001b2e:	4192      	sbcs	r2, r2
 8001b30:	4252      	negs	r2, r2
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	4698      	mov	r8, r3
 8001b36:	4643      	mov	r3, r8
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	d400      	bmi.n	8001b3e <__aeabi_dsub+0xb2>
 8001b3c:	e117      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8001b3e:	4643      	mov	r3, r8
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	0a5b      	lsrs	r3, r3, #9
 8001b44:	4698      	mov	r8, r3
 8001b46:	4643      	mov	r3, r8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0xc2>
 8001b4c:	e16c      	b.n	8001e28 <__aeabi_dsub+0x39c>
 8001b4e:	4640      	mov	r0, r8
 8001b50:	f000 fbba 	bl	80022c8 <__clzsi2>
 8001b54:	0002      	movs	r2, r0
 8001b56:	3a08      	subs	r2, #8
 8001b58:	2120      	movs	r1, #32
 8001b5a:	0020      	movs	r0, r4
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	1a89      	subs	r1, r1, r2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	40c8      	lsrs	r0, r1
 8001b64:	4094      	lsls	r4, r2
 8001b66:	4303      	orrs	r3, r0
 8001b68:	4296      	cmp	r6, r2
 8001b6a:	dd00      	ble.n	8001b6e <__aeabi_dsub+0xe2>
 8001b6c:	e157      	b.n	8001e1e <__aeabi_dsub+0x392>
 8001b6e:	1b96      	subs	r6, r2, r6
 8001b70:	1c71      	adds	r1, r6, #1
 8001b72:	291f      	cmp	r1, #31
 8001b74:	dd00      	ble.n	8001b78 <__aeabi_dsub+0xec>
 8001b76:	e1cb      	b.n	8001f10 <__aeabi_dsub+0x484>
 8001b78:	2220      	movs	r2, #32
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	0026      	movs	r6, r4
 8001b7e:	1a52      	subs	r2, r2, r1
 8001b80:	4094      	lsls	r4, r2
 8001b82:	4090      	lsls	r0, r2
 8001b84:	40ce      	lsrs	r6, r1
 8001b86:	40cb      	lsrs	r3, r1
 8001b88:	1e62      	subs	r2, r4, #1
 8001b8a:	4194      	sbcs	r4, r2
 8001b8c:	4330      	orrs	r0, r6
 8001b8e:	4698      	mov	r8, r3
 8001b90:	2600      	movs	r6, #0
 8001b92:	4304      	orrs	r4, r0
 8001b94:	0763      	lsls	r3, r4, #29
 8001b96:	d009      	beq.n	8001bac <__aeabi_dsub+0x120>
 8001b98:	230f      	movs	r3, #15
 8001b9a:	4023      	ands	r3, r4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d005      	beq.n	8001bac <__aeabi_dsub+0x120>
 8001ba0:	1d23      	adds	r3, r4, #4
 8001ba2:	42a3      	cmp	r3, r4
 8001ba4:	41a4      	sbcs	r4, r4
 8001ba6:	4264      	negs	r4, r4
 8001ba8:	44a0      	add	r8, r4
 8001baa:	001c      	movs	r4, r3
 8001bac:	4643      	mov	r3, r8
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	d400      	bmi.n	8001bb4 <__aeabi_dsub+0x128>
 8001bb2:	e0df      	b.n	8001d74 <__aeabi_dsub+0x2e8>
 8001bb4:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001bb6:	3601      	adds	r6, #1
 8001bb8:	429e      	cmp	r6, r3
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x132>
 8001bbc:	e0fb      	b.n	8001db6 <__aeabi_dsub+0x32a>
 8001bbe:	4642      	mov	r2, r8
 8001bc0:	4b80      	ldr	r3, [pc, #512]	; (8001dc4 <__aeabi_dsub+0x338>)
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	0571      	lsls	r1, r6, #21
 8001bca:	0752      	lsls	r2, r2, #29
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	4322      	orrs	r2, r4
 8001bd0:	0b1b      	lsrs	r3, r3, #12
 8001bd2:	0d49      	lsrs	r1, r1, #21
 8001bd4:	0509      	lsls	r1, r1, #20
 8001bd6:	07ed      	lsls	r5, r5, #31
 8001bd8:	4319      	orrs	r1, r3
 8001bda:	4329      	orrs	r1, r5
 8001bdc:	0010      	movs	r0, r2
 8001bde:	bcf0      	pop	{r4, r5, r6, r7}
 8001be0:	46bb      	mov	fp, r7
 8001be2:	46b2      	mov	sl, r6
 8001be4:	46a9      	mov	r9, r5
 8001be6:	46a0      	mov	r8, r4
 8001be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bea:	1ab4      	subs	r4, r6, r2
 8001bec:	46a4      	mov	ip, r4
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	dd58      	ble.n	8001ca4 <__aeabi_dsub+0x218>
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x16c>
 8001bf6:	e09e      	b.n	8001d36 <__aeabi_dsub+0x2aa>
 8001bf8:	4a71      	ldr	r2, [pc, #452]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001bfa:	4296      	cmp	r6, r2
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x174>
 8001bfe:	e13b      	b.n	8001e78 <__aeabi_dsub+0x3ec>
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0412      	lsls	r2, r2, #16
 8001c04:	4311      	orrs	r1, r2
 8001c06:	4662      	mov	r2, ip
 8001c08:	2a38      	cmp	r2, #56	; 0x38
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_dsub+0x182>
 8001c0c:	e0c1      	b.n	8001d92 <__aeabi_dsub+0x306>
 8001c0e:	2a1f      	cmp	r2, #31
 8001c10:	dc00      	bgt.n	8001c14 <__aeabi_dsub+0x188>
 8001c12:	e1bb      	b.n	8001f8c <__aeabi_dsub+0x500>
 8001c14:	000c      	movs	r4, r1
 8001c16:	3a20      	subs	r2, #32
 8001c18:	40d4      	lsrs	r4, r2
 8001c1a:	0022      	movs	r2, r4
 8001c1c:	4664      	mov	r4, ip
 8001c1e:	2c20      	cmp	r4, #32
 8001c20:	d004      	beq.n	8001c2c <__aeabi_dsub+0x1a0>
 8001c22:	2740      	movs	r7, #64	; 0x40
 8001c24:	1b3f      	subs	r7, r7, r4
 8001c26:	40b9      	lsls	r1, r7
 8001c28:	4308      	orrs	r0, r1
 8001c2a:	4680      	mov	r8, r0
 8001c2c:	4644      	mov	r4, r8
 8001c2e:	1e61      	subs	r1, r4, #1
 8001c30:	418c      	sbcs	r4, r1
 8001c32:	4314      	orrs	r4, r2
 8001c34:	e0b1      	b.n	8001d9a <__aeabi_dsub+0x30e>
 8001c36:	000c      	movs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	d02a      	beq.n	8001c92 <__aeabi_dsub+0x206>
 8001c3c:	46bb      	mov	fp, r7
 8001c3e:	42bd      	cmp	r5, r7
 8001c40:	d02d      	beq.n	8001c9e <__aeabi_dsub+0x212>
 8001c42:	4c61      	ldr	r4, [pc, #388]	; (8001dc8 <__aeabi_dsub+0x33c>)
 8001c44:	46a4      	mov	ip, r4
 8001c46:	44b4      	add	ip, r6
 8001c48:	4664      	mov	r4, ip
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	d05c      	beq.n	8001d08 <__aeabi_dsub+0x27c>
 8001c4e:	1b94      	subs	r4, r2, r6
 8001c50:	46a4      	mov	ip, r4
 8001c52:	2e00      	cmp	r6, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x1cc>
 8001c56:	e115      	b.n	8001e84 <__aeabi_dsub+0x3f8>
 8001c58:	464d      	mov	r5, r9
 8001c5a:	431d      	orrs	r5, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1d4>
 8001c5e:	e1c3      	b.n	8001fe8 <__aeabi_dsub+0x55c>
 8001c60:	1e65      	subs	r5, r4, #1
 8001c62:	2c01      	cmp	r4, #1
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x1dc>
 8001c66:	e20c      	b.n	8002082 <__aeabi_dsub+0x5f6>
 8001c68:	4e55      	ldr	r6, [pc, #340]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001c6a:	42b4      	cmp	r4, r6
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x1e4>
 8001c6e:	e1f8      	b.n	8002062 <__aeabi_dsub+0x5d6>
 8001c70:	46ac      	mov	ip, r5
 8001c72:	e10e      	b.n	8001e92 <__aeabi_dsub+0x406>
 8001c74:	000a      	movs	r2, r1
 8001c76:	4302      	orrs	r2, r0
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1f0>
 8001c7a:	e136      	b.n	8001eea <__aeabi_dsub+0x45e>
 8001c7c:	0022      	movs	r2, r4
 8001c7e:	3a01      	subs	r2, #1
 8001c80:	2c01      	cmp	r4, #1
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x1fa>
 8001c84:	e1c6      	b.n	8002014 <__aeabi_dsub+0x588>
 8001c86:	4c4e      	ldr	r4, [pc, #312]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001c88:	45a4      	cmp	ip, r4
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x202>
 8001c8c:	e0f4      	b.n	8001e78 <__aeabi_dsub+0x3ec>
 8001c8e:	4694      	mov	ip, r2
 8001c90:	e731      	b.n	8001af6 <__aeabi_dsub+0x6a>
 8001c92:	2401      	movs	r4, #1
 8001c94:	4067      	eors	r7, r4
 8001c96:	46bb      	mov	fp, r7
 8001c98:	42bd      	cmp	r5, r7
 8001c9a:	d000      	beq.n	8001c9e <__aeabi_dsub+0x212>
 8001c9c:	e71c      	b.n	8001ad8 <__aeabi_dsub+0x4c>
 8001c9e:	4c4a      	ldr	r4, [pc, #296]	; (8001dc8 <__aeabi_dsub+0x33c>)
 8001ca0:	46a4      	mov	ip, r4
 8001ca2:	44b4      	add	ip, r6
 8001ca4:	4664      	mov	r4, ip
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x220>
 8001caa:	e0cf      	b.n	8001e4c <__aeabi_dsub+0x3c0>
 8001cac:	1b94      	subs	r4, r2, r6
 8001cae:	46a4      	mov	ip, r4
 8001cb0:	2e00      	cmp	r6, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x22a>
 8001cb4:	e15c      	b.n	8001f70 <__aeabi_dsub+0x4e4>
 8001cb6:	4e42      	ldr	r6, [pc, #264]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001cb8:	42b2      	cmp	r2, r6
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x232>
 8001cbc:	e1ec      	b.n	8002098 <__aeabi_dsub+0x60c>
 8001cbe:	2680      	movs	r6, #128	; 0x80
 8001cc0:	0436      	lsls	r6, r6, #16
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	4664      	mov	r4, ip
 8001cc6:	2c38      	cmp	r4, #56	; 0x38
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0x240>
 8001cca:	e1b3      	b.n	8002034 <__aeabi_dsub+0x5a8>
 8001ccc:	2c1f      	cmp	r4, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x246>
 8001cd0:	e238      	b.n	8002144 <__aeabi_dsub+0x6b8>
 8001cd2:	2620      	movs	r6, #32
 8001cd4:	1b36      	subs	r6, r6, r4
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	40b4      	lsls	r4, r6
 8001cda:	464f      	mov	r7, r9
 8001cdc:	46a0      	mov	r8, r4
 8001cde:	4664      	mov	r4, ip
 8001ce0:	40e7      	lsrs	r7, r4
 8001ce2:	4644      	mov	r4, r8
 8001ce4:	433c      	orrs	r4, r7
 8001ce6:	464f      	mov	r7, r9
 8001ce8:	40b7      	lsls	r7, r6
 8001cea:	003e      	movs	r6, r7
 8001cec:	1e77      	subs	r7, r6, #1
 8001cee:	41be      	sbcs	r6, r7
 8001cf0:	4334      	orrs	r4, r6
 8001cf2:	4666      	mov	r6, ip
 8001cf4:	40f3      	lsrs	r3, r6
 8001cf6:	18c9      	adds	r1, r1, r3
 8001cf8:	1824      	adds	r4, r4, r0
 8001cfa:	4284      	cmp	r4, r0
 8001cfc:	419b      	sbcs	r3, r3
 8001cfe:	425b      	negs	r3, r3
 8001d00:	4698      	mov	r8, r3
 8001d02:	0016      	movs	r6, r2
 8001d04:	4488      	add	r8, r1
 8001d06:	e04e      	b.n	8001da6 <__aeabi_dsub+0x31a>
 8001d08:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <__aeabi_dsub+0x340>)
 8001d0a:	1c74      	adds	r4, r6, #1
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x286>
 8001d10:	e0d6      	b.n	8001ec0 <__aeabi_dsub+0x434>
 8001d12:	464a      	mov	r2, r9
 8001d14:	431a      	orrs	r2, r3
 8001d16:	2e00      	cmp	r6, #0
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x290>
 8001d1a:	e15b      	b.n	8001fd4 <__aeabi_dsub+0x548>
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x296>
 8001d20:	e1a5      	b.n	800206e <__aeabi_dsub+0x5e2>
 8001d22:	000a      	movs	r2, r1
 8001d24:	4302      	orrs	r2, r0
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x29e>
 8001d28:	e1bb      	b.n	80020a2 <__aeabi_dsub+0x616>
 8001d2a:	464a      	mov	r2, r9
 8001d2c:	0759      	lsls	r1, r3, #29
 8001d2e:	08d2      	lsrs	r2, r2, #3
 8001d30:	430a      	orrs	r2, r1
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	e027      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8001d36:	000a      	movs	r2, r1
 8001d38:	4302      	orrs	r2, r0
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x2b2>
 8001d3c:	e174      	b.n	8002028 <__aeabi_dsub+0x59c>
 8001d3e:	0022      	movs	r2, r4
 8001d40:	3a01      	subs	r2, #1
 8001d42:	2c01      	cmp	r4, #1
 8001d44:	d005      	beq.n	8001d52 <__aeabi_dsub+0x2c6>
 8001d46:	4c1e      	ldr	r4, [pc, #120]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001d48:	45a4      	cmp	ip, r4
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x2c2>
 8001d4c:	e094      	b.n	8001e78 <__aeabi_dsub+0x3ec>
 8001d4e:	4694      	mov	ip, r2
 8001d50:	e759      	b.n	8001c06 <__aeabi_dsub+0x17a>
 8001d52:	4448      	add	r0, r9
 8001d54:	4548      	cmp	r0, r9
 8001d56:	4192      	sbcs	r2, r2
 8001d58:	185b      	adds	r3, r3, r1
 8001d5a:	4698      	mov	r8, r3
 8001d5c:	0004      	movs	r4, r0
 8001d5e:	4252      	negs	r2, r2
 8001d60:	4490      	add	r8, r2
 8001d62:	4643      	mov	r3, r8
 8001d64:	2602      	movs	r6, #2
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	d500      	bpl.n	8001d6c <__aeabi_dsub+0x2e0>
 8001d6a:	e0c4      	b.n	8001ef6 <__aeabi_dsub+0x46a>
 8001d6c:	3e01      	subs	r6, #1
 8001d6e:	0763      	lsls	r3, r4, #29
 8001d70:	d000      	beq.n	8001d74 <__aeabi_dsub+0x2e8>
 8001d72:	e711      	b.n	8001b98 <__aeabi_dsub+0x10c>
 8001d74:	4643      	mov	r3, r8
 8001d76:	46b4      	mov	ip, r6
 8001d78:	0759      	lsls	r1, r3, #29
 8001d7a:	08e2      	lsrs	r2, r4, #3
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	490f      	ldr	r1, [pc, #60]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001d82:	458c      	cmp	ip, r1
 8001d84:	d040      	beq.n	8001e08 <__aeabi_dsub+0x37c>
 8001d86:	4661      	mov	r1, ip
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0549      	lsls	r1, r1, #21
 8001d8c:	0b1b      	lsrs	r3, r3, #12
 8001d8e:	0d49      	lsrs	r1, r1, #21
 8001d90:	e720      	b.n	8001bd4 <__aeabi_dsub+0x148>
 8001d92:	4301      	orrs	r1, r0
 8001d94:	000c      	movs	r4, r1
 8001d96:	1e61      	subs	r1, r4, #1
 8001d98:	418c      	sbcs	r4, r1
 8001d9a:	444c      	add	r4, r9
 8001d9c:	454c      	cmp	r4, r9
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	4252      	negs	r2, r2
 8001da2:	4690      	mov	r8, r2
 8001da4:	4498      	add	r8, r3
 8001da6:	4643      	mov	r3, r8
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	d5e0      	bpl.n	8001d6e <__aeabi_dsub+0x2e2>
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001dae:	3601      	adds	r6, #1
 8001db0:	429e      	cmp	r6, r3
 8001db2:	d000      	beq.n	8001db6 <__aeabi_dsub+0x32a>
 8001db4:	e09f      	b.n	8001ef6 <__aeabi_dsub+0x46a>
 8001db6:	0031      	movs	r1, r6
 8001db8:	2300      	movs	r3, #0
 8001dba:	2200      	movs	r2, #0
 8001dbc:	e70a      	b.n	8001bd4 <__aeabi_dsub+0x148>
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	000007ff 	.word	0x000007ff
 8001dc4:	ff7fffff 	.word	0xff7fffff
 8001dc8:	fffff801 	.word	0xfffff801
 8001dcc:	000007fe 	.word	0x000007fe
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x34a>
 8001dd4:	e160      	b.n	8002098 <__aeabi_dsub+0x60c>
 8001dd6:	000a      	movs	r2, r1
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	d04d      	beq.n	8001e78 <__aeabi_dsub+0x3ec>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	075c      	lsls	r4, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	4322      	orrs	r2, r4
 8001de4:	2480      	movs	r4, #128	; 0x80
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	0324      	lsls	r4, r4, #12
 8001dea:	4223      	tst	r3, r4
 8001dec:	d007      	beq.n	8001dfe <__aeabi_dsub+0x372>
 8001dee:	08ce      	lsrs	r6, r1, #3
 8001df0:	4226      	tst	r6, r4
 8001df2:	d104      	bne.n	8001dfe <__aeabi_dsub+0x372>
 8001df4:	465d      	mov	r5, fp
 8001df6:	0033      	movs	r3, r6
 8001df8:	08c2      	lsrs	r2, r0, #3
 8001dfa:	0749      	lsls	r1, r1, #29
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	0f51      	lsrs	r1, r2, #29
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	08d2      	lsrs	r2, r2, #3
 8001e04:	0749      	lsls	r1, r1, #29
 8001e06:	430a      	orrs	r2, r1
 8001e08:	0011      	movs	r1, r2
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x384>
 8001e0e:	e1c8      	b.n	80021a2 <__aeabi_dsub+0x716>
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0309      	lsls	r1, r1, #12
 8001e14:	430b      	orrs	r3, r1
 8001e16:	031b      	lsls	r3, r3, #12
 8001e18:	49d5      	ldr	r1, [pc, #852]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001e1a:	0b1b      	lsrs	r3, r3, #12
 8001e1c:	e6da      	b.n	8001bd4 <__aeabi_dsub+0x148>
 8001e1e:	49d5      	ldr	r1, [pc, #852]	; (8002174 <__aeabi_dsub+0x6e8>)
 8001e20:	1ab6      	subs	r6, r6, r2
 8001e22:	400b      	ands	r3, r1
 8001e24:	4698      	mov	r8, r3
 8001e26:	e6b5      	b.n	8001b94 <__aeabi_dsub+0x108>
 8001e28:	0020      	movs	r0, r4
 8001e2a:	f000 fa4d 	bl	80022c8 <__clzsi2>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	3218      	adds	r2, #24
 8001e32:	2a1f      	cmp	r2, #31
 8001e34:	dc00      	bgt.n	8001e38 <__aeabi_dsub+0x3ac>
 8001e36:	e68f      	b.n	8001b58 <__aeabi_dsub+0xcc>
 8001e38:	0023      	movs	r3, r4
 8001e3a:	3808      	subs	r0, #8
 8001e3c:	4083      	lsls	r3, r0
 8001e3e:	2400      	movs	r4, #0
 8001e40:	e692      	b.n	8001b68 <__aeabi_dsub+0xdc>
 8001e42:	4308      	orrs	r0, r1
 8001e44:	0002      	movs	r2, r0
 8001e46:	1e50      	subs	r0, r2, #1
 8001e48:	4182      	sbcs	r2, r0
 8001e4a:	e66d      	b.n	8001b28 <__aeabi_dsub+0x9c>
 8001e4c:	4cca      	ldr	r4, [pc, #808]	; (8002178 <__aeabi_dsub+0x6ec>)
 8001e4e:	1c72      	adds	r2, r6, #1
 8001e50:	4222      	tst	r2, r4
 8001e52:	d000      	beq.n	8001e56 <__aeabi_dsub+0x3ca>
 8001e54:	e0ad      	b.n	8001fb2 <__aeabi_dsub+0x526>
 8001e56:	464a      	mov	r2, r9
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	2e00      	cmp	r6, #0
 8001e5c:	d1b8      	bne.n	8001dd0 <__aeabi_dsub+0x344>
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x3d8>
 8001e62:	e158      	b.n	8002116 <__aeabi_dsub+0x68a>
 8001e64:	000a      	movs	r2, r1
 8001e66:	4302      	orrs	r2, r0
 8001e68:	d000      	beq.n	8001e6c <__aeabi_dsub+0x3e0>
 8001e6a:	e159      	b.n	8002120 <__aeabi_dsub+0x694>
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	0759      	lsls	r1, r3, #29
 8001e70:	08d2      	lsrs	r2, r2, #3
 8001e72:	430a      	orrs	r2, r1
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	e786      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8001e78:	464a      	mov	r2, r9
 8001e7a:	0759      	lsls	r1, r3, #29
 8001e7c:	08d2      	lsrs	r2, r2, #3
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	e7c1      	b.n	8001e08 <__aeabi_dsub+0x37c>
 8001e84:	4dba      	ldr	r5, [pc, #744]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001e86:	42aa      	cmp	r2, r5
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x400>
 8001e8a:	e11e      	b.n	80020ca <__aeabi_dsub+0x63e>
 8001e8c:	2580      	movs	r5, #128	; 0x80
 8001e8e:	042d      	lsls	r5, r5, #16
 8001e90:	432b      	orrs	r3, r5
 8001e92:	4664      	mov	r4, ip
 8001e94:	2c38      	cmp	r4, #56	; 0x38
 8001e96:	dc5d      	bgt.n	8001f54 <__aeabi_dsub+0x4c8>
 8001e98:	2c1f      	cmp	r4, #31
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_dsub+0x412>
 8001e9c:	e0d0      	b.n	8002040 <__aeabi_dsub+0x5b4>
 8001e9e:	2520      	movs	r5, #32
 8001ea0:	4667      	mov	r7, ip
 8001ea2:	1b2d      	subs	r5, r5, r4
 8001ea4:	464e      	mov	r6, r9
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	40fe      	lsrs	r6, r7
 8001eaa:	40ac      	lsls	r4, r5
 8001eac:	4334      	orrs	r4, r6
 8001eae:	464e      	mov	r6, r9
 8001eb0:	40ae      	lsls	r6, r5
 8001eb2:	0035      	movs	r5, r6
 8001eb4:	40fb      	lsrs	r3, r7
 8001eb6:	1e6e      	subs	r6, r5, #1
 8001eb8:	41b5      	sbcs	r5, r6
 8001eba:	1ac9      	subs	r1, r1, r3
 8001ebc:	432c      	orrs	r4, r5
 8001ebe:	e04e      	b.n	8001f5e <__aeabi_dsub+0x4d2>
 8001ec0:	464a      	mov	r2, r9
 8001ec2:	1a14      	subs	r4, r2, r0
 8001ec4:	45a1      	cmp	r9, r4
 8001ec6:	4192      	sbcs	r2, r2
 8001ec8:	4252      	negs	r2, r2
 8001eca:	4690      	mov	r8, r2
 8001ecc:	1a5f      	subs	r7, r3, r1
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4647      	mov	r7, r8
 8001ed2:	1bd2      	subs	r2, r2, r7
 8001ed4:	4690      	mov	r8, r2
 8001ed6:	0212      	lsls	r2, r2, #8
 8001ed8:	d500      	bpl.n	8001edc <__aeabi_dsub+0x450>
 8001eda:	e08b      	b.n	8001ff4 <__aeabi_dsub+0x568>
 8001edc:	4642      	mov	r2, r8
 8001ede:	4322      	orrs	r2, r4
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x458>
 8001ee2:	e630      	b.n	8001b46 <__aeabi_dsub+0xba>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	e74d      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8001eea:	464a      	mov	r2, r9
 8001eec:	0759      	lsls	r1, r3, #29
 8001eee:	08d2      	lsrs	r2, r2, #3
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	e744      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 8001ef6:	4642      	mov	r2, r8
 8001ef8:	4b9e      	ldr	r3, [pc, #632]	; (8002174 <__aeabi_dsub+0x6e8>)
 8001efa:	0861      	lsrs	r1, r4, #1
 8001efc:	401a      	ands	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	2201      	movs	r2, #1
 8001f02:	4014      	ands	r4, r2
 8001f04:	430c      	orrs	r4, r1
 8001f06:	07da      	lsls	r2, r3, #31
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	4314      	orrs	r4, r2
 8001f0e:	e641      	b.n	8001b94 <__aeabi_dsub+0x108>
 8001f10:	001a      	movs	r2, r3
 8001f12:	3e1f      	subs	r6, #31
 8001f14:	40f2      	lsrs	r2, r6
 8001f16:	0016      	movs	r6, r2
 8001f18:	2920      	cmp	r1, #32
 8001f1a:	d003      	beq.n	8001f24 <__aeabi_dsub+0x498>
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	1a51      	subs	r1, r2, r1
 8001f20:	408b      	lsls	r3, r1
 8001f22:	431c      	orrs	r4, r3
 8001f24:	1e62      	subs	r2, r4, #1
 8001f26:	4194      	sbcs	r4, r2
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4334      	orrs	r4, r6
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	2600      	movs	r6, #0
 8001f30:	e71d      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8001f32:	000c      	movs	r4, r1
 8001f34:	3a20      	subs	r2, #32
 8001f36:	40d4      	lsrs	r4, r2
 8001f38:	0022      	movs	r2, r4
 8001f3a:	4664      	mov	r4, ip
 8001f3c:	2c20      	cmp	r4, #32
 8001f3e:	d004      	beq.n	8001f4a <__aeabi_dsub+0x4be>
 8001f40:	2740      	movs	r7, #64	; 0x40
 8001f42:	1b3f      	subs	r7, r7, r4
 8001f44:	40b9      	lsls	r1, r7
 8001f46:	4308      	orrs	r0, r1
 8001f48:	4680      	mov	r8, r0
 8001f4a:	4644      	mov	r4, r8
 8001f4c:	1e61      	subs	r1, r4, #1
 8001f4e:	418c      	sbcs	r4, r1
 8001f50:	4322      	orrs	r2, r4
 8001f52:	e5e9      	b.n	8001b28 <__aeabi_dsub+0x9c>
 8001f54:	464c      	mov	r4, r9
 8001f56:	4323      	orrs	r3, r4
 8001f58:	001c      	movs	r4, r3
 8001f5a:	1e63      	subs	r3, r4, #1
 8001f5c:	419c      	sbcs	r4, r3
 8001f5e:	1b04      	subs	r4, r0, r4
 8001f60:	42a0      	cmp	r0, r4
 8001f62:	419b      	sbcs	r3, r3
 8001f64:	425b      	negs	r3, r3
 8001f66:	1acb      	subs	r3, r1, r3
 8001f68:	4698      	mov	r8, r3
 8001f6a:	465d      	mov	r5, fp
 8001f6c:	0016      	movs	r6, r2
 8001f6e:	e5e2      	b.n	8001b36 <__aeabi_dsub+0xaa>
 8001f70:	464e      	mov	r6, r9
 8001f72:	431e      	orrs	r6, r3
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x4ec>
 8001f76:	e0ae      	b.n	80020d6 <__aeabi_dsub+0x64a>
 8001f78:	1e66      	subs	r6, r4, #1
 8001f7a:	2c01      	cmp	r4, #1
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x4f4>
 8001f7e:	e0fd      	b.n	800217c <__aeabi_dsub+0x6f0>
 8001f80:	4f7b      	ldr	r7, [pc, #492]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001f82:	42bc      	cmp	r4, r7
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4fc>
 8001f86:	e107      	b.n	8002198 <__aeabi_dsub+0x70c>
 8001f88:	46b4      	mov	ip, r6
 8001f8a:	e69b      	b.n	8001cc4 <__aeabi_dsub+0x238>
 8001f8c:	4664      	mov	r4, ip
 8001f8e:	2220      	movs	r2, #32
 8001f90:	1b12      	subs	r2, r2, r4
 8001f92:	000c      	movs	r4, r1
 8001f94:	4094      	lsls	r4, r2
 8001f96:	0007      	movs	r7, r0
 8001f98:	4090      	lsls	r0, r2
 8001f9a:	46a0      	mov	r8, r4
 8001f9c:	4664      	mov	r4, ip
 8001f9e:	1e42      	subs	r2, r0, #1
 8001fa0:	4190      	sbcs	r0, r2
 8001fa2:	4662      	mov	r2, ip
 8001fa4:	40e7      	lsrs	r7, r4
 8001fa6:	4644      	mov	r4, r8
 8001fa8:	40d1      	lsrs	r1, r2
 8001faa:	433c      	orrs	r4, r7
 8001fac:	4304      	orrs	r4, r0
 8001fae:	185b      	adds	r3, r3, r1
 8001fb0:	e6f3      	b.n	8001d9a <__aeabi_dsub+0x30e>
 8001fb2:	4c6f      	ldr	r4, [pc, #444]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x52e>
 8001fb8:	e0d5      	b.n	8002166 <__aeabi_dsub+0x6da>
 8001fba:	4448      	add	r0, r9
 8001fbc:	185b      	adds	r3, r3, r1
 8001fbe:	4548      	cmp	r0, r9
 8001fc0:	4189      	sbcs	r1, r1
 8001fc2:	4249      	negs	r1, r1
 8001fc4:	185b      	adds	r3, r3, r1
 8001fc6:	07dc      	lsls	r4, r3, #31
 8001fc8:	0840      	lsrs	r0, r0, #1
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	4698      	mov	r8, r3
 8001fce:	0016      	movs	r6, r2
 8001fd0:	4304      	orrs	r4, r0
 8001fd2:	e6cc      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d000      	beq.n	8001fda <__aeabi_dsub+0x54e>
 8001fd8:	e082      	b.n	80020e0 <__aeabi_dsub+0x654>
 8001fda:	000a      	movs	r2, r1
 8001fdc:	4302      	orrs	r2, r0
 8001fde:	d140      	bne.n	8002062 <__aeabi_dsub+0x5d6>
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	2500      	movs	r5, #0
 8001fe4:	031b      	lsls	r3, r3, #12
 8001fe6:	e713      	b.n	8001e10 <__aeabi_dsub+0x384>
 8001fe8:	074b      	lsls	r3, r1, #29
 8001fea:	08c2      	lsrs	r2, r0, #3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	465d      	mov	r5, fp
 8001ff0:	08cb      	lsrs	r3, r1, #3
 8001ff2:	e6c5      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 8001ff4:	464a      	mov	r2, r9
 8001ff6:	1a84      	subs	r4, r0, r2
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	4192      	sbcs	r2, r2
 8001ffc:	1acb      	subs	r3, r1, r3
 8001ffe:	4252      	negs	r2, r2
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	4698      	mov	r8, r3
 8002004:	465d      	mov	r5, fp
 8002006:	e59e      	b.n	8001b46 <__aeabi_dsub+0xba>
 8002008:	464a      	mov	r2, r9
 800200a:	0759      	lsls	r1, r3, #29
 800200c:	08d2      	lsrs	r2, r2, #3
 800200e:	430a      	orrs	r2, r1
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	e6f9      	b.n	8001e08 <__aeabi_dsub+0x37c>
 8002014:	464a      	mov	r2, r9
 8002016:	1a14      	subs	r4, r2, r0
 8002018:	45a1      	cmp	r9, r4
 800201a:	4192      	sbcs	r2, r2
 800201c:	1a5b      	subs	r3, r3, r1
 800201e:	4252      	negs	r2, r2
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	4698      	mov	r8, r3
 8002024:	2601      	movs	r6, #1
 8002026:	e586      	b.n	8001b36 <__aeabi_dsub+0xaa>
 8002028:	464a      	mov	r2, r9
 800202a:	0759      	lsls	r1, r3, #29
 800202c:	08d2      	lsrs	r2, r2, #3
 800202e:	430a      	orrs	r2, r1
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	e6a5      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 8002034:	464c      	mov	r4, r9
 8002036:	4323      	orrs	r3, r4
 8002038:	001c      	movs	r4, r3
 800203a:	1e63      	subs	r3, r4, #1
 800203c:	419c      	sbcs	r4, r3
 800203e:	e65b      	b.n	8001cf8 <__aeabi_dsub+0x26c>
 8002040:	4665      	mov	r5, ip
 8002042:	001e      	movs	r6, r3
 8002044:	3d20      	subs	r5, #32
 8002046:	40ee      	lsrs	r6, r5
 8002048:	2c20      	cmp	r4, #32
 800204a:	d005      	beq.n	8002058 <__aeabi_dsub+0x5cc>
 800204c:	2540      	movs	r5, #64	; 0x40
 800204e:	1b2d      	subs	r5, r5, r4
 8002050:	40ab      	lsls	r3, r5
 8002052:	464c      	mov	r4, r9
 8002054:	431c      	orrs	r4, r3
 8002056:	46a2      	mov	sl, r4
 8002058:	4654      	mov	r4, sl
 800205a:	1e63      	subs	r3, r4, #1
 800205c:	419c      	sbcs	r4, r3
 800205e:	4334      	orrs	r4, r6
 8002060:	e77d      	b.n	8001f5e <__aeabi_dsub+0x4d2>
 8002062:	074b      	lsls	r3, r1, #29
 8002064:	08c2      	lsrs	r2, r0, #3
 8002066:	431a      	orrs	r2, r3
 8002068:	465d      	mov	r5, fp
 800206a:	08cb      	lsrs	r3, r1, #3
 800206c:	e6cc      	b.n	8001e08 <__aeabi_dsub+0x37c>
 800206e:	000a      	movs	r2, r1
 8002070:	4302      	orrs	r2, r0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x5ea>
 8002074:	e736      	b.n	8001ee4 <__aeabi_dsub+0x458>
 8002076:	074b      	lsls	r3, r1, #29
 8002078:	08c2      	lsrs	r2, r0, #3
 800207a:	431a      	orrs	r2, r3
 800207c:	465d      	mov	r5, fp
 800207e:	08cb      	lsrs	r3, r1, #3
 8002080:	e681      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8002082:	464a      	mov	r2, r9
 8002084:	1a84      	subs	r4, r0, r2
 8002086:	42a0      	cmp	r0, r4
 8002088:	4192      	sbcs	r2, r2
 800208a:	1acb      	subs	r3, r1, r3
 800208c:	4252      	negs	r2, r2
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	4698      	mov	r8, r3
 8002092:	465d      	mov	r5, fp
 8002094:	2601      	movs	r6, #1
 8002096:	e54e      	b.n	8001b36 <__aeabi_dsub+0xaa>
 8002098:	074b      	lsls	r3, r1, #29
 800209a:	08c2      	lsrs	r2, r0, #3
 800209c:	431a      	orrs	r2, r3
 800209e:	08cb      	lsrs	r3, r1, #3
 80020a0:	e6b2      	b.n	8001e08 <__aeabi_dsub+0x37c>
 80020a2:	464a      	mov	r2, r9
 80020a4:	1a14      	subs	r4, r2, r0
 80020a6:	45a1      	cmp	r9, r4
 80020a8:	4192      	sbcs	r2, r2
 80020aa:	1a5f      	subs	r7, r3, r1
 80020ac:	4252      	negs	r2, r2
 80020ae:	1aba      	subs	r2, r7, r2
 80020b0:	4690      	mov	r8, r2
 80020b2:	0212      	lsls	r2, r2, #8
 80020b4:	d56b      	bpl.n	800218e <__aeabi_dsub+0x702>
 80020b6:	464a      	mov	r2, r9
 80020b8:	1a84      	subs	r4, r0, r2
 80020ba:	42a0      	cmp	r0, r4
 80020bc:	4192      	sbcs	r2, r2
 80020be:	1acb      	subs	r3, r1, r3
 80020c0:	4252      	negs	r2, r2
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	4698      	mov	r8, r3
 80020c6:	465d      	mov	r5, fp
 80020c8:	e564      	b.n	8001b94 <__aeabi_dsub+0x108>
 80020ca:	074b      	lsls	r3, r1, #29
 80020cc:	08c2      	lsrs	r2, r0, #3
 80020ce:	431a      	orrs	r2, r3
 80020d0:	465d      	mov	r5, fp
 80020d2:	08cb      	lsrs	r3, r1, #3
 80020d4:	e698      	b.n	8001e08 <__aeabi_dsub+0x37c>
 80020d6:	074b      	lsls	r3, r1, #29
 80020d8:	08c2      	lsrs	r2, r0, #3
 80020da:	431a      	orrs	r2, r3
 80020dc:	08cb      	lsrs	r3, r1, #3
 80020de:	e64f      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 80020e0:	000a      	movs	r2, r1
 80020e2:	4302      	orrs	r2, r0
 80020e4:	d090      	beq.n	8002008 <__aeabi_dsub+0x57c>
 80020e6:	464a      	mov	r2, r9
 80020e8:	075c      	lsls	r4, r3, #29
 80020ea:	08d2      	lsrs	r2, r2, #3
 80020ec:	4314      	orrs	r4, r2
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	0312      	lsls	r2, r2, #12
 80020f4:	4213      	tst	r3, r2
 80020f6:	d008      	beq.n	800210a <__aeabi_dsub+0x67e>
 80020f8:	08ce      	lsrs	r6, r1, #3
 80020fa:	4216      	tst	r6, r2
 80020fc:	d105      	bne.n	800210a <__aeabi_dsub+0x67e>
 80020fe:	08c0      	lsrs	r0, r0, #3
 8002100:	0749      	lsls	r1, r1, #29
 8002102:	4308      	orrs	r0, r1
 8002104:	0004      	movs	r4, r0
 8002106:	465d      	mov	r5, fp
 8002108:	0033      	movs	r3, r6
 800210a:	0f61      	lsrs	r1, r4, #29
 800210c:	00e2      	lsls	r2, r4, #3
 800210e:	0749      	lsls	r1, r1, #29
 8002110:	08d2      	lsrs	r2, r2, #3
 8002112:	430a      	orrs	r2, r1
 8002114:	e678      	b.n	8001e08 <__aeabi_dsub+0x37c>
 8002116:	074b      	lsls	r3, r1, #29
 8002118:	08c2      	lsrs	r2, r0, #3
 800211a:	431a      	orrs	r2, r3
 800211c:	08cb      	lsrs	r3, r1, #3
 800211e:	e632      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8002120:	4448      	add	r0, r9
 8002122:	185b      	adds	r3, r3, r1
 8002124:	4548      	cmp	r0, r9
 8002126:	4192      	sbcs	r2, r2
 8002128:	4698      	mov	r8, r3
 800212a:	4252      	negs	r2, r2
 800212c:	4490      	add	r8, r2
 800212e:	4643      	mov	r3, r8
 8002130:	0004      	movs	r4, r0
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	d400      	bmi.n	8002138 <__aeabi_dsub+0x6ac>
 8002136:	e61a      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8002138:	4642      	mov	r2, r8
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <__aeabi_dsub+0x6e8>)
 800213c:	2601      	movs	r6, #1
 800213e:	401a      	ands	r2, r3
 8002140:	4690      	mov	r8, r2
 8002142:	e614      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8002144:	4666      	mov	r6, ip
 8002146:	001f      	movs	r7, r3
 8002148:	3e20      	subs	r6, #32
 800214a:	40f7      	lsrs	r7, r6
 800214c:	2c20      	cmp	r4, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x6d0>
 8002150:	2640      	movs	r6, #64	; 0x40
 8002152:	1b36      	subs	r6, r6, r4
 8002154:	40b3      	lsls	r3, r6
 8002156:	464c      	mov	r4, r9
 8002158:	431c      	orrs	r4, r3
 800215a:	46a2      	mov	sl, r4
 800215c:	4654      	mov	r4, sl
 800215e:	1e63      	subs	r3, r4, #1
 8002160:	419c      	sbcs	r4, r3
 8002162:	433c      	orrs	r4, r7
 8002164:	e5c8      	b.n	8001cf8 <__aeabi_dsub+0x26c>
 8002166:	0011      	movs	r1, r2
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	e532      	b.n	8001bd4 <__aeabi_dsub+0x148>
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	000007ff 	.word	0x000007ff
 8002174:	ff7fffff 	.word	0xff7fffff
 8002178:	000007fe 	.word	0x000007fe
 800217c:	464a      	mov	r2, r9
 800217e:	1814      	adds	r4, r2, r0
 8002180:	4284      	cmp	r4, r0
 8002182:	4192      	sbcs	r2, r2
 8002184:	185b      	adds	r3, r3, r1
 8002186:	4698      	mov	r8, r3
 8002188:	4252      	negs	r2, r2
 800218a:	4490      	add	r8, r2
 800218c:	e5e9      	b.n	8001d62 <__aeabi_dsub+0x2d6>
 800218e:	4642      	mov	r2, r8
 8002190:	4322      	orrs	r2, r4
 8002192:	d100      	bne.n	8002196 <__aeabi_dsub+0x70a>
 8002194:	e6a6      	b.n	8001ee4 <__aeabi_dsub+0x458>
 8002196:	e5ea      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8002198:	074b      	lsls	r3, r1, #29
 800219a:	08c2      	lsrs	r2, r0, #3
 800219c:	431a      	orrs	r2, r3
 800219e:	08cb      	lsrs	r3, r1, #3
 80021a0:	e632      	b.n	8001e08 <__aeabi_dsub+0x37c>
 80021a2:	2200      	movs	r2, #0
 80021a4:	4901      	ldr	r1, [pc, #4]	; (80021ac <__aeabi_dsub+0x720>)
 80021a6:	0013      	movs	r3, r2
 80021a8:	e514      	b.n	8001bd4 <__aeabi_dsub+0x148>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__aeabi_d2iz>:
 80021b0:	000a      	movs	r2, r1
 80021b2:	b530      	push	{r4, r5, lr}
 80021b4:	4c13      	ldr	r4, [pc, #76]	; (8002204 <__aeabi_d2iz+0x54>)
 80021b6:	0053      	lsls	r3, r2, #1
 80021b8:	0309      	lsls	r1, r1, #12
 80021ba:	0005      	movs	r5, r0
 80021bc:	0b09      	lsrs	r1, r1, #12
 80021be:	2000      	movs	r0, #0
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	0fd2      	lsrs	r2, r2, #31
 80021c4:	42a3      	cmp	r3, r4
 80021c6:	dd04      	ble.n	80021d2 <__aeabi_d2iz+0x22>
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <__aeabi_d2iz+0x58>)
 80021ca:	4283      	cmp	r3, r0
 80021cc:	dd02      	ble.n	80021d4 <__aeabi_d2iz+0x24>
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <__aeabi_d2iz+0x5c>)
 80021d0:	18d0      	adds	r0, r2, r3
 80021d2:	bd30      	pop	{r4, r5, pc}
 80021d4:	2080      	movs	r0, #128	; 0x80
 80021d6:	0340      	lsls	r0, r0, #13
 80021d8:	4301      	orrs	r1, r0
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <__aeabi_d2iz+0x60>)
 80021dc:	1ac0      	subs	r0, r0, r3
 80021de:	281f      	cmp	r0, #31
 80021e0:	dd08      	ble.n	80021f4 <__aeabi_d2iz+0x44>
 80021e2:	480c      	ldr	r0, [pc, #48]	; (8002214 <__aeabi_d2iz+0x64>)
 80021e4:	1ac3      	subs	r3, r0, r3
 80021e6:	40d9      	lsrs	r1, r3
 80021e8:	000b      	movs	r3, r1
 80021ea:	4258      	negs	r0, r3
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d1f0      	bne.n	80021d2 <__aeabi_d2iz+0x22>
 80021f0:	0018      	movs	r0, r3
 80021f2:	e7ee      	b.n	80021d2 <__aeabi_d2iz+0x22>
 80021f4:	4c08      	ldr	r4, [pc, #32]	; (8002218 <__aeabi_d2iz+0x68>)
 80021f6:	40c5      	lsrs	r5, r0
 80021f8:	46a4      	mov	ip, r4
 80021fa:	4463      	add	r3, ip
 80021fc:	4099      	lsls	r1, r3
 80021fe:	000b      	movs	r3, r1
 8002200:	432b      	orrs	r3, r5
 8002202:	e7f2      	b.n	80021ea <__aeabi_d2iz+0x3a>
 8002204:	000003fe 	.word	0x000003fe
 8002208:	0000041d 	.word	0x0000041d
 800220c:	7fffffff 	.word	0x7fffffff
 8002210:	00000433 	.word	0x00000433
 8002214:	00000413 	.word	0x00000413
 8002218:	fffffbed 	.word	0xfffffbed

0800221c <__aeabi_i2d>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	2800      	cmp	r0, #0
 8002220:	d016      	beq.n	8002250 <__aeabi_i2d+0x34>
 8002222:	17c3      	asrs	r3, r0, #31
 8002224:	18c5      	adds	r5, r0, r3
 8002226:	405d      	eors	r5, r3
 8002228:	0fc4      	lsrs	r4, r0, #31
 800222a:	0028      	movs	r0, r5
 800222c:	f000 f84c 	bl	80022c8 <__clzsi2>
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <__aeabi_i2d+0x5c>)
 8002232:	1a12      	subs	r2, r2, r0
 8002234:	280a      	cmp	r0, #10
 8002236:	dc16      	bgt.n	8002266 <__aeabi_i2d+0x4a>
 8002238:	0003      	movs	r3, r0
 800223a:	002e      	movs	r6, r5
 800223c:	3315      	adds	r3, #21
 800223e:	409e      	lsls	r6, r3
 8002240:	230b      	movs	r3, #11
 8002242:	1a18      	subs	r0, r3, r0
 8002244:	40c5      	lsrs	r5, r0
 8002246:	0553      	lsls	r3, r2, #21
 8002248:	032d      	lsls	r5, r5, #12
 800224a:	0b2d      	lsrs	r5, r5, #12
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	e003      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002250:	2400      	movs	r4, #0
 8002252:	2300      	movs	r3, #0
 8002254:	2500      	movs	r5, #0
 8002256:	2600      	movs	r6, #0
 8002258:	051b      	lsls	r3, r3, #20
 800225a:	432b      	orrs	r3, r5
 800225c:	07e4      	lsls	r4, r4, #31
 800225e:	4323      	orrs	r3, r4
 8002260:	0030      	movs	r0, r6
 8002262:	0019      	movs	r1, r3
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	380b      	subs	r0, #11
 8002268:	4085      	lsls	r5, r0
 800226a:	0553      	lsls	r3, r2, #21
 800226c:	032d      	lsls	r5, r5, #12
 800226e:	2600      	movs	r6, #0
 8002270:	0b2d      	lsrs	r5, r5, #12
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	e7f0      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	0000041e 	.word	0x0000041e

0800227c <__aeabi_ui2d>:
 800227c:	b510      	push	{r4, lr}
 800227e:	1e04      	subs	r4, r0, #0
 8002280:	d010      	beq.n	80022a4 <__aeabi_ui2d+0x28>
 8002282:	f000 f821 	bl	80022c8 <__clzsi2>
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <__aeabi_ui2d+0x48>)
 8002288:	1a1b      	subs	r3, r3, r0
 800228a:	280a      	cmp	r0, #10
 800228c:	dc11      	bgt.n	80022b2 <__aeabi_ui2d+0x36>
 800228e:	220b      	movs	r2, #11
 8002290:	0021      	movs	r1, r4
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	40d1      	lsrs	r1, r2
 8002296:	3015      	adds	r0, #21
 8002298:	030a      	lsls	r2, r1, #12
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	4084      	lsls	r4, r0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e001      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2200      	movs	r2, #0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	4313      	orrs	r3, r2
 80022ac:	0020      	movs	r0, r4
 80022ae:	0019      	movs	r1, r3
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	0022      	movs	r2, r4
 80022b4:	380b      	subs	r0, #11
 80022b6:	4082      	lsls	r2, r0
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	0312      	lsls	r2, r2, #12
 80022bc:	2400      	movs	r4, #0
 80022be:	0b12      	lsrs	r2, r2, #12
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	e7f1      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022c4:	0000041e 	.word	0x0000041e

080022c8 <__clzsi2>:
 80022c8:	211c      	movs	r1, #28
 80022ca:	2301      	movs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d301      	bcc.n	80022d6 <__clzsi2+0xe>
 80022d2:	0c00      	lsrs	r0, r0, #16
 80022d4:	3910      	subs	r1, #16
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	4298      	cmp	r0, r3
 80022da:	d301      	bcc.n	80022e0 <__clzsi2+0x18>
 80022dc:	0a00      	lsrs	r0, r0, #8
 80022de:	3908      	subs	r1, #8
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	4298      	cmp	r0, r3
 80022e4:	d301      	bcc.n	80022ea <__clzsi2+0x22>
 80022e6:	0900      	lsrs	r0, r0, #4
 80022e8:	3904      	subs	r1, #4
 80022ea:	a202      	add	r2, pc, #8	; (adr r2, 80022f4 <__clzsi2+0x2c>)
 80022ec:	5c10      	ldrb	r0, [r2, r0]
 80022ee:	1840      	adds	r0, r0, r1
 80022f0:	4770      	bx	lr
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	02020304 	.word	0x02020304
 80022f8:	01010101 	.word	0x01010101
	...

08002304 <__clzdi2>:
 8002304:	b510      	push	{r4, lr}
 8002306:	2900      	cmp	r1, #0
 8002308:	d103      	bne.n	8002312 <__clzdi2+0xe>
 800230a:	f7ff ffdd 	bl	80022c8 <__clzsi2>
 800230e:	3020      	adds	r0, #32
 8002310:	e002      	b.n	8002318 <__clzdi2+0x14>
 8002312:	1c08      	adds	r0, r1, #0
 8002314:	f7ff ffd8 	bl	80022c8 <__clzsi2>
 8002318:	bd10      	pop	{r4, pc}
 800231a:	46c0      	nop			; (mov r8, r8)

0800231c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
int main(void)
 8002322:	2318      	movs	r3, #24
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002328:	f002 f9d4 	bl	80046d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800232c:	f000 f8a0 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002330:	f000 fa92 	bl	8002858 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002334:	f000 f91a 	bl	800256c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002338:	f000 f9b6 	bl	80026a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800233c:	f000 f9ec 	bl	8002718 <MX_SPI2_Init>
  MX_TSC_Init();
 8002340:	f000 fa20 	bl	8002784 <MX_TSC_Init>
  MX_USART1_UART_Init();
 8002344:	f000 f980 	bl	8002648 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002348:	f000 fa60 	bl	800280c <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 800234c:	f000 f94e 	bl	80025ec <MX_LPUART1_UART_Init>
//
//	  printf("Reading 0x3801 from 0x79; expecting 0xB4\r\n");
//	  rtn = hi2c2_read_register(0x79, 0X3801);
//	  printf("Read 0x%X from 0x3801 at 0x79\r\n", rtn);

	  printf("\r\nWriting 0xa8 to 0x3801 on 0x78\r\n");
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <main+0x80>)
 8002352:	0018      	movs	r0, r3
 8002354:	f001 ff0e 	bl	8004174 <printf_>
	  hi2c2_write_register(0x3C << 1, 0x3801, (0xA8));
 8002358:	4911      	ldr	r1, [pc, #68]	; (80023a0 <main+0x84>)
 800235a:	003b      	movs	r3, r7
 800235c:	469c      	mov	ip, r3
 800235e:	22a8      	movs	r2, #168	; 0xa8
 8002360:	2078      	movs	r0, #120	; 0x78
 8002362:	f000 f851 	bl	8002408 <hi2c2_write_register.6410>

	  printf("Reading 0x3801 from 0x79; expecting 0xA8\r\n");
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <main+0x88>)
 8002368:	0018      	movs	r0, r3
 800236a:	f001 ff03 	bl	8004174 <printf_>
	  rtn = hi2c2_read_register(0x3C << 1, 0X3801);
 800236e:	1dfc      	adds	r4, r7, #7
 8002370:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <main+0x84>)
 8002372:	003b      	movs	r3, r7
 8002374:	469c      	mov	ip, r3
 8002376:	0011      	movs	r1, r2
 8002378:	2078      	movs	r0, #120	; 0x78
 800237a:	f000 f817 	bl	80023ac <hi2c2_read_register.6403>
 800237e:	0003      	movs	r3, r0
 8002380:	7023      	strb	r3, [r4, #0]
	  printf("Read 0x%X from 0x3801 at 0x79\r\n", rtn);
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <main+0x8c>)
 8002388:	0011      	movs	r1, r2
 800238a:	0018      	movs	r0, r3
 800238c:	f001 fef2 	bl	8004174 <printf_>

    /* USER CODE END WHILE */
//	  check_i2c_addr(0x3C);


	   HAL_Delay(2000);
 8002390:	23fa      	movs	r3, #250	; 0xfa
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	0018      	movs	r0, r3
 8002396:	f002 fa0d 	bl	80047b4 <HAL_Delay>
 800239a:	e7f9      	b.n	8002390 <main+0x74>
 800239c:	08007798 	.word	0x08007798
 80023a0:	00003801 	.word	0x00003801
 80023a4:	080077bc 	.word	0x080077bc
 80023a8:	080077e8 	.word	0x080077e8

080023ac <hi2c2_read_register.6403>:
  {
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af04      	add	r7, sp, #16
 80023b2:	0002      	movs	r2, r0
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	1c0a      	adds	r2, r1, #0
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	4663      	mov	r3, ip
 80023c0:	603b      	str	r3, [r7, #0]
      HAL_StatusTypeDef status = HAL_OK;
 80023c2:	200f      	movs	r0, #15
 80023c4:	183b      	adds	r3, r7, r0
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
      uint16_t return_value = 0;
 80023ca:	250c      	movs	r5, #12
 80023cc:	197b      	adds	r3, r7, r5
 80023ce:	2200      	movs	r2, #0
 80023d0:	801a      	strh	r2, [r3, #0]
      status = HAL_I2C_Mem_Read(&hi2c1, addr, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b299      	uxth	r1, r3
 80023d8:	183c      	adds	r4, r7, r0
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	4809      	ldr	r0, [pc, #36]	; (8002404 <hi2c2_read_register.6403+0x58>)
 80023e0:	2364      	movs	r3, #100	; 0x64
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	197b      	adds	r3, r7, r5
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2301      	movs	r3, #1
 80023ee:	f002 fe11 	bl	8005014 <HAL_I2C_Mem_Read>
 80023f2:	0003      	movs	r3, r0
 80023f4:	7023      	strb	r3, [r4, #0]
      return return_value;
 80023f6:	197b      	adds	r3, r7, r5
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b2db      	uxtb	r3, r3
  }
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	20000084 	.word	0x20000084

08002408 <hi2c2_write_register.6410>:
  {
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af04      	add	r7, sp, #16
 800240e:	0004      	movs	r4, r0
 8002410:	0008      	movs	r0, r1
 8002412:	0011      	movs	r1, r2
 8002414:	250f      	movs	r5, #15
 8002416:	197b      	adds	r3, r7, r5
 8002418:	1c22      	adds	r2, r4, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	260c      	movs	r6, #12
 800241e:	19bb      	adds	r3, r7, r6
 8002420:	1c02      	adds	r2, r0, #0
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	200a      	movs	r0, #10
 8002426:	183b      	adds	r3, r7, r0
 8002428:	1c0a      	adds	r2, r1, #0
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	4663      	mov	r3, ip
 800242e:	607b      	str	r3, [r7, #4]
      dataBuffer[0] = register_value;
 8002430:	183b      	adds	r3, r7, r0
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	2314      	movs	r3, #20
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	701a      	strb	r2, [r3, #0]
      status = HAL_I2C_Mem_Write(&hi2c1, addr, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, dataBuffer, 1, 100);
 800243c:	197b      	adds	r3, r7, r5
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b299      	uxth	r1, r3
 8002442:	2217      	movs	r2, #23
 8002444:	18bc      	adds	r4, r7, r2
 8002446:	19bb      	adds	r3, r7, r6
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <hi2c2_write_register.6410+0x64>)
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	2301      	movs	r3, #1
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2314      	movs	r3, #20
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	f002 fcac 	bl	8004db8 <HAL_I2C_Mem_Write>
 8002460:	0003      	movs	r3, r0
 8002462:	7023      	strb	r3, [r4, #0]
  }
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b007      	add	sp, #28
 800246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246c:	20000084 	.word	0x20000084

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b09d      	sub	sp, #116	; 0x74
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	2438      	movs	r4, #56	; 0x38
 8002478:	193b      	adds	r3, r7, r4
 800247a:	0018      	movs	r0, r3
 800247c:	2338      	movs	r3, #56	; 0x38
 800247e:	001a      	movs	r2, r3
 8002480:	2100      	movs	r1, #0
 8002482:	f005 f973 	bl	800776c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002486:	2324      	movs	r3, #36	; 0x24
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	0018      	movs	r0, r3
 800248c:	2314      	movs	r3, #20
 800248e:	001a      	movs	r2, r3
 8002490:	2100      	movs	r1, #0
 8002492:	f005 f96b 	bl	800776c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002496:	003b      	movs	r3, r7
 8002498:	0018      	movs	r0, r3
 800249a:	2324      	movs	r3, #36	; 0x24
 800249c:	001a      	movs	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	f005 f964 	bl	800776c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a4:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <SystemClock_Config+0xf4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <SystemClock_Config+0xf8>)
 80024aa:	401a      	ands	r2, r3
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <SystemClock_Config+0xf4>)
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	0109      	lsls	r1, r1, #4
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024bc:	193b      	adds	r3, r7, r4
 80024be:	22a0      	movs	r2, #160	; 0xa0
 80024c0:	02d2      	lsls	r2, r2, #11
 80024c2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024c4:	0021      	movs	r1, r4
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2201      	movs	r2, #1
 80024ca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	2202      	movs	r2, #2
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	0252      	lsls	r2, r2, #9
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	0352      	lsls	r2, r2, #13
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	0412      	lsls	r2, r2, #16
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	0018      	movs	r0, r3
 80024ee:	f003 fae9 	bl	8005ac4 <HAL_RCC_OscConfig>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d001      	beq.n	80024fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80024f6:	f000 fa59 	bl	80029ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fa:	2124      	movs	r1, #36	; 0x24
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	220f      	movs	r2, #15
 8002500:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2203      	movs	r2, #3
 8002506:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002514:	187b      	adds	r3, r7, r1
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2101      	movs	r1, #1
 800251e:	0018      	movs	r0, r3
 8002520:	f003 fe94 	bl	800624c <HAL_RCC_ClockConfig>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d001      	beq.n	800252c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002528:	f000 fa40 	bl	80029ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800252c:	003b      	movs	r3, r7
 800252e:	224d      	movs	r2, #77	; 0x4d
 8002530:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002532:	003b      	movs	r3, r7
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002538:	003b      	movs	r3, r7
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800253e:	003b      	movs	r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002544:	003b      	movs	r3, r7
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	04d2      	lsls	r2, r2, #19
 800254a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	003b      	movs	r3, r7
 800254e:	0018      	movs	r0, r3
 8002550:	f004 f8a0 	bl	8006694 <HAL_RCCEx_PeriphCLKConfig>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002558:	f000 fa28 	bl	80029ac <Error_Handler>
  }
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b01d      	add	sp, #116	; 0x74
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	40007000 	.word	0x40007000
 8002568:	ffffe7ff 	.word	0xffffe7ff

0800256c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <MX_I2C1_Init+0x78>)
 8002574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <MX_I2C1_Init+0x7c>)
 800257a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <MX_I2C1_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002584:	2201      	movs	r2, #1
 8002586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <MX_I2C1_Init+0x74>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <MX_I2C1_Init+0x74>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_I2C1_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025a8:	0018      	movs	r0, r3
 80025aa:	f002 fb6f 	bl	8004c8c <HAL_I2C_Init>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d001      	beq.n	80025b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025b2:	f000 f9fb 	bl	80029ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	0018      	movs	r0, r3
 80025bc:	f003 f8b0 	bl	8005720 <HAL_I2CEx_ConfigAnalogFilter>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d001      	beq.n	80025c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025c4:	f000 f9f2 	bl	80029ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <MX_I2C1_Init+0x74>)
 80025ca:	2100      	movs	r1, #0
 80025cc:	0018      	movs	r0, r3
 80025ce:	f003 f8f3 	bl	80057b8 <HAL_I2CEx_ConfigDigitalFilter>
 80025d2:	1e03      	subs	r3, r0, #0
 80025d4:	d001      	beq.n	80025da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025d6:	f000 f9e9 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000084 	.word	0x20000084
 80025e4:	40005400 	.word	0x40005400
 80025e8:	00707cbb 	.word	0x00707cbb

080025ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <MX_LPUART1_UART_Init+0x58>)
 80025f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 80025f8:	2296      	movs	r2, #150	; 0x96
 80025fa:	0192      	lsls	r2, r2, #6
 80025fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 8002624:	2200      	movs	r2, #0
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <MX_LPUART1_UART_Init+0x54>)
 800262a:	0018      	movs	r0, r3
 800262c:	f004 fad0 	bl	8006bd0 <HAL_HalfDuplex_Init>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d001      	beq.n	8002638 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002634:	f000 f9ba 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	200000d0 	.word	0x200000d0
 8002644:	40004800 	.word	0x40004800

08002648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <MX_USART1_UART_Init+0x5c>)
 8002650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 8002654:	22e1      	movs	r2, #225	; 0xe1
 8002656:	0252      	lsls	r2, r2, #9
 8002658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <MX_USART1_UART_Init+0x58>)
 800268c:	0018      	movs	r0, r3
 800268e:	f004 fa9f 	bl	8006bd0 <HAL_HalfDuplex_Init>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002696:	f000 f989 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000154 	.word	0x20000154
 80026a4:	40013800 	.word	0x40013800

080026a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_SPI1_Init+0x68>)
 80026ae:	4a19      	ldr	r2, [pc, #100]	; (8002714 <MX_SPI1_Init+0x6c>)
 80026b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_SPI1_Init+0x68>)
 80026b4:	2282      	movs	r2, #130	; 0x82
 80026b6:	0052      	lsls	r2, r2, #1
 80026b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_SPI1_Init+0x68>)
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0212      	lsls	r2, r2, #8
 80026c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <MX_SPI1_Init+0x68>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_SPI1_Init+0x68>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <MX_SPI1_Init+0x68>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_SPI1_Init+0x68>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <MX_SPI1_Init+0x68>)
 80026dc:	2200      	movs	r2, #0
 80026de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_SPI1_Init+0x68>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <MX_SPI1_Init+0x68>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_SPI1_Init+0x68>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <MX_SPI1_Init+0x68>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <MX_SPI1_Init+0x68>)
 80026fa:	0018      	movs	r0, r3
 80026fc:	f004 f92e 	bl	800695c <HAL_SPI_Init>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d001      	beq.n	8002708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002704:	f000 f952 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	200001d8 	.word	0x200001d8
 8002714:	40013000 	.word	0x40013000

08002718 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <MX_SPI2_Init+0x64>)
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <MX_SPI2_Init+0x68>)
 8002720:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <MX_SPI2_Init+0x64>)
 8002724:	2282      	movs	r2, #130	; 0x82
 8002726:	0052      	lsls	r2, r2, #1
 8002728:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <MX_SPI2_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <MX_SPI2_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_SPI2_Init+0x64>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_SPI2_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_SPI2_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_SPI2_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_SPI2_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_SPI2_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_SPI2_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_SPI2_Init+0x64>)
 8002762:	2207      	movs	r2, #7
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <MX_SPI2_Init+0x64>)
 8002768:	0018      	movs	r0, r3
 800276a:	f004 f8f7 	bl	800695c <HAL_SPI_Init>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d001      	beq.n	8002776 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8002772:	f000 f91b 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000002c 	.word	0x2000002c
 8002780:	40003800 	.word	0x40003800

08002784 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <MX_TSC_Init+0x80>)
 800278a:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <MX_TSC_Init+0x84>)
 800278c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_TSC_Init+0x80>)
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0552      	lsls	r2, r2, #21
 8002794:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_TSC_Init+0x80>)
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	0452      	lsls	r2, r2, #17
 800279c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <MX_TSC_Init+0x80>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <MX_TSC_Init+0x80>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_TSC_Init+0x80>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_TSC_Init+0x80>)
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	0192      	lsls	r2, r2, #6
 80027b6:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_TSC_Init+0x80>)
 80027ba:	22a0      	movs	r2, #160	; 0xa0
 80027bc:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_TSC_Init+0x80>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_TSC_Init+0x80>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_TSC_Init+0x80>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_TSC_Init+0x80>)
 80027d2:	222c      	movs	r2, #44	; 0x2c
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <MX_TSC_Init+0x80>)
 80027da:	2291      	movs	r2, #145	; 0x91
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_TSC_Init+0x80>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <MX_TSC_Init+0x80>)
 80027e8:	2291      	movs	r2, #145	; 0x91
 80027ea:	00d2      	lsls	r2, r2, #3
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <MX_TSC_Init+0x80>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f004 f947 	bl	8006a84 <HAL_TSC_Init>
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	d001      	beq.n	80027fe <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80027fa:	f000 f8d7 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000524 	.word	0x20000524
 8002808:	40024000 	.word	0x40024000

0800280c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <MX_USB_PCD_Init+0x44>)
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <MX_USB_PCD_Init+0x48>)
 8002814:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_USB_PCD_Init+0x44>)
 8002818:	2208      	movs	r2, #8
 800281a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_USB_PCD_Init+0x44>)
 800281e:	2202      	movs	r2, #2
 8002820:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <MX_USB_PCD_Init+0x44>)
 8002824:	2202      	movs	r2, #2
 8002826:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_USB_PCD_Init+0x44>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <MX_USB_PCD_Init+0x44>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_USB_PCD_Init+0x44>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <MX_USB_PCD_Init+0x44>)
 800283c:	0018      	movs	r0, r3
 800283e:	f003 f807 	bl	8005850 <HAL_PCD_Init>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	d001      	beq.n	800284a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8002846:	f000 f8b1 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000230 	.word	0x20000230
 8002854:	40005c00 	.word	0x40005c00

08002858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b08b      	sub	sp, #44	; 0x2c
 800285c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285e:	2414      	movs	r4, #20
 8002860:	193b      	adds	r3, r7, r4
 8002862:	0018      	movs	r0, r3
 8002864:	2314      	movs	r3, #20
 8002866:	001a      	movs	r2, r3
 8002868:	2100      	movs	r1, #0
 800286a:	f004 ff7f 	bl	800776c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <MX_GPIO_Init+0x148>)
 8002870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002872:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <MX_GPIO_Init+0x148>)
 8002874:	2104      	movs	r1, #4
 8002876:	430a      	orrs	r2, r1
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <MX_GPIO_Init+0x148>)
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	2204      	movs	r2, #4
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <MX_GPIO_Init+0x148>)
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	4b45      	ldr	r3, [pc, #276]	; (80029a0 <MX_GPIO_Init+0x148>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <MX_GPIO_Init+0x148>)
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <MX_GPIO_Init+0x148>)
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <MX_GPIO_Init+0x148>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	430a      	orrs	r2, r1
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <MX_GPIO_Init+0x148>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <MX_GPIO_Init+0x148>)
 80028b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <MX_GPIO_Init+0x148>)
 80028bc:	2102      	movs	r1, #2
 80028be:	430a      	orrs	r2, r1
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <MX_GPIO_Init+0x148>)
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80028ce:	23a0      	movs	r3, #160	; 0xa0
 80028d0:	05db      	lsls	r3, r3, #23
 80028d2:	2200      	movs	r2, #0
 80028d4:	2120      	movs	r1, #32
 80028d6:	0018      	movs	r0, r3
 80028d8:	f002 f9ba 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|LED_GN_Pin, GPIO_PIN_RESET);
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <MX_GPIO_Init+0x14c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	2114      	movs	r1, #20
 80028e2:	0018      	movs	r0, r3
 80028e4:	f002 f9b4 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	0192      	lsls	r2, r2, #6
 80028ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	2288      	movs	r2, #136	; 0x88
 80028f4:	0352      	lsls	r2, r2, #13
 80028f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <MX_GPIO_Init+0x150>)
 8002902:	0019      	movs	r1, r3
 8002904:	0010      	movs	r0, r2
 8002906:	f002 f82d 	bl	8004964 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800290a:	193b      	adds	r3, r7, r4
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002910:	193b      	adds	r3, r7, r4
 8002912:	2290      	movs	r2, #144	; 0x90
 8002914:	0352      	lsls	r2, r2, #13
 8002916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	193b      	adds	r3, r7, r4
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800291e:	193a      	adds	r2, r7, r4
 8002920:	23a0      	movs	r3, #160	; 0xa0
 8002922:	05db      	lsls	r3, r3, #23
 8002924:	0011      	movs	r1, r2
 8002926:	0018      	movs	r0, r3
 8002928:	f002 f81c 	bl	8004964 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800292c:	193b      	adds	r3, r7, r4
 800292e:	2202      	movs	r2, #2
 8002930:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002932:	193b      	adds	r3, r7, r4
 8002934:	2200      	movs	r2, #0
 8002936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	193b      	adds	r3, r7, r4
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800293e:	193a      	adds	r2, r7, r4
 8002940:	23a0      	movs	r3, #160	; 0xa0
 8002942:	05db      	lsls	r3, r3, #23
 8002944:	0011      	movs	r1, r2
 8002946:	0018      	movs	r0, r3
 8002948:	f002 f80c 	bl	8004964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800294c:	193b      	adds	r3, r7, r4
 800294e:	2220      	movs	r2, #32
 8002950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002952:	193b      	adds	r3, r7, r4
 8002954:	2201      	movs	r2, #1
 8002956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	193b      	adds	r3, r7, r4
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	193b      	adds	r3, r7, r4
 8002960:	2200      	movs	r2, #0
 8002962:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8002964:	193a      	adds	r2, r7, r4
 8002966:	23a0      	movs	r3, #160	; 0xa0
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	0011      	movs	r1, r2
 800296c:	0018      	movs	r0, r3
 800296e:	f001 fff9 	bl	8004964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin LED_GN_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|LED_GN_Pin;
 8002972:	0021      	movs	r1, r4
 8002974:	187b      	adds	r3, r7, r1
 8002976:	2214      	movs	r2, #20
 8002978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2201      	movs	r2, #1
 800297e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	187b      	adds	r3, r7, r1
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <MX_GPIO_Init+0x14c>)
 8002990:	0019      	movs	r1, r3
 8002992:	0010      	movs	r0, r2
 8002994:	f001 ffe6 	bl	8004964 <HAL_GPIO_Init>

}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b00b      	add	sp, #44	; 0x2c
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	50000400 	.word	0x50000400
 80029a8:	50000800 	.word	0x50000800

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <Error_Handler+0x8>
	...

080029b8 <__putchar>:

extern UART_HandleTypeDef huart1;

static char outchar;

void __putchar(char character) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	0002      	movs	r2, r0
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	701a      	strb	r2, [r3, #0]
	outchar=character;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <__putchar+0x28>)
 80029c6:	1dfa      	adds	r2, r7, #7
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &outchar, 1, 0xFFFF);
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <__putchar+0x2c>)
 80029ce:	4904      	ldr	r1, [pc, #16]	; (80029e0 <__putchar+0x28>)
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <__putchar+0x30>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	f004 f958 	bl	8006c88 <HAL_UART_Transmit>
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000028 	.word	0x20000028
 80029e4:	0000ffff 	.word	0x0000ffff
 80029e8:	20000154 	.word	0x20000154

080029ec <_out_null>:
        ((char *)buffer)[idx] = character;
    }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	230f      	movs	r3, #15
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	1c02      	adds	r2, r0, #0
 80029fe:	701a      	strb	r2, [r3, #0]
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b004      	add	sp, #16
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	210f      	movs	r1, #15
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	1c02      	adds	r2, r0, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	18bb      	adds	r3, r7, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <_out_char+0x28>
        __putchar(character);
 8002a26:	18bb      	adds	r3, r7, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff ffc4 	bl	80029b8 <__putchar>
    }
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_strnlen_s>:
    }
}

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
    const char *s;
    for (s = str; *s && maxsize--; ++s)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e002      	b.n	8002a4e <_strnlen_s+0x16>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <_strnlen_s+0x28>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1e5a      	subs	r2, r3, #1
 8002a5a:	603a      	str	r2, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f3      	bne.n	8002a48 <_strnlen_s+0x10>
        ;
    return (unsigned int)(s - str);
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	1ad3      	subs	r3, r2, r3
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	0002      	movs	r2, r0
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a80:	d905      	bls.n	8002a8e <_is_digit+0x20>
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b39      	cmp	r3, #57	; 0x39
 8002a88:	d801      	bhi.n	8002a8e <_is_digit+0x20>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <_is_digit+0x22>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	1c1a      	adds	r2, r3, #0
 8002a92:	2301      	movs	r3, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    unsigned int i = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
 8002aac:	e00e      	b.n	8002acc <_atoi+0x2c>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	189b      	adds	r3, r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	0018      	movs	r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1c59      	adds	r1, r3, #1
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6011      	str	r1, [r2, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	18c3      	adds	r3, r0, r3
 8002ac8:	3b30      	subs	r3, #48	; 0x30
 8002aca:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7ff ffcb 	bl	8002a6e <_is_digit>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d1e8      	bne.n	8002aae <_atoi+0xe>
    }
    return i;
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b004      	add	sp, #16
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
 8002ae6:	b590      	push	{r4, r7, lr}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
    const size_t start_idx = idx;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	613b      	str	r3, [r7, #16]

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d124      	bne.n	8002b4a <_out_rev+0x64>
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b02:	2201      	movs	r2, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d120      	bne.n	8002b4a <_out_rev+0x64>
        size_t i;
        for (i = len; i < width; i++) {
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e00a      	b.n	8002b24 <_out_rev+0x3e>
            out(' ', buffer, idx++, maxlen);
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	1c53      	adds	r3, r2, #1
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68fc      	ldr	r4, [r7, #12]
 8002b1a:	2020      	movs	r0, #32
 8002b1c:	47a0      	blx	r4
        for (i = len; i < width; i++) {
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3301      	adds	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3f0      	bcc.n	8002b0e <_out_rev+0x28>
        }
    }

    // reverse string
    while (len) {
 8002b2c:	e00d      	b.n	8002b4a <_out_rev+0x64>
        out(buf[--len], buffer, idx++, maxlen);
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	3b01      	subs	r3, #1
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	18d3      	adds	r3, r2, r3
 8002b3a:	7818      	ldrb	r0, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	1c53      	adds	r3, r2, #1
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68fc      	ldr	r4, [r7, #12]
 8002b48:	47a0      	blx	r4
    while (len) {
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <_out_rev+0x48>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d00e      	beq.n	8002b76 <_out_rev+0x90>
        while (idx - start_idx < width) {
 8002b58:	e007      	b.n	8002b6a <_out_rev+0x84>
            out(' ', buffer, idx++, maxlen);
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	1c53      	adds	r3, r2, #1
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	68fc      	ldr	r4, [r7, #12]
 8002b66:	2020      	movs	r0, #32
 8002b68:	47a0      	blx	r4
        while (idx - start_idx < width) {
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d8f1      	bhi.n	8002b5a <_out_rev+0x74>
        }
    }

    return idx;
 8002b76:	687b      	ldr	r3, [r7, #4]
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b007      	add	sp, #28
 8002b7e:	bd90      	pop	{r4, r7, pc}

08002b80 <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af04      	add	r7, sp, #16
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	2202      	movs	r2, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	d134      	bne.n	8002c00 <_ntoa_format+0x80>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d017      	beq.n	8002bcc <_ntoa_format+0x4c>
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <_ntoa_format+0x4c>
 8002ba4:	2328      	movs	r3, #40	; 0x28
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <_ntoa_format+0x36>
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	220c      	movs	r2, #12
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d00a      	beq.n	8002bcc <_ntoa_format+0x4c>
            width--;
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002bbc:	e006      	b.n	8002bcc <_ntoa_format+0x4c>
            buf[len++] = '0';
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	627a      	str	r2, [r7, #36]	; 0x24
 8002bc4:	6a3a      	ldr	r2, [r7, #32]
 8002bc6:	18d3      	adds	r3, r2, r3
 8002bc8:	2230      	movs	r2, #48	; 0x30
 8002bca:	701a      	strb	r2, [r3, #0]
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d20a      	bcs.n	8002bea <_ntoa_format+0x6a>
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	2b1f      	cmp	r3, #31
 8002bd8:	d9f1      	bls.n	8002bbe <_ntoa_format+0x3e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002bda:	e006      	b.n	8002bea <_ntoa_format+0x6a>
            buf[len++] = '0';
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	627a      	str	r2, [r7, #36]	; 0x24
 8002be2:	6a3a      	ldr	r2, [r7, #32]
 8002be4:	18d3      	adds	r3, r2, r3
 8002be6:	2230      	movs	r2, #48	; 0x30
 8002be8:	701a      	strb	r2, [r3, #0]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2201      	movs	r2, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d006      	beq.n	8002c00 <_ntoa_format+0x80>
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d202      	bcs.n	8002c00 <_ntoa_format+0x80>
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	d9ed      	bls.n	8002bdc <_ntoa_format+0x5c>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	2210      	movs	r2, #16
 8002c04:	4013      	ands	r3, r2
 8002c06:	d056      	beq.n	8002cb6 <_ntoa_format+0x136>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d116      	bne.n	8002c40 <_ntoa_format+0xc0>
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <_ntoa_format+0xc0>
 8002c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d003      	beq.n	8002c28 <_ntoa_format+0xa8>
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d10b      	bne.n	8002c40 <_ntoa_format+0xc0>
            len--;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
            if (len && (base == 16U)) {
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <_ntoa_format+0xc0>
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d102      	bne.n	8002c40 <_ntoa_format+0xc0>
                len--;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d10e      	bne.n	8002c64 <_ntoa_format+0xe4>
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d10a      	bne.n	8002c64 <_ntoa_format+0xe4>
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	2b1f      	cmp	r3, #31
 8002c52:	d807      	bhi.n	8002c64 <_ntoa_format+0xe4>
            buf[len++] = 'x';
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	627a      	str	r2, [r7, #36]	; 0x24
 8002c5a:	6a3a      	ldr	r2, [r7, #32]
 8002c5c:	18d3      	adds	r3, r2, r3
 8002c5e:	2278      	movs	r2, #120	; 0x78
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e01e      	b.n	8002ca2 <_ntoa_format+0x122>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d10e      	bne.n	8002c88 <_ntoa_format+0x108>
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d00a      	beq.n	8002c88 <_ntoa_format+0x108>
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	2b1f      	cmp	r3, #31
 8002c76:	d807      	bhi.n	8002c88 <_ntoa_format+0x108>
            buf[len++] = 'X';
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	2258      	movs	r2, #88	; 0x58
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e00c      	b.n	8002ca2 <_ntoa_format+0x122>
        } else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d109      	bne.n	8002ca2 <_ntoa_format+0x122>
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	2b1f      	cmp	r3, #31
 8002c92:	d806      	bhi.n	8002ca2 <_ntoa_format+0x122>
            buf[len++] = 'b';
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	627a      	str	r2, [r7, #36]	; 0x24
 8002c9a:	6a3a      	ldr	r2, [r7, #32]
 8002c9c:	18d3      	adds	r3, r2, r3
 8002c9e:	2262      	movs	r2, #98	; 0x62
 8002ca0:	701a      	strb	r2, [r3, #0]
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	2b1f      	cmp	r3, #31
 8002ca6:	d806      	bhi.n	8002cb6 <_ntoa_format+0x136>
            buf[len++] = '0';
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	627a      	str	r2, [r7, #36]	; 0x24
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	2230      	movs	r2, #48	; 0x30
 8002cb4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	2b1f      	cmp	r3, #31
 8002cba:	d823      	bhi.n	8002d04 <_ntoa_format+0x184>
        if (negative) {
 8002cbc:	2328      	movs	r3, #40	; 0x28
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <_ntoa_format+0x156>
            buf[len++] = '-';
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	627a      	str	r2, [r7, #36]	; 0x24
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	18d3      	adds	r3, r2, r3
 8002cd0:	222d      	movs	r2, #45	; 0x2d
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e016      	b.n	8002d04 <_ntoa_format+0x184>
        } else if (flags & FLAGS_PLUS) {
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	2204      	movs	r2, #4
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d007      	beq.n	8002cee <_ntoa_format+0x16e>
            buf[len++] = '+'; // ignore the space if the '+' exists
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	627a      	str	r2, [r7, #36]	; 0x24
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	18d3      	adds	r3, r2, r3
 8002ce8:	222b      	movs	r2, #43	; 0x2b
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e00a      	b.n	8002d04 <_ntoa_format+0x184>
        } else if (flags & FLAGS_SPACE) {
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d006      	beq.n	8002d04 <_ntoa_format+0x184>
            buf[len++] = ' ';
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	627a      	str	r2, [r7, #36]	; 0x24
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	18d3      	adds	r3, r2, r3
 8002d00:	2220      	movs	r2, #32
 8002d02:	701a      	strb	r2, [r3, #0]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002d04:	683c      	ldr	r4, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	9303      	str	r3, [sp, #12]
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	9302      	str	r3, [sp, #8]
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	0023      	movs	r3, r4
 8002d1e:	f7ff fee2 	bl	8002ae6 <_out_rev>
 8002d22:	0003      	movs	r3, r0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b005      	add	sp, #20
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value,
                         bool negative, unsigned long base, unsigned int prec, unsigned int width,
                         unsigned int flags) {
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b097      	sub	sp, #92	; 0x5c
 8002d30:	af08      	add	r7, sp, #32
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d46:	2210      	movs	r2, #16
 8002d48:	4393      	bics	r3, r2
 8002d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 8002d4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4013      	ands	r3, r2
 8002d54:	d002      	beq.n	8002d5c <_ntoa_long+0x30>
 8002d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d033      	beq.n	8002dc4 <_ntoa_long+0x98>
        do {
            const char digit = (char)(value % base);
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7fd fa57 	bl	8000214 <__aeabi_uidivmod>
 8002d66:	000b      	movs	r3, r1
 8002d68:	001a      	movs	r2, r3
 8002d6a:	2133      	movs	r1, #51	; 0x33
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002d70:	000a      	movs	r2, r1
 8002d72:	18bb      	adds	r3, r7, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	d804      	bhi.n	8002d84 <_ntoa_long+0x58>
 8002d7a:	18bb      	adds	r3, r7, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	3330      	adds	r3, #48	; 0x30
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	e00d      	b.n	8002da0 <_ntoa_long+0x74>
 8002d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d86:	2220      	movs	r2, #32
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d001      	beq.n	8002d90 <_ntoa_long+0x64>
 8002d8c:	2341      	movs	r3, #65	; 0x41
 8002d8e:	e000      	b.n	8002d92 <_ntoa_long+0x66>
 8002d90:	2361      	movs	r3, #97	; 0x61
 8002d92:	2233      	movs	r2, #51	; 0x33
 8002d94:	18ba      	adds	r2, r7, r2
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	189b      	adds	r3, r3, r2
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3b0a      	subs	r3, #10
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	1c59      	adds	r1, r3, #1
 8002da4:	6379      	str	r1, [r7, #52]	; 0x34
 8002da6:	2110      	movs	r1, #16
 8002da8:	1879      	adds	r1, r7, r1
 8002daa:	54ca      	strb	r2, [r1, r3]
            value /= base;
 8002dac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002dae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002db0:	f7fd f9aa 	bl	8000108 <__udivsi3>
 8002db4:	0003      	movs	r3, r0
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <_ntoa_long+0x98>
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc0:	2b1f      	cmp	r3, #31
 8002dc2:	d9cb      	bls.n	8002d5c <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002dc4:	683c      	ldr	r4, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dce:	9306      	str	r3, [sp, #24]
 8002dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dd2:	9305      	str	r3, [sp, #20]
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	9304      	str	r3, [sp, #16]
 8002dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dda:	9303      	str	r3, [sp, #12]
 8002ddc:	234c      	movs	r3, #76	; 0x4c
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	2310      	movs	r3, #16
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	0023      	movs	r3, r4
 8002df0:	f7ff fec6 	bl	8002b80 <_ntoa_format>
 8002df4:	0003      	movs	r3, r0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b00f      	add	sp, #60	; 0x3c
 8002dfc:	bd90      	pop	{r4, r7, pc}

08002dfe <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
 8002dfe:	b5b0      	push	{r4, r5, r7, lr}
 8002e00:	b096      	sub	sp, #88	; 0x58
 8002e02:	af08      	add	r7, sp, #32
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
 8002e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e14:	4313      	orrs	r3, r2
 8002e16:	d103      	bne.n	8002e20 <_ntoa_long_long+0x22>
        flags &= ~FLAGS_HASH;
 8002e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	4393      	bics	r3, r2
 8002e1e:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 8002e20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4013      	ands	r3, r2
 8002e28:	d003      	beq.n	8002e32 <_ntoa_long_long+0x34>
 8002e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	d03a      	beq.n	8002ea8 <_ntoa_long_long+0xaa>
        do {
            const char digit = (char)(value % base);
 8002e32:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3a:	f7fd fb19 	bl	8000470 <__aeabi_uldivmod>
 8002e3e:	0010      	movs	r0, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	2433      	movs	r4, #51	; 0x33
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	1c02      	adds	r2, r0, #0
 8002e48:	701a      	strb	r2, [r3, #0]
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002e4a:	0022      	movs	r2, r4
 8002e4c:	18bb      	adds	r3, r7, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	d804      	bhi.n	8002e5e <_ntoa_long_long+0x60>
 8002e54:	18bb      	adds	r3, r7, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	3330      	adds	r3, #48	; 0x30
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	e00d      	b.n	8002e7a <_ntoa_long_long+0x7c>
 8002e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e60:	2220      	movs	r2, #32
 8002e62:	4013      	ands	r3, r2
 8002e64:	d001      	beq.n	8002e6a <_ntoa_long_long+0x6c>
 8002e66:	2341      	movs	r3, #65	; 0x41
 8002e68:	e000      	b.n	8002e6c <_ntoa_long_long+0x6e>
 8002e6a:	2361      	movs	r3, #97	; 0x61
 8002e6c:	2233      	movs	r2, #51	; 0x33
 8002e6e:	18ba      	adds	r2, r7, r2
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3b0a      	subs	r3, #10
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	1c59      	adds	r1, r3, #1
 8002e7e:	6379      	str	r1, [r7, #52]	; 0x34
 8002e80:	2110      	movs	r1, #16
 8002e82:	1879      	adds	r1, r7, r1
 8002e84:	54ca      	strb	r2, [r1, r3]
            value /= base;
 8002e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e8e:	f7fd faef 	bl	8000470 <__aeabi_uldivmod>
 8002e92:	0002      	movs	r2, r0
 8002e94:	000b      	movs	r3, r1
 8002e96:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e98:	64fb      	str	r3, [r7, #76]	; 0x4c
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	d002      	beq.n	8002ea8 <_ntoa_long_long+0xaa>
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea4:	2b1f      	cmp	r3, #31
 8002ea6:	d9c4      	bls.n	8002e32 <_ntoa_long_long+0x34>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eaa:	683d      	ldr	r5, [r7, #0]
 8002eac:	687c      	ldr	r4, [r7, #4]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002eb4:	9206      	str	r2, [sp, #24]
 8002eb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002eb8:	9205      	str	r2, [sp, #20]
 8002eba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ebc:	9204      	str	r2, [sp, #16]
 8002ebe:	9303      	str	r3, [sp, #12]
 8002ec0:	2350      	movs	r3, #80	; 0x50
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2310      	movs	r3, #16
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	002b      	movs	r3, r5
 8002ed4:	0022      	movs	r2, r4
 8002ed6:	f7ff fe53 	bl	8002b80 <_ntoa_format>
 8002eda:	0003      	movs	r3, r0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b00e      	add	sp, #56	; 0x38
 8002ee2:	bdb0      	pop	{r4, r5, r7, pc}

08002ee4 <_ftoa>:
                    unsigned int width, unsigned int flags);
#endif

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	b09d      	sub	sp, #116	; 0x74
 8002ee8:	af06      	add	r7, sp, #24
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	657b      	str	r3, [r7, #84]	; 0x54
    double diff = 0.0;
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63ba      	str	r2, [r7, #56]	; 0x38
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (value != value)
 8002efe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f02:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f04:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f06:	f7fd fa85 	bl	8000414 <__aeabi_dcmpeq>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d112      	bne.n	8002f34 <_ftoa+0x50>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002f0e:	683c      	ldr	r4, [r7, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	9303      	str	r3, [sp, #12]
 8002f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f20:	9302      	str	r3, [sp, #8]
 8002f22:	2303      	movs	r3, #3
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	4bbf      	ldr	r3, [pc, #764]	; (8003224 <_ftoa+0x340>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	0023      	movs	r3, r4
 8002f2c:	f7ff fddb 	bl	8002ae6 <_out_rev>
 8002f30:	0003      	movs	r3, r0
 8002f32:	e211      	b.n	8003358 <_ftoa+0x474>
    if (value < -DBL_MAX)
 8002f34:	2201      	movs	r2, #1
 8002f36:	4252      	negs	r2, r2
 8002f38:	4bbb      	ldr	r3, [pc, #748]	; (8003228 <_ftoa+0x344>)
 8002f3a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f3c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f3e:	f7fd fa6f 	bl	8000420 <__aeabi_dcmplt>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d012      	beq.n	8002f6c <_ftoa+0x88>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002f46:	683c      	ldr	r4, [r7, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	9303      	str	r3, [sp, #12]
 8002f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f58:	9302      	str	r3, [sp, #8]
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	4bb3      	ldr	r3, [pc, #716]	; (800322c <_ftoa+0x348>)
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	0023      	movs	r3, r4
 8002f64:	f7ff fdbf 	bl	8002ae6 <_out_rev>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	e1f5      	b.n	8003358 <_ftoa+0x474>
    if (value > DBL_MAX)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4252      	negs	r2, r2
 8002f70:	4baf      	ldr	r3, [pc, #700]	; (8003230 <_ftoa+0x34c>)
 8002f72:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f74:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f76:	f7fd fa67 	bl	8000448 <__aeabi_dcmpgt>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d024      	beq.n	8002fc8 <_ftoa+0xe4>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d001      	beq.n	8002f8e <_ftoa+0xaa>
 8002f8a:	4baa      	ldr	r3, [pc, #680]	; (8003234 <_ftoa+0x350>)
 8002f8c:	e000      	b.n	8002f90 <_ftoa+0xac>
 8002f8e:	4baa      	ldr	r3, [pc, #680]	; (8003238 <_ftoa+0x354>)
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	18ba      	adds	r2, r7, r2
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	2104      	movs	r1, #4
 8002f98:	400a      	ands	r2, r1
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 8002f9a:	d001      	beq.n	8002fa0 <_ftoa+0xbc>
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	e000      	b.n	8002fa2 <_ftoa+0xbe>
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	683e      	ldr	r6, [r7, #0]
 8002fa4:	687d      	ldr	r5, [r7, #4]
 8002fa6:	68bc      	ldr	r4, [r7, #8]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	1879      	adds	r1, r7, r1
 8002fae:	6809      	ldr	r1, [r1, #0]
 8002fb0:	9103      	str	r1, [sp, #12]
 8002fb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fb4:	9102      	str	r1, [sp, #8]
 8002fb6:	9201      	str	r2, [sp, #4]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	0033      	movs	r3, r6
 8002fbc:	002a      	movs	r2, r5
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	f7ff fd91 	bl	8002ae6 <_out_rev>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	e1c7      	b.n	8003358 <_ftoa+0x474>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters
    // overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4b9c      	ldr	r3, [pc, #624]	; (800323c <_ftoa+0x358>)
 8002fcc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002fce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002fd0:	f7fd fa3a 	bl	8000448 <__aeabi_dcmpgt>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d107      	bne.n	8002fe8 <_ftoa+0x104>
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4b99      	ldr	r3, [pc, #612]	; (8003240 <_ftoa+0x35c>)
 8002fdc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002fde:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002fe0:	f7fd fa1e 	bl	8000420 <__aeabi_dcmplt>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d015      	beq.n	8003014 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002fe8:	683d      	ldr	r5, [r7, #0]
 8002fea:	687c      	ldr	r4, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	9304      	str	r3, [sp, #16]
 8002ff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ffa:	9303      	str	r3, [sp, #12]
 8002ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffe:	9302      	str	r3, [sp, #8]
 8003000:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003004:	9200      	str	r2, [sp, #0]
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	002b      	movs	r3, r5
 800300a:	0022      	movs	r2, r4
 800300c:	f000 f9a8 	bl	8003360 <_etoa>
 8003010:	0003      	movs	r3, r0
 8003012:	e1a1      	b.n	8003358 <_ftoa+0x474>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
 8003014:	2453      	movs	r4, #83	; 0x53
 8003016:	193b      	adds	r3, r7, r4
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
    if (value < 0) {
 800301c:	2200      	movs	r2, #0
 800301e:	2300      	movs	r3, #0
 8003020:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003022:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003024:	f7fd f9fc 	bl	8000420 <__aeabi_dcmplt>
 8003028:	1e03      	subs	r3, r0, #0
 800302a:	d00c      	beq.n	8003046 <_ftoa+0x162>
        negative = true;
 800302c:	193b      	adds	r3, r7, r4
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
        value = 0 - value;
 8003032:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003036:	2000      	movs	r0, #0
 8003038:	2100      	movs	r1, #0
 800303a:	f7fe fd27 	bl	8001a8c <__aeabi_dsub>
 800303e:	0002      	movs	r2, r0
 8003040:	000b      	movs	r3, r1
 8003042:	673a      	str	r2, [r7, #112]	; 0x70
 8003044:	677b      	str	r3, [r7, #116]	; 0x74
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4013      	ands	r3, r2
 8003052:	d10c      	bne.n	800306e <_ftoa+0x18a>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003054:	2306      	movs	r3, #6
 8003056:	67bb      	str	r3, [r7, #120]	; 0x78
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003058:	e009      	b.n	800306e <_ftoa+0x18a>
        buf[len++] = '0';
 800305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	657a      	str	r2, [r7, #84]	; 0x54
 8003060:	2210      	movs	r2, #16
 8003062:	18ba      	adds	r2, r7, r2
 8003064:	2130      	movs	r1, #48	; 0x30
 8003066:	54d1      	strb	r1, [r2, r3]
        prec--;
 8003068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306a:	3b01      	subs	r3, #1
 800306c:	67bb      	str	r3, [r7, #120]	; 0x78
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800306e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003070:	2b1f      	cmp	r3, #31
 8003072:	d802      	bhi.n	800307a <_ftoa+0x196>
 8003074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003076:	2b09      	cmp	r3, #9
 8003078:	d8ef      	bhi.n	800305a <_ftoa+0x176>
    }

    int whole = (int)value;
 800307a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800307c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800307e:	f7ff f897 	bl	80021b0 <__aeabi_d2iz>
 8003082:	0003      	movs	r3, r0
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c
    double tmp = (value - whole) * pow10[prec];
 8003086:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003088:	f7ff f8c8 	bl	800221c <__aeabi_i2d>
 800308c:	0002      	movs	r2, r0
 800308e:	000b      	movs	r3, r1
 8003090:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003092:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003094:	f7fe fcfa 	bl	8001a8c <__aeabi_dsub>
 8003098:	0002      	movs	r2, r0
 800309a:	000b      	movs	r3, r1
 800309c:	0010      	movs	r0, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	4a68      	ldr	r2, [pc, #416]	; (8003244 <_ftoa+0x360>)
 80030a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f7fe fa82 	bl	80015b4 <__aeabi_dmul>
 80030b0:	0002      	movs	r2, r0
 80030b2:	000b      	movs	r3, r1
 80030b4:	633a      	str	r2, [r7, #48]	; 0x30
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned long frac = (unsigned long)tmp;
 80030b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030bc:	f7fd fa20 	bl	8000500 <__aeabi_d2uiz>
 80030c0:	0003      	movs	r3, r0
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
    diff = tmp - frac;
 80030c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80030c6:	f7ff f8d9 	bl	800227c <__aeabi_ui2d>
 80030ca:	0002      	movs	r2, r0
 80030cc:	000b      	movs	r3, r1
 80030ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030d2:	f7fe fcdb 	bl	8001a8c <__aeabi_dsub>
 80030d6:	0002      	movs	r2, r0
 80030d8:	000b      	movs	r3, r1
 80030da:	63ba      	str	r2, [r7, #56]	; 0x38
 80030dc:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (diff > 0.5) {
 80030de:	2200      	movs	r2, #0
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <_ftoa+0x364>)
 80030e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030e6:	f7fd f9af 	bl	8000448 <__aeabi_dcmpgt>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d015      	beq.n	800311a <_ftoa+0x236>
        ++frac;
 80030ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f0:	3301      	adds	r3, #1
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
 80030f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80030f6:	f7ff f8c1 	bl	800227c <__aeabi_ui2d>
 80030fa:	4a52      	ldr	r2, [pc, #328]	; (8003244 <_ftoa+0x360>)
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f7fd f9a9 	bl	800045c <__aeabi_dcmpge>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d017      	beq.n	800313e <_ftoa+0x25a>
            frac = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	64bb      	str	r3, [r7, #72]	; 0x48
            ++whole;
 8003112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003114:	3301      	adds	r3, #1
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003118:	e011      	b.n	800313e <_ftoa+0x25a>
        }
    } else if (diff < 0.5) {
 800311a:	2200      	movs	r2, #0
 800311c:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <_ftoa+0x364>)
 800311e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003122:	f7fd f97d 	bl	8000420 <__aeabi_dcmplt>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d109      	bne.n	800313e <_ftoa+0x25a>
    } else if ((frac == 0U) || (frac & 1U)) {
 800312a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <_ftoa+0x254>
 8003130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d002      	beq.n	800313e <_ftoa+0x25a>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
 8003138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313a:	3301      	adds	r3, #1
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (prec == 0U) {
 800313e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003140:	2b00      	cmp	r3, #0
 8003142:	d12f      	bne.n	80031a4 <_ftoa+0x2c0>
        diff = value - (double)whole;
 8003144:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003146:	f7ff f869 	bl	800221c <__aeabi_i2d>
 800314a:	0002      	movs	r2, r0
 800314c:	000b      	movs	r3, r1
 800314e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003150:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003152:	f7fe fc9b 	bl	8001a8c <__aeabi_dsub>
 8003156:	0002      	movs	r2, r0
 8003158:	000b      	movs	r3, r1
 800315a:	63ba      	str	r2, [r7, #56]	; 0x38
 800315c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800315e:	2301      	movs	r3, #1
 8003160:	1c1c      	adds	r4, r3, #0
 8003162:	2200      	movs	r2, #0
 8003164:	4b38      	ldr	r3, [pc, #224]	; (8003248 <_ftoa+0x364>)
 8003166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800316a:	f7fd f959 	bl	8000420 <__aeabi_dcmplt>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d101      	bne.n	8003176 <_ftoa+0x292>
 8003172:	2300      	movs	r3, #0
 8003174:	1c1c      	adds	r4, r3, #0
 8003176:	b2e3      	uxtb	r3, r4
 8003178:	2201      	movs	r2, #1
 800317a:	4053      	eors	r3, r2
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <_ftoa+0x2ae>
 8003182:	2200      	movs	r2, #0
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <_ftoa+0x364>)
 8003186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003188:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800318a:	f7fd f95d 	bl	8000448 <__aeabi_dcmpgt>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d046      	beq.n	8003220 <_ftoa+0x33c>
 8003192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003194:	2201      	movs	r2, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d100      	bne.n	800319c <_ftoa+0x2b8>
 800319a:	e070      	b.n	800327e <_ftoa+0x39a>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
 800319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319e:	3301      	adds	r3, #1
 80031a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a2:	e06c      	b.n	800327e <_ftoa+0x39a>
        }
    } else {
        unsigned int count = prec;
 80031a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031a8:	e01b      	b.n	80031e2 <_ftoa+0x2fe>
            --count;
 80031aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ac:	3b01      	subs	r3, #1
 80031ae:	647b      	str	r3, [r7, #68]	; 0x44
            buf[len++] = (char)(48U + (frac % 10U));
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	210a      	movs	r1, #10
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7fd f82d 	bl	8000214 <__aeabi_uidivmod>
 80031ba:	000b      	movs	r3, r1
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c0:	1c59      	adds	r1, r3, #1
 80031c2:	6579      	str	r1, [r7, #84]	; 0x54
 80031c4:	3230      	adds	r2, #48	; 0x30
 80031c6:	b2d1      	uxtb	r1, r2
 80031c8:	2210      	movs	r2, #16
 80031ca:	18ba      	adds	r2, r7, r2
 80031cc:	54d1      	strb	r1, [r2, r3]
            if (!(frac /= 10U)) {
 80031ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d0:	210a      	movs	r1, #10
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7fc ff98 	bl	8000108 <__udivsi3>
 80031d8:	0003      	movs	r3, r0
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
 80031dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <_ftoa+0x306>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e4:	2b1f      	cmp	r3, #31
 80031e6:	d9e0      	bls.n	80031aa <_ftoa+0x2c6>
 80031e8:	e008      	b.n	80031fc <_ftoa+0x318>
                break;
 80031ea:	46c0      	nop			; (mov r8, r8)
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80031ec:	e006      	b.n	80031fc <_ftoa+0x318>
            buf[len++] = '0';
 80031ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	657a      	str	r2, [r7, #84]	; 0x54
 80031f4:	2210      	movs	r2, #16
 80031f6:	18ba      	adds	r2, r7, r2
 80031f8:	2130      	movs	r1, #48	; 0x30
 80031fa:	54d1      	strb	r1, [r2, r3]
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80031fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fe:	2b1f      	cmp	r3, #31
 8003200:	d804      	bhi.n	800320c <_ftoa+0x328>
 8003202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	647a      	str	r2, [r7, #68]	; 0x44
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <_ftoa+0x30a>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	2b1f      	cmp	r3, #31
 8003210:	d835      	bhi.n	800327e <_ftoa+0x39a>
            // add decimal
            buf[len++] = '.';
 8003212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	657a      	str	r2, [r7, #84]	; 0x54
 8003218:	2210      	movs	r2, #16
 800321a:	18ba      	adds	r2, r7, r2
 800321c:	212e      	movs	r1, #46	; 0x2e
 800321e:	54d1      	strb	r1, [r2, r3]
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003220:	e02d      	b.n	800327e <_ftoa+0x39a>
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	08007808 	.word	0x08007808
 8003228:	ffefffff 	.word	0xffefffff
 800322c:	0800780c 	.word	0x0800780c
 8003230:	7fefffff 	.word	0x7fefffff
 8003234:	08007814 	.word	0x08007814
 8003238:	0800781c 	.word	0x0800781c
 800323c:	41cdcd65 	.word	0x41cdcd65
 8003240:	c1cdcd65 	.word	0xc1cdcd65
 8003244:	08007a80 	.word	0x08007a80
 8003248:	3fe00000 	.word	0x3fe00000
        buf[len++] = (char)(48 + (whole % 10));
 800324c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324e:	210a      	movs	r1, #10
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd f8c9 	bl	80003e8 <__aeabi_idivmod>
 8003256:	000b      	movs	r3, r1
 8003258:	b2da      	uxtb	r2, r3
 800325a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325c:	1c59      	adds	r1, r3, #1
 800325e:	6579      	str	r1, [r7, #84]	; 0x54
 8003260:	3230      	adds	r2, #48	; 0x30
 8003262:	b2d1      	uxtb	r1, r2
 8003264:	2210      	movs	r2, #16
 8003266:	18ba      	adds	r2, r7, r2
 8003268:	54d1      	strb	r1, [r2, r3]
        if (!(whole /= 10)) {
 800326a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326c:	210a      	movs	r1, #10
 800326e:	0018      	movs	r0, r3
 8003270:	f7fc ffd4 	bl	800021c <__divsi3>
 8003274:	0003      	movs	r3, r0
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <_ftoa+0x3a2>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	2b1f      	cmp	r3, #31
 8003282:	d9e3      	bls.n	800324c <_ftoa+0x368>
 8003284:	e000      	b.n	8003288 <_ftoa+0x3a4>
            break;
 8003286:	46c0      	nop			; (mov r8, r8)
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	187b      	adds	r3, r7, r1
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	4013      	ands	r3, r2
 8003292:	d123      	bne.n	80032dc <_ftoa+0x3f8>
 8003294:	187b      	adds	r3, r7, r1
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	4013      	ands	r3, r2
 800329c:	d01e      	beq.n	80032dc <_ftoa+0x3f8>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800329e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d014      	beq.n	80032ce <_ftoa+0x3ea>
 80032a4:	2353      	movs	r3, #83	; 0x53
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <_ftoa+0x3d4>
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	220c      	movs	r2, #12
 80032b4:	4013      	ands	r3, r2
 80032b6:	d00a      	beq.n	80032ce <_ftoa+0x3ea>
            width--;
 80032b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032ba:	3b01      	subs	r3, #1
 80032bc:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80032be:	e006      	b.n	80032ce <_ftoa+0x3ea>
            buf[len++] = '0';
 80032c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	657a      	str	r2, [r7, #84]	; 0x54
 80032c6:	2210      	movs	r2, #16
 80032c8:	18ba      	adds	r2, r7, r2
 80032ca:	2130      	movs	r1, #48	; 0x30
 80032cc:	54d1      	strb	r1, [r2, r3]
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80032ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d202      	bcs.n	80032dc <_ftoa+0x3f8>
 80032d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d8:	2b1f      	cmp	r3, #31
 80032da:	d9f1      	bls.n	80032c0 <_ftoa+0x3dc>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80032dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032de:	2b1f      	cmp	r3, #31
 80032e0:	d827      	bhi.n	8003332 <_ftoa+0x44e>
        if (negative) {
 80032e2:	2353      	movs	r3, #83	; 0x53
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <_ftoa+0x418>
            buf[len++] = '-';
 80032ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	657a      	str	r2, [r7, #84]	; 0x54
 80032f2:	2210      	movs	r2, #16
 80032f4:	18ba      	adds	r2, r7, r2
 80032f6:	212d      	movs	r1, #45	; 0x2d
 80032f8:	54d1      	strb	r1, [r2, r3]
 80032fa:	e01a      	b.n	8003332 <_ftoa+0x44e>
        } else if (flags & FLAGS_PLUS) {
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d007      	beq.n	8003318 <_ftoa+0x434>
            buf[len++] = '+'; // ignore the space if the '+' exists
 8003308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	657a      	str	r2, [r7, #84]	; 0x54
 800330e:	2210      	movs	r2, #16
 8003310:	18ba      	adds	r2, r7, r2
 8003312:	212b      	movs	r1, #43	; 0x2b
 8003314:	54d1      	strb	r1, [r2, r3]
 8003316:	e00c      	b.n	8003332 <_ftoa+0x44e>
        } else if (flags & FLAGS_SPACE) {
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2208      	movs	r2, #8
 8003320:	4013      	ands	r3, r2
 8003322:	d006      	beq.n	8003332 <_ftoa+0x44e>
            buf[len++] = ' ';
 8003324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	657a      	str	r2, [r7, #84]	; 0x54
 800332a:	2210      	movs	r2, #16
 800332c:	18ba      	adds	r2, r7, r2
 800332e:	2120      	movs	r1, #32
 8003330:	54d1      	strb	r1, [r2, r3]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003332:	683c      	ldr	r4, [r7, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9303      	str	r3, [sp, #12]
 8003342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003344:	9302      	str	r3, [sp, #8]
 8003346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	2310      	movs	r3, #16
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	0023      	movs	r3, r4
 8003352:	f7ff fbc8 	bl	8002ae6 <_out_rev>
 8003356:	0003      	movs	r3, r0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b017      	add	sp, #92	; 0x5c
 800335e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003360 <_etoa>:

#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse
// <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b0a5      	sub	sp, #148	; 0x94
 8003364:	af06      	add	r7, sp, #24
 8003366:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003368:	63b9      	str	r1, [r7, #56]	; 0x38
 800336a:	637a      	str	r2, [r7, #52]	; 0x34
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800336e:	2690      	movs	r6, #144	; 0x90
 8003370:	19bb      	adds	r3, r7, r6
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	19b9      	adds	r1, r7, r6
 8003378:	6808      	ldr	r0, [r1, #0]
 800337a:	6849      	ldr	r1, [r1, #4]
 800337c:	f7fd f84a 	bl	8000414 <__aeabi_dcmpeq>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d013      	beq.n	80033ac <_etoa+0x4c>
 8003384:	2201      	movs	r2, #1
 8003386:	4252      	negs	r2, r2
 8003388:	4bd9      	ldr	r3, [pc, #868]	; (80036f0 <_etoa+0x390>)
 800338a:	19b9      	adds	r1, r7, r6
 800338c:	6808      	ldr	r0, [r1, #0]
 800338e:	6849      	ldr	r1, [r1, #4]
 8003390:	f7fd f85a 	bl	8000448 <__aeabi_dcmpgt>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d109      	bne.n	80033ac <_etoa+0x4c>
 8003398:	2201      	movs	r2, #1
 800339a:	4252      	negs	r2, r2
 800339c:	4bd5      	ldr	r3, [pc, #852]	; (80036f4 <_etoa+0x394>)
 800339e:	19b9      	adds	r1, r7, r6
 80033a0:	6808      	ldr	r0, [r1, #0]
 80033a2:	6849      	ldr	r1, [r1, #4]
 80033a4:	f7fd f83c 	bl	8000420 <__aeabi_dcmplt>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d01b      	beq.n	80033e4 <_etoa+0x84>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80033ac:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80033ae:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80033b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033b4:	23a0      	movs	r3, #160	; 0xa0
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	9304      	str	r3, [sp, #16]
 80033bc:	239c      	movs	r3, #156	; 0x9c
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	9303      	str	r3, [sp, #12]
 80033c4:	2398      	movs	r3, #152	; 0x98
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	9302      	str	r3, [sp, #8]
 80033cc:	2390      	movs	r3, #144	; 0x90
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	9200      	str	r2, [sp, #0]
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	002b      	movs	r3, r5
 80033da:	0022      	movs	r2, r4
 80033dc:	f7ff fd82 	bl	8002ee4 <_ftoa>
 80033e0:	0003      	movs	r3, r0
 80033e2:	e271      	b.n	80038c8 <_etoa+0x568>
    }

    // determine the sign
    const bool negative = value < 0;
 80033e4:	233b      	movs	r3, #59	; 0x3b
 80033e6:	2230      	movs	r2, #48	; 0x30
 80033e8:	18ba      	adds	r2, r7, r2
 80033ea:	18d6      	adds	r6, r2, r3
 80033ec:	2301      	movs	r3, #1
 80033ee:	71fb      	strb	r3, [r7, #7]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2300      	movs	r3, #0
 80033f4:	2190      	movs	r1, #144	; 0x90
 80033f6:	1879      	adds	r1, r7, r1
 80033f8:	6808      	ldr	r0, [r1, #0]
 80033fa:	6849      	ldr	r1, [r1, #4]
 80033fc:	f7fd f810 	bl	8000420 <__aeabi_dcmplt>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d101      	bne.n	8003408 <_etoa+0xa8>
 8003404:	2300      	movs	r3, #0
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	7033      	strb	r3, [r6, #0]
    if (negative) {
 800340c:	233b      	movs	r3, #59	; 0x3b
 800340e:	2230      	movs	r2, #48	; 0x30
 8003410:	4694      	mov	ip, r2
 8003412:	44bc      	add	ip, r7
 8003414:	4463      	add	r3, ip
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <_etoa+0xd6>
        value = -value;
 800341c:	2290      	movs	r2, #144	; 0x90
 800341e:	18bb      	adds	r3, r7, r2
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	18ba      	adds	r2, r7, r2
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	2194      	movs	r1, #148	; 0x94
 8003428:	187b      	adds	r3, r7, r1
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	4053      	eors	r3, r2
 8003432:	187a      	adds	r2, r7, r1
 8003434:	6013      	str	r3, [r2, #0]
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
 8003436:	23a0      	movs	r3, #160	; 0xa0
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4013      	ands	r3, r2
 8003442:	d103      	bne.n	800344c <_etoa+0xec>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003444:	2306      	movs	r3, #6
 8003446:	2298      	movs	r2, #152	; 0x98
 8003448:	18ba      	adds	r2, r7, r2
 800344a:	6013      	str	r3, [r2, #0]
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
 800344c:	2690      	movs	r6, #144	; 0x90
 800344e:	19bb      	adds	r3, r7, r6
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	643a      	str	r2, [r7, #64]	; 0x40
 8003456:	647b      	str	r3, [r7, #68]	; 0x44
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;          // effectively log2
 8003458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800345a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345c:	0d1b      	lsrs	r3, r3, #20
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	055b      	lsls	r3, r3, #21
 8003468:	0d5b      	lsrs	r3, r3, #21
 800346a:	4aa3      	ldr	r2, [pc, #652]	; (80036f8 <_etoa+0x398>)
 800346c:	4694      	mov	ip, r2
 800346e:	4463      	add	r3, ip
 8003470:	667b      	str	r3, [r7, #100]	; 0x64
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U); // drop the exponent so conv.F is now in [1,2)
 8003472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	2100      	movs	r1, #0
 8003478:	0010      	movs	r0, r2
 800347a:	4388      	bics	r0, r1
 800347c:	0004      	movs	r4, r0
 800347e:	031b      	lsls	r3, r3, #12
 8003480:	0b1d      	lsrs	r5, r3, #12
 8003482:	2300      	movs	r3, #0
 8003484:	4323      	orrs	r3, r4
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	4b9c      	ldr	r3, [pc, #624]	; (80036fc <_etoa+0x39c>)
 800348a:	432b      	orrs	r3, r5
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	69fc      	ldr	r4, [r7, #28]
 8003492:	643b      	str	r3, [r7, #64]	; 0x40
 8003494:	647c      	str	r4, [r7, #68]	; 0x44
    // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
    int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003496:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003498:	f7fe fec0 	bl	800221c <__aeabi_i2d>
 800349c:	4a98      	ldr	r2, [pc, #608]	; (8003700 <_etoa+0x3a0>)
 800349e:	4b99      	ldr	r3, [pc, #612]	; (8003704 <_etoa+0x3a4>)
 80034a0:	f7fe f888 	bl	80015b4 <__aeabi_dmul>
 80034a4:	0002      	movs	r2, r0
 80034a6:	000b      	movs	r3, r1
 80034a8:	0010      	movs	r0, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	4a96      	ldr	r2, [pc, #600]	; (8003708 <_etoa+0x3a8>)
 80034ae:	4b97      	ldr	r3, [pc, #604]	; (800370c <_etoa+0x3ac>)
 80034b0:	f7fd f910 	bl	80006d4 <__aeabi_dadd>
 80034b4:	0002      	movs	r2, r0
 80034b6:	000b      	movs	r3, r1
 80034b8:	0014      	movs	r4, r2
 80034ba:	001d      	movs	r5, r3
 80034bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034c0:	2200      	movs	r2, #0
 80034c2:	4b93      	ldr	r3, [pc, #588]	; (8003710 <_etoa+0x3b0>)
 80034c4:	f7fe fae2 	bl	8001a8c <__aeabi_dsub>
 80034c8:	0002      	movs	r2, r0
 80034ca:	000b      	movs	r3, r1
 80034cc:	0010      	movs	r0, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	4a90      	ldr	r2, [pc, #576]	; (8003714 <_etoa+0x3b4>)
 80034d2:	4b91      	ldr	r3, [pc, #580]	; (8003718 <_etoa+0x3b8>)
 80034d4:	f7fe f86e 	bl	80015b4 <__aeabi_dmul>
 80034d8:	0002      	movs	r2, r0
 80034da:	000b      	movs	r3, r1
 80034dc:	0020      	movs	r0, r4
 80034de:	0029      	movs	r1, r5
 80034e0:	f7fd f8f8 	bl	80006d4 <__aeabi_dadd>
 80034e4:	0002      	movs	r2, r0
 80034e6:	000b      	movs	r3, r1
 80034e8:	0010      	movs	r0, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	f7fe fe60 	bl	80021b0 <__aeabi_d2iz>
 80034f0:	0003      	movs	r3, r0
 80034f2:	677b      	str	r3, [r7, #116]	; 0x74
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80034f4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80034f6:	f7fe fe91 	bl	800221c <__aeabi_i2d>
 80034fa:	4a88      	ldr	r2, [pc, #544]	; (800371c <_etoa+0x3bc>)
 80034fc:	4b88      	ldr	r3, [pc, #544]	; (8003720 <_etoa+0x3c0>)
 80034fe:	f7fe f859 	bl	80015b4 <__aeabi_dmul>
 8003502:	0002      	movs	r2, r0
 8003504:	000b      	movs	r3, r1
 8003506:	0010      	movs	r0, r2
 8003508:	0019      	movs	r1, r3
 800350a:	2200      	movs	r2, #0
 800350c:	4b85      	ldr	r3, [pc, #532]	; (8003724 <_etoa+0x3c4>)
 800350e:	f7fd f8e1 	bl	80006d4 <__aeabi_dadd>
 8003512:	0002      	movs	r2, r0
 8003514:	000b      	movs	r3, r1
 8003516:	0010      	movs	r0, r2
 8003518:	0019      	movs	r1, r3
 800351a:	f7fe fe49 	bl	80021b0 <__aeabi_d2iz>
 800351e:	0003      	movs	r3, r0
 8003520:	667b      	str	r3, [r7, #100]	; 0x64
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003522:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003524:	f7fe fe7a 	bl	800221c <__aeabi_i2d>
 8003528:	4a7f      	ldr	r2, [pc, #508]	; (8003728 <_etoa+0x3c8>)
 800352a:	4b80      	ldr	r3, [pc, #512]	; (800372c <_etoa+0x3cc>)
 800352c:	f7fe f842 	bl	80015b4 <__aeabi_dmul>
 8003530:	0002      	movs	r2, r0
 8003532:	000b      	movs	r3, r1
 8003534:	0014      	movs	r4, r2
 8003536:	001d      	movs	r5, r3
 8003538:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800353a:	f7fe fe6f 	bl	800221c <__aeabi_i2d>
 800353e:	4a7c      	ldr	r2, [pc, #496]	; (8003730 <_etoa+0x3d0>)
 8003540:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <_etoa+0x3d4>)
 8003542:	f7fe f837 	bl	80015b4 <__aeabi_dmul>
 8003546:	0002      	movs	r2, r0
 8003548:	000b      	movs	r3, r1
 800354a:	0020      	movs	r0, r4
 800354c:	0029      	movs	r1, r5
 800354e:	f7fe fa9d 	bl	8001a8c <__aeabi_dsub>
 8003552:	0002      	movs	r2, r0
 8003554:	000b      	movs	r3, r1
 8003556:	65ba      	str	r2, [r7, #88]	; 0x58
 8003558:	65fb      	str	r3, [r7, #92]	; 0x5c
    const double z2 = z * z;
 800355a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800355c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003560:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003562:	f7fe f827 	bl	80015b4 <__aeabi_dmul>
 8003566:	0002      	movs	r2, r0
 8003568:	000b      	movs	r3, r1
 800356a:	653a      	str	r2, [r7, #80]	; 0x50
 800356c:	657b      	str	r3, [r7, #84]	; 0x54
    conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800356e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003570:	4a71      	ldr	r2, [pc, #452]	; (8003738 <_etoa+0x3d8>)
 8003572:	4694      	mov	ip, r2
 8003574:	4463      	add	r3, ip
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	17db      	asrs	r3, r3, #31
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	051b      	lsls	r3, r3, #20
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	68fc      	ldr	r4, [r7, #12]
 800358a:	643b      	str	r3, [r7, #64]	; 0x40
 800358c:	647c      	str	r4, [r7, #68]	; 0x44
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800358e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8003590:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8003592:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003594:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003596:	0002      	movs	r2, r0
 8003598:	000b      	movs	r3, r1
 800359a:	f7fd f89b 	bl	80006d4 <__aeabi_dadd>
 800359e:	0002      	movs	r2, r0
 80035a0:	000b      	movs	r3, r1
 80035a2:	623a      	str	r2, [r7, #32]
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035aa:	2000      	movs	r0, #0
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	05c9      	lsls	r1, r1, #23
 80035b0:	f7fe fa6c 	bl	8001a8c <__aeabi_dsub>
 80035b4:	0002      	movs	r2, r0
 80035b6:	000b      	movs	r3, r1
 80035b8:	61ba      	str	r2, [r7, #24]
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	2200      	movs	r2, #0
 80035be:	4b5f      	ldr	r3, [pc, #380]	; (800373c <_etoa+0x3dc>)
 80035c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035c4:	f7fd fbf0 	bl	8000da8 <__aeabi_ddiv>
 80035c8:	0002      	movs	r2, r0
 80035ca:	000b      	movs	r3, r1
 80035cc:	0010      	movs	r0, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <_etoa+0x3e0>)
 80035d4:	f7fd f87e 	bl	80006d4 <__aeabi_dadd>
 80035d8:	0002      	movs	r2, r0
 80035da:	000b      	movs	r3, r1
 80035dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035e0:	f7fd fbe2 	bl	8000da8 <__aeabi_ddiv>
 80035e4:	0002      	movs	r2, r0
 80035e6:	000b      	movs	r3, r1
 80035e8:	0010      	movs	r0, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	2200      	movs	r2, #0
 80035ee:	4b55      	ldr	r3, [pc, #340]	; (8003744 <_etoa+0x3e4>)
 80035f0:	f7fd f870 	bl	80006d4 <__aeabi_dadd>
 80035f4:	0002      	movs	r2, r0
 80035f6:	000b      	movs	r3, r1
 80035f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035fc:	f7fd fbd4 	bl	8000da8 <__aeabi_ddiv>
 8003600:	0002      	movs	r2, r0
 8003602:	000b      	movs	r3, r1
 8003604:	69b8      	ldr	r0, [r7, #24]
 8003606:	69f9      	ldr	r1, [r7, #28]
 8003608:	f7fd f864 	bl	80006d4 <__aeabi_dadd>
 800360c:	0002      	movs	r2, r0
 800360e:	000b      	movs	r3, r1
 8003610:	6a38      	ldr	r0, [r7, #32]
 8003612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003614:	f7fd fbc8 	bl	8000da8 <__aeabi_ddiv>
 8003618:	0002      	movs	r2, r0
 800361a:	000b      	movs	r3, r1
 800361c:	0010      	movs	r0, r2
 800361e:	0019      	movs	r1, r3
 8003620:	2200      	movs	r2, #0
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <_etoa+0x39c>)
 8003624:	f7fd f856 	bl	80006d4 <__aeabi_dadd>
 8003628:	0002      	movs	r2, r0
 800362a:	000b      	movs	r3, r1
 800362c:	0020      	movs	r0, r4
 800362e:	0029      	movs	r1, r5
 8003630:	f7fd ffc0 	bl	80015b4 <__aeabi_dmul>
 8003634:	0002      	movs	r2, r0
 8003636:	000b      	movs	r3, r1
 8003638:	643a      	str	r2, [r7, #64]	; 0x40
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
    // correct for rounding errors
    if (value < conv.F) {
 800363c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800363e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003640:	19b9      	adds	r1, r7, r6
 8003642:	6808      	ldr	r0, [r1, #0]
 8003644:	6849      	ldr	r1, [r1, #4]
 8003646:	f7fc feeb 	bl	8000420 <__aeabi_dcmplt>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d00c      	beq.n	8003668 <_etoa+0x308>
        expval--;
 800364e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003650:	3b01      	subs	r3, #1
 8003652:	677b      	str	r3, [r7, #116]	; 0x74
        conv.F /= 10;
 8003654:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003658:	2200      	movs	r2, #0
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <_etoa+0x3e0>)
 800365c:	f7fd fba4 	bl	8000da8 <__aeabi_ddiv>
 8003660:	0002      	movs	r2, r0
 8003662:	000b      	movs	r3, r1
 8003664:	643a      	str	r2, [r7, #64]	; 0x40
 8003666:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366a:	2b63      	cmp	r3, #99	; 0x63
 800366c:	dc04      	bgt.n	8003678 <_etoa+0x318>
 800366e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003670:	3363      	adds	r3, #99	; 0x63
 8003672:	db01      	blt.n	8003678 <_etoa+0x318>
 8003674:	2304      	movs	r3, #4
 8003676:	e000      	b.n	800367a <_etoa+0x31a>
 8003678:	2305      	movs	r3, #5
 800367a:	673b      	str	r3, [r7, #112]	; 0x70

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
 800367c:	23a0      	movs	r3, #160	; 0xa0
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4013      	ands	r3, r2
 8003688:	d100      	bne.n	800368c <_etoa+0x32c>
 800368a:	e074      	b.n	8003776 <_etoa+0x416>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
 800368c:	4a2e      	ldr	r2, [pc, #184]	; (8003748 <_etoa+0x3e8>)
 800368e:	4b2f      	ldr	r3, [pc, #188]	; (800374c <_etoa+0x3ec>)
 8003690:	2490      	movs	r4, #144	; 0x90
 8003692:	1939      	adds	r1, r7, r4
 8003694:	6808      	ldr	r0, [r1, #0]
 8003696:	6849      	ldr	r1, [r1, #4]
 8003698:	f7fc fee0 	bl	800045c <__aeabi_dcmpge>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d059      	beq.n	8003754 <_etoa+0x3f4>
 80036a0:	2200      	movs	r2, #0
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <_etoa+0x3f0>)
 80036a4:	1939      	adds	r1, r7, r4
 80036a6:	6808      	ldr	r0, [r1, #0]
 80036a8:	6849      	ldr	r1, [r1, #4]
 80036aa:	f7fc feb9 	bl	8000420 <__aeabi_dcmplt>
 80036ae:	1e03      	subs	r3, r0, #0
 80036b0:	d050      	beq.n	8003754 <_etoa+0x3f4>
            if ((int)prec > expval) {
 80036b2:	2198      	movs	r1, #152	; 0x98
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036ba:	429a      	cmp	r2, r3
 80036bc:	da07      	bge.n	80036ce <_etoa+0x36e>
                prec = (unsigned)((int)prec - expval - 1);
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	187a      	adds	r2, r7, r1
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e003      	b.n	80036d6 <_etoa+0x376>
            } else {
                prec = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	2298      	movs	r2, #152	; 0x98
 80036d2:	18ba      	adds	r2, r7, r2
 80036d4:	6013      	str	r3, [r2, #0]
            }
            flags |= FLAGS_PRECISION; // make sure _ftoa respects precision
 80036d6:	21a0      	movs	r1, #160	; 0xa0
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	4313      	orrs	r3, r2
 80036e2:	187a      	adds	r2, r7, r1
 80036e4:	6013      	str	r3, [r2, #0]
            // no characters in exponent
            minwidth = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	673b      	str	r3, [r7, #112]	; 0x70
            expval = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	677b      	str	r3, [r7, #116]	; 0x74
 80036ee:	e042      	b.n	8003776 <_etoa+0x416>
 80036f0:	7fefffff 	.word	0x7fefffff
 80036f4:	ffefffff 	.word	0xffefffff
 80036f8:	fffffc01 	.word	0xfffffc01
 80036fc:	3ff00000 	.word	0x3ff00000
 8003700:	509f79fb 	.word	0x509f79fb
 8003704:	3fd34413 	.word	0x3fd34413
 8003708:	8b60c8b3 	.word	0x8b60c8b3
 800370c:	3fc68a28 	.word	0x3fc68a28
 8003710:	3ff80000 	.word	0x3ff80000
 8003714:	636f4361 	.word	0x636f4361
 8003718:	3fd287a7 	.word	0x3fd287a7
 800371c:	0979a371 	.word	0x0979a371
 8003720:	400a934f 	.word	0x400a934f
 8003724:	3fe00000 	.word	0x3fe00000
 8003728:	bbb55516 	.word	0xbbb55516
 800372c:	40026bb1 	.word	0x40026bb1
 8003730:	fefa39ef 	.word	0xfefa39ef
 8003734:	3fe62e42 	.word	0x3fe62e42
 8003738:	000003ff 	.word	0x000003ff
 800373c:	402c0000 	.word	0x402c0000
 8003740:	40240000 	.word	0x40240000
 8003744:	40180000 	.word	0x40180000
 8003748:	eb1c432d 	.word	0xeb1c432d
 800374c:	3f1a36e2 	.word	0x3f1a36e2
 8003750:	412e8480 	.word	0x412e8480
        } else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003754:	2198      	movs	r1, #152	; 0x98
 8003756:	187b      	adds	r3, r7, r1
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <_etoa+0x416>
 800375e:	23a0      	movs	r3, #160	; 0xa0
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4013      	ands	r3, r2
 800376a:	d004      	beq.n	8003776 <_etoa+0x416>
                --prec;
 800376c:	187b      	adds	r3, r7, r1
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3b01      	subs	r3, #1
 8003772:	187a      	adds	r2, r7, r1
 8003774:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
 8003776:	229c      	movs	r2, #156	; 0x9c
 8003778:	18bb      	adds	r3, r7, r2
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (width > minwidth) {
 800377e:	18bb      	adds	r3, r7, r2
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003784:	429a      	cmp	r2, r3
 8003786:	d904      	bls.n	8003792 <_etoa+0x432>
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
 8003788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800378a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003790:	e001      	b.n	8003796 <_etoa+0x436>
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
 8003796:	23a0      	movs	r3, #160	; 0xa0
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2202      	movs	r2, #2
 800379e:	4013      	ands	r3, r2
 80037a0:	d004      	beq.n	80037ac <_etoa+0x44c>
 80037a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <_etoa+0x44c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    }

    // rescale the float value
    if (expval) {
 80037ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <_etoa+0x46c>
        value /= conv.F;
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b6:	2490      	movs	r4, #144	; 0x90
 80037b8:	1939      	adds	r1, r7, r4
 80037ba:	6808      	ldr	r0, [r1, #0]
 80037bc:	6849      	ldr	r1, [r1, #4]
 80037be:	f7fd faf3 	bl	8000da8 <__aeabi_ddiv>
 80037c2:	0002      	movs	r2, r0
 80037c4:	000b      	movs	r3, r1
 80037c6:	1939      	adds	r1, r7, r4
 80037c8:	600a      	str	r2, [r1, #0]
 80037ca:	604b      	str	r3, [r1, #4]
    }

    // output the floating part
    const size_t start_idx = idx;
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80037d0:	233b      	movs	r3, #59	; 0x3b
 80037d2:	2230      	movs	r2, #48	; 0x30
 80037d4:	4694      	mov	ip, r2
 80037d6:	44bc      	add	ip, r7
 80037d8:	4463      	add	r3, ip
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <_etoa+0x498>
 80037e0:	2390      	movs	r3, #144	; 0x90
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e8:	2394      	movs	r3, #148	; 0x94
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	0612      	lsls	r2, r2, #24
 80037f2:	405a      	eors	r2, r3
 80037f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f6:	e005      	b.n	8003804 <_etoa+0x4a4>
 80037f8:	2390      	movs	r3, #144	; 0x90
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	685c      	ldr	r4, [r3, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
 8003802:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003804:	23a0      	movs	r3, #160	; 0xa0
 8003806:	18fa      	adds	r2, r7, r3
 8003808:	6813      	ldr	r3, [r2, #0]
 800380a:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <_etoa+0x570>)
 800380c:	4013      	ands	r3, r2
 800380e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8003810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003812:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003814:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003816:	9304      	str	r3, [sp, #16]
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	9303      	str	r3, [sp, #12]
 800381c:	2598      	movs	r5, #152	; 0x98
 800381e:	197d      	adds	r5, r7, r5
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	9302      	str	r3, [sp, #8]
 8003824:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8003826:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8003828:	9500      	str	r5, [sp, #0]
 800382a:	9601      	str	r6, [sp, #4]
 800382c:	0023      	movs	r3, r4
 800382e:	f7ff fb59 	bl	8002ee4 <_ftoa>
 8003832:	0003      	movs	r3, r0
 8003834:	637b      	str	r3, [r7, #52]	; 0x34

    // output the exponent part
    if (minwidth) {
 8003836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003838:	2b00      	cmp	r3, #0
 800383a:	d044      	beq.n	80038c6 <_etoa+0x566>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800383c:	23a0      	movs	r3, #160	; 0xa0
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2220      	movs	r2, #32
 8003844:	4013      	ands	r3, r2
 8003846:	d001      	beq.n	800384c <_etoa+0x4ec>
 8003848:	2045      	movs	r0, #69	; 0x45
 800384a:	e000      	b.n	800384e <_etoa+0x4ee>
 800384c:	2065      	movs	r0, #101	; 0x65
 800384e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003850:	1c53      	adds	r3, r2, #1
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003858:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800385a:	47a0      	blx	r4
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0,
 800385c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385e:	17da      	asrs	r2, r3, #31
 8003860:	189b      	adds	r3, r3, r2
 8003862:	4053      	eors	r3, r2
 8003864:	469c      	mov	ip, r3
 8003866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003868:	0fdb      	lsrs	r3, r3, #31
 800386a:	b2db      	uxtb	r3, r3
 800386c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800386e:	3a01      	subs	r2, #1
 8003870:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8003872:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003878:	2605      	movs	r6, #5
 800387a:	9605      	str	r6, [sp, #20]
 800387c:	9204      	str	r2, [sp, #16]
 800387e:	2200      	movs	r2, #0
 8003880:	9203      	str	r2, [sp, #12]
 8003882:	220a      	movs	r2, #10
 8003884:	9202      	str	r2, [sp, #8]
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	4663      	mov	r3, ip
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	002b      	movs	r3, r5
 800388e:	0022      	movs	r2, r4
 8003890:	f7ff fa4c 	bl	8002d2c <_ntoa_long>
 8003894:	0003      	movs	r3, r0
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
 8003898:	23a0      	movs	r3, #160	; 0xa0
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2202      	movs	r2, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	d010      	beq.n	80038c6 <_etoa+0x566>
            while (idx - start_idx < width)
 80038a4:	e007      	b.n	80038b6 <_etoa+0x556>
                out(' ', buffer, idx++, maxlen);
 80038a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a8:	1c53      	adds	r3, r2, #1
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038b0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80038b2:	2020      	movs	r0, #32
 80038b4:	47a0      	blx	r4
            while (idx - start_idx < width)
 80038b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	229c      	movs	r2, #156	; 0x9c
 80038be:	18ba      	adds	r2, r7, r2
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d8ef      	bhi.n	80038a6 <_etoa+0x546>
        }
    }
    return idx;
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b01f      	add	sp, #124	; 0x7c
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d0:	fffff7ff 	.word	0xfffff7ff

080038d4 <_vsnprintf>:
#endif // PRINTF_SUPPORT_EXPONENTIAL
#endif // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
 80038d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d6:	46c6      	mov	lr, r8
 80038d8:	b500      	push	{lr}
 80038da:	b0a6      	sub	sp, #152	; 0x98
 80038dc:	af0a      	add	r7, sp, #40	; 0x28
 80038de:	6278      	str	r0, [r7, #36]	; 0x24
 80038e0:	6239      	str	r1, [r7, #32]
 80038e2:	61fa      	str	r2, [r7, #28]
 80038e4:	61bb      	str	r3, [r7, #24]
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (!buffer) {
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <_vsnprintf+0x20>
 80038f0:	f000 fc26 	bl	8004140 <_vsnprintf+0x86c>
        // use null output function
        out = _out_null;
 80038f4:	4bd0      	ldr	r3, [pc, #832]	; (8003c38 <_vsnprintf+0x364>)
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while (*format) {
 80038f8:	f000 fc22 	bl	8004140 <_vsnprintf+0x86c>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b25      	cmp	r3, #37	; 0x25
 8003902:	d00d      	beq.n	8003920 <_vsnprintf+0x4c>
            // no
            out(*format, buffer, idx++, maxlen);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	7818      	ldrb	r0, [r3, #0]
 8003908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800390a:	1c53      	adds	r3, r2, #1
 800390c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003914:	47a0      	blx	r4
            format++;
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	3301      	adds	r3, #1
 800391a:	61bb      	str	r3, [r7, #24]
            continue;
 800391c:	f000 fc10 	bl	8004140 <_vsnprintf+0x86c>
        } else {
            // yes, evaluate it
            format++;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	3301      	adds	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
        }

        // evaluate flags
        flags = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	66fb      	str	r3, [r7, #108]	; 0x6c
        do {
            switch (*format) {
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	3b20      	subs	r3, #32
 8003930:	2b10      	cmp	r3, #16
 8003932:	d836      	bhi.n	80039a2 <_vsnprintf+0xce>
 8003934:	009a      	lsls	r2, r3, #2
 8003936:	4bc1      	ldr	r3, [pc, #772]	; (8003c3c <_vsnprintf+0x368>)
 8003938:	18d3      	adds	r3, r2, r3
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	469f      	mov	pc, r3
            case '0':
                flags |= FLAGS_ZEROPAD;
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	2201      	movs	r2, #1
 8003942:	4313      	orrs	r3, r2
 8003944:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3301      	adds	r3, #1
 800394a:	61bb      	str	r3, [r7, #24]
                n = 1U;
 800394c:	2301      	movs	r3, #1
 800394e:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 8003950:	e02a      	b.n	80039a8 <_vsnprintf+0xd4>
            case '-':
                flags |= FLAGS_LEFT;
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	2202      	movs	r2, #2
 8003956:	4313      	orrs	r3, r2
 8003958:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	3301      	adds	r3, #1
 800395e:	61bb      	str	r3, [r7, #24]
                n = 1U;
 8003960:	2301      	movs	r3, #1
 8003962:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 8003964:	e020      	b.n	80039a8 <_vsnprintf+0xd4>
            case '+':
                flags |= FLAGS_PLUS;
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	2204      	movs	r2, #4
 800396a:	4313      	orrs	r3, r2
 800396c:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	3301      	adds	r3, #1
 8003972:	61bb      	str	r3, [r7, #24]
                n = 1U;
 8003974:	2301      	movs	r3, #1
 8003976:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 8003978:	e016      	b.n	80039a8 <_vsnprintf+0xd4>
            case ' ':
                flags |= FLAGS_SPACE;
 800397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397c:	2208      	movs	r2, #8
 800397e:	4313      	orrs	r3, r2
 8003980:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	3301      	adds	r3, #1
 8003986:	61bb      	str	r3, [r7, #24]
                n = 1U;
 8003988:	2301      	movs	r3, #1
 800398a:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 800398c:	e00c      	b.n	80039a8 <_vsnprintf+0xd4>
            case '#':
                flags |= FLAGS_HASH;
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	2210      	movs	r2, #16
 8003992:	4313      	orrs	r3, r2
 8003994:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	3301      	adds	r3, #1
 800399a:	61bb      	str	r3, [r7, #24]
                n = 1U;
 800399c:	2301      	movs	r3, #1
 800399e:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80039a0:	e002      	b.n	80039a8 <_vsnprintf+0xd4>
            default:
                n = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80039a6:	46c0      	nop			; (mov r8, r8)
            }
        } while (n);
 80039a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1bd      	bne.n	800392a <_vsnprintf+0x56>

        // evaluate width field
        width = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
        if (_is_digit(*format)) {
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7ff f859 	bl	8002a6e <_is_digit>
 80039bc:	1e03      	subs	r3, r0, #0
 80039be:	d007      	beq.n	80039d0 <_vsnprintf+0xfc>
            width = _atoi(&format);
 80039c0:	2318      	movs	r3, #24
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7ff f86b 	bl	8002aa0 <_atoi>
 80039ca:	0003      	movs	r3, r0
 80039cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ce:	e01c      	b.n	8003a0a <_vsnprintf+0x136>
        } else if (*format == '*') {
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b2a      	cmp	r3, #42	; 0x2a
 80039d6:	d118      	bne.n	8003a0a <_vsnprintf+0x136>
            const int w = va_arg(va, int);
 80039d8:	2388      	movs	r3, #136	; 0x88
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	2188      	movs	r1, #136	; 0x88
 80039e2:	1879      	adds	r1, r7, r1
 80039e4:	600a      	str	r2, [r1, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	64bb      	str	r3, [r7, #72]	; 0x48
            if (w < 0) {
 80039ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da07      	bge.n	8003a00 <_vsnprintf+0x12c>
                flags |= FLAGS_LEFT; // reverse padding
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	2202      	movs	r2, #2
 80039f4:	4313      	orrs	r3, r2
 80039f6:	66fb      	str	r3, [r7, #108]	; 0x6c
                width = (unsigned int)-w;
 80039f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fa:	425b      	negs	r3, r3
 80039fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80039fe:	e001      	b.n	8003a04 <_vsnprintf+0x130>
            } else {
                width = (unsigned int)w;
 8003a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a02:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            format++;
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
        }

        // evaluate precision field
        precision = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	667b      	str	r3, [r7, #100]	; 0x64
        if (*format == '.') {
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b2e      	cmp	r3, #46	; 0x2e
 8003a14:	d12b      	bne.n	8003a6e <_vsnprintf+0x19a>
            flags |= FLAGS_PRECISION;
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	00d2      	lsls	r2, r2, #3
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
            if (_is_digit(*format)) {
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7ff f81f 	bl	8002a6e <_is_digit>
 8003a30:	1e03      	subs	r3, r0, #0
 8003a32:	d007      	beq.n	8003a44 <_vsnprintf+0x170>
                precision = _atoi(&format);
 8003a34:	2318      	movs	r3, #24
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff f831 	bl	8002aa0 <_atoi>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	667b      	str	r3, [r7, #100]	; 0x64
 8003a42:	e014      	b.n	8003a6e <_vsnprintf+0x19a>
            } else if (*format == '*') {
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4a:	d110      	bne.n	8003a6e <_vsnprintf+0x19a>
                const int prec = (int)va_arg(va, int);
 8003a4c:	2388      	movs	r3, #136	; 0x88
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	2188      	movs	r1, #136	; 0x88
 8003a56:	1879      	adds	r1, r7, r1
 8003a58:	600a      	str	r2, [r1, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8003a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da00      	bge.n	8003a66 <_vsnprintf+0x192>
 8003a64:	2300      	movs	r3, #0
 8003a66:	667b      	str	r3, [r7, #100]	; 0x64
                format++;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61bb      	str	r3, [r7, #24]
            }
        }

        // evaluate length field
        switch (*format) {
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	3b68      	subs	r3, #104	; 0x68
 8003a74:	2b12      	cmp	r3, #18
 8003a76:	d847      	bhi.n	8003b08 <_vsnprintf+0x234>
 8003a78:	009a      	lsls	r2, r3, #2
 8003a7a:	4b71      	ldr	r3, [pc, #452]	; (8003c40 <_vsnprintf+0x36c>)
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	469f      	mov	pc, r3
        case 'l':
            flags |= FLAGS_LONG;
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	0052      	lsls	r2, r2, #1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
            if (*format == 'l') {
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b6c      	cmp	r3, #108	; 0x6c
 8003a98:	d138      	bne.n	8003b0c <_vsnprintf+0x238>
                flags |= FLAGS_LONG_LONG;
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9c:	2280      	movs	r2, #128	; 0x80
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	61bb      	str	r3, [r7, #24]
            }
            break;
 8003aaa:	e02f      	b.n	8003b0c <_vsnprintf+0x238>
        case 'h':
            flags |= FLAGS_SHORT;
 8003aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
            if (*format == 'h') {
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b68      	cmp	r3, #104	; 0x68
 8003ac0:	d126      	bne.n	8003b10 <_vsnprintf+0x23c>
                flags |= FLAGS_CHAR;
 8003ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac4:	2240      	movs	r2, #64	; 0x40
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	3301      	adds	r3, #1
 8003ace:	61bb      	str	r3, [r7, #24]
            }
            break;
 8003ad0:	e01e      	b.n	8003b10 <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
        case 't':
            flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	0052      	lsls	r2, r2, #1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
            break;
 8003ae2:	e016      	b.n	8003b12 <_vsnprintf+0x23e>
#endif
        case 'j':
            flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	0092      	lsls	r2, r2, #2
 8003aea:	4313      	orrs	r3, r2
 8003aec:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61bb      	str	r3, [r7, #24]
            break;
 8003af4:	e00d      	b.n	8003b12 <_vsnprintf+0x23e>
        case 'z':
            flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	2280      	movs	r2, #128	; 0x80
 8003afa:	0052      	lsls	r2, r2, #1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61bb      	str	r3, [r7, #24]
            break;
 8003b06:	e004      	b.n	8003b12 <_vsnprintf+0x23e>
        default:
            break;
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	e002      	b.n	8003b12 <_vsnprintf+0x23e>
            break;
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	e000      	b.n	8003b12 <_vsnprintf+0x23e>
            break;
 8003b10:	46c0      	nop			; (mov r8, r8)
        }

        // evaluate specifier
        switch (*format) {
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	3b25      	subs	r3, #37	; 0x25
 8003b18:	2b53      	cmp	r3, #83	; 0x53
 8003b1a:	d900      	bls.n	8003b1e <_vsnprintf+0x24a>
 8003b1c:	e303      	b.n	8004126 <_vsnprintf+0x852>
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	4b48      	ldr	r3, [pc, #288]	; (8003c44 <_vsnprintf+0x370>)
 8003b22:	18d3      	adds	r3, r2, r3
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	469f      	mov	pc, r3
        case 'X':
        case 'o':
        case 'b': {
            // set the base
            unsigned int base;
            if (*format == 'x' || *format == 'X') {
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b78      	cmp	r3, #120	; 0x78
 8003b2e:	d003      	beq.n	8003b38 <_vsnprintf+0x264>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b58      	cmp	r3, #88	; 0x58
 8003b36:	d102      	bne.n	8003b3e <_vsnprintf+0x26a>
                base = 16U;
 8003b38:	2310      	movs	r3, #16
 8003b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3c:	e013      	b.n	8003b66 <_vsnprintf+0x292>
            } else if (*format == 'o') {
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b6f      	cmp	r3, #111	; 0x6f
 8003b44:	d102      	bne.n	8003b4c <_vsnprintf+0x278>
                base = 8U;
 8003b46:	2308      	movs	r3, #8
 8003b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b4a:	e00c      	b.n	8003b66 <_vsnprintf+0x292>
            } else if (*format == 'b') {
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b62      	cmp	r3, #98	; 0x62
 8003b52:	d102      	bne.n	8003b5a <_vsnprintf+0x286>
                base = 2U;
 8003b54:	2302      	movs	r3, #2
 8003b56:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b58:	e005      	b.n	8003b66 <_vsnprintf+0x292>
            } else {
                base = 10U;
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	65bb      	str	r3, [r7, #88]	; 0x58
                flags &= ~FLAGS_HASH; // no hash for dec format
 8003b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b60:	2210      	movs	r2, #16
 8003b62:	4393      	bics	r3, r2
 8003b64:	66fb      	str	r3, [r7, #108]	; 0x6c
            }
            // uppercase
            if (*format == 'X') {
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b58      	cmp	r3, #88	; 0x58
 8003b6c:	d103      	bne.n	8003b76 <_vsnprintf+0x2a2>
                flags |= FLAGS_UPPERCASE;
 8003b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b70:	2220      	movs	r2, #32
 8003b72:	4313      	orrs	r3, r2
 8003b74:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            // no plus or space flag for u, x, X, o, b
            if ((*format != 'i') && (*format != 'd')) {
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b69      	cmp	r3, #105	; 0x69
 8003b7c:	d007      	beq.n	8003b8e <_vsnprintf+0x2ba>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d003      	beq.n	8003b8e <_vsnprintf+0x2ba>
                flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b88:	220c      	movs	r2, #12
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            // ignore '0' flag when precision is given
            if (flags & FLAGS_PRECISION) {
 8003b8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4013      	ands	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <_vsnprintf+0x2cc>
                flags &= ~FLAGS_ZEROPAD;
 8003b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            // convert the integer
            if ((*format == 'i') || (*format == 'd')) {
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b69      	cmp	r3, #105	; 0x69
 8003ba6:	d004      	beq.n	8003bb2 <_vsnprintf+0x2de>
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b64      	cmp	r3, #100	; 0x64
 8003bae:	d000      	beq.n	8003bb2 <_vsnprintf+0x2de>
 8003bb0:	e0b7      	b.n	8003d22 <_vsnprintf+0x44e>
                // signed
                if (flags & FLAGS_LONG_LONG) {
 8003bb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d045      	beq.n	8003c48 <_vsnprintf+0x374>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                    const long long value = va_arg(va, long long);
 8003bbc:	2388      	movs	r3, #136	; 0x88
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3307      	adds	r3, #7
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	001a      	movs	r2, r3
 8003bca:	3208      	adds	r2, #8
 8003bcc:	2188      	movs	r1, #136	; 0x88
 8003bce:	1879      	adds	r1, r7, r1
 8003bd0:	600a      	str	r2, [r1, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 8003bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da04      	bge.n	8003bec <_vsnprintf+0x318>
 8003be2:	0010      	movs	r0, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	4242      	negs	r2, r0
 8003bea:	418b      	sbcs	r3, r1
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 8003bec:	0010      	movs	r0, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	0fdb      	lsrs	r3, r3, #31
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	469c      	mov	ip, r3
 8003c02:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8003c04:	6a3d      	ldr	r5, [r7, #32]
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	4698      	mov	r8, r3
 8003c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0c:	9308      	str	r3, [sp, #32]
 8003c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c10:	9307      	str	r3, [sp, #28]
 8003c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c14:	9306      	str	r3, [sp, #24]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	697c      	ldr	r4, [r7, #20]
 8003c1a:	9304      	str	r3, [sp, #16]
 8003c1c:	9405      	str	r4, [sp, #20]
 8003c1e:	9202      	str	r2, [sp, #8]
 8003c20:	9000      	str	r0, [sp, #0]
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	4663      	mov	r3, ip
 8003c26:	0032      	movs	r2, r6
 8003c28:	0029      	movs	r1, r5
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f7ff f8e7 	bl	8002dfe <_ntoa_long_long>
 8003c30:	0003      	movs	r3, r0
 8003c32:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (flags & FLAGS_LONG_LONG) {
 8003c34:	e103      	b.n	8003e3e <_vsnprintf+0x56a>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	080029ed 	.word	0x080029ed
 8003c3c:	080078a0 	.word	0x080078a0
 8003c40:	080078e4 	.word	0x080078e4
 8003c44:	08007930 	.word	0x08007930
                                          precision, width, flags);
#endif
                } else if (flags & FLAGS_LONG) {
 8003c48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d025      	beq.n	8003c9e <_vsnprintf+0x3ca>
                    const long value = va_arg(va, long);
 8003c52:	2388      	movs	r3, #136	; 0x88
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	2188      	movs	r1, #136	; 0x88
 8003c5c:	1879      	adds	r1, r7, r1
 8003c5e:	600a      	str	r2, [r1, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value),
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	17da      	asrs	r2, r3, #31
 8003c68:	189b      	adds	r3, r3, r2
 8003c6a:	4053      	eors	r3, r2
 8003c6c:	001e      	movs	r6, r3
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	0fdb      	lsrs	r3, r3, #31
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	69fd      	ldr	r5, [r7, #28]
 8003c76:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003c78:	6a39      	ldr	r1, [r7, #32]
 8003c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	9305      	str	r3, [sp, #20]
 8003c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c86:	9303      	str	r3, [sp, #12]
 8003c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8a:	9302      	str	r3, [sp, #8]
 8003c8c:	9201      	str	r2, [sp, #4]
 8003c8e:	9600      	str	r6, [sp, #0]
 8003c90:	002b      	movs	r3, r5
 8003c92:	0022      	movs	r2, r4
 8003c94:	f7ff f84a 	bl	8002d2c <_ntoa_long>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (flags & FLAGS_LONG_LONG) {
 8003c9c:	e0cf      	b.n	8003e3e <_vsnprintf+0x56a>
                                     value < 0, base, precision, width, flags);
                } else {
                    const int value = (flags & FLAGS_CHAR)
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca0:	2240      	movs	r2, #64	; 0x40
 8003ca2:	4013      	ands	r3, r2
                                          ? (char)va_arg(va, int)
                                          : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003ca4:	d009      	beq.n	8003cba <_vsnprintf+0x3e6>
                                          ? (char)va_arg(va, int)
 8003ca6:	2388      	movs	r3, #136	; 0x88
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	1d1a      	adds	r2, r3, #4
 8003cae:	2188      	movs	r1, #136	; 0x88
 8003cb0:	1879      	adds	r1, r7, r1
 8003cb2:	600a      	str	r2, [r1, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e015      	b.n	8003ce6 <_vsnprintf+0x412>
                                          : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <_vsnprintf+0x402>
 8003cc2:	2388      	movs	r3, #136	; 0x88
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	2188      	movs	r1, #136	; 0x88
 8003ccc:	1879      	adds	r1, r7, r1
 8003cce:	600a      	str	r2, [r1, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	e007      	b.n	8003ce6 <_vsnprintf+0x412>
 8003cd6:	2388      	movs	r3, #136	; 0x88
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	2188      	movs	r1, #136	; 0x88
 8003ce0:	1879      	adds	r1, r7, r1
 8003ce2:	600a      	str	r2, [r1, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
                    const int value = (flags & FLAGS_CHAR)
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value),
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	17da      	asrs	r2, r3, #31
 8003cec:	189b      	adds	r3, r3, r2
 8003cee:	4053      	eors	r3, r2
 8003cf0:	001e      	movs	r6, r3
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	0fdb      	lsrs	r3, r3, #31
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	69fd      	ldr	r5, [r7, #28]
 8003cfa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003cfc:	6a39      	ldr	r1, [r7, #32]
 8003cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d02:	9305      	str	r3, [sp, #20]
 8003d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d06:	9304      	str	r3, [sp, #16]
 8003d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0a:	9303      	str	r3, [sp, #12]
 8003d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d0e:	9302      	str	r3, [sp, #8]
 8003d10:	9201      	str	r2, [sp, #4]
 8003d12:	9600      	str	r6, [sp, #0]
 8003d14:	002b      	movs	r3, r5
 8003d16:	0022      	movs	r2, r4
 8003d18:	f7ff f808 	bl	8002d2c <_ntoa_long>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (flags & FLAGS_LONG_LONG) {
 8003d20:	e08d      	b.n	8003e3e <_vsnprintf+0x56a>
                                     value < 0, base, precision, width, flags);
                }
            } else {
                // unsigned
                if (flags & FLAGS_LONG_LONG) {
 8003d22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d02b      	beq.n	8003d84 <_vsnprintf+0x4b0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
 8003d2c:	2388      	movs	r3, #136	; 0x88
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3307      	adds	r3, #7
 8003d34:	2207      	movs	r2, #7
 8003d36:	4393      	bics	r3, r2
 8003d38:	001a      	movs	r2, r3
 8003d3a:	3208      	adds	r2, #8
 8003d3c:	2188      	movs	r1, #136	; 0x88
 8003d3e:	1879      	adds	r1, r7, r1
 8003d40:	600a      	str	r2, [r1, #0]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	69fe      	ldr	r6, [r7, #28]
 8003d50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d52:	6a3d      	ldr	r5, [r7, #32]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	469c      	mov	ip, r3
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	9308      	str	r3, [sp, #32]
 8003d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d5e:	9307      	str	r3, [sp, #28]
 8003d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d62:	9306      	str	r3, [sp, #24]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	68fc      	ldr	r4, [r7, #12]
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	9405      	str	r4, [sp, #20]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9302      	str	r3, [sp, #8]
 8003d70:	9000      	str	r0, [sp, #0]
 8003d72:	9101      	str	r1, [sp, #4]
 8003d74:	0033      	movs	r3, r6
 8003d76:	0029      	movs	r1, r5
 8003d78:	4660      	mov	r0, ip
 8003d7a:	f7ff f840 	bl	8002dfe <_ntoa_long_long>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d82:	e05c      	b.n	8003e3e <_vsnprintf+0x56a>
                                          precision, width, flags);
#endif
                } else if (flags & FLAGS_LONG) {
 8003d84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d01d      	beq.n	8003dca <_vsnprintf+0x4f6>
                    idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
 8003d8e:	2388      	movs	r3, #136	; 0x88
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	2188      	movs	r1, #136	; 0x88
 8003d98:	1879      	adds	r1, r7, r1
 8003d9a:	600a      	str	r2, [r1, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69fd      	ldr	r5, [r7, #28]
 8003da0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003da2:	6a39      	ldr	r1, [r7, #32]
 8003da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003da8:	9205      	str	r2, [sp, #20]
 8003daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dac:	9204      	str	r2, [sp, #16]
 8003dae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003db0:	9203      	str	r2, [sp, #12]
 8003db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db4:	9202      	str	r2, [sp, #8]
 8003db6:	2200      	movs	r2, #0
 8003db8:	9201      	str	r2, [sp, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	002b      	movs	r3, r5
 8003dbe:	0022      	movs	r2, r4
 8003dc0:	f7fe ffb4 	bl	8002d2c <_ntoa_long>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc8:	e039      	b.n	8003e3e <_vsnprintf+0x56a>
                                     width, flags);
                } else {
                    const unsigned int value =
                        (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int)
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	4013      	ands	r3, r2
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8003dd0:	d009      	beq.n	8003de6 <_vsnprintf+0x512>
                        (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int)
 8003dd2:	2388      	movs	r3, #136	; 0x88
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1d1a      	adds	r2, r3, #4
 8003dda:	2188      	movs	r1, #136	; 0x88
 8003ddc:	1879      	adds	r1, r7, r1
 8003dde:	600a      	str	r2, [r1, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e015      	b.n	8003e12 <_vsnprintf+0x53e>
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	4013      	ands	r3, r2
                                                                     : va_arg(va, unsigned int);
 8003dec:	d009      	beq.n	8003e02 <_vsnprintf+0x52e>
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8003dee:	2388      	movs	r3, #136	; 0x88
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	2188      	movs	r1, #136	; 0x88
 8003df8:	1879      	adds	r1, r7, r1
 8003dfa:	600a      	str	r2, [r1, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	e007      	b.n	8003e12 <_vsnprintf+0x53e>
                                                                     : va_arg(va, unsigned int);
 8003e02:	2388      	movs	r3, #136	; 0x88
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1d1a      	adds	r2, r3, #4
 8003e0a:	2188      	movs	r1, #136	; 0x88
 8003e0c:	1879      	adds	r1, r7, r1
 8003e0e:	600a      	str	r2, [r1, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
                    const unsigned int value =
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
                    idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003e14:	69fc      	ldr	r4, [r7, #28]
 8003e16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e18:	6a39      	ldr	r1, [r7, #32]
 8003e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	9305      	str	r3, [sp, #20]
 8003e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e22:	9304      	str	r3, [sp, #16]
 8003e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e2a:	9302      	str	r3, [sp, #8]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0023      	movs	r3, r4
 8003e36:	f7fe ff79 	bl	8002d2c <_ntoa_long>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
            }
            format++;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	3301      	adds	r3, #1
 8003e42:	61bb      	str	r3, [r7, #24]
            break;
 8003e44:	e17c      	b.n	8004140 <_vsnprintf+0x86c>
        }
#if defined(PRINTF_SUPPORT_FLOAT)
        case 'f':
        case 'F':
            if (*format == 'F')
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b46      	cmp	r3, #70	; 0x46
 8003e4c:	d103      	bne.n	8003e56 <_vsnprintf+0x582>
                flags |= FLAGS_UPPERCASE;
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	2220      	movs	r2, #32
 8003e52:	4313      	orrs	r3, r2
 8003e54:	66fb      	str	r3, [r7, #108]	; 0x6c
            idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e56:	2388      	movs	r3, #136	; 0x88
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3307      	adds	r3, #7
 8003e5e:	2207      	movs	r2, #7
 8003e60:	4393      	bics	r3, r2
 8003e62:	001a      	movs	r2, r3
 8003e64:	3208      	adds	r2, #8
 8003e66:	2188      	movs	r1, #136	; 0x88
 8003e68:	1879      	adds	r1, r7, r1
 8003e6a:	600a      	str	r2, [r1, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	69fe      	ldr	r6, [r7, #28]
 8003e72:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8003e74:	6a3c      	ldr	r4, [r7, #32]
 8003e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e78:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003e7a:	9104      	str	r1, [sp, #16]
 8003e7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e7e:	9103      	str	r1, [sp, #12]
 8003e80:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003e82:	9102      	str	r1, [sp, #8]
 8003e84:	9200      	str	r2, [sp, #0]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	0033      	movs	r3, r6
 8003e8a:	002a      	movs	r2, r5
 8003e8c:	0021      	movs	r1, r4
 8003e8e:	f7ff f829 	bl	8002ee4 <_ftoa>
 8003e92:	0003      	movs	r3, r0
 8003e94:	65fb      	str	r3, [r7, #92]	; 0x5c
            format++;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61bb      	str	r3, [r7, #24]
            break;
 8003e9c:	e150      	b.n	8004140 <_vsnprintf+0x86c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        case 'e':
        case 'E':
        case 'g':
        case 'G':
            if ((*format == 'g') || (*format == 'G'))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b67      	cmp	r3, #103	; 0x67
 8003ea4:	d003      	beq.n	8003eae <_vsnprintf+0x5da>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b47      	cmp	r3, #71	; 0x47
 8003eac:	d104      	bne.n	8003eb8 <_vsnprintf+0x5e4>
                flags |= FLAGS_ADAPT_EXP;
 8003eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	0112      	lsls	r2, r2, #4
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
            if ((*format == 'E') || (*format == 'G'))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b45      	cmp	r3, #69	; 0x45
 8003ebe:	d003      	beq.n	8003ec8 <_vsnprintf+0x5f4>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b47      	cmp	r3, #71	; 0x47
 8003ec6:	d103      	bne.n	8003ed0 <_vsnprintf+0x5fc>
                flags |= FLAGS_UPPERCASE;
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	2220      	movs	r2, #32
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	66fb      	str	r3, [r7, #108]	; 0x6c
            idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003ed0:	2388      	movs	r3, #136	; 0x88
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3307      	adds	r3, #7
 8003ed8:	2207      	movs	r2, #7
 8003eda:	4393      	bics	r3, r2
 8003edc:	001a      	movs	r2, r3
 8003ede:	3208      	adds	r2, #8
 8003ee0:	2188      	movs	r1, #136	; 0x88
 8003ee2:	1879      	adds	r1, r7, r1
 8003ee4:	600a      	str	r2, [r1, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	69fe      	ldr	r6, [r7, #28]
 8003eec:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8003eee:	6a3c      	ldr	r4, [r7, #32]
 8003ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ef2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003ef4:	9104      	str	r1, [sp, #16]
 8003ef6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ef8:	9103      	str	r1, [sp, #12]
 8003efa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003efc:	9102      	str	r1, [sp, #8]
 8003efe:	9200      	str	r2, [sp, #0]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	0033      	movs	r3, r6
 8003f04:	002a      	movs	r2, r5
 8003f06:	0021      	movs	r1, r4
 8003f08:	f7ff fa2a 	bl	8003360 <_etoa>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
            format++;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
            break;
 8003f16:	e113      	b.n	8004140 <_vsnprintf+0x86c>
#endif // PRINTF_SUPPORT_EXPONENTIAL
#endif // PRINTF_SUPPORT_FLOAT
        case 'c': {
            unsigned int l = 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	657b      	str	r3, [r7, #84]	; 0x54
            // pre padding
            if (!(flags & FLAGS_LEFT)) {
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	2202      	movs	r2, #2
 8003f20:	4013      	ands	r3, r2
 8003f22:	d10e      	bne.n	8003f42 <_vsnprintf+0x66e>
                while (l++ < width) {
 8003f24:	e007      	b.n	8003f36 <_vsnprintf+0x662>
                    out(' ', buffer, idx++, maxlen);
 8003f26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f28:	1c53      	adds	r3, r2, #1
 8003f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	6a39      	ldr	r1, [r7, #32]
 8003f30:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f32:	2020      	movs	r0, #32
 8003f34:	47a0      	blx	r4
                while (l++ < width) {
 8003f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	657a      	str	r2, [r7, #84]	; 0x54
 8003f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d8f1      	bhi.n	8003f26 <_vsnprintf+0x652>
                }
            }
            // char output
            out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003f42:	2388      	movs	r3, #136	; 0x88
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	2188      	movs	r1, #136	; 0x88
 8003f4c:	1879      	adds	r1, r7, r1
 8003f4e:	600a      	str	r2, [r1, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b2d8      	uxtb	r0, r3
 8003f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f56:	1c53      	adds	r3, r2, #1
 8003f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	6a39      	ldr	r1, [r7, #32]
 8003f5e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f60:	47a0      	blx	r4
            // post padding
            if (flags & FLAGS_LEFT) {
 8003f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f64:	2202      	movs	r2, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <_vsnprintf+0x6b4>
                while (l++ < width) {
 8003f6a:	e007      	b.n	8003f7c <_vsnprintf+0x6a8>
                    out(' ', buffer, idx++, maxlen);
 8003f6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f6e:	1c53      	adds	r3, r2, #1
 8003f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	6a39      	ldr	r1, [r7, #32]
 8003f76:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f78:	2020      	movs	r0, #32
 8003f7a:	47a0      	blx	r4
                while (l++ < width) {
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	657a      	str	r2, [r7, #84]	; 0x54
 8003f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d8f1      	bhi.n	8003f6c <_vsnprintf+0x698>
                }
            }
            format++;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
            break;
 8003f8e:	e0d7      	b.n	8004140 <_vsnprintf+0x86c>
        }

        case 's': {
            const char *p = va_arg(va, char *);
 8003f90:	2388      	movs	r3, #136	; 0x88
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1d1a      	adds	r2, r3, #4
 8003f98:	2188      	movs	r1, #136	; 0x88
 8003f9a:	1879      	adds	r1, r7, r1
 8003f9c:	600a      	str	r2, [r1, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	653b      	str	r3, [r7, #80]	; 0x50
            unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003fa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <_vsnprintf+0x6d8>
 8003fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003faa:	e001      	b.n	8003fb0 <_vsnprintf+0x6dc>
 8003fac:	2301      	movs	r3, #1
 8003fae:	425b      	negs	r3, r3
 8003fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	0010      	movs	r0, r2
 8003fb6:	f7fe fd3f 	bl	8002a38 <_strnlen_s>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
            // pre padding
            if (flags & FLAGS_PRECISION) {
 8003fbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d005      	beq.n	8003fd4 <_vsnprintf+0x700>
                l = (l < precision ? l : precision);
 8003fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d900      	bls.n	8003fd2 <_vsnprintf+0x6fe>
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            if (!(flags & FLAGS_LEFT)) {
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d11a      	bne.n	8004012 <_vsnprintf+0x73e>
                while (l++ < width) {
 8003fdc:	e007      	b.n	8003fee <_vsnprintf+0x71a>
                    out(' ', buffer, idx++, maxlen);
 8003fde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fe0:	1c53      	adds	r3, r2, #1
 8003fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	6a39      	ldr	r1, [r7, #32]
 8003fe8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003fea:	2020      	movs	r0, #32
 8003fec:	47a0      	blx	r4
                while (l++ < width) {
 8003fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ff4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d8f1      	bhi.n	8003fde <_vsnprintf+0x70a>
                }
            }
            // string output
            while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003ffa:	e00a      	b.n	8004012 <_vsnprintf+0x73e>
                out(*(p++), buffer, idx++, maxlen);
 8003ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	653a      	str	r2, [r7, #80]	; 0x50
 8004002:	7818      	ldrb	r0, [r3, #0]
 8004004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004006:	1c53      	adds	r3, r2, #1
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004010:	47a0      	blx	r4
            while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <_vsnprintf+0x75a>
 800401a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4013      	ands	r3, r2
 8004022:	d0eb      	beq.n	8003ffc <_vsnprintf+0x728>
 8004024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004026:	1e5a      	subs	r2, r3, #1
 8004028:	667a      	str	r2, [r7, #100]	; 0x64
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e6      	bne.n	8003ffc <_vsnprintf+0x728>
            }
            // post padding
            if (flags & FLAGS_LEFT) {
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d00e      	beq.n	8004054 <_vsnprintf+0x780>
                while (l++ < width) {
 8004036:	e007      	b.n	8004048 <_vsnprintf+0x774>
                    out(' ', buffer, idx++, maxlen);
 8004038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800403a:	1c53      	adds	r3, r2, #1
 800403c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	6a39      	ldr	r1, [r7, #32]
 8004042:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004044:	2020      	movs	r0, #32
 8004046:	47a0      	blx	r4
                while (l++ < width) {
 8004048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800404e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004050:	429a      	cmp	r2, r3
 8004052:	d8f1      	bhi.n	8004038 <_vsnprintf+0x764>
                }
            }
            format++;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	3301      	adds	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
            break;
 800405a:	e071      	b.n	8004140 <_vsnprintf+0x86c>
        }

        case 'p': {
            width = sizeof(void *) * 2U;
 800405c:	2308      	movs	r3, #8
 800405e:	66bb      	str	r3, [r7, #104]	; 0x68
            flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	2221      	movs	r2, #33	; 0x21
 8004064:	4313      	orrs	r3, r2
 8004066:	66fb      	str	r3, [r7, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004068:	212b      	movs	r1, #43	; 0x2b
 800406a:	2318      	movs	r3, #24
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	185b      	adds	r3, r3, r1
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
            if (is_ll) {
 8004074:	2318      	movs	r3, #24
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	185b      	adds	r3, r3, r1
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d025      	beq.n	80040cc <_vsnprintf+0x7f8>
                idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void *), false, 16U,
 8004080:	2388      	movs	r3, #136	; 0x88
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	1d1a      	adds	r2, r3, #4
 8004088:	2188      	movs	r1, #136	; 0x88
 800408a:	1879      	adds	r1, r7, r1
 800408c:	600a      	str	r2, [r1, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	69fd      	ldr	r5, [r7, #28]
 8004098:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800409a:	6a39      	ldr	r1, [r7, #32]
 800409c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	9308      	str	r3, [sp, #32]
 80040a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a4:	9307      	str	r3, [sp, #28]
 80040a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a8:	9306      	str	r3, [sp, #24]
 80040aa:	2210      	movs	r2, #16
 80040ac:	2300      	movs	r3, #0
 80040ae:	9204      	str	r2, [sp, #16]
 80040b0:	9305      	str	r3, [sp, #20]
 80040b2:	2300      	movs	r3, #0
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	9200      	str	r2, [sp, #0]
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	002b      	movs	r3, r5
 80040c0:	0022      	movs	r2, r4
 80040c2:	f7fe fe9c 	bl	8002dfe <_ntoa_long_long>
 80040c6:	0003      	movs	r3, r0
 80040c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ca:	e01c      	b.n	8004106 <_vsnprintf+0x832>
                                      precision, width, flags);
            } else {
#endif
                idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false,
 80040cc:	2388      	movs	r3, #136	; 0x88
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	2188      	movs	r1, #136	; 0x88
 80040d6:	1879      	adds	r1, r7, r1
 80040d8:	600a      	str	r2, [r1, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	001d      	movs	r5, r3
 80040de:	69fc      	ldr	r4, [r7, #28]
 80040e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040e2:	6a39      	ldr	r1, [r7, #32]
 80040e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	9305      	str	r3, [sp, #20]
 80040ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ec:	9304      	str	r3, [sp, #16]
 80040ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f0:	9303      	str	r3, [sp, #12]
 80040f2:	2310      	movs	r3, #16
 80040f4:	9302      	str	r3, [sp, #8]
 80040f6:	2300      	movs	r3, #0
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	9500      	str	r5, [sp, #0]
 80040fc:	0023      	movs	r3, r4
 80040fe:	f7fe fe15 	bl	8002d2c <_ntoa_long>
 8004102:	0003      	movs	r3, r0
 8004104:	65fb      	str	r3, [r7, #92]	; 0x5c
                                 16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
            }
#endif
            format++;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	3301      	adds	r3, #1
 800410a:	61bb      	str	r3, [r7, #24]
            break;
 800410c:	e018      	b.n	8004140 <_vsnprintf+0x86c>
        }

        case '%':
            out('%', buffer, idx++, maxlen);
 800410e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004110:	1c53      	adds	r3, r2, #1
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	6a39      	ldr	r1, [r7, #32]
 8004118:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800411a:	2025      	movs	r0, #37	; 0x25
 800411c:	47a0      	blx	r4
            format++;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	3301      	adds	r3, #1
 8004122:	61bb      	str	r3, [r7, #24]
            break;
 8004124:	e00c      	b.n	8004140 <_vsnprintf+0x86c>

        default:
            out(*format, buffer, idx++, maxlen);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	7818      	ldrb	r0, [r3, #0]
 800412a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800412c:	1c53      	adds	r3, r2, #1
 800412e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	6a39      	ldr	r1, [r7, #32]
 8004134:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004136:	47a0      	blx	r4
            format++;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	3301      	adds	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
            break;
 800413e:	46c0      	nop			; (mov r8, r8)
    while (*format) {
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <_vsnprintf+0x878>
 8004148:	f7ff fbd8 	bl	80038fc <_vsnprintf+0x28>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800414c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	429a      	cmp	r2, r3
 8004152:	d302      	bcc.n	800415a <_vsnprintf+0x886>
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	1e5a      	subs	r2, r3, #1
 8004158:	e000      	b.n	800415c <_vsnprintf+0x888>
 800415a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	6a39      	ldr	r1, [r7, #32]
 8004160:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004162:	2000      	movs	r0, #0
 8004164:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
 8004166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b01c      	add	sp, #112	; 0x70
 800416e:	bc80      	pop	{r7}
 8004170:	46b8      	mov	r8, r7
 8004172:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004174 <printf_>:

///////////////////////////////////////////////////////////////////////////////

int printf_(const char *format, ...) {
 8004174:	b40f      	push	{r0, r1, r2, r3}
 8004176:	b590      	push	{r4, r7, lr}
 8004178:	b087      	sub	sp, #28
 800417a:	af02      	add	r7, sp, #8
    va_list va;
    va_start(va, format);
 800417c:	2324      	movs	r3, #36	; 0x24
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	60bb      	str	r3, [r7, #8]
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004182:	6a3c      	ldr	r4, [r7, #32]
 8004184:	2301      	movs	r3, #1
 8004186:	425a      	negs	r2, r3
 8004188:	1d39      	adds	r1, r7, #4
 800418a:	4808      	ldr	r0, [pc, #32]	; (80041ac <printf_+0x38>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	0023      	movs	r3, r4
 8004192:	f7ff fb9f 	bl	80038d4 <_vsnprintf>
 8004196:	0003      	movs	r3, r0
 8004198:	60fb      	str	r3, [r7, #12]
    va_end(va);
    return ret;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b005      	add	sp, #20
 80041a2:	bc90      	pop	{r4, r7}
 80041a4:	bc08      	pop	{r3}
 80041a6:	b004      	add	sp, #16
 80041a8:	4718      	bx	r3
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	08002a09 	.word	0x08002a09

080041b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_MspInit+0x24>)
 80041b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_MspInit+0x24>)
 80041ba:	2101      	movs	r1, #1
 80041bc:	430a      	orrs	r2, r1
 80041be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_MspInit+0x24>)
 80041c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_MspInit+0x24>)
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	0549      	lsls	r1, r1, #21
 80041ca:	430a      	orrs	r2, r1
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000

080041d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e0:	240c      	movs	r4, #12
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	0018      	movs	r0, r3
 80041e6:	2314      	movs	r3, #20
 80041e8:	001a      	movs	r2, r3
 80041ea:	2100      	movs	r1, #0
 80041ec:	f003 fabe 	bl	800776c <memset>
  if(hi2c->Instance==I2C1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_I2C_MspInit+0x80>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d129      	bne.n	800424e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <HAL_I2C_MspInit+0x84>)
 80041fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fe:	4b17      	ldr	r3, [pc, #92]	; (800425c <HAL_I2C_MspInit+0x84>)
 8004200:	2102      	movs	r1, #2
 8004202:	430a      	orrs	r2, r1
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_I2C_MspInit+0x84>)
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	2202      	movs	r2, #2
 800420c:	4013      	ands	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8004212:	193b      	adds	r3, r7, r4
 8004214:	22c0      	movs	r2, #192	; 0xc0
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800421a:	0021      	movs	r1, r4
 800421c:	187b      	adds	r3, r7, r1
 800421e:	2212      	movs	r2, #18
 8004220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004222:	187b      	adds	r3, r7, r1
 8004224:	2201      	movs	r2, #1
 8004226:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	187b      	adds	r3, r7, r1
 800422a:	2203      	movs	r2, #3
 800422c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800422e:	187b      	adds	r3, r7, r1
 8004230:	2204      	movs	r2, #4
 8004232:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004234:	187b      	adds	r3, r7, r1
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <HAL_I2C_MspInit+0x88>)
 8004238:	0019      	movs	r1, r3
 800423a:	0010      	movs	r0, r2
 800423c:	f000 fb92 	bl	8004964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_I2C_MspInit+0x84>)
 8004242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_I2C_MspInit+0x84>)
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	0389      	lsls	r1, r1, #14
 800424a:	430a      	orrs	r2, r1
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b009      	add	sp, #36	; 0x24
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	40005400 	.word	0x40005400
 800425c:	40021000 	.word	0x40021000
 8004260:	50000400 	.word	0x50000400

08004264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b08b      	sub	sp, #44	; 0x2c
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800426c:	2414      	movs	r4, #20
 800426e:	193b      	adds	r3, r7, r4
 8004270:	0018      	movs	r0, r3
 8004272:	2314      	movs	r3, #20
 8004274:	001a      	movs	r2, r3
 8004276:	2100      	movs	r1, #0
 8004278:	f003 fa78 	bl	800776c <memset>
  if(huart->Instance==LPUART1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a48      	ldr	r2, [pc, #288]	; (80043a4 <HAL_UART_MspInit+0x140>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d140      	bne.n	8004308 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004286:	4b48      	ldr	r3, [pc, #288]	; (80043a8 <HAL_UART_MspInit+0x144>)
 8004288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_UART_MspInit+0x144>)
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	02c9      	lsls	r1, r1, #11
 8004290:	430a      	orrs	r2, r1
 8004292:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004294:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <HAL_UART_MspInit+0x144>)
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_UART_MspInit+0x144>)
 800429a:	2102      	movs	r1, #2
 800429c:	430a      	orrs	r2, r1
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
 80042a0:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <HAL_UART_MspInit+0x144>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	2202      	movs	r2, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	00d2      	lsls	r2, r2, #3
 80042b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042b4:	193b      	adds	r3, r7, r4
 80042b6:	2212      	movs	r2, #18
 80042b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	2201      	movs	r2, #1
 80042be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	2203      	movs	r2, #3
 80042c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	2204      	movs	r2, #4
 80042ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042cc:	193b      	adds	r3, r7, r4
 80042ce:	4a37      	ldr	r2, [pc, #220]	; (80043ac <HAL_UART_MspInit+0x148>)
 80042d0:	0019      	movs	r1, r3
 80042d2:	0010      	movs	r0, r2
 80042d4:	f000 fb46 	bl	8004964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042d8:	0021      	movs	r1, r4
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	2202      	movs	r2, #2
 80042e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ee:	187b      	adds	r3, r7, r1
 80042f0:	2203      	movs	r2, #3
 80042f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	2204      	movs	r2, #4
 80042f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fa:	187b      	adds	r3, r7, r1
 80042fc:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <HAL_UART_MspInit+0x148>)
 80042fe:	0019      	movs	r1, r3
 8004300:	0010      	movs	r0, r2
 8004302:	f000 fb2f 	bl	8004964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004306:	e048      	b.n	800439a <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <HAL_UART_MspInit+0x14c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d143      	bne.n	800439a <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004312:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_UART_MspInit+0x144>)
 8004314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_UART_MspInit+0x144>)
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	01c9      	lsls	r1, r1, #7
 800431c:	430a      	orrs	r2, r1
 800431e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004320:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <HAL_UART_MspInit+0x144>)
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_UART_MspInit+0x144>)
 8004326:	2101      	movs	r1, #1
 8004328:	430a      	orrs	r2, r1
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c
 800432c:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_UART_MspInit+0x144>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2201      	movs	r2, #1
 8004332:	4013      	ands	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART_RX_Pin;
 8004338:	2114      	movs	r1, #20
 800433a:	187b      	adds	r3, r7, r1
 800433c:	22a0      	movs	r2, #160	; 0xa0
 800433e:	00d2      	lsls	r2, r2, #3
 8004340:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004342:	000c      	movs	r4, r1
 8004344:	193b      	adds	r3, r7, r4
 8004346:	2202      	movs	r2, #2
 8004348:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	193b      	adds	r3, r7, r4
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004350:	193b      	adds	r3, r7, r4
 8004352:	2203      	movs	r2, #3
 8004354:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004356:	193b      	adds	r3, r7, r4
 8004358:	2204      	movs	r2, #4
 800435a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435c:	193a      	adds	r2, r7, r4
 800435e:	23a0      	movs	r3, #160	; 0xa0
 8004360:	05db      	lsls	r3, r3, #23
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f000 fafd 	bl	8004964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_TX_Pin;
 800436a:	0021      	movs	r1, r4
 800436c:	187b      	adds	r3, r7, r1
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	0092      	lsls	r2, r2, #2
 8004372:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004374:	187b      	adds	r3, r7, r1
 8004376:	2212      	movs	r2, #18
 8004378:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800437a:	187b      	adds	r3, r7, r1
 800437c:	2201      	movs	r2, #1
 800437e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004380:	187b      	adds	r3, r7, r1
 8004382:	2203      	movs	r2, #3
 8004384:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004386:	187b      	adds	r3, r7, r1
 8004388:	2204      	movs	r2, #4
 800438a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800438c:	187a      	adds	r2, r7, r1
 800438e:	23a0      	movs	r3, #160	; 0xa0
 8004390:	05db      	lsls	r3, r3, #23
 8004392:	0011      	movs	r1, r2
 8004394:	0018      	movs	r0, r3
 8004396:	f000 fae5 	bl	8004964 <HAL_GPIO_Init>
}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	46bd      	mov	sp, r7
 800439e:	b00b      	add	sp, #44	; 0x2c
 80043a0:	bd90      	pop	{r4, r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	40004800 	.word	0x40004800
 80043a8:	40021000 	.word	0x40021000
 80043ac:	50000400 	.word	0x50000400
 80043b0:	40013800 	.word	0x40013800

080043b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b08b      	sub	sp, #44	; 0x2c
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043bc:	2414      	movs	r4, #20
 80043be:	193b      	adds	r3, r7, r4
 80043c0:	0018      	movs	r0, r3
 80043c2:	2314      	movs	r3, #20
 80043c4:	001a      	movs	r2, r3
 80043c6:	2100      	movs	r1, #0
 80043c8:	f003 f9d0 	bl	800776c <memset>
  if(hspi->Instance==SPI1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a41      	ldr	r2, [pc, #260]	; (80044d8 <HAL_SPI_MspInit+0x124>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d14c      	bne.n	8004470 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_SPI_MspInit+0x128>)
 80043d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043da:	4b40      	ldr	r3, [pc, #256]	; (80044dc <HAL_SPI_MspInit+0x128>)
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	0149      	lsls	r1, r1, #5
 80043e0:	430a      	orrs	r2, r1
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e4:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <HAL_SPI_MspInit+0x128>)
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	4b3c      	ldr	r3, [pc, #240]	; (80044dc <HAL_SPI_MspInit+0x128>)
 80043ea:	2101      	movs	r1, #1
 80043ec:	430a      	orrs	r2, r1
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80043f0:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <HAL_SPI_MspInit+0x128>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	2201      	movs	r2, #1
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fc:	4b37      	ldr	r3, [pc, #220]	; (80044dc <HAL_SPI_MspInit+0x128>)
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_SPI_MspInit+0x128>)
 8004402:	2102      	movs	r1, #2
 8004404:	430a      	orrs	r2, r1
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
 8004408:	4b34      	ldr	r3, [pc, #208]	; (80044dc <HAL_SPI_MspInit+0x128>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	2202      	movs	r2, #2
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8004414:	193b      	adds	r3, r7, r4
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	0212      	lsls	r2, r2, #8
 800441a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441c:	193b      	adds	r3, r7, r4
 800441e:	2202      	movs	r2, #2
 8004420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	193b      	adds	r3, r7, r4
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004428:	193b      	adds	r3, r7, r4
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800442e:	193b      	adds	r3, r7, r4
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8004434:	193a      	adds	r2, r7, r4
 8004436:	23a0      	movs	r3, #160	; 0xa0
 8004438:	05db      	lsls	r3, r3, #23
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f000 fa91 	bl	8004964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8004442:	0021      	movs	r1, r4
 8004444:	187b      	adds	r3, r7, r1
 8004446:	2228      	movs	r2, #40	; 0x28
 8004448:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	187b      	adds	r3, r7, r1
 800444c:	2202      	movs	r2, #2
 800444e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	187b      	adds	r3, r7, r1
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004456:	187b      	adds	r3, r7, r1
 8004458:	2200      	movs	r2, #0
 800445a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800445c:	187b      	adds	r3, r7, r1
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004462:	187b      	adds	r3, r7, r1
 8004464:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <HAL_SPI_MspInit+0x12c>)
 8004466:	0019      	movs	r1, r3
 8004468:	0010      	movs	r0, r2
 800446a:	f000 fa7b 	bl	8004964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800446e:	e02e      	b.n	80044ce <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <HAL_SPI_MspInit+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d129      	bne.n	80044ce <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <HAL_SPI_MspInit+0x128>)
 800447c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_SPI_MspInit+0x128>)
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	01c9      	lsls	r1, r1, #7
 8004484:	430a      	orrs	r2, r1
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <HAL_SPI_MspInit+0x128>)
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <HAL_SPI_MspInit+0x128>)
 800448e:	2102      	movs	r1, #2
 8004490:	430a      	orrs	r2, r1
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_SPI_MspInit+0x128>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	2202      	movs	r2, #2
 800449a:	4013      	ands	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 80044a0:	2114      	movs	r1, #20
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	22f0      	movs	r2, #240	; 0xf0
 80044a6:	0212      	lsls	r2, r2, #8
 80044a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	2202      	movs	r2, #2
 80044ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	2203      	movs	r2, #3
 80044ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	4a06      	ldr	r2, [pc, #24]	; (80044e0 <HAL_SPI_MspInit+0x12c>)
 80044c6:	0019      	movs	r1, r3
 80044c8:	0010      	movs	r0, r2
 80044ca:	f000 fa4b 	bl	8004964 <HAL_GPIO_Init>
}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b00b      	add	sp, #44	; 0x2c
 80044d4:	bd90      	pop	{r4, r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	40013000 	.word	0x40013000
 80044dc:	40021000 	.word	0x40021000
 80044e0:	50000400 	.word	0x50000400
 80044e4:	40003800 	.word	0x40003800

080044e8 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b08b      	sub	sp, #44	; 0x2c
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f0:	2414      	movs	r4, #20
 80044f2:	193b      	adds	r3, r7, r4
 80044f4:	0018      	movs	r0, r3
 80044f6:	2314      	movs	r3, #20
 80044f8:	001a      	movs	r2, r3
 80044fa:	2100      	movs	r1, #0
 80044fc:	f003 f936 	bl	800776c <memset>
  if(htsc->Instance==TSC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a41      	ldr	r2, [pc, #260]	; (800460c <HAL_TSC_MspInit+0x124>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d17c      	bne.n	8004604 <HAL_TSC_MspInit+0x11c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800450a:	4b41      	ldr	r3, [pc, #260]	; (8004610 <HAL_TSC_MspInit+0x128>)
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450e:	4b40      	ldr	r3, [pc, #256]	; (8004610 <HAL_TSC_MspInit+0x128>)
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	0249      	lsls	r1, r1, #9
 8004514:	430a      	orrs	r2, r1
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
 8004518:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_TSC_MspInit+0x128>)
 800451a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	025b      	lsls	r3, r3, #9
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004526:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_TSC_MspInit+0x128>)
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_TSC_MspInit+0x128>)
 800452c:	2101      	movs	r1, #1
 800452e:	430a      	orrs	r2, r1
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_TSC_MspInit+0x128>)
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	2201      	movs	r2, #1
 8004538:	4013      	ands	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	4b34      	ldr	r3, [pc, #208]	; (8004610 <HAL_TSC_MspInit+0x128>)
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b33      	ldr	r3, [pc, #204]	; (8004610 <HAL_TSC_MspInit+0x128>)
 8004544:	2102      	movs	r1, #2
 8004546:	430a      	orrs	r2, r1
 8004548:	62da      	str	r2, [r3, #44]	; 0x2c
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_TSC_MspInit+0x128>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8004556:	193b      	adds	r3, r7, r4
 8004558:	2244      	movs	r2, #68	; 0x44
 800455a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455c:	193b      	adds	r3, r7, r4
 800455e:	2202      	movs	r2, #2
 8004560:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	193b      	adds	r3, r7, r4
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004568:	193b      	adds	r3, r7, r4
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800456e:	193b      	adds	r3, r7, r4
 8004570:	2203      	movs	r2, #3
 8004572:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004574:	193a      	adds	r2, r7, r4
 8004576:	23a0      	movs	r3, #160	; 0xa0
 8004578:	05db      	lsls	r3, r3, #23
 800457a:	0011      	movs	r1, r2
 800457c:	0018      	movs	r0, r3
 800457e:	f000 f9f1 	bl	8004964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8004582:	193b      	adds	r3, r7, r4
 8004584:	2288      	movs	r2, #136	; 0x88
 8004586:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004588:	193b      	adds	r3, r7, r4
 800458a:	2212      	movs	r2, #18
 800458c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458e:	193b      	adds	r3, r7, r4
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004594:	193b      	adds	r3, r7, r4
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800459a:	193b      	adds	r3, r7, r4
 800459c:	2203      	movs	r2, #3
 800459e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a0:	193a      	adds	r2, r7, r4
 80045a2:	23a0      	movs	r3, #160	; 0xa0
 80045a4:	05db      	lsls	r3, r3, #23
 80045a6:	0011      	movs	r1, r2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 f9db 	bl	8004964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045ae:	193b      	adds	r3, r7, r4
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b4:	193b      	adds	r3, r7, r4
 80045b6:	2202      	movs	r2, #2
 80045b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ba:	193b      	adds	r3, r7, r4
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c0:	193b      	adds	r3, r7, r4
 80045c2:	2200      	movs	r2, #0
 80045c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80045c6:	193b      	adds	r3, r7, r4
 80045c8:	2203      	movs	r2, #3
 80045ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	4a11      	ldr	r2, [pc, #68]	; (8004614 <HAL_TSC_MspInit+0x12c>)
 80045d0:	0019      	movs	r1, r3
 80045d2:	0010      	movs	r0, r2
 80045d4:	f000 f9c6 	bl	8004964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045d8:	0021      	movs	r1, r4
 80045da:	187b      	adds	r3, r7, r1
 80045dc:	2202      	movs	r2, #2
 80045de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	2212      	movs	r2, #18
 80045e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80045f2:	187b      	adds	r3, r7, r1
 80045f4:	2203      	movs	r2, #3
 80045f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f8:	187b      	adds	r3, r7, r1
 80045fa:	4a06      	ldr	r2, [pc, #24]	; (8004614 <HAL_TSC_MspInit+0x12c>)
 80045fc:	0019      	movs	r1, r3
 80045fe:	0010      	movs	r0, r2
 8004600:	f000 f9b0 	bl	8004964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	b00b      	add	sp, #44	; 0x2c
 800460a:	bd90      	pop	{r4, r7, pc}
 800460c:	40024000 	.word	0x40024000
 8004610:	40021000 	.word	0x40021000
 8004614:	50000400 	.word	0x50000400

08004618 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a06      	ldr	r2, [pc, #24]	; (8004640 <HAL_PCD_MspInit+0x28>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d106      	bne.n	8004638 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_PCD_MspInit+0x2c>)
 800462c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_PCD_MspInit+0x2c>)
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	0409      	lsls	r1, r1, #16
 8004634:	430a      	orrs	r2, r1
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40005c00 	.word	0x40005c00
 8004644:	40021000 	.word	0x40021000

08004648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800464c:	e7fe      	b.n	800464c <NMI_Handler+0x4>

0800464e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004652:	e7fe      	b.n	8004652 <HardFault_Handler+0x4>

08004654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800466c:	f000 f886 	bl	800477c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8004680:	480d      	ldr	r0, [pc, #52]	; (80046b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004682:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004684:	480d      	ldr	r0, [pc, #52]	; (80046bc <LoopForever+0x6>)
  ldr r1, =_edata
 8004686:	490e      	ldr	r1, [pc, #56]	; (80046c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004688:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <LoopForever+0xe>)
  movs r3, #0
 800468a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800468c:	e002      	b.n	8004694 <LoopCopyDataInit>

0800468e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800468e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004692:	3304      	adds	r3, #4

08004694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004698:	d3f9      	bcc.n	800468e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800469a:	4a0b      	ldr	r2, [pc, #44]	; (80046c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800469c:	4c0b      	ldr	r4, [pc, #44]	; (80046cc <LoopForever+0x16>)
  movs r3, #0
 800469e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046a0:	e001      	b.n	80046a6 <LoopFillZerobss>

080046a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a4:	3204      	adds	r2, #4

080046a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046a8:	d3fb      	bcc.n	80046a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80046aa:	f7ff ffe4 	bl	8004676 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046ae:	f003 f839 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046b2:	f7fd fe33 	bl	800231c <main>

080046b6 <LoopForever>:

LoopForever:
    b LoopForever
 80046b6:	e7fe      	b.n	80046b6 <LoopForever>
  ldr   r0, =_estack
 80046b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80046bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80046c4:	08007b4c 	.word	0x08007b4c
  ldr r2, =_sbss
 80046c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80046cc:	2000056c 	.word	0x2000056c

080046d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046d0:	e7fe      	b.n	80046d0 <ADC1_COMP_IRQHandler>
	...

080046d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_Init+0x3c>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <HAL_Init+0x3c>)
 80046e6:	2140      	movs	r1, #64	; 0x40
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ec:	2000      	movs	r0, #0
 80046ee:	f000 f811 	bl	8004714 <HAL_InitTick>
 80046f2:	1e03      	subs	r3, r0, #0
 80046f4:	d003      	beq.n	80046fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80046f6:	1dfb      	adds	r3, r7, #7
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e001      	b.n	8004702 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046fe:	f7ff fd57 	bl	80041b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004702:	1dfb      	adds	r3, r7, #7
 8004704:	781b      	ldrb	r3, [r3, #0]
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40022000 	.word	0x40022000

08004714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <HAL_InitTick+0x5c>)
 800471e:	681c      	ldr	r4, [r3, #0]
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_InitTick+0x60>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	0019      	movs	r1, r3
 8004726:	23fa      	movs	r3, #250	; 0xfa
 8004728:	0098      	lsls	r0, r3, #2
 800472a:	f7fb fced 	bl	8000108 <__udivsi3>
 800472e:	0003      	movs	r3, r0
 8004730:	0019      	movs	r1, r3
 8004732:	0020      	movs	r0, r4
 8004734:	f7fb fce8 	bl	8000108 <__udivsi3>
 8004738:	0003      	movs	r3, r0
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f905 	bl	800494a <HAL_SYSTICK_Config>
 8004740:	1e03      	subs	r3, r0, #0
 8004742:	d001      	beq.n	8004748 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e00f      	b.n	8004768 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d80b      	bhi.n	8004766 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	2301      	movs	r3, #1
 8004752:	425b      	negs	r3, r3
 8004754:	2200      	movs	r2, #0
 8004756:	0018      	movs	r0, r3
 8004758:	f000 f8e2 	bl	8004920 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_InitTick+0x64>)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b003      	add	sp, #12
 800476e:	bd90      	pop	{r4, r7, pc}
 8004770:	20000000 	.word	0x20000000
 8004774:	20000008 	.word	0x20000008
 8004778:	20000004 	.word	0x20000004

0800477c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_IncTick+0x1c>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	001a      	movs	r2, r3
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_IncTick+0x20>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	18d2      	adds	r2, r2, r3
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_IncTick+0x20>)
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	20000008 	.word	0x20000008
 800479c:	20000568 	.word	0x20000568

080047a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  return uwTick;
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <HAL_GetTick+0x10>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	20000568 	.word	0x20000568

080047b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff fff0 	bl	80047a0 <HAL_GetTick>
 80047c0:	0003      	movs	r3, r0
 80047c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3301      	adds	r3, #1
 80047cc:	d005      	beq.n	80047da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_Delay+0x44>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	001a      	movs	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	f7ff ffe0 	bl	80047a0 <HAL_GetTick>
 80047e0:	0002      	movs	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d8f7      	bhi.n	80047dc <HAL_Delay+0x28>
  {
  }
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b004      	add	sp, #16
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	20000008 	.word	0x20000008

080047fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	0002      	movs	r2, r0
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	1dfb      	adds	r3, r7, #7
 8004808:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800480a:	1dfb      	adds	r3, r7, #7
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b7f      	cmp	r3, #127	; 0x7f
 8004810:	d828      	bhi.n	8004864 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004812:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <__NVIC_SetPriority+0xd4>)
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b25b      	sxtb	r3, r3
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	33c0      	adds	r3, #192	; 0xc0
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	589b      	ldr	r3, [r3, r2]
 8004822:	1dfa      	adds	r2, r7, #7
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	0011      	movs	r1, r2
 8004828:	2203      	movs	r2, #3
 800482a:	400a      	ands	r2, r1
 800482c:	00d2      	lsls	r2, r2, #3
 800482e:	21ff      	movs	r1, #255	; 0xff
 8004830:	4091      	lsls	r1, r2
 8004832:	000a      	movs	r2, r1
 8004834:	43d2      	mvns	r2, r2
 8004836:	401a      	ands	r2, r3
 8004838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	22ff      	movs	r2, #255	; 0xff
 8004840:	401a      	ands	r2, r3
 8004842:	1dfb      	adds	r3, r7, #7
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	0018      	movs	r0, r3
 8004848:	2303      	movs	r3, #3
 800484a:	4003      	ands	r3, r0
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004850:	481f      	ldr	r0, [pc, #124]	; (80048d0 <__NVIC_SetPriority+0xd4>)
 8004852:	1dfb      	adds	r3, r7, #7
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	b25b      	sxtb	r3, r3
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	430a      	orrs	r2, r1
 800485c:	33c0      	adds	r3, #192	; 0xc0
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004862:	e031      	b.n	80048c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004864:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <__NVIC_SetPriority+0xd8>)
 8004866:	1dfb      	adds	r3, r7, #7
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	0019      	movs	r1, r3
 800486c:	230f      	movs	r3, #15
 800486e:	400b      	ands	r3, r1
 8004870:	3b08      	subs	r3, #8
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	3306      	adds	r3, #6
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	18d3      	adds	r3, r2, r3
 800487a:	3304      	adds	r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	1dfa      	adds	r2, r7, #7
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	0011      	movs	r1, r2
 8004884:	2203      	movs	r2, #3
 8004886:	400a      	ands	r2, r1
 8004888:	00d2      	lsls	r2, r2, #3
 800488a:	21ff      	movs	r1, #255	; 0xff
 800488c:	4091      	lsls	r1, r2
 800488e:	000a      	movs	r2, r1
 8004890:	43d2      	mvns	r2, r2
 8004892:	401a      	ands	r2, r3
 8004894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	401a      	ands	r2, r3
 800489e:	1dfb      	adds	r3, r7, #7
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	0018      	movs	r0, r3
 80048a4:	2303      	movs	r3, #3
 80048a6:	4003      	ands	r3, r0
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048ac:	4809      	ldr	r0, [pc, #36]	; (80048d4 <__NVIC_SetPriority+0xd8>)
 80048ae:	1dfb      	adds	r3, r7, #7
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	001c      	movs	r4, r3
 80048b4:	230f      	movs	r3, #15
 80048b6:	4023      	ands	r3, r4
 80048b8:	3b08      	subs	r3, #8
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	430a      	orrs	r2, r1
 80048be:	3306      	adds	r3, #6
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	18c3      	adds	r3, r0, r3
 80048c4:	3304      	adds	r3, #4
 80048c6:	601a      	str	r2, [r3, #0]
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b003      	add	sp, #12
 80048ce:	bd90      	pop	{r4, r7, pc}
 80048d0:	e000e100 	.word	0xe000e100
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1e5a      	subs	r2, r3, #1
 80048e4:	2380      	movs	r3, #128	; 0x80
 80048e6:	045b      	lsls	r3, r3, #17
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d301      	bcc.n	80048f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ec:	2301      	movs	r3, #1
 80048ee:	e010      	b.n	8004912 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <SysTick_Config+0x44>)
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	3a01      	subs	r2, #1
 80048f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048f8:	2301      	movs	r3, #1
 80048fa:	425b      	negs	r3, r3
 80048fc:	2103      	movs	r1, #3
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff ff7c 	bl	80047fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <SysTick_Config+0x44>)
 8004906:	2200      	movs	r2, #0
 8004908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800490a:	4b04      	ldr	r3, [pc, #16]	; (800491c <SysTick_Config+0x44>)
 800490c:	2207      	movs	r2, #7
 800490e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004910:	2300      	movs	r3, #0
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b002      	add	sp, #8
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	e000e010 	.word	0xe000e010

08004920 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	210f      	movs	r1, #15
 800492c:	187b      	adds	r3, r7, r1
 800492e:	1c02      	adds	r2, r0, #0
 8004930:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	187b      	adds	r3, r7, r1
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b25b      	sxtb	r3, r3
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f7ff ff5d 	bl	80047fc <__NVIC_SetPriority>
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b004      	add	sp, #16
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7ff ffbf 	bl	80048d8 <SysTick_Config>
 800495a:	0003      	movs	r3, r0
}
 800495c:	0018      	movs	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	b002      	add	sp, #8
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800497a:	e14f      	b.n	8004c1c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4091      	lsls	r1, r2
 8004986:	000a      	movs	r2, r1
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d100      	bne.n	8004994 <HAL_GPIO_Init+0x30>
 8004992:	e140      	b.n	8004c16 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2203      	movs	r2, #3
 800499a:	4013      	ands	r3, r2
 800499c:	2b01      	cmp	r3, #1
 800499e:	d005      	beq.n	80049ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2203      	movs	r2, #3
 80049a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d130      	bne.n	8004a0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	2203      	movs	r2, #3
 80049b8:	409a      	lsls	r2, r3
 80049ba:	0013      	movs	r3, r2
 80049bc:	43da      	mvns	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	409a      	lsls	r2, r3
 80049ce:	0013      	movs	r3, r2
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049e2:	2201      	movs	r2, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	409a      	lsls	r2, r3
 80049e8:	0013      	movs	r3, r2
 80049ea:	43da      	mvns	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	2201      	movs	r2, #1
 80049fa:	401a      	ands	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	409a      	lsls	r2, r3
 8004a00:	0013      	movs	r3, r2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2203      	movs	r2, #3
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d017      	beq.n	8004a4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	409a      	lsls	r2, r3
 8004a28:	0013      	movs	r3, r2
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	0013      	movs	r3, r2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d123      	bne.n	8004a9e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	08da      	lsrs	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	0092      	lsls	r2, r2, #2
 8004a60:	58d3      	ldr	r3, [r2, r3]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2207      	movs	r2, #7
 8004a68:	4013      	ands	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	0013      	movs	r3, r2
 8004a72:	43da      	mvns	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2107      	movs	r1, #7
 8004a82:	400b      	ands	r3, r1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	409a      	lsls	r2, r3
 8004a88:	0013      	movs	r3, r2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	08da      	lsrs	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	6939      	ldr	r1, [r7, #16]
 8004a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	0013      	movs	r3, r2
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	401a      	ands	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	0013      	movs	r3, r2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	23c0      	movs	r3, #192	; 0xc0
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	4013      	ands	r3, r2
 8004adc:	d100      	bne.n	8004ae0 <HAL_GPIO_Init+0x17c>
 8004ade:	e09a      	b.n	8004c16 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae0:	4b54      	ldr	r3, [pc, #336]	; (8004c34 <HAL_GPIO_Init+0x2d0>)
 8004ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_GPIO_Init+0x2d0>)
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <HAL_GPIO_Init+0x2d4>)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	3302      	adds	r3, #2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	589b      	ldr	r3, [r3, r2]
 8004af8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2203      	movs	r2, #3
 8004afe:	4013      	ands	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	220f      	movs	r2, #15
 8004b04:	409a      	lsls	r2, r3
 8004b06:	0013      	movs	r3, r2
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	23a0      	movs	r3, #160	; 0xa0
 8004b14:	05db      	lsls	r3, r3, #23
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d019      	beq.n	8004b4e <HAL_GPIO_Init+0x1ea>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a47      	ldr	r2, [pc, #284]	; (8004c3c <HAL_GPIO_Init+0x2d8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_GPIO_Init+0x1e6>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a46      	ldr	r2, [pc, #280]	; (8004c40 <HAL_GPIO_Init+0x2dc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00d      	beq.n	8004b46 <HAL_GPIO_Init+0x1e2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a45      	ldr	r2, [pc, #276]	; (8004c44 <HAL_GPIO_Init+0x2e0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <HAL_GPIO_Init+0x1de>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a44      	ldr	r2, [pc, #272]	; (8004c48 <HAL_GPIO_Init+0x2e4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_GPIO_Init+0x1da>
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	e008      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b3e:	2306      	movs	r3, #6
 8004b40:	e006      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b42:	2303      	movs	r3, #3
 8004b44:	e004      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e002      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	2103      	movs	r1, #3
 8004b54:	400a      	ands	r2, r1
 8004b56:	0092      	lsls	r2, r2, #2
 8004b58:	4093      	lsls	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b60:	4935      	ldr	r1, [pc, #212]	; (8004c38 <HAL_GPIO_Init+0x2d4>)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	089b      	lsrs	r3, r3, #2
 8004b66:	3302      	adds	r3, #2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	43da      	mvns	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	025b      	lsls	r3, r3, #9
 8004b86:	4013      	ands	r3, r2
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b92:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004b98:	4b2c      	ldr	r3, [pc, #176]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	43da      	mvns	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004bbc:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	035b      	lsls	r3, r3, #13
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004be6:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	43da      	mvns	r2, r3
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	039b      	lsls	r3, r3, #14
 8004c04:	4013      	ands	r3, r2
 8004c06:	d003      	beq.n	8004c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c10:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	40da      	lsrs	r2, r3
 8004c24:	1e13      	subs	r3, r2, #0
 8004c26:	d000      	beq.n	8004c2a <HAL_GPIO_Init+0x2c6>
 8004c28:	e6a8      	b.n	800497c <HAL_GPIO_Init+0x18>
  }
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b006      	add	sp, #24
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	50000400 	.word	0x50000400
 8004c40:	50000800 	.word	0x50000800
 8004c44:	50000c00 	.word	0x50000c00
 8004c48:	50001c00 	.word	0x50001c00
 8004c4c:	40010400 	.word	0x40010400

08004c50 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	0008      	movs	r0, r1
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	1cbb      	adds	r3, r7, #2
 8004c5e:	1c02      	adds	r2, r0, #0
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	1c7b      	adds	r3, r7, #1
 8004c64:	1c0a      	adds	r2, r1, #0
 8004c66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c68:	1c7b      	adds	r3, r7, #1
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c70:	1cbb      	adds	r3, r7, #2
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004c78:	e003      	b.n	8004c82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004c7a:	1cbb      	adds	r3, r7, #2
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b002      	add	sp, #8
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e082      	b.n	8004da4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2241      	movs	r2, #65	; 0x41
 8004ca2:	5c9b      	ldrb	r3, [r3, r2]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7ff fa8f 	bl	80041d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2241      	movs	r2, #65	; 0x41
 8004cbe:	2124      	movs	r1, #36	; 0x24
 8004cc0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	438a      	bics	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4934      	ldr	r1, [pc, #208]	; (8004dac <HAL_I2C_Init+0x120>)
 8004cdc:	400a      	ands	r2, r1
 8004cde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4931      	ldr	r1, [pc, #196]	; (8004db0 <HAL_I2C_Init+0x124>)
 8004cec:	400a      	ands	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d108      	bne.n	8004d0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	0209      	lsls	r1, r1, #8
 8004d04:	430a      	orrs	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	e007      	b.n	8004d1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2184      	movs	r1, #132	; 0x84
 8004d14:	0209      	lsls	r1, r1, #8
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d104      	bne.n	8004d2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2280      	movs	r2, #128	; 0x80
 8004d28:	0112      	lsls	r2, r2, #4
 8004d2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	491f      	ldr	r1, [pc, #124]	; (8004db4 <HAL_I2C_Init+0x128>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	491a      	ldr	r1, [pc, #104]	; (8004db0 <HAL_I2C_Init+0x124>)
 8004d48:	400a      	ands	r2, r1
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69d9      	ldr	r1, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2101      	movs	r1, #1
 8004d82:	430a      	orrs	r2, r1
 8004d84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2241      	movs	r2, #65	; 0x41
 8004d90:	2120      	movs	r1, #32
 8004d92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2242      	movs	r2, #66	; 0x42
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	f0ffffff 	.word	0xf0ffffff
 8004db0:	ffff7fff 	.word	0xffff7fff
 8004db4:	02008000 	.word	0x02008000

08004db8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b089      	sub	sp, #36	; 0x24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	000c      	movs	r4, r1
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	1c22      	adds	r2, r4, #0
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	2308      	movs	r3, #8
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	1c02      	adds	r2, r0, #0
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	1dbb      	adds	r3, r7, #6
 8004dd8:	1c0a      	adds	r2, r1, #0
 8004dda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2241      	movs	r2, #65	; 0x41
 8004de0:	5c9b      	ldrb	r3, [r3, r2]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d000      	beq.n	8004dea <HAL_I2C_Mem_Write+0x32>
 8004de8:	e10c      	b.n	8005004 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_I2C_Mem_Write+0x42>
 8004df0:	232c      	movs	r3, #44	; 0x2c
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2280      	movs	r2, #128	; 0x80
 8004dfe:	0092      	lsls	r2, r2, #2
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e0ff      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2240      	movs	r2, #64	; 0x40
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2C_Mem_Write+0x5c>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0f8      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2240      	movs	r2, #64	; 0x40
 8004e18:	2101      	movs	r1, #1
 8004e1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e1c:	f7ff fcc0 	bl	80047a0 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	0219      	lsls	r1, r3, #8
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2319      	movs	r3, #25
 8004e30:	2201      	movs	r2, #1
 8004e32:	f000 fb0b 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004e36:	1e03      	subs	r3, r0, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0e3      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2241      	movs	r2, #65	; 0x41
 8004e42:	2121      	movs	r1, #33	; 0x21
 8004e44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2242      	movs	r2, #66	; 0x42
 8004e4a:	2140      	movs	r1, #64	; 0x40
 8004e4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	222c      	movs	r2, #44	; 0x2c
 8004e5e:	18ba      	adds	r2, r7, r2
 8004e60:	8812      	ldrh	r2, [r2, #0]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e6a:	1dbb      	adds	r3, r7, #6
 8004e6c:	881c      	ldrh	r4, [r3, #0]
 8004e6e:	2308      	movs	r3, #8
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	881a      	ldrh	r2, [r3, #0]
 8004e74:	230a      	movs	r3, #10
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	8819      	ldrh	r1, [r3, #0]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	0023      	movs	r3, r4
 8004e86:	f000 f9f9 	bl	800527c <I2C_RequestMemoryWrite>
 8004e8a:	1e03      	subs	r3, r0, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	2100      	movs	r1, #0
 8004e94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e0b5      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2bff      	cmp	r3, #255	; 0xff
 8004ea2:	d911      	bls.n	8004ec8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	045c      	lsls	r4, r3, #17
 8004eb4:	230a      	movs	r3, #10
 8004eb6:	18fb      	adds	r3, r7, r3
 8004eb8:	8819      	ldrh	r1, [r3, #0]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	0023      	movs	r3, r4
 8004ec2:	f000 fbf7 	bl	80056b4 <I2C_TransferConfig>
 8004ec6:	e012      	b.n	8004eee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	049c      	lsls	r4, r3, #18
 8004edc:	230a      	movs	r3, #10
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	8819      	ldrh	r1, [r3, #0]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	0023      	movs	r3, r4
 8004eea:	f000 fbe3 	bl	80056b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fae8 	bl	80054ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004efa:	1e03      	subs	r3, r0, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e081      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	781a      	ldrb	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d03a      	beq.n	8004fb2 <HAL_I2C_Mem_Write+0x1fa>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d136      	bne.n	8004fb2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	0013      	movs	r3, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	f000 fa7b 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e053      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2bff      	cmp	r3, #255	; 0xff
 8004f66:	d911      	bls.n	8004f8c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	22ff      	movs	r2, #255	; 0xff
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	045c      	lsls	r4, r3, #17
 8004f78:	230a      	movs	r3, #10
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	8819      	ldrh	r1, [r3, #0]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	2300      	movs	r3, #0
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	0023      	movs	r3, r4
 8004f86:	f000 fb95 	bl	80056b4 <I2C_TransferConfig>
 8004f8a:	e012      	b.n	8004fb2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	049c      	lsls	r4, r3, #18
 8004fa0:	230a      	movs	r3, #10
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	8819      	ldrh	r1, [r3, #0]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	0023      	movs	r3, r4
 8004fae:	f000 fb81 	bl	80056b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d198      	bne.n	8004eee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 fac0 	bl	8005548 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fc8:	1e03      	subs	r3, r0, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e01a      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	490b      	ldr	r1, [pc, #44]	; (8005010 <HAL_I2C_Mem_Write+0x258>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2241      	movs	r2, #65	; 0x41
 8004fec:	2120      	movs	r1, #32
 8004fee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2242      	movs	r2, #66	; 0x42
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2240      	movs	r2, #64	; 0x40
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e000      	b.n	8005006 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
  }
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b007      	add	sp, #28
 800500c:	bd90      	pop	{r4, r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	fe00e800 	.word	0xfe00e800

08005014 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	000c      	movs	r4, r1
 800501e:	0010      	movs	r0, r2
 8005020:	0019      	movs	r1, r3
 8005022:	230a      	movs	r3, #10
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	1c22      	adds	r2, r4, #0
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	2308      	movs	r3, #8
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	1c02      	adds	r2, r0, #0
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	1dbb      	adds	r3, r7, #6
 8005034:	1c0a      	adds	r2, r1, #0
 8005036:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2241      	movs	r2, #65	; 0x41
 800503c:	5c9b      	ldrb	r3, [r3, r2]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b20      	cmp	r3, #32
 8005042:	d000      	beq.n	8005046 <HAL_I2C_Mem_Read+0x32>
 8005044:	e110      	b.n	8005268 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <HAL_I2C_Mem_Read+0x42>
 800504c:	232c      	movs	r3, #44	; 0x2c
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d105      	bne.n	8005062 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2280      	movs	r2, #128	; 0x80
 800505a:	0092      	lsls	r2, r2, #2
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e103      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2240      	movs	r2, #64	; 0x40
 8005066:	5c9b      	ldrb	r3, [r3, r2]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_I2C_Mem_Read+0x5c>
 800506c:	2302      	movs	r3, #2
 800506e:	e0fc      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2240      	movs	r2, #64	; 0x40
 8005074:	2101      	movs	r1, #1
 8005076:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005078:	f7ff fb92 	bl	80047a0 <HAL_GetTick>
 800507c:	0003      	movs	r3, r0
 800507e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	0219      	lsls	r1, r3, #8
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	2319      	movs	r3, #25
 800508c:	2201      	movs	r2, #1
 800508e:	f000 f9dd 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e0e7      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2241      	movs	r2, #65	; 0x41
 800509e:	2122      	movs	r1, #34	; 0x22
 80050a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2242      	movs	r2, #66	; 0x42
 80050a6:	2140      	movs	r1, #64	; 0x40
 80050a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	222c      	movs	r2, #44	; 0x2c
 80050ba:	18ba      	adds	r2, r7, r2
 80050bc:	8812      	ldrh	r2, [r2, #0]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050c6:	1dbb      	adds	r3, r7, #6
 80050c8:	881c      	ldrh	r4, [r3, #0]
 80050ca:	2308      	movs	r3, #8
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	230a      	movs	r3, #10
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	8819      	ldrh	r1, [r3, #0]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	0023      	movs	r3, r4
 80050e2:	f000 f92f 	bl	8005344 <I2C_RequestMemoryRead>
 80050e6:	1e03      	subs	r3, r0, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	2100      	movs	r1, #0
 80050f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e0b9      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2bff      	cmp	r3, #255	; 0xff
 80050fe:	d911      	bls.n	8005124 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	22ff      	movs	r2, #255	; 0xff
 8005104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	b2da      	uxtb	r2, r3
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	045c      	lsls	r4, r3, #17
 8005110:	230a      	movs	r3, #10
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	8819      	ldrh	r1, [r3, #0]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	4b56      	ldr	r3, [pc, #344]	; (8005274 <HAL_I2C_Mem_Read+0x260>)
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	0023      	movs	r3, r4
 800511e:	f000 fac9 	bl	80056b4 <I2C_TransferConfig>
 8005122:	e012      	b.n	800514a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	b2da      	uxtb	r2, r3
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	049c      	lsls	r4, r3, #18
 8005138:	230a      	movs	r3, #10
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	8819      	ldrh	r1, [r3, #0]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	4b4c      	ldr	r3, [pc, #304]	; (8005274 <HAL_I2C_Mem_Read+0x260>)
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	0023      	movs	r3, r4
 8005146:	f000 fab5 	bl	80056b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800514a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	0013      	movs	r3, r2
 8005154:	2200      	movs	r2, #0
 8005156:	2104      	movs	r1, #4
 8005158:	f000 f978 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 800515c:	1e03      	subs	r3, r0, #0
 800515e:	d001      	beq.n	8005164 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e082      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d03a      	beq.n	8005216 <HAL_I2C_Mem_Read+0x202>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d136      	bne.n	8005216 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	0013      	movs	r3, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	f000 f949 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 80051ba:	1e03      	subs	r3, r0, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e053      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2bff      	cmp	r3, #255	; 0xff
 80051ca:	d911      	bls.n	80051f0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	22ff      	movs	r2, #255	; 0xff
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	045c      	lsls	r4, r3, #17
 80051dc:	230a      	movs	r3, #10
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	8819      	ldrh	r1, [r3, #0]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	2300      	movs	r3, #0
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	0023      	movs	r3, r4
 80051ea:	f000 fa63 	bl	80056b4 <I2C_TransferConfig>
 80051ee:	e012      	b.n	8005216 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	049c      	lsls	r4, r3, #18
 8005204:	230a      	movs	r3, #10
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	8819      	ldrh	r1, [r3, #0]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	2300      	movs	r3, #0
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	0023      	movs	r3, r4
 8005212:	f000 fa4f 	bl	80056b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d194      	bne.n	800514a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	0018      	movs	r0, r3
 8005228:	f000 f98e 	bl	8005548 <I2C_WaitOnSTOPFlagUntilTimeout>
 800522c:	1e03      	subs	r3, r0, #0
 800522e:	d001      	beq.n	8005234 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e01a      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2220      	movs	r2, #32
 800523a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	490c      	ldr	r1, [pc, #48]	; (8005278 <HAL_I2C_Mem_Read+0x264>)
 8005248:	400a      	ands	r2, r1
 800524a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2241      	movs	r2, #65	; 0x41
 8005250:	2120      	movs	r1, #32
 8005252:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2242      	movs	r2, #66	; 0x42
 8005258:	2100      	movs	r1, #0
 800525a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	2100      	movs	r1, #0
 8005262:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e000      	b.n	800526a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b007      	add	sp, #28
 8005270:	bd90      	pop	{r4, r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	80002400 	.word	0x80002400
 8005278:	fe00e800 	.word	0xfe00e800

0800527c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800527c:	b5b0      	push	{r4, r5, r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	000c      	movs	r4, r1
 8005286:	0010      	movs	r0, r2
 8005288:	0019      	movs	r1, r3
 800528a:	250a      	movs	r5, #10
 800528c:	197b      	adds	r3, r7, r5
 800528e:	1c22      	adds	r2, r4, #0
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	2308      	movs	r3, #8
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	1c02      	adds	r2, r0, #0
 8005298:	801a      	strh	r2, [r3, #0]
 800529a:	1dbb      	adds	r3, r7, #6
 800529c:	1c0a      	adds	r2, r1, #0
 800529e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052a0:	1dbb      	adds	r3, r7, #6
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	045c      	lsls	r4, r3, #17
 80052aa:	197b      	adds	r3, r7, r5
 80052ac:	8819      	ldrh	r1, [r3, #0]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	4b23      	ldr	r3, [pc, #140]	; (8005340 <I2C_RequestMemoryWrite+0xc4>)
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	0023      	movs	r3, r4
 80052b6:	f000 f9fd 	bl	80056b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	6a39      	ldr	r1, [r7, #32]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 f902 	bl	80054ca <I2C_WaitOnTXISFlagUntilTimeout>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d001      	beq.n	80052ce <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e033      	b.n	8005336 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ce:	1dbb      	adds	r3, r7, #6
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d107      	bne.n	80052e6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052d6:	2308      	movs	r3, #8
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
 80052e4:	e019      	b.n	800531a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052e6:	2308      	movs	r3, #8
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	0a1b      	lsrs	r3, r3, #8
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fa:	6a39      	ldr	r1, [r7, #32]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	0018      	movs	r0, r3
 8005300:	f000 f8e3 	bl	80054ca <I2C_WaitOnTXISFlagUntilTimeout>
 8005304:	1e03      	subs	r3, r0, #0
 8005306:	d001      	beq.n	800530c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e014      	b.n	8005336 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800530c:	2308      	movs	r3, #8
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	0013      	movs	r3, r2
 8005324:	2200      	movs	r2, #0
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	f000 f890 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 800532c:	1e03      	subs	r3, r0, #0
 800532e:	d001      	beq.n	8005334 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b004      	add	sp, #16
 800533c:	bdb0      	pop	{r4, r5, r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	80002000 	.word	0x80002000

08005344 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005344:	b5b0      	push	{r4, r5, r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	000c      	movs	r4, r1
 800534e:	0010      	movs	r0, r2
 8005350:	0019      	movs	r1, r3
 8005352:	250a      	movs	r5, #10
 8005354:	197b      	adds	r3, r7, r5
 8005356:	1c22      	adds	r2, r4, #0
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	2308      	movs	r3, #8
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	1c02      	adds	r2, r0, #0
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	1dbb      	adds	r3, r7, #6
 8005364:	1c0a      	adds	r2, r1, #0
 8005366:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005368:	1dbb      	adds	r3, r7, #6
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	197b      	adds	r3, r7, r5
 8005370:	8819      	ldrh	r1, [r3, #0]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	4b23      	ldr	r3, [pc, #140]	; (8005404 <I2C_RequestMemoryRead+0xc0>)
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	f000 f99b 	bl	80056b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005380:	6a39      	ldr	r1, [r7, #32]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0018      	movs	r0, r3
 8005386:	f000 f8a0 	bl	80054ca <I2C_WaitOnTXISFlagUntilTimeout>
 800538a:	1e03      	subs	r3, r0, #0
 800538c:	d001      	beq.n	8005392 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e033      	b.n	80053fa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005392:	1dbb      	adds	r3, r7, #6
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d107      	bne.n	80053aa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800539a:	2308      	movs	r3, #8
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	629a      	str	r2, [r3, #40]	; 0x28
 80053a8:	e019      	b.n	80053de <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053aa:	2308      	movs	r3, #8
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053be:	6a39      	ldr	r1, [r7, #32]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 f881 	bl	80054ca <I2C_WaitOnTXISFlagUntilTimeout>
 80053c8:	1e03      	subs	r3, r0, #0
 80053ca:	d001      	beq.n	80053d0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e014      	b.n	80053fa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053d0:	2308      	movs	r3, #8
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053de:	6a3a      	ldr	r2, [r7, #32]
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	0013      	movs	r3, r2
 80053e8:	2200      	movs	r2, #0
 80053ea:	2140      	movs	r1, #64	; 0x40
 80053ec:	f000 f82e 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d001      	beq.n	80053f8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	0018      	movs	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b004      	add	sp, #16
 8005400:	bdb0      	pop	{r4, r5, r7, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	80002000 	.word	0x80002000

08005408 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2202      	movs	r2, #2
 8005418:	4013      	ands	r3, r2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d103      	bne.n	8005426 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2201      	movs	r2, #1
 800542e:	4013      	ands	r3, r2
 8005430:	2b01      	cmp	r3, #1
 8005432:	d007      	beq.n	8005444 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	430a      	orrs	r2, r1
 8005442:	619a      	str	r2, [r3, #24]
  }
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46bd      	mov	sp, r7
 8005448:	b002      	add	sp, #8
 800544a:	bd80      	pop	{r7, pc}

0800544c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	1dfb      	adds	r3, r7, #7
 800545a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800545c:	e021      	b.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	d01e      	beq.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005464:	f7ff f99c 	bl	80047a0 <HAL_GetTick>
 8005468:	0002      	movs	r2, r0
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d113      	bne.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	2220      	movs	r2, #32
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2241      	movs	r2, #65	; 0x41
 800548a:	2120      	movs	r1, #32
 800548c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2242      	movs	r2, #66	; 0x42
 8005492:	2100      	movs	r1, #0
 8005494:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2240      	movs	r2, #64	; 0x40
 800549a:	2100      	movs	r1, #0
 800549c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e00f      	b.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	425a      	negs	r2, r3
 80054b2:	4153      	adcs	r3, r2
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	001a      	movs	r2, r3
 80054b8:	1dfb      	adds	r3, r7, #7
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d0ce      	beq.n	800545e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	0018      	movs	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b004      	add	sp, #16
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054d6:	e02b      	b.n	8005530 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 f86e 	bl	80055c0 <I2C_IsAcknowledgeFailed>
 80054e4:	1e03      	subs	r3, r0, #0
 80054e6:	d001      	beq.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e029      	b.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	3301      	adds	r3, #1
 80054f0:	d01e      	beq.n	8005530 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7ff f955 	bl	80047a0 <HAL_GetTick>
 80054f6:	0002      	movs	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d113      	bne.n	8005530 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	2220      	movs	r2, #32
 800550e:	431a      	orrs	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2241      	movs	r2, #65	; 0x41
 8005518:	2120      	movs	r1, #32
 800551a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2242      	movs	r2, #66	; 0x42
 8005520:	2100      	movs	r1, #0
 8005522:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2240      	movs	r2, #64	; 0x40
 8005528:	2100      	movs	r1, #0
 800552a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e007      	b.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2202      	movs	r2, #2
 8005538:	4013      	ands	r3, r2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d1cc      	bne.n	80054d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b004      	add	sp, #16
 8005546:	bd80      	pop	{r7, pc}

08005548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005554:	e028      	b.n	80055a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0018      	movs	r0, r3
 800555e:	f000 f82f 	bl	80055c0 <I2C_IsAcknowledgeFailed>
 8005562:	1e03      	subs	r3, r0, #0
 8005564:	d001      	beq.n	800556a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e026      	b.n	80055b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7ff f919 	bl	80047a0 <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d113      	bne.n	80055a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	2220      	movs	r2, #32
 8005586:	431a      	orrs	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2241      	movs	r2, #65	; 0x41
 8005590:	2120      	movs	r1, #32
 8005592:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2242      	movs	r2, #66	; 0x42
 8005598:	2100      	movs	r1, #0
 800559a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	2100      	movs	r1, #0
 80055a2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e007      	b.n	80055b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2220      	movs	r2, #32
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d1cf      	bne.n	8005556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	0018      	movs	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b004      	add	sp, #16
 80055be:	bd80      	pop	{r7, pc}

080055c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2210      	movs	r2, #16
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d164      	bne.n	80056a4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	049b      	lsls	r3, r3, #18
 80055e4:	401a      	ands	r2, r3
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d02b      	beq.n	8005646 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2180      	movs	r1, #128	; 0x80
 80055fa:	01c9      	lsls	r1, r1, #7
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005600:	e021      	b.n	8005646 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3301      	adds	r3, #1
 8005606:	d01e      	beq.n	8005646 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005608:	f7ff f8ca 	bl	80047a0 <HAL_GetTick>
 800560c:	0002      	movs	r2, r0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <I2C_IsAcknowledgeFailed+0x5e>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d113      	bne.n	8005646 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	2220      	movs	r2, #32
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2241      	movs	r2, #65	; 0x41
 800562e:	2120      	movs	r1, #32
 8005630:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2242      	movs	r2, #66	; 0x42
 8005636:	2100      	movs	r1, #0
 8005638:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2240      	movs	r2, #64	; 0x40
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e02f      	b.n	80056a6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2220      	movs	r2, #32
 800564e:	4013      	ands	r3, r2
 8005650:	2b20      	cmp	r3, #32
 8005652:	d1d6      	bne.n	8005602 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2210      	movs	r2, #16
 800565a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2220      	movs	r2, #32
 8005662:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff fece 	bl	8005408 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	490e      	ldr	r1, [pc, #56]	; (80056b0 <I2C_IsAcknowledgeFailed+0xf0>)
 8005678:	400a      	ands	r2, r1
 800567a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005680:	2204      	movs	r2, #4
 8005682:	431a      	orrs	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2241      	movs	r2, #65	; 0x41
 800568c:	2120      	movs	r1, #32
 800568e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2242      	movs	r2, #66	; 0x42
 8005694:	2100      	movs	r1, #0
 8005696:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	2100      	movs	r1, #0
 800569e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b004      	add	sp, #16
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	fe00e800 	.word	0xfe00e800

080056b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056b4:	b590      	push	{r4, r7, lr}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	0008      	movs	r0, r1
 80056be:	0011      	movs	r1, r2
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	240a      	movs	r4, #10
 80056c4:	193b      	adds	r3, r7, r4
 80056c6:	1c02      	adds	r2, r0, #0
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	2009      	movs	r0, #9
 80056cc:	183b      	adds	r3, r7, r0
 80056ce:	1c0a      	adds	r2, r1, #0
 80056d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	6a3a      	ldr	r2, [r7, #32]
 80056da:	0d51      	lsrs	r1, r2, #21
 80056dc:	2280      	movs	r2, #128	; 0x80
 80056de:	00d2      	lsls	r2, r2, #3
 80056e0:	400a      	ands	r2, r1
 80056e2:	490e      	ldr	r1, [pc, #56]	; (800571c <I2C_TransferConfig+0x68>)
 80056e4:	430a      	orrs	r2, r1
 80056e6:	43d2      	mvns	r2, r2
 80056e8:	401a      	ands	r2, r3
 80056ea:	0011      	movs	r1, r2
 80056ec:	193b      	adds	r3, r7, r4
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	059b      	lsls	r3, r3, #22
 80056f2:	0d9a      	lsrs	r2, r3, #22
 80056f4:	183b      	adds	r3, r7, r0
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	0418      	lsls	r0, r3, #16
 80056fa:	23ff      	movs	r3, #255	; 0xff
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	4003      	ands	r3, r0
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	431a      	orrs	r2, r3
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	431a      	orrs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b005      	add	sp, #20
 8005718:	bd90      	pop	{r4, r7, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	03ff63ff 	.word	0x03ff63ff

08005720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2241      	movs	r2, #65	; 0x41
 800572e:	5c9b      	ldrb	r3, [r3, r2]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b20      	cmp	r3, #32
 8005734:	d138      	bne.n	80057a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	5c9b      	ldrb	r3, [r3, r2]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005740:	2302      	movs	r3, #2
 8005742:	e032      	b.n	80057aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2240      	movs	r2, #64	; 0x40
 8005748:	2101      	movs	r1, #1
 800574a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2241      	movs	r2, #65	; 0x41
 8005750:	2124      	movs	r1, #36	; 0x24
 8005752:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2101      	movs	r1, #1
 8005760:	438a      	bics	r2, r1
 8005762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4911      	ldr	r1, [pc, #68]	; (80057b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005770:	400a      	ands	r2, r1
 8005772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2101      	movs	r1, #1
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2241      	movs	r2, #65	; 0x41
 8005798:	2120      	movs	r1, #32
 800579a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e000      	b.n	80057aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
  }
}
 80057aa:	0018      	movs	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b002      	add	sp, #8
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	ffffefff 	.word	0xffffefff

080057b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2241      	movs	r2, #65	; 0x41
 80057c6:	5c9b      	ldrb	r3, [r3, r2]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d139      	bne.n	8005842 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2240      	movs	r2, #64	; 0x40
 80057d2:	5c9b      	ldrb	r3, [r3, r2]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057d8:	2302      	movs	r3, #2
 80057da:	e033      	b.n	8005844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2240      	movs	r2, #64	; 0x40
 80057e0:	2101      	movs	r1, #1
 80057e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2241      	movs	r2, #65	; 0x41
 80057e8:	2124      	movs	r1, #36	; 0x24
 80057ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2101      	movs	r1, #1
 80057f8:	438a      	bics	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a11      	ldr	r2, [pc, #68]	; (800584c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005808:	4013      	ands	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2101      	movs	r1, #1
 800582a:	430a      	orrs	r2, r1
 800582c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2241      	movs	r2, #65	; 0x41
 8005832:	2120      	movs	r1, #32
 8005834:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e000      	b.n	8005844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005842:	2302      	movs	r3, #2
  }
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b004      	add	sp, #16
 800584a:	bd80      	pop	{r7, pc}
 800584c:	fffff0ff 	.word	0xfffff0ff

08005850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005852:	b08b      	sub	sp, #44	; 0x2c
 8005854:	af06      	add	r7, sp, #24
 8005856:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0ff      	b.n	8005a62 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a81      	ldr	r2, [pc, #516]	; (8005a6c <HAL_PCD_Init+0x21c>)
 8005866:	5c9b      	ldrb	r3, [r3, r2]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	23aa      	movs	r3, #170	; 0xaa
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	2100      	movs	r1, #0
 8005876:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0018      	movs	r0, r3
 800587c:	f7fe fecc 	bl	8004618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a7a      	ldr	r2, [pc, #488]	; (8005a6c <HAL_PCD_Init+0x21c>)
 8005884:	2103      	movs	r1, #3
 8005886:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0018      	movs	r0, r3
 800588e:	f001 ff03 	bl	8007698 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005892:	230f      	movs	r3, #15
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e058      	b.n	800594e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800589c:	200f      	movs	r0, #15
 800589e:	183b      	adds	r3, r7, r0
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	0013      	movs	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	18cb      	adds	r3, r1, r3
 80058b0:	3301      	adds	r3, #1
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	0013      	movs	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	183a      	adds	r2, r7, r0
 80058c8:	7812      	ldrb	r2, [r2, #0]
 80058ca:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058cc:	0004      	movs	r4, r0
 80058ce:	183b      	adds	r3, r7, r0
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	193b      	adds	r3, r7, r4
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	b298      	uxth	r0, r3
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	0013      	movs	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	18cb      	adds	r3, r1, r3
 80058e4:	3336      	adds	r3, #54	; 0x36
 80058e6:	1c02      	adds	r2, r0, #0
 80058e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058ea:	193b      	adds	r3, r7, r4
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	0013      	movs	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	189b      	adds	r3, r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	18cb      	adds	r3, r1, r3
 80058fc:	3303      	adds	r3, #3
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005902:	193b      	adds	r3, r7, r4
 8005904:	781a      	ldrb	r2, [r3, #0]
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	0013      	movs	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	189b      	adds	r3, r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	18cb      	adds	r3, r1, r3
 8005912:	3338      	adds	r3, #56	; 0x38
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005918:	193b      	adds	r3, r7, r4
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	0013      	movs	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	189b      	adds	r3, r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	18cb      	adds	r3, r1, r3
 8005928:	333c      	adds	r3, #60	; 0x3c
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800592e:	193b      	adds	r3, r7, r4
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	0013      	movs	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	189b      	adds	r3, r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	18cb      	adds	r3, r1, r3
 800593e:	3340      	adds	r3, #64	; 0x40
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005944:	193b      	adds	r3, r7, r4
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	193b      	adds	r3, r7, r4
 800594a:	3201      	adds	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	210f      	movs	r1, #15
 8005950:	187b      	adds	r3, r7, r1
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d39f      	bcc.n	800589c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800595c:	187b      	adds	r3, r7, r1
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e056      	b.n	8005a12 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005964:	240f      	movs	r4, #15
 8005966:	193b      	adds	r3, r7, r4
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	236a      	movs	r3, #106	; 0x6a
 800596e:	33ff      	adds	r3, #255	; 0xff
 8005970:	0019      	movs	r1, r3
 8005972:	0013      	movs	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	189b      	adds	r3, r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	18c3      	adds	r3, r0, r3
 800597c:	185b      	adds	r3, r3, r1
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005982:	193b      	adds	r3, r7, r4
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	23b4      	movs	r3, #180	; 0xb4
 800598a:	0059      	lsls	r1, r3, #1
 800598c:	0013      	movs	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	189b      	adds	r3, r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	18c3      	adds	r3, r0, r3
 8005996:	185b      	adds	r3, r3, r1
 8005998:	193a      	adds	r2, r7, r4
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800599e:	193b      	adds	r3, r7, r4
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	236c      	movs	r3, #108	; 0x6c
 80059a6:	33ff      	adds	r3, #255	; 0xff
 80059a8:	0019      	movs	r1, r3
 80059aa:	0013      	movs	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	189b      	adds	r3, r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	18c3      	adds	r3, r0, r3
 80059b4:	185b      	adds	r3, r3, r1
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059ba:	193b      	adds	r3, r7, r4
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	23bc      	movs	r3, #188	; 0xbc
 80059c2:	0059      	lsls	r1, r3, #1
 80059c4:	0013      	movs	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	189b      	adds	r3, r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	18c3      	adds	r3, r0, r3
 80059ce:	185b      	adds	r3, r3, r1
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059d4:	193b      	adds	r3, r7, r4
 80059d6:	781a      	ldrb	r2, [r3, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	23be      	movs	r3, #190	; 0xbe
 80059dc:	0059      	lsls	r1, r3, #1
 80059de:	0013      	movs	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	189b      	adds	r3, r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	18c3      	adds	r3, r0, r3
 80059e8:	185b      	adds	r3, r3, r1
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059ee:	193b      	adds	r3, r7, r4
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	23c0      	movs	r3, #192	; 0xc0
 80059f6:	0059      	lsls	r1, r3, #1
 80059f8:	0013      	movs	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	18c3      	adds	r3, r0, r3
 8005a02:	185b      	adds	r3, r3, r1
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a08:	193b      	adds	r3, r7, r4
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	3201      	adds	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	230f      	movs	r3, #15
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d3a1      	bcc.n	8005964 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	466a      	mov	r2, sp
 8005a28:	0011      	movs	r1, r2
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	3210      	adds	r2, #16
 8005a2e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8005a30:	c170      	stmia	r1!, {r4, r5, r6}
 8005a32:	ca30      	ldmia	r2!, {r4, r5}
 8005a34:	c130      	stmia	r1!, {r4, r5}
 8005a36:	6859      	ldr	r1, [r3, #4]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f001 fe46 	bl	80076cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	2100      	movs	r1, #0
 8005a46:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <HAL_PCD_Init+0x21c>)
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d103      	bne.n	8005a60 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f808 	bl	8005a70 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	0018      	movs	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b005      	add	sp, #20
 8005a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	000002a9 	.word	0x000002a9

08005a70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	23ba      	movs	r3, #186	; 0xba
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	2101      	movs	r1, #1
 8005a86:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	23b8      	movs	r3, #184	; 0xb8
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	2100      	movs	r1, #0
 8005a90:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2254      	movs	r2, #84	; 0x54
 8005a96:	5a9b      	ldrh	r3, [r3, r2]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	b299      	uxth	r1, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2254      	movs	r2, #84	; 0x54
 8005aa4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2254      	movs	r2, #84	; 0x54
 8005aaa:	5a9b      	ldrh	r3, [r3, r2]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2202      	movs	r2, #2
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	b299      	uxth	r1, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2254      	movs	r2, #84	; 0x54
 8005ab8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b004      	add	sp, #16
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ac4:	b5b0      	push	{r4, r5, r7, lr}
 8005ac6:	b08a      	sub	sp, #40	; 0x28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f000 fbaf 	bl	8006236 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad8:	4bcf      	ldr	r3, [pc, #828]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	220c      	movs	r2, #12
 8005ade:	4013      	ands	r3, r2
 8005ae0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ae2:	4bcd      	ldr	r3, [pc, #820]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	025b      	lsls	r3, r3, #9
 8005aea:	4013      	ands	r3, r2
 8005aec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2201      	movs	r2, #1
 8005af4:	4013      	ands	r3, r2
 8005af6:	d100      	bne.n	8005afa <HAL_RCC_OscConfig+0x36>
 8005af8:	e07e      	b.n	8005bf8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d007      	beq.n	8005b10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d112      	bne.n	8005b2c <HAL_RCC_OscConfig+0x68>
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	025b      	lsls	r3, r3, #9
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d10d      	bne.n	8005b2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b10:	4bc1      	ldr	r3, [pc, #772]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	2380      	movs	r3, #128	; 0x80
 8005b16:	029b      	lsls	r3, r3, #10
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d100      	bne.n	8005b1e <HAL_RCC_OscConfig+0x5a>
 8005b1c:	e06b      	b.n	8005bf6 <HAL_RCC_OscConfig+0x132>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d167      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f000 fb85 	bl	8006236 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	025b      	lsls	r3, r3, #9
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d107      	bne.n	8005b48 <HAL_RCC_OscConfig+0x84>
 8005b38:	4bb7      	ldr	r3, [pc, #732]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4bb6      	ldr	r3, [pc, #728]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	0249      	lsls	r1, r1, #9
 8005b42:	430a      	orrs	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e027      	b.n	8005b98 <HAL_RCC_OscConfig+0xd4>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	23a0      	movs	r3, #160	; 0xa0
 8005b4e:	02db      	lsls	r3, r3, #11
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d10e      	bne.n	8005b72 <HAL_RCC_OscConfig+0xae>
 8005b54:	4bb0      	ldr	r3, [pc, #704]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4baf      	ldr	r3, [pc, #700]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	02c9      	lsls	r1, r1, #11
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	4bad      	ldr	r3, [pc, #692]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4bac      	ldr	r3, [pc, #688]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	0249      	lsls	r1, r1, #9
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e012      	b.n	8005b98 <HAL_RCC_OscConfig+0xd4>
 8005b72:	4ba9      	ldr	r3, [pc, #676]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4ba8      	ldr	r3, [pc, #672]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b78:	49a8      	ldr	r1, [pc, #672]	; (8005e1c <HAL_RCC_OscConfig+0x358>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	4ba6      	ldr	r3, [pc, #664]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	2380      	movs	r3, #128	; 0x80
 8005b84:	025b      	lsls	r3, r3, #9
 8005b86:	4013      	ands	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4ba2      	ldr	r3, [pc, #648]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4ba1      	ldr	r3, [pc, #644]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005b92:	49a3      	ldr	r1, [pc, #652]	; (8005e20 <HAL_RCC_OscConfig+0x35c>)
 8005b94:	400a      	ands	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba0:	f7fe fdfe 	bl	80047a0 <HAL_GetTick>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba8:	e009      	b.n	8005bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005baa:	f7fe fdf9 	bl	80047a0 <HAL_GetTick>
 8005bae:	0002      	movs	r2, r0
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b64      	cmp	r3, #100	; 0x64
 8005bb6:	d902      	bls.n	8005bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f000 fb3c 	bl	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bbe:	4b96      	ldr	r3, [pc, #600]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	2380      	movs	r3, #128	; 0x80
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d0ef      	beq.n	8005baa <HAL_RCC_OscConfig+0xe6>
 8005bca:	e015      	b.n	8005bf8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bcc:	f7fe fde8 	bl	80047a0 <HAL_GetTick>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd6:	f7fe fde3 	bl	80047a0 <HAL_GetTick>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b64      	cmp	r3, #100	; 0x64
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e326      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005be8:	4b8b      	ldr	r3, [pc, #556]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	029b      	lsls	r3, r3, #10
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d1f0      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x112>
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d100      	bne.n	8005c04 <HAL_RCC_OscConfig+0x140>
 8005c02:	e08b      	b.n	8005d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	d13e      	bne.n	8005c94 <HAL_RCC_OscConfig+0x1d0>
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d13b      	bne.n	8005c94 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c1c:	4b7e      	ldr	r3, [pc, #504]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2204      	movs	r2, #4
 8005c22:	4013      	ands	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_RCC_OscConfig+0x16c>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e302      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c30:	4b79      	ldr	r3, [pc, #484]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4a7b      	ldr	r2, [pc, #492]	; (8005e24 <HAL_RCC_OscConfig+0x360>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	0019      	movs	r1, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	4b75      	ldr	r3, [pc, #468]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c46:	4b74      	ldr	r3, [pc, #464]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2209      	movs	r2, #9
 8005c4c:	4393      	bics	r3, r2
 8005c4e:	0019      	movs	r1, r3
 8005c50:	4b71      	ldr	r3, [pc, #452]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c58:	f000 fc40 	bl	80064dc <HAL_RCC_GetSysClockFreq>
 8005c5c:	0001      	movs	r1, r0
 8005c5e:	4b6e      	ldr	r3, [pc, #440]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	220f      	movs	r2, #15
 8005c66:	4013      	ands	r3, r2
 8005c68:	4a6f      	ldr	r2, [pc, #444]	; (8005e28 <HAL_RCC_OscConfig+0x364>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	000a      	movs	r2, r1
 8005c6e:	40da      	lsrs	r2, r3
 8005c70:	4b6e      	ldr	r3, [pc, #440]	; (8005e2c <HAL_RCC_OscConfig+0x368>)
 8005c72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005c74:	4b6e      	ldr	r3, [pc, #440]	; (8005e30 <HAL_RCC_OscConfig+0x36c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2513      	movs	r5, #19
 8005c7a:	197c      	adds	r4, r7, r5
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7fe fd49 	bl	8004714 <HAL_InitTick>
 8005c82:	0003      	movs	r3, r0
 8005c84:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005c86:	197b      	adds	r3, r7, r5
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d046      	beq.n	8005d1c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8005c8e:	197b      	adds	r3, r7, r5
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	e2d0      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d027      	beq.n	8005cea <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c9a:	4b5f      	ldr	r3, [pc, #380]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2209      	movs	r2, #9
 8005ca0:	4393      	bics	r3, r2
 8005ca2:	0019      	movs	r1, r3
 8005ca4:	4b5c      	ldr	r3, [pc, #368]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cac:	f7fe fd78 	bl	80047a0 <HAL_GetTick>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cb6:	f7fe fd73 	bl	80047a0 <HAL_GetTick>
 8005cba:	0002      	movs	r2, r0
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e2b6      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cc8:	4b53      	ldr	r3, [pc, #332]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d0f1      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd2:	4b51      	ldr	r3, [pc, #324]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4a53      	ldr	r2, [pc, #332]	; (8005e24 <HAL_RCC_OscConfig+0x360>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	0019      	movs	r1, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	021a      	lsls	r2, r3, #8
 8005ce2:	4b4d      	ldr	r3, [pc, #308]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	e018      	b.n	8005d1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cea:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	438a      	bics	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf6:	f7fe fd53 	bl	80047a0 <HAL_GetTick>
 8005cfa:	0003      	movs	r3, r0
 8005cfc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d00:	f7fe fd4e 	bl	80047a0 <HAL_GetTick>
 8005d04:	0002      	movs	r2, r0
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e291      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d12:	4b41      	ldr	r3, [pc, #260]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2204      	movs	r2, #4
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d1f1      	bne.n	8005d00 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2210      	movs	r2, #16
 8005d22:	4013      	ands	r3, r2
 8005d24:	d100      	bne.n	8005d28 <HAL_RCC_OscConfig+0x264>
 8005d26:	e0a1      	b.n	8005e6c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d140      	bne.n	8005db0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d2e:	4b3a      	ldr	r3, [pc, #232]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4013      	ands	r3, r2
 8005d38:	d005      	beq.n	8005d46 <HAL_RCC_OscConfig+0x282>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e277      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d46:	4b34      	ldr	r3, [pc, #208]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <HAL_RCC_OscConfig+0x370>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	0019      	movs	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d54:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	0a19      	lsrs	r1, r3, #8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	061a      	lsls	r2, r3, #24
 8005d68:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	0b5b      	lsrs	r3, r3, #13
 8005d74:	3301      	adds	r3, #1
 8005d76:	2280      	movs	r2, #128	; 0x80
 8005d78:	0212      	lsls	r2, r2, #8
 8005d7a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005d7c:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	210f      	movs	r1, #15
 8005d84:	400b      	ands	r3, r1
 8005d86:	4928      	ldr	r1, [pc, #160]	; (8005e28 <HAL_RCC_OscConfig+0x364>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005d8c:	4b27      	ldr	r3, [pc, #156]	; (8005e2c <HAL_RCC_OscConfig+0x368>)
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <HAL_RCC_OscConfig+0x36c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2513      	movs	r5, #19
 8005d96:	197c      	adds	r4, r7, r5
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7fe fcbb 	bl	8004714 <HAL_InitTick>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005da2:	197b      	adds	r3, r7, r5
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d060      	beq.n	8005e6c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8005daa:	197b      	adds	r3, r7, r5
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	e242      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d03f      	beq.n	8005e38 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005db8:	4b17      	ldr	r3, [pc, #92]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	0049      	lsls	r1, r1, #1
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc6:	f7fe fceb 	bl	80047a0 <HAL_GetTick>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005dd0:	f7fe fce6 	bl	80047a0 <HAL_GetTick>
 8005dd4:	0002      	movs	r2, r0
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e229      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4013      	ands	r3, r2
 8005dec:	d0f0      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dee:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <HAL_RCC_OscConfig+0x370>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	0019      	movs	r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	0a19      	lsrs	r1, r3, #8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	061a      	lsls	r2, r3, #24
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <HAL_RCC_OscConfig+0x354>)
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	e029      	b.n	8005e6c <HAL_RCC_OscConfig+0x3a8>
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	fffeffff 	.word	0xfffeffff
 8005e20:	fffbffff 	.word	0xfffbffff
 8005e24:	ffffe0ff 	.word	0xffffe0ff
 8005e28:	08007ad0 	.word	0x08007ad0
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	20000004 	.word	0x20000004
 8005e34:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e38:	4bbd      	ldr	r3, [pc, #756]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4bbc      	ldr	r3, [pc, #752]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005e3e:	49bd      	ldr	r1, [pc, #756]	; (8006134 <HAL_RCC_OscConfig+0x670>)
 8005e40:	400a      	ands	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e44:	f7fe fcac 	bl	80047a0 <HAL_GetTick>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e4e:	f7fe fca7 	bl	80047a0 <HAL_GetTick>
 8005e52:	0002      	movs	r2, r0
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e1ea      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e60:	4bb3      	ldr	r3, [pc, #716]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d1f0      	bne.n	8005e4e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2208      	movs	r2, #8
 8005e72:	4013      	ands	r3, r2
 8005e74:	d036      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d019      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7e:	4bac      	ldr	r3, [pc, #688]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e82:	4bab      	ldr	r3, [pc, #684]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005e84:	2101      	movs	r1, #1
 8005e86:	430a      	orrs	r2, r1
 8005e88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7fe fc89 	bl	80047a0 <HAL_GetTick>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fe fc84 	bl	80047a0 <HAL_GetTick>
 8005e98:	0002      	movs	r2, r0
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1c7      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ea6:	4ba2      	ldr	r3, [pc, #648]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eaa:	2202      	movs	r2, #2
 8005eac:	4013      	ands	r3, r2
 8005eae:	d0f1      	beq.n	8005e94 <HAL_RCC_OscConfig+0x3d0>
 8005eb0:	e018      	b.n	8005ee4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb2:	4b9f      	ldr	r3, [pc, #636]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eb6:	4b9e      	ldr	r3, [pc, #632]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005eb8:	2101      	movs	r1, #1
 8005eba:	438a      	bics	r2, r1
 8005ebc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebe:	f7fe fc6f 	bl	80047a0 <HAL_GetTick>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec8:	f7fe fc6a 	bl	80047a0 <HAL_GetTick>
 8005ecc:	0002      	movs	r2, r0
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e1ad      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005eda:	4b95      	ldr	r3, [pc, #596]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ede:	2202      	movs	r2, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d1f1      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	4013      	ands	r3, r2
 8005eec:	d100      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x42c>
 8005eee:	e0ae      	b.n	800604e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef0:	2027      	movs	r0, #39	; 0x27
 8005ef2:	183b      	adds	r3, r7, r0
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef8:	4b8d      	ldr	r3, [pc, #564]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	055b      	lsls	r3, r3, #21
 8005f00:	4013      	ands	r3, r2
 8005f02:	d109      	bne.n	8005f18 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f04:	4b8a      	ldr	r3, [pc, #552]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f08:	4b89      	ldr	r3, [pc, #548]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	0549      	lsls	r1, r1, #21
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f12:	183b      	adds	r3, r7, r0
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f18:	4b87      	ldr	r3, [pc, #540]	; (8006138 <HAL_RCC_OscConfig+0x674>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4013      	ands	r3, r2
 8005f22:	d11a      	bne.n	8005f5a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f24:	4b84      	ldr	r3, [pc, #528]	; (8006138 <HAL_RCC_OscConfig+0x674>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b83      	ldr	r3, [pc, #524]	; (8006138 <HAL_RCC_OscConfig+0x674>)
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	0049      	lsls	r1, r1, #1
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f32:	f7fe fc35 	bl	80047a0 <HAL_GetTick>
 8005f36:	0003      	movs	r3, r0
 8005f38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3c:	f7fe fc30 	bl	80047a0 <HAL_GetTick>
 8005f40:	0002      	movs	r2, r0
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	; 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e173      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4e:	4b7a      	ldr	r3, [pc, #488]	; (8006138 <HAL_RCC_OscConfig+0x674>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	4013      	ands	r3, r2
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	2380      	movs	r3, #128	; 0x80
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d107      	bne.n	8005f76 <HAL_RCC_OscConfig+0x4b2>
 8005f66:	4b72      	ldr	r3, [pc, #456]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f6a:	4b71      	ldr	r3, [pc, #452]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	0049      	lsls	r1, r1, #1
 8005f70:	430a      	orrs	r2, r1
 8005f72:	651a      	str	r2, [r3, #80]	; 0x50
 8005f74:	e031      	b.n	8005fda <HAL_RCC_OscConfig+0x516>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4d4>
 8005f7e:	4b6c      	ldr	r3, [pc, #432]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f82:	4b6b      	ldr	r3, [pc, #428]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f84:	496b      	ldr	r1, [pc, #428]	; (8006134 <HAL_RCC_OscConfig+0x670>)
 8005f86:	400a      	ands	r2, r1
 8005f88:	651a      	str	r2, [r3, #80]	; 0x50
 8005f8a:	4b69      	ldr	r3, [pc, #420]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f8e:	4b68      	ldr	r3, [pc, #416]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005f90:	496a      	ldr	r1, [pc, #424]	; (800613c <HAL_RCC_OscConfig+0x678>)
 8005f92:	400a      	ands	r2, r1
 8005f94:	651a      	str	r2, [r3, #80]	; 0x50
 8005f96:	e020      	b.n	8005fda <HAL_RCC_OscConfig+0x516>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	23a0      	movs	r3, #160	; 0xa0
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d10e      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x4fe>
 8005fa4:	4b62      	ldr	r3, [pc, #392]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fa8:	4b61      	ldr	r3, [pc, #388]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005faa:	2180      	movs	r1, #128	; 0x80
 8005fac:	00c9      	lsls	r1, r1, #3
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	651a      	str	r2, [r3, #80]	; 0x50
 8005fb2:	4b5f      	ldr	r3, [pc, #380]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fb6:	4b5e      	ldr	r3, [pc, #376]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	0049      	lsls	r1, r1, #1
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	651a      	str	r2, [r3, #80]	; 0x50
 8005fc0:	e00b      	b.n	8005fda <HAL_RCC_OscConfig+0x516>
 8005fc2:	4b5b      	ldr	r3, [pc, #364]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc6:	4b5a      	ldr	r3, [pc, #360]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005fc8:	495a      	ldr	r1, [pc, #360]	; (8006134 <HAL_RCC_OscConfig+0x670>)
 8005fca:	400a      	ands	r2, r1
 8005fcc:	651a      	str	r2, [r3, #80]	; 0x50
 8005fce:	4b58      	ldr	r3, [pc, #352]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fd2:	4b57      	ldr	r3, [pc, #348]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8005fd4:	4959      	ldr	r1, [pc, #356]	; (800613c <HAL_RCC_OscConfig+0x678>)
 8005fd6:	400a      	ands	r2, r1
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d015      	beq.n	800600e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe2:	f7fe fbdd 	bl	80047a0 <HAL_GetTick>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fea:	e009      	b.n	8006000 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fec:	f7fe fbd8 	bl	80047a0 <HAL_GetTick>
 8005ff0:	0002      	movs	r2, r0
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	4a52      	ldr	r2, [pc, #328]	; (8006140 <HAL_RCC_OscConfig+0x67c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e11a      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006000:	4b4b      	ldr	r3, [pc, #300]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8006002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4013      	ands	r3, r2
 800600a:	d0ef      	beq.n	8005fec <HAL_RCC_OscConfig+0x528>
 800600c:	e014      	b.n	8006038 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600e:	f7fe fbc7 	bl	80047a0 <HAL_GetTick>
 8006012:	0003      	movs	r3, r0
 8006014:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006016:	e009      	b.n	800602c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006018:	f7fe fbc2 	bl	80047a0 <HAL_GetTick>
 800601c:	0002      	movs	r2, r0
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	4a47      	ldr	r2, [pc, #284]	; (8006140 <HAL_RCC_OscConfig+0x67c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e104      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800602c:	4b40      	ldr	r3, [pc, #256]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 800602e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4013      	ands	r3, r2
 8006036:	d1ef      	bne.n	8006018 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006038:	2327      	movs	r3, #39	; 0x27
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d105      	bne.n	800604e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006042:	4b3b      	ldr	r3, [pc, #236]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	4b3a      	ldr	r3, [pc, #232]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8006048:	493e      	ldr	r1, [pc, #248]	; (8006144 <HAL_RCC_OscConfig+0x680>)
 800604a:	400a      	ands	r2, r1
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2220      	movs	r2, #32
 8006054:	4013      	ands	r3, r2
 8006056:	d049      	beq.n	80060ec <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d026      	beq.n	80060ae <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006060:	4b33      	ldr	r3, [pc, #204]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	4b32      	ldr	r3, [pc, #200]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8006066:	2101      	movs	r1, #1
 8006068:	430a      	orrs	r2, r1
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	4b30      	ldr	r3, [pc, #192]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 800606e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006070:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8006072:	2101      	movs	r1, #1
 8006074:	430a      	orrs	r2, r1
 8006076:	635a      	str	r2, [r3, #52]	; 0x34
 8006078:	4b33      	ldr	r3, [pc, #204]	; (8006148 <HAL_RCC_OscConfig+0x684>)
 800607a:	6a1a      	ldr	r2, [r3, #32]
 800607c:	4b32      	ldr	r3, [pc, #200]	; (8006148 <HAL_RCC_OscConfig+0x684>)
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	0189      	lsls	r1, r1, #6
 8006082:	430a      	orrs	r2, r1
 8006084:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fe fb8b 	bl	80047a0 <HAL_GetTick>
 800608a:	0003      	movs	r3, r0
 800608c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006090:	f7fe fb86 	bl	80047a0 <HAL_GetTick>
 8006094:	0002      	movs	r2, r0
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e0c9      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060a2:	4b23      	ldr	r3, [pc, #140]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2202      	movs	r2, #2
 80060a8:	4013      	ands	r3, r2
 80060aa:	d0f1      	beq.n	8006090 <HAL_RCC_OscConfig+0x5cc>
 80060ac:	e01e      	b.n	80060ec <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 80060b4:	2101      	movs	r1, #1
 80060b6:	438a      	bics	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]
 80060ba:	4b23      	ldr	r3, [pc, #140]	; (8006148 <HAL_RCC_OscConfig+0x684>)
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	4b22      	ldr	r3, [pc, #136]	; (8006148 <HAL_RCC_OscConfig+0x684>)
 80060c0:	4922      	ldr	r1, [pc, #136]	; (800614c <HAL_RCC_OscConfig+0x688>)
 80060c2:	400a      	ands	r2, r1
 80060c4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c6:	f7fe fb6b 	bl	80047a0 <HAL_GetTick>
 80060ca:	0003      	movs	r3, r0
 80060cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060d0:	f7fe fb66 	bl	80047a0 <HAL_GetTick>
 80060d4:	0002      	movs	r2, r0
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0a9      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060e2:	4b13      	ldr	r3, [pc, #76]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2202      	movs	r2, #2
 80060e8:	4013      	ands	r3, r2
 80060ea:	d1f1      	bne.n	80060d0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d100      	bne.n	80060f6 <HAL_RCC_OscConfig+0x632>
 80060f4:	e09e      	b.n	8006234 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d100      	bne.n	80060fe <HAL_RCC_OscConfig+0x63a>
 80060fc:	e077      	b.n	80061ee <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	2b02      	cmp	r3, #2
 8006104:	d158      	bne.n	80061b8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <HAL_RCC_OscConfig+0x66c>)
 800610c:	4910      	ldr	r1, [pc, #64]	; (8006150 <HAL_RCC_OscConfig+0x68c>)
 800610e:	400a      	ands	r2, r1
 8006110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006112:	f7fe fb45 	bl	80047a0 <HAL_GetTick>
 8006116:	0003      	movs	r3, r0
 8006118:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800611a:	e01b      	b.n	8006154 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611c:	f7fe fb40 	bl	80047a0 <HAL_GetTick>
 8006120:	0002      	movs	r2, r0
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d914      	bls.n	8006154 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e083      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	40021000 	.word	0x40021000
 8006134:	fffffeff 	.word	0xfffffeff
 8006138:	40007000 	.word	0x40007000
 800613c:	fffffbff 	.word	0xfffffbff
 8006140:	00001388 	.word	0x00001388
 8006144:	efffffff 	.word	0xefffffff
 8006148:	40010000 	.word	0x40010000
 800614c:	ffffdfff 	.word	0xffffdfff
 8006150:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006154:	4b3a      	ldr	r3, [pc, #232]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	049b      	lsls	r3, r3, #18
 800615c:	4013      	ands	r3, r2
 800615e:	d1dd      	bne.n	800611c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006160:	4b37      	ldr	r3, [pc, #220]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a37      	ldr	r2, [pc, #220]	; (8006244 <HAL_RCC_OscConfig+0x780>)
 8006166:	4013      	ands	r3, r2
 8006168:	0019      	movs	r1, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	431a      	orrs	r2, r3
 800617a:	4b31      	ldr	r3, [pc, #196]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 800617c:	430a      	orrs	r2, r1
 800617e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006180:	4b2f      	ldr	r3, [pc, #188]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b2e      	ldr	r3, [pc, #184]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	0449      	lsls	r1, r1, #17
 800618a:	430a      	orrs	r2, r1
 800618c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618e:	f7fe fb07 	bl	80047a0 <HAL_GetTick>
 8006192:	0003      	movs	r3, r0
 8006194:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006198:	f7fe fb02 	bl	80047a0 <HAL_GetTick>
 800619c:	0002      	movs	r2, r0
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e045      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80061aa:	4b25      	ldr	r3, [pc, #148]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	2380      	movs	r3, #128	; 0x80
 80061b0:	049b      	lsls	r3, r3, #18
 80061b2:	4013      	ands	r3, r2
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x6d4>
 80061b6:	e03d      	b.n	8006234 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b20      	ldr	r3, [pc, #128]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 80061be:	4922      	ldr	r1, [pc, #136]	; (8006248 <HAL_RCC_OscConfig+0x784>)
 80061c0:	400a      	ands	r2, r1
 80061c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fe faec 	bl	80047a0 <HAL_GetTick>
 80061c8:	0003      	movs	r3, r0
 80061ca:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ce:	f7fe fae7 	bl	80047a0 <HAL_GetTick>
 80061d2:	0002      	movs	r2, r0
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e02a      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	049b      	lsls	r3, r3, #18
 80061e8:	4013      	ands	r3, r2
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x70a>
 80061ec:	e022      	b.n	8006234 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e01d      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <HAL_RCC_OscConfig+0x77c>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	025b      	lsls	r3, r3, #9
 8006206:	401a      	ands	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	429a      	cmp	r2, r3
 800620e:	d10f      	bne.n	8006230 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	23f0      	movs	r3, #240	; 0xf0
 8006214:	039b      	lsls	r3, r3, #14
 8006216:	401a      	ands	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d107      	bne.n	8006230 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	23c0      	movs	r3, #192	; 0xc0
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	401a      	ands	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	0018      	movs	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	b00a      	add	sp, #40	; 0x28
 800623c:	bdb0      	pop	{r4, r5, r7, pc}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	40021000 	.word	0x40021000
 8006244:	ff02ffff 	.word	0xff02ffff
 8006248:	feffffff 	.word	0xfeffffff

0800624c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e128      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006260:	4b96      	ldr	r3, [pc, #600]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2201      	movs	r2, #1
 8006266:	4013      	ands	r3, r2
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d91e      	bls.n	80062ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626e:	4b93      	ldr	r3, [pc, #588]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2201      	movs	r2, #1
 8006274:	4393      	bics	r3, r2
 8006276:	0019      	movs	r1, r3
 8006278:	4b90      	ldr	r3, [pc, #576]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006280:	f7fe fa8e 	bl	80047a0 <HAL_GetTick>
 8006284:	0003      	movs	r3, r0
 8006286:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006288:	e009      	b.n	800629e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800628a:	f7fe fa89 	bl	80047a0 <HAL_GetTick>
 800628e:	0002      	movs	r2, r0
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	4a8a      	ldr	r2, [pc, #552]	; (80064c0 <HAL_RCC_ClockConfig+0x274>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e109      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b87      	ldr	r3, [pc, #540]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	4013      	ands	r3, r2
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d1ee      	bne.n	800628a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2202      	movs	r2, #2
 80062b2:	4013      	ands	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b6:	4b83      	ldr	r3, [pc, #524]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	22f0      	movs	r2, #240	; 0xf0
 80062bc:	4393      	bics	r3, r2
 80062be:	0019      	movs	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	4b7f      	ldr	r3, [pc, #508]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 80062c6:	430a      	orrs	r2, r1
 80062c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	4013      	ands	r3, r2
 80062d2:	d100      	bne.n	80062d6 <HAL_RCC_ClockConfig+0x8a>
 80062d4:	e089      	b.n	80063ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d107      	bne.n	80062ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062de:	4b79      	ldr	r3, [pc, #484]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	2380      	movs	r3, #128	; 0x80
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	4013      	ands	r3, r2
 80062e8:	d120      	bne.n	800632c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e0e1      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d107      	bne.n	8006306 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062f6:	4b73      	ldr	r3, [pc, #460]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	2380      	movs	r3, #128	; 0x80
 80062fc:	049b      	lsls	r3, r3, #18
 80062fe:	4013      	ands	r3, r2
 8006300:	d114      	bne.n	800632c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e0d5      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d106      	bne.n	800631c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800630e:	4b6d      	ldr	r3, [pc, #436]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2204      	movs	r2, #4
 8006314:	4013      	ands	r3, r2
 8006316:	d109      	bne.n	800632c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0ca      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800631c:	4b69      	ldr	r3, [pc, #420]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4013      	ands	r3, r2
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0c2      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800632c:	4b65      	ldr	r3, [pc, #404]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2203      	movs	r2, #3
 8006332:	4393      	bics	r3, r2
 8006334:	0019      	movs	r1, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	4b62      	ldr	r3, [pc, #392]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 800633c:	430a      	orrs	r2, r1
 800633e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006340:	f7fe fa2e 	bl	80047a0 <HAL_GetTick>
 8006344:	0003      	movs	r3, r0
 8006346:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d111      	bne.n	8006374 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006350:	e009      	b.n	8006366 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006352:	f7fe fa25 	bl	80047a0 <HAL_GetTick>
 8006356:	0002      	movs	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	4a58      	ldr	r2, [pc, #352]	; (80064c0 <HAL_RCC_ClockConfig+0x274>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e0a5      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006366:	4b57      	ldr	r3, [pc, #348]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	220c      	movs	r2, #12
 800636c:	4013      	ands	r3, r2
 800636e:	2b08      	cmp	r3, #8
 8006370:	d1ef      	bne.n	8006352 <HAL_RCC_ClockConfig+0x106>
 8006372:	e03a      	b.n	80063ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d111      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800637c:	e009      	b.n	8006392 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800637e:	f7fe fa0f 	bl	80047a0 <HAL_GetTick>
 8006382:	0002      	movs	r2, r0
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	4a4d      	ldr	r2, [pc, #308]	; (80064c0 <HAL_RCC_ClockConfig+0x274>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e08f      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006392:	4b4c      	ldr	r3, [pc, #304]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	220c      	movs	r2, #12
 8006398:	4013      	ands	r3, r2
 800639a:	2b0c      	cmp	r3, #12
 800639c:	d1ef      	bne.n	800637e <HAL_RCC_ClockConfig+0x132>
 800639e:	e024      	b.n	80063ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d11b      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80063a8:	e009      	b.n	80063be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063aa:	f7fe f9f9 	bl	80047a0 <HAL_GetTick>
 80063ae:	0002      	movs	r2, r0
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	4a42      	ldr	r2, [pc, #264]	; (80064c0 <HAL_RCC_ClockConfig+0x274>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e079      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80063be:	4b41      	ldr	r3, [pc, #260]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	220c      	movs	r2, #12
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d1ef      	bne.n	80063aa <HAL_RCC_ClockConfig+0x15e>
 80063ca:	e00e      	b.n	80063ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063cc:	f7fe f9e8 	bl	80047a0 <HAL_GetTick>
 80063d0:	0002      	movs	r2, r0
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	4a3a      	ldr	r2, [pc, #232]	; (80064c0 <HAL_RCC_ClockConfig+0x274>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e068      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80063e0:	4b38      	ldr	r3, [pc, #224]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	220c      	movs	r2, #12
 80063e6:	4013      	ands	r3, r2
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063ea:	4b34      	ldr	r3, [pc, #208]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2201      	movs	r2, #1
 80063f0:	4013      	ands	r3, r2
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d21e      	bcs.n	8006436 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f8:	4b30      	ldr	r3, [pc, #192]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2201      	movs	r2, #1
 80063fe:	4393      	bics	r3, r2
 8006400:	0019      	movs	r1, r3
 8006402:	4b2e      	ldr	r3, [pc, #184]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800640a:	f7fe f9c9 	bl	80047a0 <HAL_GetTick>
 800640e:	0003      	movs	r3, r0
 8006410:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006412:	e009      	b.n	8006428 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006414:	f7fe f9c4 	bl	80047a0 <HAL_GetTick>
 8006418:	0002      	movs	r2, r0
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	4a28      	ldr	r2, [pc, #160]	; (80064c0 <HAL_RCC_ClockConfig+0x274>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e044      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006428:	4b24      	ldr	r3, [pc, #144]	; (80064bc <HAL_RCC_ClockConfig+0x270>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2201      	movs	r2, #1
 800642e:	4013      	ands	r3, r2
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d1ee      	bne.n	8006414 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2204      	movs	r2, #4
 800643c:	4013      	ands	r3, r2
 800643e:	d009      	beq.n	8006454 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006440:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4a20      	ldr	r2, [pc, #128]	; (80064c8 <HAL_RCC_ClockConfig+0x27c>)
 8006446:	4013      	ands	r3, r2
 8006448:	0019      	movs	r1, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 8006450:	430a      	orrs	r2, r1
 8006452:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2208      	movs	r2, #8
 800645a:	4013      	ands	r3, r2
 800645c:	d00a      	beq.n	8006474 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <HAL_RCC_ClockConfig+0x280>)
 8006464:	4013      	ands	r3, r2
 8006466:	0019      	movs	r1, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	00da      	lsls	r2, r3, #3
 800646e:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 8006470:	430a      	orrs	r2, r1
 8006472:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006474:	f000 f832 	bl	80064dc <HAL_RCC_GetSysClockFreq>
 8006478:	0001      	movs	r1, r0
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_RCC_ClockConfig+0x278>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	091b      	lsrs	r3, r3, #4
 8006480:	220f      	movs	r2, #15
 8006482:	4013      	ands	r3, r2
 8006484:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <HAL_RCC_ClockConfig+0x284>)
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	000a      	movs	r2, r1
 800648a:	40da      	lsrs	r2, r3
 800648c:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <HAL_RCC_ClockConfig+0x288>)
 800648e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006490:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <HAL_RCC_ClockConfig+0x28c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	250b      	movs	r5, #11
 8006496:	197c      	adds	r4, r7, r5
 8006498:	0018      	movs	r0, r3
 800649a:	f7fe f93b 	bl	8004714 <HAL_InitTick>
 800649e:	0003      	movs	r3, r0
 80064a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80064a2:	197b      	adds	r3, r7, r5
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80064aa:	197b      	adds	r3, r7, r5
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	e000      	b.n	80064b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	0018      	movs	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b004      	add	sp, #16
 80064b8:	bdb0      	pop	{r4, r5, r7, pc}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	40022000 	.word	0x40022000
 80064c0:	00001388 	.word	0x00001388
 80064c4:	40021000 	.word	0x40021000
 80064c8:	fffff8ff 	.word	0xfffff8ff
 80064cc:	ffffc7ff 	.word	0xffffc7ff
 80064d0:	08007ad0 	.word	0x08007ad0
 80064d4:	20000000 	.word	0x20000000
 80064d8:	20000004 	.word	0x20000004

080064dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064dc:	b5b0      	push	{r4, r5, r7, lr}
 80064de:	b08e      	sub	sp, #56	; 0x38
 80064e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80064e2:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <HAL_RCC_GetSysClockFreq+0x138>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ea:	230c      	movs	r3, #12
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b0c      	cmp	r3, #12
 80064f0:	d014      	beq.n	800651c <HAL_RCC_GetSysClockFreq+0x40>
 80064f2:	d900      	bls.n	80064f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80064f4:	e07b      	b.n	80065ee <HAL_RCC_GetSysClockFreq+0x112>
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d002      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0x24>
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d00b      	beq.n	8006516 <HAL_RCC_GetSysClockFreq+0x3a>
 80064fe:	e076      	b.n	80065ee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006500:	4b44      	ldr	r3, [pc, #272]	; (8006614 <HAL_RCC_GetSysClockFreq+0x138>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2210      	movs	r2, #16
 8006506:	4013      	ands	r3, r2
 8006508:	d002      	beq.n	8006510 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800650a:	4b43      	ldr	r3, [pc, #268]	; (8006618 <HAL_RCC_GetSysClockFreq+0x13c>)
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800650e:	e07c      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006510:	4b42      	ldr	r3, [pc, #264]	; (800661c <HAL_RCC_GetSysClockFreq+0x140>)
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006514:	e079      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006516:	4b42      	ldr	r3, [pc, #264]	; (8006620 <HAL_RCC_GetSysClockFreq+0x144>)
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800651a:	e076      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	0c9a      	lsrs	r2, r3, #18
 8006520:	230f      	movs	r3, #15
 8006522:	401a      	ands	r2, r3
 8006524:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <HAL_RCC_GetSysClockFreq+0x148>)
 8006526:	5c9b      	ldrb	r3, [r3, r2]
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	0d9a      	lsrs	r2, r3, #22
 800652e:	2303      	movs	r3, #3
 8006530:	4013      	ands	r3, r2
 8006532:	3301      	adds	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006536:	4b37      	ldr	r3, [pc, #220]	; (8006614 <HAL_RCC_GetSysClockFreq+0x138>)
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	025b      	lsls	r3, r3, #9
 800653e:	4013      	ands	r3, r2
 8006540:	d01a      	beq.n	8006578 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	2300      	movs	r3, #0
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	4a35      	ldr	r2, [pc, #212]	; (8006620 <HAL_RCC_GetSysClockFreq+0x144>)
 800654c:	2300      	movs	r3, #0
 800654e:	69b8      	ldr	r0, [r7, #24]
 8006550:	69f9      	ldr	r1, [r7, #28]
 8006552:	f7f9 ffad 	bl	80004b0 <__aeabi_lmul>
 8006556:	0002      	movs	r2, r0
 8006558:	000b      	movs	r3, r1
 800655a:	0010      	movs	r0, r2
 800655c:	0019      	movs	r1, r3
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f7f9 ff81 	bl	8000470 <__aeabi_uldivmod>
 800656e:	0002      	movs	r2, r0
 8006570:	000b      	movs	r3, r1
 8006572:	0013      	movs	r3, r2
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
 8006576:	e037      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006578:	4b26      	ldr	r3, [pc, #152]	; (8006614 <HAL_RCC_GetSysClockFreq+0x138>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2210      	movs	r2, #16
 800657e:	4013      	ands	r3, r2
 8006580:	d01a      	beq.n	80065b8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	4a23      	ldr	r2, [pc, #140]	; (8006618 <HAL_RCC_GetSysClockFreq+0x13c>)
 800658c:	2300      	movs	r3, #0
 800658e:	68b8      	ldr	r0, [r7, #8]
 8006590:	68f9      	ldr	r1, [r7, #12]
 8006592:	f7f9 ff8d 	bl	80004b0 <__aeabi_lmul>
 8006596:	0002      	movs	r2, r0
 8006598:	000b      	movs	r3, r1
 800659a:	0010      	movs	r0, r2
 800659c:	0019      	movs	r1, r3
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f7f9 ff61 	bl	8000470 <__aeabi_uldivmod>
 80065ae:	0002      	movs	r2, r0
 80065b0:	000b      	movs	r3, r1
 80065b2:	0013      	movs	r3, r2
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
 80065b6:	e017      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	0018      	movs	r0, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	0019      	movs	r1, r3
 80065c0:	4a16      	ldr	r2, [pc, #88]	; (800661c <HAL_RCC_GetSysClockFreq+0x140>)
 80065c2:	2300      	movs	r3, #0
 80065c4:	f7f9 ff74 	bl	80004b0 <__aeabi_lmul>
 80065c8:	0002      	movs	r2, r0
 80065ca:	000b      	movs	r3, r1
 80065cc:	0010      	movs	r0, r2
 80065ce:	0019      	movs	r1, r3
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	001c      	movs	r4, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	001d      	movs	r5, r3
 80065d8:	0022      	movs	r2, r4
 80065da:	002b      	movs	r3, r5
 80065dc:	f7f9 ff48 	bl	8000470 <__aeabi_uldivmod>
 80065e0:	0002      	movs	r2, r0
 80065e2:	000b      	movs	r3, r1
 80065e4:	0013      	movs	r3, r2
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065ec:	e00d      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <HAL_RCC_GetSysClockFreq+0x138>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	0b5b      	lsrs	r3, r3, #13
 80065f4:	2207      	movs	r2, #7
 80065f6:	4013      	ands	r3, r2
 80065f8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	3301      	adds	r3, #1
 80065fe:	2280      	movs	r2, #128	; 0x80
 8006600:	0212      	lsls	r2, r2, #8
 8006602:	409a      	lsls	r2, r3
 8006604:	0013      	movs	r3, r2
 8006606:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006608:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800660c:	0018      	movs	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	b00e      	add	sp, #56	; 0x38
 8006612:	bdb0      	pop	{r4, r5, r7, pc}
 8006614:	40021000 	.word	0x40021000
 8006618:	003d0900 	.word	0x003d0900
 800661c:	00f42400 	.word	0x00f42400
 8006620:	007a1200 	.word	0x007a1200
 8006624:	08007ae8 	.word	0x08007ae8

08006628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <HAL_RCC_GetHCLKFreq+0x10>)
 800662e:	681b      	ldr	r3, [r3, #0]
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	20000000 	.word	0x20000000

0800663c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006640:	f7ff fff2 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006644:	0001      	movs	r1, r0
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	2207      	movs	r2, #7
 800664e:	4013      	ands	r3, r2
 8006650:	4a04      	ldr	r2, [pc, #16]	; (8006664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006652:	5cd3      	ldrb	r3, [r2, r3]
 8006654:	40d9      	lsrs	r1, r3
 8006656:	000b      	movs	r3, r1
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	40021000 	.word	0x40021000
 8006664:	08007ae0 	.word	0x08007ae0

08006668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800666c:	f7ff ffdc 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006670:	0001      	movs	r1, r0
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	0adb      	lsrs	r3, r3, #11
 8006678:	2207      	movs	r2, #7
 800667a:	4013      	ands	r3, r2
 800667c:	4a04      	ldr	r2, [pc, #16]	; (8006690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800667e:	5cd3      	ldrb	r3, [r2, r3]
 8006680:	40d9      	lsrs	r1, r3
 8006682:	000b      	movs	r3, r1
}
 8006684:	0018      	movs	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	40021000 	.word	0x40021000
 8006690:	08007ae0 	.word	0x08007ae0

08006694 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800669c:	2317      	movs	r3, #23
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2220      	movs	r2, #32
 80066aa:	4013      	ands	r3, r2
 80066ac:	d106      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	4013      	ands	r3, r2
 80066b8:	d100      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80066ba:	e0d9      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066bc:	4b9c      	ldr	r3, [pc, #624]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	055b      	lsls	r3, r3, #21
 80066c4:	4013      	ands	r3, r2
 80066c6:	d10a      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066c8:	4b99      	ldr	r3, [pc, #612]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066cc:	4b98      	ldr	r3, [pc, #608]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066ce:	2180      	movs	r1, #128	; 0x80
 80066d0:	0549      	lsls	r1, r1, #21
 80066d2:	430a      	orrs	r2, r1
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80066d6:	2317      	movs	r3, #23
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	2201      	movs	r2, #1
 80066dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066de:	4b95      	ldr	r3, [pc, #596]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	2380      	movs	r3, #128	; 0x80
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4013      	ands	r3, r2
 80066e8:	d11a      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ea:	4b92      	ldr	r3, [pc, #584]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b91      	ldr	r3, [pc, #580]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	0049      	lsls	r1, r1, #1
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066f8:	f7fe f852 	bl	80047a0 <HAL_GetTick>
 80066fc:	0003      	movs	r3, r0
 80066fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006700:	e008      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006702:	f7fe f84d 	bl	80047a0 <HAL_GetTick>
 8006706:	0002      	movs	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b64      	cmp	r3, #100	; 0x64
 800670e:	d901      	bls.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e108      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006714:	4b87      	ldr	r3, [pc, #540]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4013      	ands	r3, r2
 800671e:	d0f0      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006720:	4b83      	ldr	r3, [pc, #524]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	23c0      	movs	r3, #192	; 0xc0
 8006726:	039b      	lsls	r3, r3, #14
 8006728:	4013      	ands	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	23c0      	movs	r3, #192	; 0xc0
 8006732:	039b      	lsls	r3, r3, #14
 8006734:	4013      	ands	r3, r2
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d107      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	23c0      	movs	r3, #192	; 0xc0
 8006742:	039b      	lsls	r3, r3, #14
 8006744:	4013      	ands	r3, r2
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	429a      	cmp	r2, r3
 800674a:	d013      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	23c0      	movs	r3, #192	; 0xc0
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	401a      	ands	r2, r3
 8006756:	23c0      	movs	r3, #192	; 0xc0
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	429a      	cmp	r2, r3
 800675c:	d10a      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800675e:	4b74      	ldr	r3, [pc, #464]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	029b      	lsls	r3, r3, #10
 8006766:	401a      	ands	r2, r3
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	429a      	cmp	r2, r3
 800676e:	d101      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0d8      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006774:	4b6e      	ldr	r3, [pc, #440]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006778:	23c0      	movs	r3, #192	; 0xc0
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	4013      	ands	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d049      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	23c0      	movs	r3, #192	; 0xc0
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	4013      	ands	r3, r2
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	429a      	cmp	r2, r3
 8006794:	d004      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2220      	movs	r2, #32
 800679c:	4013      	ands	r3, r2
 800679e:	d10d      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	23c0      	movs	r3, #192	; 0xc0
 80067a6:	029b      	lsls	r3, r3, #10
 80067a8:	4013      	ands	r3, r2
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d034      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	4013      	ands	r3, r2
 80067ba:	d02e      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80067bc:	4b5c      	ldr	r3, [pc, #368]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c0:	4a5d      	ldr	r2, [pc, #372]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067c6:	4b5a      	ldr	r3, [pc, #360]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ca:	4b59      	ldr	r3, [pc, #356]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067cc:	2180      	movs	r1, #128	; 0x80
 80067ce:	0309      	lsls	r1, r1, #12
 80067d0:	430a      	orrs	r2, r1
 80067d2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067d4:	4b56      	ldr	r3, [pc, #344]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067d8:	4b55      	ldr	r3, [pc, #340]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067da:	4958      	ldr	r1, [pc, #352]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80067dc:	400a      	ands	r2, r1
 80067de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80067e0:	4b53      	ldr	r3, [pc, #332]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	4013      	ands	r3, r2
 80067ee:	d014      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7fd ffd6 	bl	80047a0 <HAL_GetTick>
 80067f4:	0003      	movs	r3, r0
 80067f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067f8:	e009      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067fa:	f7fd ffd1 	bl	80047a0 <HAL_GetTick>
 80067fe:	0002      	movs	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	4a4e      	ldr	r2, [pc, #312]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e08b      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800680e:	4b48      	ldr	r3, [pc, #288]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4013      	ands	r3, r2
 8006818:	d0ef      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	23c0      	movs	r3, #192	; 0xc0
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	401a      	ands	r2, r3
 8006824:	23c0      	movs	r3, #192	; 0xc0
 8006826:	029b      	lsls	r3, r3, #10
 8006828:	429a      	cmp	r2, r3
 800682a:	d10c      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a44      	ldr	r2, [pc, #272]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006832:	4013      	ands	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	23c0      	movs	r3, #192	; 0xc0
 800683c:	039b      	lsls	r3, r3, #14
 800683e:	401a      	ands	r2, r3
 8006840:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006842:	430a      	orrs	r2, r1
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	4b3a      	ldr	r3, [pc, #232]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006848:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	23c0      	movs	r3, #192	; 0xc0
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	401a      	ands	r2, r3
 8006854:	4b36      	ldr	r3, [pc, #216]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006856:	430a      	orrs	r2, r1
 8006858:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800685a:	2317      	movs	r3, #23
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d105      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006864:	4b32      	ldr	r3, [pc, #200]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006868:	4b31      	ldr	r3, [pc, #196]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800686a:	4937      	ldr	r1, [pc, #220]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800686c:	400a      	ands	r2, r1
 800686e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2201      	movs	r2, #1
 8006876:	4013      	ands	r3, r2
 8006878:	d009      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800687a:	4b2d      	ldr	r3, [pc, #180]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800687c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687e:	2203      	movs	r2, #3
 8006880:	4393      	bics	r3, r2
 8006882:	0019      	movs	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	4b29      	ldr	r3, [pc, #164]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800688a:	430a      	orrs	r2, r1
 800688c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2202      	movs	r2, #2
 8006894:	4013      	ands	r3, r2
 8006896:	d009      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006898:	4b25      	ldr	r3, [pc, #148]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800689a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689c:	220c      	movs	r2, #12
 800689e:	4393      	bics	r3, r2
 80068a0:	0019      	movs	r1, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	4b22      	ldr	r3, [pc, #136]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80068a8:	430a      	orrs	r2, r1
 80068aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2204      	movs	r2, #4
 80068b2:	4013      	ands	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068b6:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80068b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ba:	4a24      	ldr	r2, [pc, #144]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068bc:	4013      	ands	r3, r2
 80068be:	0019      	movs	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80068c6:	430a      	orrs	r2, r1
 80068c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2208      	movs	r2, #8
 80068d0:	4013      	ands	r3, r2
 80068d2:	d009      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068d4:	4b16      	ldr	r3, [pc, #88]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80068d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d8:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068da:	4013      	ands	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80068e4:	430a      	orrs	r2, r1
 80068e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2240      	movs	r2, #64	; 0x40
 80068ee:	4013      	ands	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068f2:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80068f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f6:	4a17      	ldr	r2, [pc, #92]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	0019      	movs	r1, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006902:	430a      	orrs	r2, r1
 8006904:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	4013      	ands	r3, r2
 800690e:	d009      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	4a10      	ldr	r2, [pc, #64]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006916:	4013      	ands	r3, r2
 8006918:	0019      	movs	r1, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69da      	ldr	r2, [r3, #28]
 800691e:	4b04      	ldr	r3, [pc, #16]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006920:	430a      	orrs	r2, r1
 8006922:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	0018      	movs	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	b006      	add	sp, #24
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	40021000 	.word	0x40021000
 8006934:	40007000 	.word	0x40007000
 8006938:	fffcffff 	.word	0xfffcffff
 800693c:	fff7ffff 	.word	0xfff7ffff
 8006940:	00001388 	.word	0x00001388
 8006944:	ffcfffff 	.word	0xffcfffff
 8006948:	efffffff 	.word	0xefffffff
 800694c:	fffff3ff 	.word	0xfffff3ff
 8006950:	ffffcfff 	.word	0xffffcfff
 8006954:	fbffffff 	.word	0xfbffffff
 8006958:	fff3ffff 	.word	0xfff3ffff

0800695c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e083      	b.n	8006a76 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	2382      	movs	r3, #130	; 0x82
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	429a      	cmp	r2, r3
 8006980:	d009      	beq.n	8006996 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	61da      	str	r2, [r3, #28]
 8006988:	e005      	b.n	8006996 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2251      	movs	r2, #81	; 0x51
 80069a0:	5c9b      	ldrb	r3, [r3, r2]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2250      	movs	r2, #80	; 0x50
 80069ac:	2100      	movs	r1, #0
 80069ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7fd fcfe 	bl	80043b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2251      	movs	r2, #81	; 0x51
 80069bc:	2102      	movs	r1, #2
 80069be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2140      	movs	r1, #64	; 0x40
 80069cc:	438a      	bics	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	2382      	movs	r3, #130	; 0x82
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	401a      	ands	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6899      	ldr	r1, [r3, #8]
 80069de:	2384      	movs	r3, #132	; 0x84
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	400b      	ands	r3, r1
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68d9      	ldr	r1, [r3, #12]
 80069ea:	2380      	movs	r3, #128	; 0x80
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	400b      	ands	r3, r1
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2102      	movs	r1, #2
 80069f8:	400b      	ands	r3, r1
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	2101      	movs	r1, #1
 8006a02:	400b      	ands	r3, r1
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6999      	ldr	r1, [r3, #24]
 8006a0a:	2380      	movs	r3, #128	; 0x80
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	400b      	ands	r3, r1
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	2138      	movs	r1, #56	; 0x38
 8006a18:	400b      	ands	r3, r1
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	400b      	ands	r3, r1
 8006a24:	431a      	orrs	r2, r3
 8006a26:	0011      	movs	r1, r2
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a2c:	2380      	movs	r3, #128	; 0x80
 8006a2e:	019b      	lsls	r3, r3, #6
 8006a30:	401a      	ands	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	2204      	movs	r2, #4
 8006a42:	4013      	ands	r3, r2
 8006a44:	0019      	movs	r1, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2210      	movs	r2, #16
 8006a4c:	401a      	ands	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4907      	ldr	r1, [pc, #28]	; (8006a80 <HAL_SPI_Init+0x124>)
 8006a62:	400a      	ands	r2, r1
 8006a64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2251      	movs	r2, #81	; 0x51
 8006a70:	2101      	movs	r1, #1
 8006a72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	0018      	movs	r0, r3
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b002      	add	sp, #8
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	fffff7ff 	.word	0xfffff7ff

08006a84 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e074      	b.n	8006b80 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	223c      	movs	r2, #60	; 0x3c
 8006a9a:	5c9b      	ldrb	r3, [r3, r2]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	223d      	movs	r2, #61	; 0x3d
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fd fd1b 	bl	80044e8 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	223c      	movs	r2, #60	; 0x3c
 8006ab6:	2102      	movs	r1, #2
 8006ab8:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6819      	ldr	r1, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8006ad0:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8006ad8:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8006ade:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8006ae4:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8006aea:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8006af0:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8006af6:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d108      	bne.n	8006b1a <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	0249      	lsls	r1, r1, #9
 8006b16:	430a      	orrs	r2, r1
 8006b18:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	43d2      	mvns	r2, r2
 8006b30:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b4a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681c      	ldr	r4, [r3, #0]
 8006b54:	0010      	movs	r0, r2
 8006b56:	f000 f817 	bl	8006b88 <TSC_extract_groups>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2103      	movs	r1, #3
 8006b6a:	438a      	bics	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2203      	movs	r2, #3
 8006b74:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	223c      	movs	r2, #60	; 0x3c
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	0018      	movs	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b003      	add	sp, #12
 8006b86:	bd90      	pop	{r4, r7, pc}

08006b88 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	60bb      	str	r3, [r7, #8]
 8006b98:	e011      	b.n	8006bbe <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	220f      	movs	r2, #15
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	0013      	movs	r3, r2
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d006      	beq.n	8006bb8 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8006baa:	2201      	movs	r2, #1
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	0013      	movs	r3, r2
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b07      	cmp	r3, #7
 8006bc2:	d9ea      	bls.n	8006b9a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b004      	add	sp, #16
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e04c      	b.n	8006c7c <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d107      	bne.n	8006bfa <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2274      	movs	r2, #116	; 0x74
 8006bee:	2100      	movs	r1, #0
 8006bf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f7fd fb35 	bl	8004264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2224      	movs	r2, #36	; 0x24
 8006bfe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	438a      	bics	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 f8e0 	bl	8006dd8 <UART_SetConfig>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e02c      	b.n	8006c7c <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f000 fb73 	bl	8007318 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4911      	ldr	r1, [pc, #68]	; (8006c84 <HAL_HalfDuplex_Init+0xb4>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2122      	movs	r1, #34	; 0x22
 8006c4e:	438a      	bics	r2, r1
 8006c50:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2108      	movs	r1, #8
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fc03 	bl	8007480 <UART_CheckIdleState>
 8006c7a:	0003      	movs	r3, r0
}
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b002      	add	sp, #8
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	ffffb7ff 	.word	0xffffb7ff

08006c88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	1dbb      	adds	r3, r7, #6
 8006c96:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d000      	beq.n	8006ca2 <HAL_UART_Transmit+0x1a>
 8006ca0:	e095      	b.n	8006dce <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <HAL_UART_Transmit+0x28>
 8006ca8:	1dbb      	adds	r3, r7, #6
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e08d      	b.n	8006dd0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	015b      	lsls	r3, r3, #5
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d109      	bne.n	8006cd4 <HAL_UART_Transmit+0x4c>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d001      	beq.n	8006cd4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e07d      	b.n	8006dd0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2274      	movs	r2, #116	; 0x74
 8006cd8:	5c9b      	ldrb	r3, [r3, r2]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Transmit+0x5a>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e076      	b.n	8006dd0 <HAL_UART_Transmit+0x148>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2274      	movs	r2, #116	; 0x74
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2280      	movs	r2, #128	; 0x80
 8006cee:	2100      	movs	r1, #0
 8006cf0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf8:	f7fd fd52 	bl	80047a0 <HAL_GetTick>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	1dba      	adds	r2, r7, #6
 8006d04:	2150      	movs	r1, #80	; 0x50
 8006d06:	8812      	ldrh	r2, [r2, #0]
 8006d08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1dba      	adds	r2, r7, #6
 8006d0e:	2152      	movs	r1, #82	; 0x52
 8006d10:	8812      	ldrh	r2, [r2, #0]
 8006d12:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	015b      	lsls	r3, r3, #5
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d108      	bne.n	8006d32 <HAL_UART_Transmit+0xaa>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e003      	b.n	8006d3a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2274      	movs	r2, #116	; 0x74
 8006d3e:	2100      	movs	r1, #0
 8006d40:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006d42:	e02c      	b.n	8006d9e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	0013      	movs	r3, r2
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	f000 fbdd 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 8006d56:	1e03      	subs	r3, r0, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e038      	b.n	8006dd0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	001a      	movs	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	05d2      	lsls	r2, r2, #23
 8006d70:	0dd2      	lsrs	r2, r2, #23
 8006d72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	3302      	adds	r3, #2
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e007      	b.n	8006d8c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2252      	movs	r2, #82	; 0x52
 8006d90:	5a9b      	ldrh	r3, [r3, r2]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b299      	uxth	r1, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2252      	movs	r2, #82	; 0x52
 8006d9c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2252      	movs	r2, #82	; 0x52
 8006da2:	5a9b      	ldrh	r3, [r3, r2]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1cc      	bne.n	8006d44 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	0013      	movs	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	2140      	movs	r1, #64	; 0x40
 8006db8:	f000 fbaa 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 8006dbc:	1e03      	subs	r3, r0, #0
 8006dbe:	d001      	beq.n	8006dc4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e005      	b.n	8006dd0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
  }
}
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	b008      	add	sp, #32
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd8:	b5b0      	push	{r4, r5, r7, lr}
 8006dda:	b08e      	sub	sp, #56	; 0x38
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006de0:	231a      	movs	r3, #26
 8006de2:	2218      	movs	r2, #24
 8006de4:	4694      	mov	ip, r2
 8006de6:	44bc      	add	ip, r7
 8006de8:	4463      	add	r3, ip
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4ac1      	ldr	r2, [pc, #772]	; (8007114 <UART_SetConfig+0x33c>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	0019      	movs	r1, r3
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	4abd      	ldr	r2, [pc, #756]	; (8007118 <UART_SetConfig+0x340>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	0019      	movs	r1, r3
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4ab7      	ldr	r2, [pc, #732]	; (800711c <UART_SetConfig+0x344>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d004      	beq.n	8006e4e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	4ab2      	ldr	r2, [pc, #712]	; (8007120 <UART_SetConfig+0x348>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	0019      	movs	r1, r3
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e60:	430a      	orrs	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4aae      	ldr	r2, [pc, #696]	; (8007124 <UART_SetConfig+0x34c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d136      	bne.n	8006edc <UART_SetConfig+0x104>
 8006e6e:	4bae      	ldr	r3, [pc, #696]	; (8007128 <UART_SetConfig+0x350>)
 8006e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e72:	2203      	movs	r2, #3
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d020      	beq.n	8006ebc <UART_SetConfig+0xe4>
 8006e7a:	d827      	bhi.n	8006ecc <UART_SetConfig+0xf4>
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d00d      	beq.n	8006e9c <UART_SetConfig+0xc4>
 8006e80:	d824      	bhi.n	8006ecc <UART_SetConfig+0xf4>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <UART_SetConfig+0xb4>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d010      	beq.n	8006eac <UART_SetConfig+0xd4>
 8006e8a:	e01f      	b.n	8006ecc <UART_SetConfig+0xf4>
 8006e8c:	231b      	movs	r3, #27
 8006e8e:	2218      	movs	r2, #24
 8006e90:	4694      	mov	ip, r2
 8006e92:	44bc      	add	ip, r7
 8006e94:	4463      	add	r3, ip
 8006e96:	2201      	movs	r2, #1
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	e0ab      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006e9c:	231b      	movs	r3, #27
 8006e9e:	2218      	movs	r2, #24
 8006ea0:	4694      	mov	ip, r2
 8006ea2:	44bc      	add	ip, r7
 8006ea4:	4463      	add	r3, ip
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e0a3      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006eac:	231b      	movs	r3, #27
 8006eae:	2218      	movs	r2, #24
 8006eb0:	4694      	mov	ip, r2
 8006eb2:	44bc      	add	ip, r7
 8006eb4:	4463      	add	r3, ip
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	e09b      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006ebc:	231b      	movs	r3, #27
 8006ebe:	2218      	movs	r2, #24
 8006ec0:	4694      	mov	ip, r2
 8006ec2:	44bc      	add	ip, r7
 8006ec4:	4463      	add	r3, ip
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	e093      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006ecc:	231b      	movs	r3, #27
 8006ece:	2218      	movs	r2, #24
 8006ed0:	4694      	mov	ip, r2
 8006ed2:	44bc      	add	ip, r7
 8006ed4:	4463      	add	r3, ip
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e08b      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a92      	ldr	r2, [pc, #584]	; (800712c <UART_SetConfig+0x354>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d136      	bne.n	8006f54 <UART_SetConfig+0x17c>
 8006ee6:	4b90      	ldr	r3, [pc, #576]	; (8007128 <UART_SetConfig+0x350>)
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eea:	220c      	movs	r2, #12
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b0c      	cmp	r3, #12
 8006ef0:	d020      	beq.n	8006f34 <UART_SetConfig+0x15c>
 8006ef2:	d827      	bhi.n	8006f44 <UART_SetConfig+0x16c>
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d00d      	beq.n	8006f14 <UART_SetConfig+0x13c>
 8006ef8:	d824      	bhi.n	8006f44 <UART_SetConfig+0x16c>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <UART_SetConfig+0x12c>
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d010      	beq.n	8006f24 <UART_SetConfig+0x14c>
 8006f02:	e01f      	b.n	8006f44 <UART_SetConfig+0x16c>
 8006f04:	231b      	movs	r3, #27
 8006f06:	2218      	movs	r2, #24
 8006f08:	4694      	mov	ip, r2
 8006f0a:	44bc      	add	ip, r7
 8006f0c:	4463      	add	r3, ip
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e06f      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006f14:	231b      	movs	r3, #27
 8006f16:	2218      	movs	r2, #24
 8006f18:	4694      	mov	ip, r2
 8006f1a:	44bc      	add	ip, r7
 8006f1c:	4463      	add	r3, ip
 8006f1e:	2202      	movs	r2, #2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e067      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006f24:	231b      	movs	r3, #27
 8006f26:	2218      	movs	r2, #24
 8006f28:	4694      	mov	ip, r2
 8006f2a:	44bc      	add	ip, r7
 8006f2c:	4463      	add	r3, ip
 8006f2e:	2204      	movs	r2, #4
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e05f      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006f34:	231b      	movs	r3, #27
 8006f36:	2218      	movs	r2, #24
 8006f38:	4694      	mov	ip, r2
 8006f3a:	44bc      	add	ip, r7
 8006f3c:	4463      	add	r3, ip
 8006f3e:	2208      	movs	r2, #8
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	e057      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006f44:	231b      	movs	r3, #27
 8006f46:	2218      	movs	r2, #24
 8006f48:	4694      	mov	ip, r2
 8006f4a:	44bc      	add	ip, r7
 8006f4c:	4463      	add	r3, ip
 8006f4e:	2210      	movs	r2, #16
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e04f      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a70      	ldr	r2, [pc, #448]	; (800711c <UART_SetConfig+0x344>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d143      	bne.n	8006fe6 <UART_SetConfig+0x20e>
 8006f5e:	4b72      	ldr	r3, [pc, #456]	; (8007128 <UART_SetConfig+0x350>)
 8006f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f62:	23c0      	movs	r3, #192	; 0xc0
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	4013      	ands	r3, r2
 8006f68:	22c0      	movs	r2, #192	; 0xc0
 8006f6a:	0112      	lsls	r2, r2, #4
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d02a      	beq.n	8006fc6 <UART_SetConfig+0x1ee>
 8006f70:	22c0      	movs	r2, #192	; 0xc0
 8006f72:	0112      	lsls	r2, r2, #4
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d82e      	bhi.n	8006fd6 <UART_SetConfig+0x1fe>
 8006f78:	2280      	movs	r2, #128	; 0x80
 8006f7a:	0112      	lsls	r2, r2, #4
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d012      	beq.n	8006fa6 <UART_SetConfig+0x1ce>
 8006f80:	2280      	movs	r2, #128	; 0x80
 8006f82:	0112      	lsls	r2, r2, #4
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d826      	bhi.n	8006fd6 <UART_SetConfig+0x1fe>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <UART_SetConfig+0x1be>
 8006f8c:	2280      	movs	r2, #128	; 0x80
 8006f8e:	00d2      	lsls	r2, r2, #3
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d010      	beq.n	8006fb6 <UART_SetConfig+0x1de>
 8006f94:	e01f      	b.n	8006fd6 <UART_SetConfig+0x1fe>
 8006f96:	231b      	movs	r3, #27
 8006f98:	2218      	movs	r2, #24
 8006f9a:	4694      	mov	ip, r2
 8006f9c:	44bc      	add	ip, r7
 8006f9e:	4463      	add	r3, ip
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	e026      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006fa6:	231b      	movs	r3, #27
 8006fa8:	2218      	movs	r2, #24
 8006faa:	4694      	mov	ip, r2
 8006fac:	44bc      	add	ip, r7
 8006fae:	4463      	add	r3, ip
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e01e      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006fb6:	231b      	movs	r3, #27
 8006fb8:	2218      	movs	r2, #24
 8006fba:	4694      	mov	ip, r2
 8006fbc:	44bc      	add	ip, r7
 8006fbe:	4463      	add	r3, ip
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	e016      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006fc6:	231b      	movs	r3, #27
 8006fc8:	2218      	movs	r2, #24
 8006fca:	4694      	mov	ip, r2
 8006fcc:	44bc      	add	ip, r7
 8006fce:	4463      	add	r3, ip
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e00e      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006fd6:	231b      	movs	r3, #27
 8006fd8:	2218      	movs	r2, #24
 8006fda:	4694      	mov	ip, r2
 8006fdc:	44bc      	add	ip, r7
 8006fde:	4463      	add	r3, ip
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e006      	b.n	8006ff4 <UART_SetConfig+0x21c>
 8006fe6:	231b      	movs	r3, #27
 8006fe8:	2218      	movs	r2, #24
 8006fea:	4694      	mov	ip, r2
 8006fec:	44bc      	add	ip, r7
 8006fee:	4463      	add	r3, ip
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a48      	ldr	r2, [pc, #288]	; (800711c <UART_SetConfig+0x344>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d000      	beq.n	8007000 <UART_SetConfig+0x228>
 8006ffe:	e09b      	b.n	8007138 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007000:	231b      	movs	r3, #27
 8007002:	2218      	movs	r2, #24
 8007004:	4694      	mov	ip, r2
 8007006:	44bc      	add	ip, r7
 8007008:	4463      	add	r3, ip
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d01d      	beq.n	800704c <UART_SetConfig+0x274>
 8007010:	dc20      	bgt.n	8007054 <UART_SetConfig+0x27c>
 8007012:	2b04      	cmp	r3, #4
 8007014:	d015      	beq.n	8007042 <UART_SetConfig+0x26a>
 8007016:	dc1d      	bgt.n	8007054 <UART_SetConfig+0x27c>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <UART_SetConfig+0x24a>
 800701c:	2b02      	cmp	r3, #2
 800701e:	d005      	beq.n	800702c <UART_SetConfig+0x254>
 8007020:	e018      	b.n	8007054 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007022:	f7ff fb0b 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8007026:	0003      	movs	r3, r0
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800702a:	e01d      	b.n	8007068 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800702c:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <UART_SetConfig+0x350>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2210      	movs	r2, #16
 8007032:	4013      	ands	r3, r2
 8007034:	d002      	beq.n	800703c <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007036:	4b3e      	ldr	r3, [pc, #248]	; (8007130 <UART_SetConfig+0x358>)
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800703a:	e015      	b.n	8007068 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 800703c:	4b3d      	ldr	r3, [pc, #244]	; (8007134 <UART_SetConfig+0x35c>)
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007040:	e012      	b.n	8007068 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007042:	f7ff fa4b 	bl	80064dc <HAL_RCC_GetSysClockFreq>
 8007046:	0003      	movs	r3, r0
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800704a:	e00d      	b.n	8007068 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	021b      	lsls	r3, r3, #8
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007052:	e009      	b.n	8007068 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007058:	231a      	movs	r3, #26
 800705a:	2218      	movs	r2, #24
 800705c:	4694      	mov	ip, r2
 800705e:	44bc      	add	ip, r7
 8007060:	4463      	add	r3, ip
 8007062:	2201      	movs	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
        break;
 8007066:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d100      	bne.n	8007070 <UART_SetConfig+0x298>
 800706e:	e139      	b.n	80072e4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	0013      	movs	r3, r2
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	189b      	adds	r3, r3, r2
 800707a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707c:	429a      	cmp	r2, r3
 800707e:	d305      	bcc.n	800708c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007088:	429a      	cmp	r2, r3
 800708a:	d907      	bls.n	800709c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800708c:	231a      	movs	r3, #26
 800708e:	2218      	movs	r2, #24
 8007090:	4694      	mov	ip, r2
 8007092:	44bc      	add	ip, r7
 8007094:	4463      	add	r3, ip
 8007096:	2201      	movs	r2, #1
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e123      	b.n	80072e4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	2300      	movs	r3, #0
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	6939      	ldr	r1, [r7, #16]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	000b      	movs	r3, r1
 80070aa:	0e1b      	lsrs	r3, r3, #24
 80070ac:	0010      	movs	r0, r2
 80070ae:	0205      	lsls	r5, r0, #8
 80070b0:	431d      	orrs	r5, r3
 80070b2:	000b      	movs	r3, r1
 80070b4:	021c      	lsls	r4, r3, #8
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	68b8      	ldr	r0, [r7, #8]
 80070c4:	68f9      	ldr	r1, [r7, #12]
 80070c6:	1900      	adds	r0, r0, r4
 80070c8:	4169      	adcs	r1, r5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f7f9 f9ca 	bl	8000470 <__aeabi_uldivmod>
 80070dc:	0002      	movs	r2, r0
 80070de:	000b      	movs	r3, r1
 80070e0:	0013      	movs	r3, r2
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e6:	23c0      	movs	r3, #192	; 0xc0
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d309      	bcc.n	8007102 <UART_SetConfig+0x32a>
 80070ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f0:	2380      	movs	r3, #128	; 0x80
 80070f2:	035b      	lsls	r3, r3, #13
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d204      	bcs.n	8007102 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070fe:	60da      	str	r2, [r3, #12]
 8007100:	e0f0      	b.n	80072e4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8007102:	231a      	movs	r3, #26
 8007104:	2218      	movs	r2, #24
 8007106:	4694      	mov	ip, r2
 8007108:	44bc      	add	ip, r7
 800710a:	4463      	add	r3, ip
 800710c:	2201      	movs	r2, #1
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	e0e8      	b.n	80072e4 <UART_SetConfig+0x50c>
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	efff69f3 	.word	0xefff69f3
 8007118:	ffffcfff 	.word	0xffffcfff
 800711c:	40004800 	.word	0x40004800
 8007120:	fffff4ff 	.word	0xfffff4ff
 8007124:	40013800 	.word	0x40013800
 8007128:	40021000 	.word	0x40021000
 800712c:	40004400 	.word	0x40004400
 8007130:	003d0900 	.word	0x003d0900
 8007134:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	429a      	cmp	r2, r3
 8007142:	d000      	beq.n	8007146 <UART_SetConfig+0x36e>
 8007144:	e074      	b.n	8007230 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007146:	231b      	movs	r3, #27
 8007148:	2218      	movs	r2, #24
 800714a:	4694      	mov	ip, r2
 800714c:	44bc      	add	ip, r7
 800714e:	4463      	add	r3, ip
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b08      	cmp	r3, #8
 8007154:	d822      	bhi.n	800719c <UART_SetConfig+0x3c4>
 8007156:	009a      	lsls	r2, r3, #2
 8007158:	4b6a      	ldr	r3, [pc, #424]	; (8007304 <UART_SetConfig+0x52c>)
 800715a:	18d3      	adds	r3, r2, r3
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007160:	f7ff fa6c 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8007164:	0003      	movs	r3, r0
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007168:	e022      	b.n	80071b0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800716a:	f7ff fa7d 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 800716e:	0003      	movs	r3, r0
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007172:	e01d      	b.n	80071b0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007174:	4b64      	ldr	r3, [pc, #400]	; (8007308 <UART_SetConfig+0x530>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2210      	movs	r2, #16
 800717a:	4013      	ands	r3, r2
 800717c:	d002      	beq.n	8007184 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800717e:	4b63      	ldr	r3, [pc, #396]	; (800730c <UART_SetConfig+0x534>)
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007182:	e015      	b.n	80071b0 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8007184:	4b62      	ldr	r3, [pc, #392]	; (8007310 <UART_SetConfig+0x538>)
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007188:	e012      	b.n	80071b0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718a:	f7ff f9a7 	bl	80064dc <HAL_RCC_GetSysClockFreq>
 800718e:	0003      	movs	r3, r0
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007192:	e00d      	b.n	80071b0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800719a:	e009      	b.n	80071b0 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80071a0:	231a      	movs	r3, #26
 80071a2:	2218      	movs	r2, #24
 80071a4:	4694      	mov	ip, r2
 80071a6:	44bc      	add	ip, r7
 80071a8:	4463      	add	r3, ip
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
        break;
 80071ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d100      	bne.n	80071b8 <UART_SetConfig+0x3e0>
 80071b6:	e095      	b.n	80072e4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	005a      	lsls	r2, r3, #1
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	18d2      	adds	r2, r2, r3
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	0019      	movs	r1, r3
 80071ca:	0010      	movs	r0, r2
 80071cc:	f7f8 ff9c 	bl	8000108 <__udivsi3>
 80071d0:	0003      	movs	r3, r0
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	2b0f      	cmp	r3, #15
 80071da:	d921      	bls.n	8007220 <UART_SetConfig+0x448>
 80071dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071de:	2380      	movs	r3, #128	; 0x80
 80071e0:	025b      	lsls	r3, r3, #9
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d21c      	bcs.n	8007220 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	200e      	movs	r0, #14
 80071ec:	2418      	movs	r4, #24
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	181b      	adds	r3, r3, r0
 80071f2:	210f      	movs	r1, #15
 80071f4:	438a      	bics	r2, r1
 80071f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2207      	movs	r2, #7
 8007200:	4013      	ands	r3, r2
 8007202:	b299      	uxth	r1, r3
 8007204:	193b      	adds	r3, r7, r4
 8007206:	181b      	adds	r3, r3, r0
 8007208:	193a      	adds	r2, r7, r4
 800720a:	1812      	adds	r2, r2, r0
 800720c:	8812      	ldrh	r2, [r2, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	193a      	adds	r2, r7, r4
 8007218:	1812      	adds	r2, r2, r0
 800721a:	8812      	ldrh	r2, [r2, #0]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	e061      	b.n	80072e4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8007220:	231a      	movs	r3, #26
 8007222:	2218      	movs	r2, #24
 8007224:	4694      	mov	ip, r2
 8007226:	44bc      	add	ip, r7
 8007228:	4463      	add	r3, ip
 800722a:	2201      	movs	r2, #1
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e059      	b.n	80072e4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007230:	231b      	movs	r3, #27
 8007232:	2218      	movs	r2, #24
 8007234:	4694      	mov	ip, r2
 8007236:	44bc      	add	ip, r7
 8007238:	4463      	add	r3, ip
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d822      	bhi.n	8007286 <UART_SetConfig+0x4ae>
 8007240:	009a      	lsls	r2, r3, #2
 8007242:	4b34      	ldr	r3, [pc, #208]	; (8007314 <UART_SetConfig+0x53c>)
 8007244:	18d3      	adds	r3, r2, r3
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724a:	f7ff f9f7 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 800724e:	0003      	movs	r3, r0
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007252:	e022      	b.n	800729a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007254:	f7ff fa08 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 8007258:	0003      	movs	r3, r0
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800725c:	e01d      	b.n	800729a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800725e:	4b2a      	ldr	r3, [pc, #168]	; (8007308 <UART_SetConfig+0x530>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2210      	movs	r2, #16
 8007264:	4013      	ands	r3, r2
 8007266:	d002      	beq.n	800726e <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007268:	4b28      	ldr	r3, [pc, #160]	; (800730c <UART_SetConfig+0x534>)
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800726c:	e015      	b.n	800729a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800726e:	4b28      	ldr	r3, [pc, #160]	; (8007310 <UART_SetConfig+0x538>)
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007272:	e012      	b.n	800729a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007274:	f7ff f932 	bl	80064dc <HAL_RCC_GetSysClockFreq>
 8007278:	0003      	movs	r3, r0
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800727c:	e00d      	b.n	800729a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007284:	e009      	b.n	800729a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800728a:	231a      	movs	r3, #26
 800728c:	2218      	movs	r2, #24
 800728e:	4694      	mov	ip, r2
 8007290:	44bc      	add	ip, r7
 8007292:	4463      	add	r3, ip
 8007294:	2201      	movs	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]
        break;
 8007298:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d021      	beq.n	80072e4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	085a      	lsrs	r2, r3, #1
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	18d2      	adds	r2, r2, r3
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	0019      	movs	r1, r3
 80072b0:	0010      	movs	r0, r2
 80072b2:	f7f8 ff29 	bl	8000108 <__udivsi3>
 80072b6:	0003      	movs	r3, r0
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	2b0f      	cmp	r3, #15
 80072c0:	d909      	bls.n	80072d6 <UART_SetConfig+0x4fe>
 80072c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	025b      	lsls	r3, r3, #9
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d204      	bcs.n	80072d6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d2:	60da      	str	r2, [r3, #12]
 80072d4:	e006      	b.n	80072e4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80072d6:	231a      	movs	r3, #26
 80072d8:	2218      	movs	r2, #24
 80072da:	4694      	mov	ip, r2
 80072dc:	44bc      	add	ip, r7
 80072de:	4463      	add	r3, ip
 80072e0:	2201      	movs	r2, #1
 80072e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	2200      	movs	r2, #0
 80072e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	2200      	movs	r2, #0
 80072ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072f0:	231a      	movs	r3, #26
 80072f2:	2218      	movs	r2, #24
 80072f4:	4694      	mov	ip, r2
 80072f6:	44bc      	add	ip, r7
 80072f8:	4463      	add	r3, ip
 80072fa:	781b      	ldrb	r3, [r3, #0]
}
 80072fc:	0018      	movs	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	b00e      	add	sp, #56	; 0x38
 8007302:	bdb0      	pop	{r4, r5, r7, pc}
 8007304:	08007af4 	.word	0x08007af4
 8007308:	40021000 	.word	0x40021000
 800730c:	003d0900 	.word	0x003d0900
 8007310:	00f42400 	.word	0x00f42400
 8007314:	08007b18 	.word	0x08007b18

08007318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	2201      	movs	r2, #1
 8007326:	4013      	ands	r3, r2
 8007328:	d00b      	beq.n	8007342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4a4a      	ldr	r2, [pc, #296]	; (800745c <UART_AdvFeatureConfig+0x144>)
 8007332:	4013      	ands	r3, r2
 8007334:	0019      	movs	r1, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2202      	movs	r2, #2
 8007348:	4013      	ands	r3, r2
 800734a:	d00b      	beq.n	8007364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4a43      	ldr	r2, [pc, #268]	; (8007460 <UART_AdvFeatureConfig+0x148>)
 8007354:	4013      	ands	r3, r2
 8007356:	0019      	movs	r1, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2204      	movs	r2, #4
 800736a:	4013      	ands	r3, r2
 800736c:	d00b      	beq.n	8007386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	4a3b      	ldr	r2, [pc, #236]	; (8007464 <UART_AdvFeatureConfig+0x14c>)
 8007376:	4013      	ands	r3, r2
 8007378:	0019      	movs	r1, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	2208      	movs	r2, #8
 800738c:	4013      	ands	r3, r2
 800738e:	d00b      	beq.n	80073a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	4a34      	ldr	r2, [pc, #208]	; (8007468 <UART_AdvFeatureConfig+0x150>)
 8007398:	4013      	ands	r3, r2
 800739a:	0019      	movs	r1, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2210      	movs	r2, #16
 80073ae:	4013      	ands	r3, r2
 80073b0:	d00b      	beq.n	80073ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4a2c      	ldr	r2, [pc, #176]	; (800746c <UART_AdvFeatureConfig+0x154>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	0019      	movs	r1, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2220      	movs	r2, #32
 80073d0:	4013      	ands	r3, r2
 80073d2:	d00b      	beq.n	80073ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	4a25      	ldr	r2, [pc, #148]	; (8007470 <UART_AdvFeatureConfig+0x158>)
 80073dc:	4013      	ands	r3, r2
 80073de:	0019      	movs	r1, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2240      	movs	r2, #64	; 0x40
 80073f2:	4013      	ands	r3, r2
 80073f4:	d01d      	beq.n	8007432 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <UART_AdvFeatureConfig+0x15c>)
 80073fe:	4013      	ands	r3, r2
 8007400:	0019      	movs	r1, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	035b      	lsls	r3, r3, #13
 8007416:	429a      	cmp	r2, r3
 8007418:	d10b      	bne.n	8007432 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	4a15      	ldr	r2, [pc, #84]	; (8007478 <UART_AdvFeatureConfig+0x160>)
 8007422:	4013      	ands	r3, r2
 8007424:	0019      	movs	r1, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2280      	movs	r2, #128	; 0x80
 8007438:	4013      	ands	r3, r2
 800743a:	d00b      	beq.n	8007454 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	4a0e      	ldr	r2, [pc, #56]	; (800747c <UART_AdvFeatureConfig+0x164>)
 8007444:	4013      	ands	r3, r2
 8007446:	0019      	movs	r1, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]
  }
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}
 800745c:	fffdffff 	.word	0xfffdffff
 8007460:	fffeffff 	.word	0xfffeffff
 8007464:	fffbffff 	.word	0xfffbffff
 8007468:	ffff7fff 	.word	0xffff7fff
 800746c:	ffffefff 	.word	0xffffefff
 8007470:	ffffdfff 	.word	0xffffdfff
 8007474:	ffefffff 	.word	0xffefffff
 8007478:	ff9fffff 	.word	0xff9fffff
 800747c:	fff7ffff 	.word	0xfff7ffff

08007480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af02      	add	r7, sp, #8
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2280      	movs	r2, #128	; 0x80
 800748c:	2100      	movs	r1, #0
 800748e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007490:	f7fd f986 	bl	80047a0 <HAL_GetTick>
 8007494:	0003      	movs	r3, r0
 8007496:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2208      	movs	r2, #8
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	d10c      	bne.n	80074c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2280      	movs	r2, #128	; 0x80
 80074aa:	0391      	lsls	r1, r2, #14
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4a17      	ldr	r2, [pc, #92]	; (800750c <UART_CheckIdleState+0x8c>)
 80074b0:	9200      	str	r2, [sp, #0]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f000 f82c 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 80074b8:	1e03      	subs	r3, r0, #0
 80074ba:	d001      	beq.n	80074c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e021      	b.n	8007504 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2204      	movs	r2, #4
 80074c8:	4013      	ands	r3, r2
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d10c      	bne.n	80074e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2280      	movs	r2, #128	; 0x80
 80074d2:	03d1      	lsls	r1, r2, #15
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4a0d      	ldr	r2, [pc, #52]	; (800750c <UART_CheckIdleState+0x8c>)
 80074d8:	9200      	str	r2, [sp, #0]
 80074da:	2200      	movs	r2, #0
 80074dc:	f000 f818 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 80074e0:	1e03      	subs	r3, r0, #0
 80074e2:	d001      	beq.n	80074e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e00d      	b.n	8007504 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2220      	movs	r2, #32
 80074ec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2274      	movs	r2, #116	; 0x74
 80074fe:	2100      	movs	r1, #0
 8007500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b004      	add	sp, #16
 800750a:	bd80      	pop	{r7, pc}
 800750c:	01ffffff 	.word	0x01ffffff

08007510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b094      	sub	sp, #80	; 0x50
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	1dfb      	adds	r3, r7, #7
 800751e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007520:	e0a3      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007524:	3301      	adds	r3, #1
 8007526:	d100      	bne.n	800752a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007528:	e09f      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752a:	f7fd f939 	bl	80047a0 <HAL_GetTick>
 800752e:	0002      	movs	r2, r0
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007536:	429a      	cmp	r2, r3
 8007538:	d302      	bcc.n	8007540 <UART_WaitOnFlagUntilTimeout+0x30>
 800753a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800753c:	2b00      	cmp	r3, #0
 800753e:	d13d      	bne.n	80075bc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007540:	f3ef 8310 	mrs	r3, PRIMASK
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007548:	647b      	str	r3, [r7, #68]	; 0x44
 800754a:	2301      	movs	r3, #1
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	f383 8810 	msr	PRIMASK, r3
}
 8007554:	46c0      	nop			; (mov r8, r8)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	494c      	ldr	r1, [pc, #304]	; (8007694 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007562:	400a      	ands	r2, r1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007568:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	f383 8810 	msr	PRIMASK, r3
}
 8007570:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007572:	f3ef 8310 	mrs	r3, PRIMASK
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	643b      	str	r3, [r7, #64]	; 0x40
 800757c:	2301      	movs	r3, #1
 800757e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	f383 8810 	msr	PRIMASK, r3
}
 8007586:	46c0      	nop			; (mov r8, r8)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2101      	movs	r1, #1
 8007594:	438a      	bics	r2, r1
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759e:	f383 8810 	msr	PRIMASK, r3
}
 80075a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2274      	movs	r2, #116	; 0x74
 80075b4:	2100      	movs	r1, #0
 80075b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e067      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2204      	movs	r2, #4
 80075c4:	4013      	ands	r3, r2
 80075c6:	d050      	beq.n	800766a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69da      	ldr	r2, [r3, #28]
 80075ce:	2380      	movs	r3, #128	; 0x80
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	401a      	ands	r2, r3
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	429a      	cmp	r2, r3
 80075da:	d146      	bne.n	800766a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2280      	movs	r2, #128	; 0x80
 80075e2:	0112      	lsls	r2, r2, #4
 80075e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ea:	613b      	str	r3, [r7, #16]
  return(result);
 80075ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f0:	2301      	movs	r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f383 8810 	msr	PRIMASK, r3
}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4923      	ldr	r1, [pc, #140]	; (8007694 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007608:	400a      	ands	r2, r1
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	f383 8810 	msr	PRIMASK, r3
}
 8007616:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007618:	f3ef 8310 	mrs	r3, PRIMASK
 800761c:	61fb      	str	r3, [r7, #28]
  return(result);
 800761e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007620:	64bb      	str	r3, [r7, #72]	; 0x48
 8007622:	2301      	movs	r3, #1
 8007624:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	f383 8810 	msr	PRIMASK, r3
}
 800762c:	46c0      	nop			; (mov r8, r8)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2101      	movs	r1, #1
 800763a:	438a      	bics	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
 800763e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	f383 8810 	msr	PRIMASK, r3
}
 8007648:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	2120      	movs	r1, #32
 800765c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2274      	movs	r2, #116	; 0x74
 8007662:	2100      	movs	r1, #0
 8007664:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e010      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	4013      	ands	r3, r2
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	425a      	negs	r2, r3
 800767a:	4153      	adcs	r3, r2
 800767c:	b2db      	uxtb	r3, r3
 800767e:	001a      	movs	r2, r3
 8007680:	1dfb      	adds	r3, r7, #7
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d100      	bne.n	800768a <UART_WaitOnFlagUntilTimeout+0x17a>
 8007688:	e74b      	b.n	8007522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	0018      	movs	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	b014      	add	sp, #80	; 0x50
 8007692:	bd80      	pop	{r7, pc}
 8007694:	fffffe5f 	.word	0xfffffe5f

08007698 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <USB_DisableGlobalInt+0x30>)
 80076a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2240      	movs	r2, #64	; 0x40
 80076a8:	5a9b      	ldrh	r3, [r3, r2]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	b292      	uxth	r2, r2
 80076b0:	43d2      	mvns	r2, r2
 80076b2:	b292      	uxth	r2, r2
 80076b4:	4013      	ands	r3, r2
 80076b6:	b299      	uxth	r1, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	0018      	movs	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b004      	add	sp, #16
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	0000bf80 	.word	0x0000bf80

080076cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076cc:	b084      	sub	sp, #16
 80076ce:	b590      	push	{r4, r7, lr}
 80076d0:	46c6      	mov	lr, r8
 80076d2:	b500      	push	{lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	2004      	movs	r0, #4
 80076dc:	2410      	movs	r4, #16
 80076de:	46a4      	mov	ip, r4
 80076e0:	2408      	movs	r4, #8
 80076e2:	46a0      	mov	r8, r4
 80076e4:	44b8      	add	r8, r7
 80076e6:	44c4      	add	ip, r8
 80076e8:	4460      	add	r0, ip
 80076ea:	6001      	str	r1, [r0, #0]
 80076ec:	6042      	str	r2, [r0, #4]
 80076ee:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2240      	movs	r2, #64	; 0x40
 80076f4:	2101      	movs	r1, #1
 80076f6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2240      	movs	r2, #64	; 0x40
 80076fc:	2100      	movs	r1, #0
 80076fe:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2244      	movs	r2, #68	; 0x44
 8007704:	2100      	movs	r1, #0
 8007706:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2250      	movs	r2, #80	; 0x50
 800770c:	2100      	movs	r1, #0
 800770e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	0018      	movs	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	b002      	add	sp, #8
 8007718:	bc80      	pop	{r7}
 800771a:	46b8      	mov	r8, r7
 800771c:	bc90      	pop	{r4, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	b004      	add	sp, #16
 8007722:	4718      	bx	r3

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	2600      	movs	r6, #0
 8007728:	4d0c      	ldr	r5, [pc, #48]	; (800775c <__libc_init_array+0x38>)
 800772a:	4c0d      	ldr	r4, [pc, #52]	; (8007760 <__libc_init_array+0x3c>)
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	2600      	movs	r6, #0
 8007736:	f000 f821 	bl	800777c <_init>
 800773a:	4d0a      	ldr	r5, [pc, #40]	; (8007764 <__libc_init_array+0x40>)
 800773c:	4c0a      	ldr	r4, [pc, #40]	; (8007768 <__libc_init_array+0x44>)
 800773e:	1b64      	subs	r4, r4, r5
 8007740:	10a4      	asrs	r4, r4, #2
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	00b3      	lsls	r3, r6, #2
 800774a:	58eb      	ldr	r3, [r5, r3]
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	00b3      	lsls	r3, r6, #2
 8007754:	58eb      	ldr	r3, [r5, r3]
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	08007b44 	.word	0x08007b44
 8007760:	08007b44 	.word	0x08007b44
 8007764:	08007b44 	.word	0x08007b44
 8007768:	08007b48 	.word	0x08007b48

0800776c <memset>:
 800776c:	0003      	movs	r3, r0
 800776e:	1882      	adds	r2, r0, r2
 8007770:	4293      	cmp	r3, r2
 8007772:	d100      	bne.n	8007776 <memset+0xa>
 8007774:	4770      	bx	lr
 8007776:	7019      	strb	r1, [r3, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	e7f9      	b.n	8007770 <memset+0x4>

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
