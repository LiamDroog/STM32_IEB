
Dev_Board_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004258  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004414  08004414  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800441c  0800441c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000070  08004494  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08004494  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f06  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268a  00000000  00000000  00032f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00035628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  000364d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147a5  00000000  00000000  00037290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012521  00000000  00000000  0004ba35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee6d  00000000  00000000  0005df56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dcdc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003880  00000000  00000000  000dce18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004300 	.word	0x08004300

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004300 	.word	0x08004300

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b5b0      	push	{r4, r5, r7, lr}
 80004b2:	b0b2      	sub	sp, #200	; 0xc8
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fdfd 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f88d 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 fa7f 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c2:	f000 f907 	bl	80006d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004c6:	f000 f9a3 	bl	8000810 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004ca:	f000 f9d9 	bl	8000880 <MX_SPI2_Init>
  MX_TSC_Init();
 80004ce:	f000 fa0d 	bl	80008ec <MX_TSC_Init>
  MX_USART1_UART_Init();
 80004d2:	f000 f96d 	bl	80007b0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004d6:	f000 fa4d 	bl	8000974 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 80004da:	f000 f93b 	bl	8000754 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  char buffer[] = "Don't Panic :)\r\n";
//  char uartbuffer[] = "Don't Panic - from USART\r\n";
  char uart2Data[] = "\nInitializing UART..\n\rConnected to UART.\r\n";
 80004de:	2094      	movs	r0, #148	; 0x94
 80004e0:	183b      	adds	r3, r7, r0
 80004e2:	4a36      	ldr	r2, [pc, #216]	; (80005bc <main+0x10c>)
 80004e4:	ca32      	ldmia	r2!, {r1, r4, r5}
 80004e6:	c332      	stmia	r3!, {r1, r4, r5}
 80004e8:	ca32      	ldmia	r2!, {r1, r4, r5}
 80004ea:	c332      	stmia	r3!, {r1, r4, r5}
 80004ec:	ca32      	ldmia	r2!, {r1, r4, r5}
 80004ee:	c332      	stmia	r3!, {r1, r4, r5}
 80004f0:	6811      	ldr	r1, [r2, #0]
 80004f2:	6019      	str	r1, [r3, #0]
 80004f4:	8891      	ldrh	r1, [r2, #4]
 80004f6:	8099      	strh	r1, [r3, #4]
 80004f8:	7992      	ldrb	r2, [r2, #6]
 80004fa:	719a      	strb	r2, [r3, #6]

  HAL_UART_Transmit(&huart1, (uint8_t *)&uart2Data, sizeof(uart2Data), 0xFFFF);
 80004fc:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <main+0x110>)
 80004fe:	1839      	adds	r1, r7, r0
 8000500:	4830      	ldr	r0, [pc, #192]	; (80005c4 <main+0x114>)
 8000502:	222b      	movs	r2, #43	; 0x2b
 8000504:	f002 fd56 	bl	8002fb4 <HAL_UART_Transmit>

  char output[] = "Scanning I2C Bus: \r\n";
 8000508:	217c      	movs	r1, #124	; 0x7c
 800050a:	187b      	adds	r3, r7, r1
 800050c:	4a2e      	ldr	r2, [pc, #184]	; (80005c8 <main+0x118>)
 800050e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000510:	c331      	stmia	r3!, {r0, r4, r5}
 8000512:	ca11      	ldmia	r2!, {r0, r4}
 8000514:	c311      	stmia	r3!, {r0, r4}
 8000516:	7812      	ldrb	r2, [r2, #0]
 8000518:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *)output, sizeof(output), 0xFFFF);
 800051a:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <main+0x110>)
 800051c:	1879      	adds	r1, r7, r1
 800051e:	4829      	ldr	r0, [pc, #164]	; (80005c4 <main+0x114>)
 8000520:	2215      	movs	r2, #21
 8000522:	f002 fd47 	bl	8002fb4 <HAL_UART_Transmit>

  HAL_StatusTypeDef result;
  uint8_t i;

  int j = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	22c0      	movs	r2, #192	; 0xc0
 800052a:	18ba      	adds	r2, r7, r2
 800052c:	6013      	str	r3, [r2, #0]
  char output2[] = "Address found at 0x";
 800052e:	2368      	movs	r3, #104	; 0x68
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	4a26      	ldr	r2, [pc, #152]	; (80005cc <main+0x11c>)
 8000534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000536:	c313      	stmia	r3!, {r0, r1, r4}
 8000538:	ca03      	ldmia	r2!, {r0, r1}
 800053a:	c303      	stmia	r3!, {r0, r1}
//  char output1[] = ".\r\n";

  for (i=1; i<128; i++)
 800053c:	23c7      	movs	r3, #199	; 0xc7
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	e02d      	b.n	80005a2 <main+0xf2>
	{
	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 8000546:	23c7      	movs	r3, #199	; 0xc7
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b29b      	uxth	r3, r3
 800054e:	18db      	adds	r3, r3, r3
 8000550:	b299      	uxth	r1, r3
 8000552:	25bf      	movs	r5, #191	; 0xbf
 8000554:	197c      	adds	r4, r7, r5
 8000556:	481e      	ldr	r0, [pc, #120]	; (80005d0 <main+0x120>)
 8000558:	2302      	movs	r3, #2
 800055a:	2202      	movs	r2, #2
 800055c:	f001 f91c 	bl	8001798 <HAL_I2C_IsDeviceReady>
 8000560:	0003      	movs	r3, r0
 8000562:	7023      	strb	r3, [r4, #0]
//	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
//	  {
//		  HAL_UART_Transmit(&huart1, (uint8_t *)output1, sizeof(output1), 0xFFFF);
//	  }
	  if (result == HAL_OK)
 8000564:	197b      	adds	r3, r7, r5
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d10e      	bne.n	800058a <main+0xda>
	  {
		  char buf[100];
		  sprintf(buf, "%d", j);
 800056c:	23c0      	movs	r3, #192	; 0xc0
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4918      	ldr	r1, [pc, #96]	; (80005d4 <main+0x124>)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	0018      	movs	r0, r3
 8000578:	f003 fa9c 	bl	8003ab4 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *)output2, sizeof(output2), 0xFFFF);
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <main+0x110>)
 800057e:	2268      	movs	r2, #104	; 0x68
 8000580:	18b9      	adds	r1, r7, r2
 8000582:	4810      	ldr	r0, [pc, #64]	; (80005c4 <main+0x114>)
 8000584:	2214      	movs	r2, #20
 8000586:	f002 fd15 	bl	8002fb4 <HAL_UART_Transmit>
//		  HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	  }
	  j++;
 800058a:	22c0      	movs	r2, #192	; 0xc0
 800058c:	18bb      	adds	r3, r7, r2
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	18ba      	adds	r2, r7, r2
 8000594:	6013      	str	r3, [r2, #0]
  for (i=1; i<128; i++)
 8000596:	21c7      	movs	r1, #199	; 0xc7
 8000598:	187b      	adds	r3, r7, r1
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	187b      	adds	r3, r7, r1
 800059e:	3201      	adds	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	23c7      	movs	r3, #199	; 0xc7
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dacb      	bge.n	8000546 <main+0x96>
//		 HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, sizeof(buffer), HAL_MAX_DELAY);
//		 HAL_UART_Transmit(&huart1, (uint8_t *)uartbuffer, sizeof(uartbuffer), HAL_MAX_DELAY);
//	  		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
//	  	 HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);

		 HAL_Delay(2000);
 80005ae:	23fa      	movs	r3, #250	; 0xfa
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fdee 	bl	8001194 <HAL_Delay>
 80005b8:	e7f9      	b.n	80005ae <main+0xfe>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	0800431c 	.word	0x0800431c
 80005c0:	0000ffff 	.word	0x0000ffff
 80005c4:	200001c0 	.word	0x200001c0
 80005c8:	08004348 	.word	0x08004348
 80005cc:	08004360 	.word	0x08004360
 80005d0:	200000f0 	.word	0x200000f0
 80005d4:	08004318 	.word	0x08004318

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b09d      	sub	sp, #116	; 0x74
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	2438      	movs	r4, #56	; 0x38
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	0018      	movs	r0, r3
 80005e4:	2338      	movs	r3, #56	; 0x38
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f003 fa5b 	bl	8003aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ee:	2324      	movs	r3, #36	; 0x24
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	2314      	movs	r3, #20
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f003 fa53 	bl	8003aa4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fe:	003b      	movs	r3, r7
 8000600:	0018      	movs	r0, r3
 8000602:	2324      	movs	r3, #36	; 0x24
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f003 fa4c 	bl	8003aa4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <SystemClock_Config+0xf4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <SystemClock_Config+0xf8>)
 8000612:	401a      	ands	r2, r3
 8000614:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <SystemClock_Config+0xf4>)
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	0109      	lsls	r1, r1, #4
 800061a:	430a      	orrs	r2, r1
 800061c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2221      	movs	r2, #33	; 0x21
 8000622:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	22a0      	movs	r2, #160	; 0xa0
 8000628:	02d2      	lsls	r2, r2, #11
 800062a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800062c:	0021      	movs	r1, r4
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2201      	movs	r2, #1
 8000632:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2202      	movs	r2, #2
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	0252      	lsls	r2, r2, #9
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	0352      	lsls	r2, r2, #13
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0412      	lsls	r2, r2, #16
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	187b      	adds	r3, r7, r1
 8000654:	0018      	movs	r0, r3
 8000656:	f001 fbcb 	bl	8001df0 <HAL_RCC_OscConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800065e:	f000 fa59 	bl	8000b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	2124      	movs	r1, #36	; 0x24
 8000664:	187b      	adds	r3, r7, r1
 8000666:	220f      	movs	r2, #15
 8000668:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2203      	movs	r2, #3
 800066e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2101      	movs	r1, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f001 ff76 	bl	8002578 <HAL_RCC_ClockConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000690:	f000 fa40 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000694:	003b      	movs	r3, r7
 8000696:	224d      	movs	r2, #77	; 0x4d
 8000698:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006a0:	003b      	movs	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	04d2      	lsls	r2, r2, #19
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b4:	003b      	movs	r3, r7
 80006b6:	0018      	movs	r0, r3
 80006b8:	f002 f982 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80006c0:	f000 fa28 	bl	8000b14 <Error_Handler>
  }
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b01d      	add	sp, #116	; 0x74
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40007000 	.word	0x40007000
 80006d0:	ffffe7ff 	.word	0xffffe7ff

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	0018      	movs	r0, r3
 8000712:	f000 ffab 	bl	800166c <HAL_I2C_Init>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f9fb 	bl	8000b14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x74>)
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f001 f992 	bl	8001a4c <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f9f2 	bl	8000b14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000732:	2100      	movs	r1, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 f9d5 	bl	8001ae4 <HAL_I2CEx_ConfigDigitalFilter>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f9e9 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000f0 	.word	0x200000f0
 800074c:	40005400 	.word	0x40005400
 8000750:	00707cbb 	.word	0x00707cbb

08000754 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <MX_LPUART1_UART_Init+0x58>)
 800075c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 8000760:	2296      	movs	r2, #150	; 0x96
 8000762:	0192      	lsls	r2, r2, #6
 8000764:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_LPUART1_UART_Init+0x54>)
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fbb2 	bl	8002efc <HAL_HalfDuplex_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f9ba 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	2000013c 	.word	0x2000013c
 80007ac:	40004800 	.word	0x40004800

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART1_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007bc:	22e1      	movs	r2, #225	; 0xe1
 80007be:	0252      	lsls	r2, r2, #9
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 fb81 	bl	8002efc <HAL_HalfDuplex_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f989 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001c0 	.word	0x200001c0
 800080c:	40013800 	.word	0x40013800

08000810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_SPI1_Init+0x68>)
 8000816:	4a19      	ldr	r2, [pc, #100]	; (800087c <MX_SPI1_Init+0x6c>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_SPI1_Init+0x68>)
 800081c:	2282      	movs	r2, #130	; 0x82
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_SPI1_Init+0x68>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0212      	lsls	r2, r2, #8
 8000828:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_SPI1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_SPI1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI1_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_SPI1_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_SPI1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_SPI1_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_SPI1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_SPI1_Init+0x68>)
 800085c:	2207      	movs	r2, #7
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_SPI1_Init+0x68>)
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fa10 	bl	8002c88 <HAL_SPI_Init>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f952 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20000244 	.word	0x20000244
 800087c:	40013000 	.word	0x40013000

08000880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_SPI2_Init+0x64>)
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <MX_SPI2_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_SPI2_Init+0x64>)
 800088c:	2282      	movs	r2, #130	; 0x82
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_SPI2_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_SPI2_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_SPI2_Init+0x64>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 f9d9 	bl	8002c88 <HAL_SPI_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80008da:	f000 f91b 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000098 	.word	0x20000098
 80008e8:	40003800 	.word	0x40003800

080008ec <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TSC_Init+0x80>)
 80008f2:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <MX_TSC_Init+0x84>)
 80008f4:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TSC_Init+0x80>)
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	0552      	lsls	r2, r2, #21
 80008fc:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TSC_Init+0x80>)
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	0452      	lsls	r2, r2, #17
 8000904:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TSC_Init+0x80>)
 8000908:	2200      	movs	r2, #0
 800090a:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_TSC_Init+0x80>)
 800090e:	2201      	movs	r2, #1
 8000910:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TSC_Init+0x80>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_TSC_Init+0x80>)
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	0192      	lsls	r2, r2, #6
 800091e:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_TSC_Init+0x80>)
 8000922:	22a0      	movs	r2, #160	; 0xa0
 8000924:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_TSC_Init+0x80>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_TSC_Init+0x80>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_TSC_Init+0x80>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_TSC_Init+0x80>)
 800093a:	222c      	movs	r2, #44	; 0x2c
 800093c:	2100      	movs	r1, #0
 800093e:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_TSC_Init+0x80>)
 8000942:	2291      	movs	r2, #145	; 0x91
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_TSC_Init+0x80>)
 800094a:	2200      	movs	r2, #0
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_TSC_Init+0x80>)
 8000950:	2291      	movs	r2, #145	; 0x91
 8000952:	00d2      	lsls	r2, r2, #3
 8000954:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <MX_TSC_Init+0x80>)
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fa29 	bl	8002db0 <HAL_TSC_Init>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8000962:	f000 f8d7 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000590 	.word	0x20000590
 8000970:	40024000 	.word	0x40024000

08000974 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <MX_USB_PCD_Init+0x48>)
 800097c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 8000980:	2208      	movs	r2, #8
 8000982:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 8000986:	2202      	movs	r2, #2
 8000988:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 800098c:	2202      	movs	r2, #2
 800098e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <MX_USB_PCD_Init+0x44>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 f8e9 	bl	8001b7c <HAL_PCD_Init>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80009ae:	f000 f8b1 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000029c 	.word	0x2000029c
 80009bc:	40005c00 	.word	0x40005c00

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b08b      	sub	sp, #44	; 0x2c
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	2414      	movs	r4, #20
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	0018      	movs	r0, r3
 80009cc:	2314      	movs	r3, #20
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f003 f867 	bl	8003aa4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <MX_GPIO_Init+0x148>)
 80009d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009da:	4b4b      	ldr	r3, [pc, #300]	; (8000b08 <MX_GPIO_Init+0x148>)
 80009dc:	2104      	movs	r1, #4
 80009de:	430a      	orrs	r2, r1
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e2:	4b49      	ldr	r3, [pc, #292]	; (8000b08 <MX_GPIO_Init+0x148>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	2204      	movs	r2, #4
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b46      	ldr	r3, [pc, #280]	; (8000b08 <MX_GPIO_Init+0x148>)
 80009f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <MX_GPIO_Init+0x148>)
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	430a      	orrs	r2, r1
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009fa:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <MX_GPIO_Init+0x148>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	2201      	movs	r2, #1
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a22:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a24:	2102      	movs	r1, #2
 8000a26:	430a      	orrs	r2, r1
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fdf6 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|LED_GN_Pin, GPIO_PIN_RESET);
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	2114      	movs	r1, #20
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fdf0 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	0192      	lsls	r2, r2, #6
 8000a56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2288      	movs	r2, #136	; 0x88
 8000a5c:	0352      	lsls	r2, r2, #13
 8000a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <MX_GPIO_Init+0x150>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f000 fc69 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2290      	movs	r2, #144	; 0x90
 8000a7c:	0352      	lsls	r2, r2, #13
 8000a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	193a      	adds	r2, r7, r4
 8000a88:	23a0      	movs	r3, #160	; 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fc58 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2202      	movs	r2, #2
 8000a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	193a      	adds	r2, r7, r4
 8000aa8:	23a0      	movs	r3, #160	; 0xa0
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fc48 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000acc:	193a      	adds	r2, r7, r4
 8000ace:	23a0      	movs	r3, #160	; 0xa0
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fc35 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin LED_GN_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|LED_GN_Pin;
 8000ada:	0021      	movs	r1, r4
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2214      	movs	r2, #20
 8000ae0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000af8:	0019      	movs	r1, r3
 8000afa:	0010      	movs	r0, r2
 8000afc:	f000 fc22 	bl	8001344 <HAL_GPIO_Init>

}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b00b      	add	sp, #44	; 0x2c
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	50000400 	.word	0x50000400
 8000b10:	50000800 	.word	0x50000800

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_MspInit+0x24>)
 8000b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x24>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_MspInit+0x24>)
 8000b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_MspInit+0x24>)
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	0549      	lsls	r1, r1, #21
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	240c      	movs	r4, #12
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	0018      	movs	r0, r3
 8000b56:	2314      	movs	r3, #20
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f002 ffa2 	bl	8003aa4 <memset>
  if(hi2c->Instance==I2C1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x80>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d129      	bne.n	8000bbe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b70:	2102      	movs	r1, #2
 8000b72:	430a      	orrs	r2, r1
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	22c0      	movs	r2, #192	; 0xc0
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2212      	movs	r2, #18
 8000b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2201      	movs	r2, #1
 8000b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000ba8:	0019      	movs	r1, r3
 8000baa:	0010      	movs	r0, r2
 8000bac:	f000 fbca 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0389      	lsls	r1, r1, #14
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b009      	add	sp, #36	; 0x24
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	50000400 	.word	0x50000400

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	2414      	movs	r4, #20
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	0018      	movs	r0, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f002 ff5c 	bl	8003aa4 <memset>
  if(huart->Instance==LPUART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a48      	ldr	r2, [pc, #288]	; (8000d14 <HAL_UART_MspInit+0x140>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d140      	bne.n	8000c78 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bf6:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	02c9      	lsls	r1, r1, #11
 8000c00:	430a      	orrs	r2, r1
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c08:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c10:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	2202      	movs	r2, #2
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2212      	movs	r2, #18
 8000c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2203      	movs	r2, #3
 8000c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2204      	movs	r2, #4
 8000c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	4a37      	ldr	r2, [pc, #220]	; (8000d1c <HAL_UART_MspInit+0x148>)
 8000c40:	0019      	movs	r1, r3
 8000c42:	0010      	movs	r0, r2
 8000c44:	f000 fb7e 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c48:	0021      	movs	r1, r4
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2202      	movs	r2, #2
 8000c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2203      	movs	r2, #3
 8000c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2204      	movs	r2, #4
 8000c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <HAL_UART_MspInit+0x148>)
 8000c6e:	0019      	movs	r1, r3
 8000c70:	0010      	movs	r0, r2
 8000c72:	f000 fb67 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c76:	e048      	b.n	8000d0a <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_UART_MspInit+0x14c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d143      	bne.n	8000d0a <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	01c9      	lsls	r1, r1, #7
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c96:	2101      	movs	r1, #1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <HAL_UART_MspInit+0x144>)
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART_RX_Pin;
 8000ca8:	2114      	movs	r1, #20
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	22a0      	movs	r2, #160	; 0xa0
 8000cae:	00d2      	lsls	r2, r2, #3
 8000cb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2204      	movs	r2, #4
 8000cca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	193a      	adds	r2, r7, r4
 8000cce:	23a0      	movs	r3, #160	; 0xa0
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fb35 	bl	8001344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8000cda:	0021      	movs	r1, r4
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2212      	movs	r2, #18
 8000ce8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2201      	movs	r2, #1
 8000cee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	187a      	adds	r2, r7, r1
 8000cfe:	23a0      	movs	r3, #160	; 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 fb1d 	bl	8001344 <HAL_GPIO_Init>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b00b      	add	sp, #44	; 0x2c
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40004800 	.word	0x40004800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	50000400 	.word	0x50000400
 8000d20:	40013800 	.word	0x40013800

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2414      	movs	r4, #20
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f002 feb4 	bl	8003aa4 <memset>
  if(hspi->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a41      	ldr	r2, [pc, #260]	; (8000e48 <HAL_SPI_MspInit+0x124>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d14c      	bne.n	8000de0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	4b41      	ldr	r3, [pc, #260]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4a:	4b40      	ldr	r3, [pc, #256]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0149      	lsls	r1, r1, #5
 8000d50:	430a      	orrs	r2, r1
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d58:	4b3c      	ldr	r3, [pc, #240]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d60:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	2201      	movs	r2, #1
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d70:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d72:	2102      	movs	r1, #2
 8000d74:	430a      	orrs	r2, r1
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	0212      	lsls	r2, r2, #8
 8000d8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2202      	movs	r2, #2
 8000d90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000da4:	193a      	adds	r2, r7, r4
 8000da6:	23a0      	movs	r3, #160	; 0xa0
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fac9 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_SPI_MspInit+0x12c>)
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	0010      	movs	r0, r2
 8000dda:	f000 fab3 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dde:	e02e      	b.n	8000e3e <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_SPI_MspInit+0x130>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d129      	bne.n	8000e3e <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	01c9      	lsls	r1, r1, #7
 8000df4:	430a      	orrs	r2, r1
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000dfe:	2102      	movs	r1, #2
 8000e00:	430a      	orrs	r2, r1
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_SPI_MspInit+0x128>)
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	2202      	movs	r2, #2
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000e10:	2114      	movs	r1, #20
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	22f0      	movs	r2, #240	; 0xf0
 8000e16:	0212      	lsls	r2, r2, #8
 8000e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_SPI_MspInit+0x12c>)
 8000e36:	0019      	movs	r1, r3
 8000e38:	0010      	movs	r0, r2
 8000e3a:	f000 fa83 	bl	8001344 <HAL_GPIO_Init>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b00b      	add	sp, #44	; 0x2c
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	50000400 	.word	0x50000400
 8000e54:	40003800 	.word	0x40003800

08000e58 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b08b      	sub	sp, #44	; 0x2c
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	2414      	movs	r4, #20
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	0018      	movs	r0, r3
 8000e66:	2314      	movs	r3, #20
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f002 fe1a 	bl	8003aa4 <memset>
  if(htsc->Instance==TSC)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a41      	ldr	r2, [pc, #260]	; (8000f7c <HAL_TSC_MspInit+0x124>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d17c      	bne.n	8000f74 <HAL_TSC_MspInit+0x11c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000e7a:	4b41      	ldr	r3, [pc, #260]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7e:	4b40      	ldr	r3, [pc, #256]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	0249      	lsls	r1, r1, #9
 8000e84:	430a      	orrs	r2, r1
 8000e86:	631a      	str	r2, [r3, #48]	; 0x30
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	025b      	lsls	r3, r3, #9
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eba:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <HAL_TSC_MspInit+0x128>)
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	2244      	movs	r2, #68	; 0x44
 8000eca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	2202      	movs	r2, #2
 8000ed0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	193a      	adds	r2, r7, r4
 8000ee6:	23a0      	movs	r3, #160	; 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 fa29 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2288      	movs	r2, #136	; 0x88
 8000ef6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2212      	movs	r2, #18
 8000efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	193a      	adds	r2, r7, r4
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fa13 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	2202      	movs	r2, #2
 8000f28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	2203      	movs	r2, #3
 8000f3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_TSC_MspInit+0x12c>)
 8000f40:	0019      	movs	r1, r3
 8000f42:	0010      	movs	r0, r2
 8000f44:	f000 f9fe 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f48:	0021      	movs	r1, r4
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2212      	movs	r2, #18
 8000f54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2203      	movs	r2, #3
 8000f66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_TSC_MspInit+0x12c>)
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	0010      	movs	r0, r2
 8000f70:	f000 f9e8 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b00b      	add	sp, #44	; 0x2c
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	40024000 	.word	0x40024000
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000400 	.word	0x50000400

08000f88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_PCD_MspInit+0x28>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d106      	bne.n	8000fa8 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_PCD_MspInit+0x2c>)
 8000f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_PCD_MspInit+0x2c>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005c00 	.word	0x40005c00
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8be 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	18d3      	adds	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f002 fd1a 	bl	8003a50 <__errno>
 800101c:	0003      	movs	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	2301      	movs	r3, #1
 8001024:	425b      	negs	r3, r3
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	18d2      	adds	r2, r2, r3
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b006      	add	sp, #24
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20002000 	.word	0x20002000
 8001048:	00000400 	.word	0x00000400
 800104c:	2000008c 	.word	0x2000008c
 8001050:	200005e8 	.word	0x200005e8

08001054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001062:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800108a:	f7ff ffe3 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f002 fce5 	bl	8003a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa0d 	bl	80004b0 <main>

08001096 <LoopForever>:

LoopForever:
    b LoopForever
 8001096:	e7fe      	b.n	8001096 <LoopForever>
  ldr   r0, =_estack
 8001098:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010a4:	08004424 	.word	0x08004424
  ldr r2, =_sbss
 80010a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010ac:	200005e8 	.word	0x200005e8

080010b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_COMP_IRQHandler>
	...

080010b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_Init+0x3c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Init+0x3c>)
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	430a      	orrs	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010cc:	2000      	movs	r0, #0
 80010ce:	f000 f811 	bl	80010f4 <HAL_InitTick>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d003      	beq.n	80010de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e001      	b.n	80010e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010de:	f7ff fd1f 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_InitTick+0x5c>)
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x60>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	0019      	movs	r1, r3
 8001106:	23fa      	movs	r3, #250	; 0xfa
 8001108:	0098      	lsls	r0, r3, #2
 800110a:	f7ff f807 	bl	800011c <__udivsi3>
 800110e:	0003      	movs	r3, r0
 8001110:	0019      	movs	r1, r3
 8001112:	0020      	movs	r0, r4
 8001114:	f7ff f802 	bl	800011c <__udivsi3>
 8001118:	0003      	movs	r3, r0
 800111a:	0018      	movs	r0, r3
 800111c:	f000 f905 	bl	800132a <HAL_SYSTICK_Config>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e00f      	b.n	8001148 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d80b      	bhi.n	8001146 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2301      	movs	r3, #1
 8001132:	425b      	negs	r3, r3
 8001134:	2200      	movs	r2, #0
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f8e2 	bl	8001300 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_InitTick+0x64>)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b003      	add	sp, #12
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	001a      	movs	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	18d2      	adds	r2, r2, r3
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_IncTick+0x20>)
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000008 	.word	0x20000008
 800117c:	200005d4 	.word	0x200005d4

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	200005d4 	.word	0x200005d4

08001194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff fff0 	bl	8001180 <HAL_GetTick>
 80011a0:	0003      	movs	r3, r0
 80011a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3301      	adds	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_Delay+0x44>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	001a      	movs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	189b      	adds	r3, r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	f7ff ffe0 	bl	8001180 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d8f7      	bhi.n	80011bc <HAL_Delay+0x28>
  {
  }
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000008 	.word	0x20000008

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	0002      	movs	r2, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b7f      	cmp	r3, #127	; 0x7f
 80011f0:	d828      	bhi.n	8001244 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f2:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <__NVIC_SetPriority+0xd4>)
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	33c0      	adds	r3, #192	; 0xc0
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	589b      	ldr	r3, [r3, r2]
 8001202:	1dfa      	adds	r2, r7, #7
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	0011      	movs	r1, r2
 8001208:	2203      	movs	r2, #3
 800120a:	400a      	ands	r2, r1
 800120c:	00d2      	lsls	r2, r2, #3
 800120e:	21ff      	movs	r1, #255	; 0xff
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	43d2      	mvns	r2, r2
 8001216:	401a      	ands	r2, r3
 8001218:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	019b      	lsls	r3, r3, #6
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	401a      	ands	r2, r3
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0018      	movs	r0, r3
 8001228:	2303      	movs	r3, #3
 800122a:	4003      	ands	r3, r0
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001230:	481f      	ldr	r0, [pc, #124]	; (80012b0 <__NVIC_SetPriority+0xd4>)
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b25b      	sxtb	r3, r3
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	430a      	orrs	r2, r1
 800123c:	33c0      	adds	r3, #192	; 0xc0
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001242:	e031      	b.n	80012a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <__NVIC_SetPriority+0xd8>)
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0019      	movs	r1, r3
 800124c:	230f      	movs	r3, #15
 800124e:	400b      	ands	r3, r1
 8001250:	3b08      	subs	r3, #8
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3306      	adds	r3, #6
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	18d3      	adds	r3, r2, r3
 800125a:	3304      	adds	r3, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1dfa      	adds	r2, r7, #7
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	0011      	movs	r1, r2
 8001264:	2203      	movs	r2, #3
 8001266:	400a      	ands	r2, r1
 8001268:	00d2      	lsls	r2, r2, #3
 800126a:	21ff      	movs	r1, #255	; 0xff
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	43d2      	mvns	r2, r2
 8001272:	401a      	ands	r2, r3
 8001274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	019b      	lsls	r3, r3, #6
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	401a      	ands	r2, r3
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0018      	movs	r0, r3
 8001284:	2303      	movs	r3, #3
 8001286:	4003      	ands	r3, r0
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <__NVIC_SetPriority+0xd8>)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	001c      	movs	r4, r3
 8001294:	230f      	movs	r3, #15
 8001296:	4023      	ands	r3, r4
 8001298:	3b08      	subs	r3, #8
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	430a      	orrs	r2, r1
 800129e:	3306      	adds	r3, #6
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	18c3      	adds	r3, r0, r3
 80012a4:	3304      	adds	r3, #4
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b003      	add	sp, #12
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	1e5a      	subs	r2, r3, #1
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	045b      	lsls	r3, r3, #17
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d301      	bcc.n	80012d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012cc:	2301      	movs	r3, #1
 80012ce:	e010      	b.n	80012f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <SysTick_Config+0x44>)
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	3a01      	subs	r2, #1
 80012d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d8:	2301      	movs	r3, #1
 80012da:	425b      	negs	r3, r3
 80012dc:	2103      	movs	r1, #3
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff ff7c 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x44>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x44>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	210f      	movs	r1, #15
 800130c:	187b      	adds	r3, r7, r1
 800130e:	1c02      	adds	r2, r0, #0
 8001310:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	187b      	adds	r3, r7, r1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b25b      	sxtb	r3, r3
 800131a:	0011      	movs	r1, r2
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b004      	add	sp, #16
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ffbf 	bl	80012b8 <SysTick_Config>
 800133a:	0003      	movs	r3, r0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800135a:	e14f      	b.n	80015fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <HAL_GPIO_Init+0x30>
 8001372:	e140      	b.n	80015f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	2b01      	cmp	r3, #1
 800137e:	d005      	beq.n	800138c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001388:	2b02      	cmp	r3, #2
 800138a:	d130      	bne.n	80013ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	409a      	lsls	r2, r3
 80013ae:	0013      	movs	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c2:	2201      	movs	r2, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	2201      	movs	r2, #1
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d017      	beq.n	800142a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	4013      	ands	r3, r2
 8001432:	2b02      	cmp	r3, #2
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	58d3      	ldr	r3, [r2, r3]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2207      	movs	r2, #7
 8001448:	4013      	ands	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2107      	movs	r1, #7
 8001462:	400b      	ands	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	6939      	ldr	r1, [r7, #16]
 800147c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	401a      	ands	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	23c0      	movs	r3, #192	; 0xc0
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d100      	bne.n	80014c0 <HAL_GPIO_Init+0x17c>
 80014be:	e09a      	b.n	80015f6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c0:	4b54      	ldr	r3, [pc, #336]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80014c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_GPIO_Init+0x2d4>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	589b      	ldr	r3, [r3, r2]
 80014d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2203      	movs	r2, #3
 80014de:	4013      	ands	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	409a      	lsls	r2, r3
 80014e6:	0013      	movs	r3, r2
 80014e8:	43da      	mvns	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	23a0      	movs	r3, #160	; 0xa0
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x1ea>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_GPIO_Init+0x2d8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x1e6>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2dc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x1e2>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x2e0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x1de>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a44      	ldr	r2, [pc, #272]	; (8001628 <HAL_GPIO_Init+0x2e4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x1da>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x1ec>
 800151e:	2306      	movs	r3, #6
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x1ec>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x1ec>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x1ec>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x1ec>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	2103      	movs	r1, #3
 8001534:	400a      	ands	r2, r1
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	4935      	ldr	r1, [pc, #212]	; (8001618 <HAL_GPIO_Init+0x2d4>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_GPIO_Init+0x2e8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	4013      	ands	r3, r2
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_GPIO_Init+0x2e8>)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_GPIO_Init+0x2e8>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	4013      	ands	r3, r2
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_GPIO_Init+0x2e8>)
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	035b      	lsls	r3, r3, #13
 80015ba:	4013      	ands	r3, r2
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	039b      	lsls	r3, r3, #14
 80015e4:	4013      	ands	r3, r2
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	40da      	lsrs	r2, r3
 8001604:	1e13      	subs	r3, r2, #0
 8001606:	d000      	beq.n	800160a <HAL_GPIO_Init+0x2c6>
 8001608:	e6a8      	b.n	800135c <HAL_GPIO_Init+0x18>
  }
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b006      	add	sp, #24
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	50000400 	.word	0x50000400
 8001620:	50000800 	.word	0x50000800
 8001624:	50000c00 	.word	0x50000c00
 8001628:	50001c00 	.word	0x50001c00
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	0008      	movs	r0, r1
 800163a:	0011      	movs	r1, r2
 800163c:	1cbb      	adds	r3, r7, #2
 800163e:	1c02      	adds	r2, r0, #0
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	1c7b      	adds	r3, r7, #1
 8001644:	1c0a      	adds	r2, r1, #0
 8001646:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001648:	1c7b      	adds	r3, r7, #1
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001650:	1cbb      	adds	r3, r7, #2
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001658:	e003      	b.n	8001662 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800165a:	1cbb      	adds	r3, r7, #2
 800165c:	881a      	ldrh	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e082      	b.n	8001784 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2241      	movs	r2, #65	; 0x41
 8001682:	5c9b      	ldrb	r3, [r3, r2]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	2100      	movs	r1, #0
 8001690:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff fa57 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2241      	movs	r2, #65	; 0x41
 800169e:	2124      	movs	r1, #36	; 0x24
 80016a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	438a      	bics	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4934      	ldr	r1, [pc, #208]	; (800178c <HAL_I2C_Init+0x120>)
 80016bc:	400a      	ands	r2, r1
 80016be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4931      	ldr	r1, [pc, #196]	; (8001790 <HAL_I2C_Init+0x124>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0209      	lsls	r1, r1, #8
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e007      	b.n	80016fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2184      	movs	r1, #132	; 0x84
 80016f4:	0209      	lsls	r1, r1, #8
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d104      	bne.n	800170c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	491f      	ldr	r1, [pc, #124]	; (8001794 <HAL_I2C_Init+0x128>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	491a      	ldr	r1, [pc, #104]	; (8001790 <HAL_I2C_Init+0x124>)
 8001728:	400a      	ands	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	431a      	orrs	r2, r3
 8001736:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69d9      	ldr	r1, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	2120      	movs	r1, #32
 8001772:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2242      	movs	r2, #66	; 0x42
 800177e:	2100      	movs	r1, #0
 8001780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}
 800178c:	f0ffffff 	.word	0xf0ffffff
 8001790:	ffff7fff 	.word	0xffff7fff
 8001794:	02008000 	.word	0x02008000

08001798 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	230a      	movs	r3, #10
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	1c0a      	adds	r2, r1, #0
 80017aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2241      	movs	r2, #65	; 0x41
 80017b4:	5c9b      	ldrb	r3, [r3, r2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d000      	beq.n	80017be <HAL_I2C_IsDeviceReady+0x26>
 80017bc:	e0fe      	b.n	80019bc <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	401a      	ands	r2, r3
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
 80017d4:	e0f3      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2240      	movs	r2, #64	; 0x40
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_I2C_IsDeviceReady+0x4c>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e0ec      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2240      	movs	r2, #64	; 0x40
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2241      	movs	r2, #65	; 0x41
 80017f0:	2124      	movs	r1, #36	; 0x24
 80017f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_I2C_IsDeviceReady+0x7a>
 8001802:	230a      	movs	r3, #10
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	059b      	lsls	r3, r3, #22
 800180a:	0d9b      	lsrs	r3, r3, #22
 800180c:	4a6e      	ldr	r2, [pc, #440]	; (80019c8 <HAL_I2C_IsDeviceReady+0x230>)
 800180e:	431a      	orrs	r2, r3
 8001810:	e007      	b.n	8001822 <HAL_I2C_IsDeviceReady+0x8a>
 8001812:	230a      	movs	r3, #10
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	059b      	lsls	r3, r3, #22
 800181a:	0d9b      	lsrs	r3, r3, #22
 800181c:	22a0      	movs	r2, #160	; 0xa0
 800181e:	0192      	lsls	r2, r2, #6
 8001820:	431a      	orrs	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fcaa 	bl	8001180 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2220      	movs	r2, #32
 8001838:	4013      	ands	r3, r2
 800183a:	3b20      	subs	r3, #32
 800183c:	425a      	negs	r2, r3
 800183e:	4153      	adcs	r3, r2
 8001840:	b2da      	uxtb	r2, r3
 8001842:	231f      	movs	r3, #31
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2210      	movs	r2, #16
 8001850:	4013      	ands	r3, r2
 8001852:	3b10      	subs	r3, #16
 8001854:	425a      	negs	r2, r3
 8001856:	4153      	adcs	r3, r2
 8001858:	b2da      	uxtb	r2, r3
 800185a:	231e      	movs	r3, #30
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001860:	e035      	b.n	80018ce <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	d01a      	beq.n	800189e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff fc8a 	bl	8001180 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d302      	bcc.n	800187e <HAL_I2C_IsDeviceReady+0xe6>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10f      	bne.n	800189e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2241      	movs	r2, #65	; 0x41
 8001882:	2120      	movs	r1, #32
 8001884:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	2220      	movs	r2, #32
 800188c:	431a      	orrs	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2240      	movs	r2, #64	; 0x40
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e08f      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2220      	movs	r2, #32
 80018a6:	4013      	ands	r3, r2
 80018a8:	3b20      	subs	r3, #32
 80018aa:	425a      	negs	r2, r3
 80018ac:	4153      	adcs	r3, r2
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	231f      	movs	r3, #31
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2210      	movs	r2, #16
 80018be:	4013      	ands	r3, r2
 80018c0:	3b10      	subs	r3, #16
 80018c2:	425a      	negs	r2, r3
 80018c4:	4153      	adcs	r3, r2
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	231e      	movs	r3, #30
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018ce:	231f      	movs	r3, #31
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d104      	bne.n	80018e2 <HAL_I2C_IsDeviceReady+0x14a>
 80018d8:	231e      	movs	r3, #30
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0bf      	beq.n	8001862 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2210      	movs	r2, #16
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d01a      	beq.n	8001926 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	0013      	movs	r3, r2
 80018fa:	2200      	movs	r2, #0
 80018fc:	2120      	movs	r1, #32
 80018fe:	f000 f865 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e059      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2220      	movs	r2, #32
 8001910:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	2120      	movs	r1, #32
 8001918:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2240      	movs	r2, #64	; 0x40
 800191e:	2100      	movs	r1, #0
 8001920:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e04b      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	0013      	movs	r3, r2
 8001930:	2200      	movs	r2, #0
 8001932:	2120      	movs	r1, #32
 8001934:	f000 f84a 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e03e      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2210      	movs	r2, #16
 8001946:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2220      	movs	r2, #32
 800194e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d119      	bne.n	800198c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	01c9      	lsls	r1, r1, #7
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	0013      	movs	r3, r2
 8001974:	2200      	movs	r2, #0
 8001976:	2120      	movs	r1, #32
 8001978:	f000 f828 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d001      	beq.n	8001984 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e01c      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2220      	movs	r2, #32
 800198a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d900      	bls.n	800199c <HAL_I2C_IsDeviceReady+0x204>
 800199a:	e72e      	b.n	80017fa <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2241      	movs	r2, #65	; 0x41
 80019a0:	2120      	movs	r1, #32
 80019a2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	2220      	movs	r2, #32
 80019aa:	431a      	orrs	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
  }
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b008      	add	sp, #32
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	02002000 	.word	0x02002000

080019cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019dc:	e021      	b.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	d01e      	beq.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e4:	f7ff fbcc 	bl	8001180 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d302      	bcc.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d113      	bne.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	2220      	movs	r2, #32
 8001a00:	431a      	orrs	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2241      	movs	r2, #65	; 0x41
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2242      	movs	r2, #66	; 0x42
 8001a12:	2100      	movs	r1, #0
 8001a14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	425a      	negs	r2, r3
 8001a32:	4153      	adcs	r3, r2
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	001a      	movs	r2, r3
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d0ce      	beq.n	80019de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2241      	movs	r2, #65	; 0x41
 8001a5a:	5c9b      	ldrb	r3, [r3, r2]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	d138      	bne.n	8001ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	5c9b      	ldrb	r3, [r3, r2]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e032      	b.n	8001ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	2101      	movs	r1, #1
 8001a76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2241      	movs	r2, #65	; 0x41
 8001a7c:	2124      	movs	r1, #36	; 0x24
 8001a7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4911      	ldr	r1, [pc, #68]	; (8001ae0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2101      	movs	r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2241      	movs	r2, #65	; 0x41
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	2100      	movs	r1, #0
 8001ace:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
  }
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	ffffefff 	.word	0xffffefff

08001ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2241      	movs	r2, #65	; 0x41
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d139      	bne.n	8001b6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e033      	b.n	8001b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2241      	movs	r2, #65	; 0x41
 8001b14:	2124      	movs	r1, #36	; 0x24
 8001b16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2101      	movs	r1, #1
 8001b24:	438a      	bics	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2241      	movs	r2, #65	; 0x41
 8001b5e:	2120      	movs	r1, #32
 8001b60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
  }
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b004      	add	sp, #16
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	fffff0ff 	.word	0xfffff0ff

08001b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af06      	add	r7, sp, #24
 8001b82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0ff      	b.n	8001d8e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a81      	ldr	r2, [pc, #516]	; (8001d98 <HAL_PCD_Init+0x21c>)
 8001b92:	5c9b      	ldrb	r3, [r3, r2]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d108      	bne.n	8001bac <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	23aa      	movs	r3, #170	; 0xaa
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff f9ee 	bl	8000f88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a7a      	ldr	r2, [pc, #488]	; (8001d98 <HAL_PCD_Init+0x21c>)
 8001bb0:	2103      	movs	r1, #3
 8001bb2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f001 ff03 	bl	80039c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e058      	b.n	8001c7a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc8:	200f      	movs	r0, #15
 8001bca:	183b      	adds	r3, r7, r0
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	189b      	adds	r3, r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	18cb      	adds	r3, r1, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	0013      	movs	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	189b      	adds	r3, r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	183a      	adds	r2, r7, r0
 8001bf4:	7812      	ldrb	r2, [r2, #0]
 8001bf6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bf8:	0004      	movs	r4, r0
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b298      	uxth	r0, r3
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	0013      	movs	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	189b      	adds	r3, r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	18cb      	adds	r3, r1, r3
 8001c10:	3336      	adds	r3, #54	; 0x36
 8001c12:	1c02      	adds	r2, r0, #0
 8001c14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	0013      	movs	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	189b      	adds	r3, r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	18cb      	adds	r3, r1, r3
 8001c28:	3303      	adds	r3, #3
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	0013      	movs	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	189b      	adds	r3, r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	18cb      	adds	r3, r1, r3
 8001c3e:	3338      	adds	r3, #56	; 0x38
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c44:	193b      	adds	r3, r7, r4
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	189b      	adds	r3, r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	18cb      	adds	r3, r1, r3
 8001c54:	333c      	adds	r3, #60	; 0x3c
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	0013      	movs	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	18cb      	adds	r3, r1, r3
 8001c6a:	3340      	adds	r3, #64	; 0x40
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	193b      	adds	r3, r7, r4
 8001c76:	3201      	adds	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d39f      	bcc.n	8001bc8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	e056      	b.n	8001d3e <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c90:	240f      	movs	r4, #15
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	236a      	movs	r3, #106	; 0x6a
 8001c9a:	33ff      	adds	r3, #255	; 0xff
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	0013      	movs	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	189b      	adds	r3, r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	18c3      	adds	r3, r0, r3
 8001ca8:	185b      	adds	r3, r3, r1
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	23b4      	movs	r3, #180	; 0xb4
 8001cb6:	0059      	lsls	r1, r3, #1
 8001cb8:	0013      	movs	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	189b      	adds	r3, r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	18c3      	adds	r3, r0, r3
 8001cc2:	185b      	adds	r3, r3, r1
 8001cc4:	193a      	adds	r2, r7, r4
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cca:	193b      	adds	r3, r7, r4
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	236c      	movs	r3, #108	; 0x6c
 8001cd2:	33ff      	adds	r3, #255	; 0xff
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	18c3      	adds	r3, r0, r3
 8001ce0:	185b      	adds	r3, r3, r1
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ce6:	193b      	adds	r3, r7, r4
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	23bc      	movs	r3, #188	; 0xbc
 8001cee:	0059      	lsls	r1, r3, #1
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	18c3      	adds	r3, r0, r3
 8001cfa:	185b      	adds	r3, r3, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	23be      	movs	r3, #190	; 0xbe
 8001d08:	0059      	lsls	r1, r3, #1
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	189b      	adds	r3, r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	18c3      	adds	r3, r0, r3
 8001d14:	185b      	adds	r3, r3, r1
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	0059      	lsls	r1, r3, #1
 8001d24:	0013      	movs	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	189b      	adds	r3, r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	18c3      	adds	r3, r0, r3
 8001d2e:	185b      	adds	r3, r3, r1
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	3201      	adds	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	230f      	movs	r3, #15
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d3a1      	bcc.n	8001c90 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	466a      	mov	r2, sp
 8001d54:	0011      	movs	r1, r2
 8001d56:	001a      	movs	r2, r3
 8001d58:	3210      	adds	r2, #16
 8001d5a:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001d5c:	c170      	stmia	r1!, {r4, r5, r6}
 8001d5e:	ca30      	ldmia	r2!, {r4, r5}
 8001d60:	c130      	stmia	r1!, {r4, r5}
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f001 fe46 	bl	80039f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_PCD_Init+0x21c>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d103      	bne.n	8001d8c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 f808 	bl	8001d9c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b005      	add	sp, #20
 8001d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	000002a9 	.word	0x000002a9

08001d9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	23ba      	movs	r3, #186	; 0xba
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	2101      	movs	r1, #1
 8001db2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	23b8      	movs	r3, #184	; 0xb8
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	2100      	movs	r1, #0
 8001dbc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2254      	movs	r2, #84	; 0x54
 8001dc2:	5a9b      	ldrh	r3, [r3, r2]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b299      	uxth	r1, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2254      	movs	r2, #84	; 0x54
 8001dd0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2254      	movs	r2, #84	; 0x54
 8001dd6:	5a9b      	ldrh	r3, [r3, r2]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b299      	uxth	r1, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2254      	movs	r2, #84	; 0x54
 8001de4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f000 fbaf 	bl	8002562 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e04:	4bcf      	ldr	r3, [pc, #828]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	220c      	movs	r2, #12
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0e:	4bcd      	ldr	r3, [pc, #820]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	4013      	ands	r3, r2
 8001e18:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d100      	bne.n	8001e26 <HAL_RCC_OscConfig+0x36>
 8001e24:	e07e      	b.n	8001f24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d112      	bne.n	8001e58 <HAL_RCC_OscConfig+0x68>
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4bc1      	ldr	r3, [pc, #772]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	d100      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5a>
 8001e48:	e06b      	b.n	8001f22 <HAL_RCC_OscConfig+0x132>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d167      	bne.n	8001f22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f000 fb85 	bl	8002562 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	025b      	lsls	r3, r3, #9
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x84>
 8001e64:	4bb7      	ldr	r3, [pc, #732]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4bb6      	ldr	r3, [pc, #728]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e027      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	23a0      	movs	r3, #160	; 0xa0
 8001e7a:	02db      	lsls	r3, r3, #11
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10e      	bne.n	8001e9e <HAL_RCC_OscConfig+0xae>
 8001e80:	4bb0      	ldr	r3, [pc, #704]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4baf      	ldr	r3, [pc, #700]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	02c9      	lsls	r1, r1, #11
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4bad      	ldr	r3, [pc, #692]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4bac      	ldr	r3, [pc, #688]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e012      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e9e:	4ba9      	ldr	r3, [pc, #676]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4ba8      	ldr	r3, [pc, #672]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001ea4:	49a8      	ldr	r1, [pc, #672]	; (8002148 <HAL_RCC_OscConfig+0x358>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	4ba6      	ldr	r3, [pc, #664]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4ba2      	ldr	r3, [pc, #648]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001ebe:	49a3      	ldr	r1, [pc, #652]	; (800214c <HAL_RCC_OscConfig+0x35c>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f958 	bl	8001180 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed4:	e009      	b.n	8001eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f953 	bl	8001180 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	; 0x64
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 fb3c 	bl	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eea:	4b96      	ldr	r3, [pc, #600]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0ef      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xe6>
 8001ef6:	e015      	b.n	8001f24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f942 	bl	8001180 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f02:	f7ff f93d 	bl	8001180 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e326      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f14:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x112>
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x140>
 8001f2e:	e08b      	b.n	8002048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d13e      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1d0>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13b      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f48:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_RCC_OscConfig+0x16c>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e302      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b79      	ldr	r3, [pc, #484]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a7b      	ldr	r2, [pc, #492]	; (8002150 <HAL_RCC_OscConfig+0x360>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	021a      	lsls	r2, r3, #8
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f72:	4b74      	ldr	r3, [pc, #464]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2209      	movs	r2, #9
 8001f78:	4393      	bics	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	4b71      	ldr	r3, [pc, #452]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f84:	f000 fc40 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8001f88:	0001      	movs	r1, r0
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	220f      	movs	r2, #15
 8001f92:	4013      	ands	r3, r2
 8001f94:	4a6f      	ldr	r2, [pc, #444]	; (8002154 <HAL_RCC_OscConfig+0x364>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	000a      	movs	r2, r1
 8001f9a:	40da      	lsrs	r2, r3
 8001f9c:	4b6e      	ldr	r3, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x368>)
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001fa0:	4b6e      	ldr	r3, [pc, #440]	; (800215c <HAL_RCC_OscConfig+0x36c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2513      	movs	r5, #19
 8001fa6:	197c      	adds	r4, r7, r5
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff f8a3 	bl	80010f4 <HAL_InitTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fb2:	197b      	adds	r3, r7, r5
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d046      	beq.n	8002048 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001fba:	197b      	adds	r3, r7, r5
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	e2d0      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d027      	beq.n	8002016 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2209      	movs	r2, #9
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f8d2 	bl	8001180 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7ff f8cd 	bl	8001180 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e2b6      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d0f1      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a53      	ldr	r2, [pc, #332]	; (8002150 <HAL_RCC_OscConfig+0x360>)
 8002004:	4013      	ands	r3, r2
 8002006:	0019      	movs	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	021a      	lsls	r2, r3, #8
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	e018      	b.n	8002048 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 800201c:	2101      	movs	r1, #1
 800201e:	438a      	bics	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff f8ad 	bl	8001180 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202c:	f7ff f8a8 	bl	8001180 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e291      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2204      	movs	r2, #4
 8002044:	4013      	ands	r3, r2
 8002046:	d1f1      	bne.n	800202c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2210      	movs	r2, #16
 800204e:	4013      	ands	r3, r2
 8002050:	d100      	bne.n	8002054 <HAL_RCC_OscConfig+0x264>
 8002052:	e0a1      	b.n	8002198 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d140      	bne.n	80020dc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800205a:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4013      	ands	r3, r2
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x282>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e277      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002072:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a3a      	ldr	r2, [pc, #232]	; (8002160 <HAL_RCC_OscConfig+0x370>)
 8002078:	4013      	ands	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002086:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	0a19      	lsrs	r1, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	061a      	lsls	r2, r3, #24
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	0b5b      	lsrs	r3, r3, #13
 80020a0:	3301      	adds	r3, #1
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	0212      	lsls	r2, r2, #8
 80020a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	210f      	movs	r1, #15
 80020b0:	400b      	ands	r3, r1
 80020b2:	4928      	ldr	r1, [pc, #160]	; (8002154 <HAL_RCC_OscConfig+0x364>)
 80020b4:	5ccb      	ldrb	r3, [r1, r3]
 80020b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x368>)
 80020ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_OscConfig+0x36c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2513      	movs	r5, #19
 80020c2:	197c      	adds	r4, r7, r5
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff f815 	bl	80010f4 <HAL_InitTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020ce:	197b      	adds	r3, r7, r5
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d060      	beq.n	8002198 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80020d6:	197b      	adds	r3, r7, r5
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	e242      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03f      	beq.n	8002164 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	0049      	lsls	r1, r1, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff f845 	bl	8001180 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020fc:	f7ff f840 	bl	8001180 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e229      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_RCC_OscConfig+0x370>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	0a19      	lsrs	r1, r3, #8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	061a      	lsls	r2, r3, #24
 800213c:	4b01      	ldr	r3, [pc, #4]	; (8002144 <HAL_RCC_OscConfig+0x354>)
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	e029      	b.n	8002198 <HAL_RCC_OscConfig+0x3a8>
 8002144:	40021000 	.word	0x40021000
 8002148:	fffeffff 	.word	0xfffeffff
 800214c:	fffbffff 	.word	0xfffbffff
 8002150:	ffffe0ff 	.word	0xffffe0ff
 8002154:	08004374 	.word	0x08004374
 8002158:	20000000 	.word	0x20000000
 800215c:	20000004 	.word	0x20000004
 8002160:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002164:	4bbd      	ldr	r3, [pc, #756]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4bbc      	ldr	r3, [pc, #752]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 800216a:	49bd      	ldr	r1, [pc, #756]	; (8002460 <HAL_RCC_OscConfig+0x670>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f806 	bl	8001180 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800217a:	f7ff f801 	bl	8001180 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1ea      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800218c:	4bb3      	ldr	r3, [pc, #716]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4013      	ands	r3, r2
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2208      	movs	r2, #8
 800219e:	4013      	ands	r3, r2
 80021a0:	d036      	beq.n	8002210 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d019      	beq.n	80021de <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4bac      	ldr	r3, [pc, #688]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80021ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ae:	4bab      	ldr	r3, [pc, #684]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe ffe3 	bl	8001180 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c0:	f7fe ffde 	bl	8001180 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1c7      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021d2:	4ba2      	ldr	r3, [pc, #648]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80021d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f1      	beq.n	80021c0 <HAL_RCC_OscConfig+0x3d0>
 80021dc:	e018      	b.n	8002210 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b9f      	ldr	r3, [pc, #636]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80021e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021e2:	4b9e      	ldr	r3, [pc, #632]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	438a      	bics	r2, r1
 80021e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7fe ffc9 	bl	8001180 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f4:	f7fe ffc4 	bl	8001180 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1ad      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002206:	4b95      	ldr	r3, [pc, #596]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	2202      	movs	r2, #2
 800220c:	4013      	ands	r3, r2
 800220e:	d1f1      	bne.n	80021f4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	d100      	bne.n	800221c <HAL_RCC_OscConfig+0x42c>
 800221a:	e0ae      	b.n	800237a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221c:	2027      	movs	r0, #39	; 0x27
 800221e:	183b      	adds	r3, r7, r0
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002224:	4b8d      	ldr	r3, [pc, #564]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	055b      	lsls	r3, r3, #21
 800222c:	4013      	ands	r3, r2
 800222e:	d109      	bne.n	8002244 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b8a      	ldr	r3, [pc, #552]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002234:	4b89      	ldr	r3, [pc, #548]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	0549      	lsls	r1, r1, #21
 800223a:	430a      	orrs	r2, r1
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800223e:	183b      	adds	r3, r7, r0
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	4b87      	ldr	r3, [pc, #540]	; (8002464 <HAL_RCC_OscConfig+0x674>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4013      	ands	r3, r2
 800224e:	d11a      	bne.n	8002286 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002250:	4b84      	ldr	r3, [pc, #528]	; (8002464 <HAL_RCC_OscConfig+0x674>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b83      	ldr	r3, [pc, #524]	; (8002464 <HAL_RCC_OscConfig+0x674>)
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	0049      	lsls	r1, r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe ff8f 	bl	8001180 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002268:	f7fe ff8a 	bl	8001180 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e173      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b7a      	ldr	r3, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x674>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	429a      	cmp	r2, r3
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_OscConfig+0x4b2>
 8002292:	4b72      	ldr	r3, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002296:	4b71      	ldr	r3, [pc, #452]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	0049      	lsls	r1, r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	651a      	str	r2, [r3, #80]	; 0x50
 80022a0:	e031      	b.n	8002306 <HAL_RCC_OscConfig+0x516>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4d4>
 80022aa:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ae:	4b6b      	ldr	r3, [pc, #428]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022b0:	496b      	ldr	r1, [pc, #428]	; (8002460 <HAL_RCC_OscConfig+0x670>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	651a      	str	r2, [r3, #80]	; 0x50
 80022b6:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ba:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022bc:	496a      	ldr	r1, [pc, #424]	; (8002468 <HAL_RCC_OscConfig+0x678>)
 80022be:	400a      	ands	r2, r1
 80022c0:	651a      	str	r2, [r3, #80]	; 0x50
 80022c2:	e020      	b.n	8002306 <HAL_RCC_OscConfig+0x516>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	23a0      	movs	r3, #160	; 0xa0
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d10e      	bne.n	80022ee <HAL_RCC_OscConfig+0x4fe>
 80022d0:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d4:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	00c9      	lsls	r1, r1, #3
 80022da:	430a      	orrs	r2, r1
 80022dc:	651a      	str	r2, [r3, #80]	; 0x50
 80022de:	4b5f      	ldr	r3, [pc, #380]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022e2:	4b5e      	ldr	r3, [pc, #376]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0049      	lsls	r1, r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	651a      	str	r2, [r3, #80]	; 0x50
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x516>
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022f2:	4b5a      	ldr	r3, [pc, #360]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022f4:	495a      	ldr	r1, [pc, #360]	; (8002460 <HAL_RCC_OscConfig+0x670>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	651a      	str	r2, [r3, #80]	; 0x50
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80022fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002300:	4959      	ldr	r1, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x678>)
 8002302:	400a      	ands	r2, r1
 8002304:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe ff37 	bl	8001180 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002316:	e009      	b.n	800232c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe ff32 	bl	8001180 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_OscConfig+0x67c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e11a      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 800232e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d0ef      	beq.n	8002318 <HAL_RCC_OscConfig+0x528>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe ff21 	bl	8001180 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe ff1c 	bl	8001180 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a47      	ldr	r2, [pc, #284]	; (800246c <HAL_RCC_OscConfig+0x67c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e104      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 800235a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d1ef      	bne.n	8002344 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002364:	2327      	movs	r3, #39	; 0x27
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002372:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002374:	493e      	ldr	r1, [pc, #248]	; (8002470 <HAL_RCC_OscConfig+0x680>)
 8002376:	400a      	ands	r2, r1
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2220      	movs	r2, #32
 8002380:	4013      	ands	r3, r2
 8002382:	d049      	beq.n	8002418 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d026      	beq.n	80023da <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800238c:	4b33      	ldr	r3, [pc, #204]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002392:	2101      	movs	r1, #1
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 800239a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239c:	4b2f      	ldr	r3, [pc, #188]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34
 80023a4:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_RCC_OscConfig+0x684>)
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_RCC_OscConfig+0x684>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0189      	lsls	r1, r1, #6
 80023ae:	430a      	orrs	r2, r1
 80023b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe fee5 	bl	8001180 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023bc:	f7fe fee0 	bl	8001180 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0c9      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d0f1      	beq.n	80023bc <HAL_RCC_OscConfig+0x5cc>
 80023d8:	e01e      	b.n	8002418 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	438a      	bics	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCC_OscConfig+0x684>)
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_OscConfig+0x684>)
 80023ec:	4922      	ldr	r1, [pc, #136]	; (8002478 <HAL_RCC_OscConfig+0x688>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fec5 	bl	8001180 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023fc:	f7fe fec0 	bl	8001180 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0a9      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	d1f1      	bne.n	80023fc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d100      	bne.n	8002422 <HAL_RCC_OscConfig+0x632>
 8002420:	e09e      	b.n	8002560 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d100      	bne.n	800242a <HAL_RCC_OscConfig+0x63a>
 8002428:	e077      	b.n	800251a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	2b02      	cmp	r3, #2
 8002430:	d158      	bne.n	80024e4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_OscConfig+0x66c>)
 8002438:	4910      	ldr	r1, [pc, #64]	; (800247c <HAL_RCC_OscConfig+0x68c>)
 800243a:	400a      	ands	r2, r1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7fe fe9f 	bl	8001180 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002446:	e01b      	b.n	8002480 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fe9a 	bl	8001180 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d914      	bls.n	8002480 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e083      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	40021000 	.word	0x40021000
 8002460:	fffffeff 	.word	0xfffffeff
 8002464:	40007000 	.word	0x40007000
 8002468:	fffffbff 	.word	0xfffffbff
 800246c:	00001388 	.word	0x00001388
 8002470:	efffffff 	.word	0xefffffff
 8002474:	40010000 	.word	0x40010000
 8002478:	ffffdfff 	.word	0xffffdfff
 800247c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	049b      	lsls	r3, r3, #18
 8002488:	4013      	ands	r3, r2
 800248a:	d1dd      	bne.n	8002448 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a37      	ldr	r2, [pc, #220]	; (8002570 <HAL_RCC_OscConfig+0x780>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	431a      	orrs	r2, r3
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0449      	lsls	r1, r1, #17
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fe61 	bl	8001180 <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fe5c 	bl	8001180 <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e045      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	049b      	lsls	r3, r3, #18
 80024de:	4013      	ands	r3, r2
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x6d4>
 80024e2:	e03d      	b.n	8002560 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <HAL_RCC_OscConfig+0x784>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fe46 	bl	8001180 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe fe41 	bl	8001180 <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e02a      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	049b      	lsls	r3, r3, #18
 8002514:	4013      	ands	r3, r2
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x70a>
 8002518:	e022      	b.n	8002560 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e01d      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_OscConfig+0x77c>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	401a      	ands	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	429a      	cmp	r2, r3
 800253a:	d10f      	bne.n	800255c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	23f0      	movs	r3, #240	; 0xf0
 8002540:	039b      	lsls	r3, r3, #14
 8002542:	401a      	ands	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	041b      	lsls	r3, r3, #16
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b00a      	add	sp, #40	; 0x28
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40021000 	.word	0x40021000
 8002570:	ff02ffff 	.word	0xff02ffff
 8002574:	feffffff 	.word	0xfeffffff

08002578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e128      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d91e      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2201      	movs	r2, #1
 80025a0:	4393      	bics	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fde8 	bl	8001180 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b4:	e009      	b.n	80025ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b6:	f7fe fde3 	bl	8001180 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4a8a      	ldr	r2, [pc, #552]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e109      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b87      	ldr	r3, [pc, #540]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2202      	movs	r2, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b83      	ldr	r3, [pc, #524]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	22f0      	movs	r2, #240	; 0xf0
 80025e8:	4393      	bics	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <HAL_RCC_ClockConfig+0x8a>
 8002600:	e089      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260a:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	029b      	lsls	r3, r3, #10
 8002612:	4013      	ands	r3, r2
 8002614:	d120      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0e1      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	049b      	lsls	r3, r3, #18
 800262a:	4013      	ands	r3, r2
 800262c:	d114      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0d5      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d106      	bne.n	8002648 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2204      	movs	r2, #4
 8002640:	4013      	ands	r3, r2
 8002642:	d109      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0ca      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002648:	4b69      	ldr	r3, [pc, #420]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0c2      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002658:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2203      	movs	r2, #3
 800265e:	4393      	bics	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fd88 	bl	8001180 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d111      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800267c:	e009      	b.n	8002692 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fd7f 	bl	8001180 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0a5      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	220c      	movs	r2, #12
 8002698:	4013      	ands	r3, r2
 800269a:	2b08      	cmp	r3, #8
 800269c:	d1ef      	bne.n	800267e <HAL_RCC_ClockConfig+0x106>
 800269e:	e03a      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	e009      	b.n	80026be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026aa:	f7fe fd69 	bl	8001180 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	4a4d      	ldr	r2, [pc, #308]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e08f      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	220c      	movs	r2, #12
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d1ef      	bne.n	80026aa <HAL_RCC_ClockConfig+0x132>
 80026ca:	e024      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d11b      	bne.n	800270c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d6:	f7fe fd53 	bl	8001180 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	4a42      	ldr	r2, [pc, #264]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e079      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	220c      	movs	r2, #12
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d1ef      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x15e>
 80026f6:	e00e      	b.n	8002716 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fe fd42 	bl	8001180 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e068      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	220c      	movs	r2, #12
 8002712:	4013      	ands	r3, r2
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	4013      	ands	r3, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d21e      	bcs.n	8002762 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	4393      	bics	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002736:	f7fe fd23 	bl	8001180 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	e009      	b.n	8002754 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe fd1e 	bl	8001180 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	4a28      	ldr	r2, [pc, #160]	; (80027ec <HAL_RCC_ClockConfig+0x274>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e044      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_ClockConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d1ee      	bne.n	8002740 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x27c>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2208      	movs	r2, #8
 8002786:	4013      	ands	r3, r2
 8002788:	d00a      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x280>)
 8002790:	4013      	ands	r3, r2
 8002792:	0019      	movs	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	00da      	lsls	r2, r3, #3
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a0:	f000 f832 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027a4:	0001      	movs	r1, r0
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	220f      	movs	r2, #15
 80027ae:	4013      	ands	r3, r2
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x284>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	000a      	movs	r2, r1
 80027b6:	40da      	lsrs	r2, r3
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_ClockConfig+0x288>)
 80027ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_RCC_ClockConfig+0x28c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	250b      	movs	r5, #11
 80027c2:	197c      	adds	r4, r7, r5
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fe fc95 	bl	80010f4 <HAL_InitTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027ce:	197b      	adds	r3, r7, r5
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027d6:	197b      	adds	r3, r7, r5
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	e000      	b.n	80027de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bdb0      	pop	{r4, r5, r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40022000 	.word	0x40022000
 80027ec:	00001388 	.word	0x00001388
 80027f0:	40021000 	.word	0x40021000
 80027f4:	fffff8ff 	.word	0xfffff8ff
 80027f8:	ffffc7ff 	.word	0xffffc7ff
 80027fc:	08004374 	.word	0x08004374
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002816:	230c      	movs	r3, #12
 8002818:	4013      	ands	r3, r2
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d014      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x40>
 800281e:	d900      	bls.n	8002822 <HAL_RCC_GetSysClockFreq+0x1a>
 8002820:	e07b      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x112>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x24>
 8002826:	2b08      	cmp	r3, #8
 8002828:	d00b      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x3a>
 800282a:	e076      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800282c:	4b44      	ldr	r3, [pc, #272]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	4013      	ands	r3, r2
 8002834:	d002      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002836:	4b43      	ldr	r3, [pc, #268]	; (8002944 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800283a:	e07c      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800283c:	4b42      	ldr	r3, [pc, #264]	; (8002948 <HAL_RCC_GetSysClockFreq+0x140>)
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002840:	e079      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002842:	4b42      	ldr	r3, [pc, #264]	; (800294c <HAL_RCC_GetSysClockFreq+0x144>)
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002846:	e076      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	0c9a      	lsrs	r2, r3, #18
 800284c:	230f      	movs	r3, #15
 800284e:	401a      	ands	r2, r3
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_GetSysClockFreq+0x148>)
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	0d9a      	lsrs	r2, r3, #22
 800285a:	2303      	movs	r3, #3
 800285c:	4013      	ands	r3, r2
 800285e:	3301      	adds	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	025b      	lsls	r3, r3, #9
 800286a:	4013      	ands	r3, r2
 800286c:	d01a      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	4a35      	ldr	r2, [pc, #212]	; (800294c <HAL_RCC_GetSysClockFreq+0x144>)
 8002878:	2300      	movs	r3, #0
 800287a:	69b8      	ldr	r0, [r7, #24]
 800287c:	69f9      	ldr	r1, [r7, #28]
 800287e:	f7fd fcf9 	bl	8000274 <__aeabi_lmul>
 8002882:	0002      	movs	r2, r0
 8002884:	000b      	movs	r3, r1
 8002886:	0010      	movs	r0, r2
 8002888:	0019      	movs	r1, r3
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f7fd fccd 	bl	8000234 <__aeabi_uldivmod>
 800289a:	0002      	movs	r2, r0
 800289c:	000b      	movs	r3, r1
 800289e:	0013      	movs	r3, r2
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
 80028a2:	e037      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2210      	movs	r2, #16
 80028aa:	4013      	ands	r3, r2
 80028ac:	d01a      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028b8:	2300      	movs	r3, #0
 80028ba:	68b8      	ldr	r0, [r7, #8]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	f7fd fcd9 	bl	8000274 <__aeabi_lmul>
 80028c2:	0002      	movs	r2, r0
 80028c4:	000b      	movs	r3, r1
 80028c6:	0010      	movs	r0, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f7fd fcad 	bl	8000234 <__aeabi_uldivmod>
 80028da:	0002      	movs	r2, r0
 80028dc:	000b      	movs	r3, r1
 80028de:	0013      	movs	r3, r2
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
 80028e2:	e017      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	0018      	movs	r0, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	0019      	movs	r1, r3
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <HAL_RCC_GetSysClockFreq+0x140>)
 80028ee:	2300      	movs	r3, #0
 80028f0:	f7fd fcc0 	bl	8000274 <__aeabi_lmul>
 80028f4:	0002      	movs	r2, r0
 80028f6:	000b      	movs	r3, r1
 80028f8:	0010      	movs	r0, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	001c      	movs	r4, r3
 8002900:	2300      	movs	r3, #0
 8002902:	001d      	movs	r5, r3
 8002904:	0022      	movs	r2, r4
 8002906:	002b      	movs	r3, r5
 8002908:	f7fd fc94 	bl	8000234 <__aeabi_uldivmod>
 800290c:	0002      	movs	r2, r0
 800290e:	000b      	movs	r3, r1
 8002910:	0013      	movs	r3, r2
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002918:	e00d      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_GetSysClockFreq+0x138>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	2207      	movs	r2, #7
 8002922:	4013      	ands	r3, r2
 8002924:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	3301      	adds	r3, #1
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	0212      	lsls	r2, r2, #8
 800292e:	409a      	lsls	r2, r3
 8002930:	0013      	movs	r3, r2
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002934:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b00e      	add	sp, #56	; 0x38
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	003d0900 	.word	0x003d0900
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200
 8002950:	0800438c 	.word	0x0800438c

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_RCC_GetHCLKFreq+0x10>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff2 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002970:	0001      	movs	r1, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	2207      	movs	r2, #7
 800297a:	4013      	ands	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	40d9      	lsrs	r1, r3
 8002982:	000b      	movs	r3, r1
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40021000 	.word	0x40021000
 8002990:	08004384 	.word	0x08004384

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	0001      	movs	r1, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	0adb      	lsrs	r3, r3, #11
 80029a4:	2207      	movs	r2, #7
 80029a6:	4013      	ands	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	40d9      	lsrs	r1, r3
 80029ae:	000b      	movs	r3, r1
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08004384 	.word	0x08004384

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029c8:	2317      	movs	r3, #23
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2220      	movs	r2, #32
 80029d6:	4013      	ands	r3, r2
 80029d8:	d106      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4013      	ands	r3, r2
 80029e4:	d100      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80029e6:	e0d9      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e8:	4b9c      	ldr	r3, [pc, #624]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	055b      	lsls	r3, r3, #21
 80029f0:	4013      	ands	r3, r2
 80029f2:	d10a      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	4b99      	ldr	r3, [pc, #612]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f8:	4b98      	ldr	r3, [pc, #608]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0549      	lsls	r1, r1, #21
 80029fe:	430a      	orrs	r2, r1
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a02:	2317      	movs	r3, #23
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b95      	ldr	r3, [pc, #596]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	d11a      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	0049      	lsls	r1, r1, #1
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a24:	f7fe fbac 	bl	8001180 <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	e008      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe fba7 	bl	8001180 <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e108      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a4c:	4b83      	ldr	r3, [pc, #524]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	23c0      	movs	r3, #192	; 0xc0
 8002a52:	039b      	lsls	r3, r3, #14
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	23c0      	movs	r3, #192	; 0xc0
 8002a5e:	039b      	lsls	r3, r3, #14
 8002a60:	4013      	ands	r3, r2
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	23c0      	movs	r3, #192	; 0xc0
 8002a6e:	039b      	lsls	r3, r3, #14
 8002a70:	4013      	ands	r3, r2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	23c0      	movs	r3, #192	; 0xc0
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	401a      	ands	r2, r3
 8002a82:	23c0      	movs	r3, #192	; 0xc0
 8002a84:	029b      	lsls	r3, r3, #10
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10a      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a8a:	4b74      	ldr	r3, [pc, #464]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	401a      	ands	r2, r3
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	029b      	lsls	r3, r3, #10
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d8      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002aa0:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa4:	23c0      	movs	r3, #192	; 0xc0
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d049      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	23c0      	movs	r3, #192	; 0xc0
 8002ab8:	029b      	lsls	r3, r3, #10
 8002aba:	4013      	ands	r3, r2
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d004      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	23c0      	movs	r3, #192	; 0xc0
 8002ad2:	029b      	lsls	r3, r3, #10
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d034      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d02e      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ae8:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	4a5d      	ldr	r2, [pc, #372]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002af2:	4b5a      	ldr	r3, [pc, #360]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af6:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0309      	lsls	r1, r1, #12
 8002afc:	430a      	orrs	r2, r1
 8002afe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b00:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b04:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b06:	4958      	ldr	r1, [pc, #352]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d014      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fb30 	bl	8001180 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b24:	e009      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe fb2b 	bl	8001180 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4a4e      	ldr	r2, [pc, #312]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e08b      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b3a:	4b48      	ldr	r3, [pc, #288]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d0ef      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	23c0      	movs	r3, #192	; 0xc0
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	401a      	ands	r2, r3
 8002b50:	23c0      	movs	r3, #192	; 0xc0
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d10c      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a44      	ldr	r2, [pc, #272]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	039b      	lsls	r3, r3, #14
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	401a      	ands	r2, r3
 8002b80:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b86:	2317      	movs	r3, #23
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b96:	4937      	ldr	r1, [pc, #220]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002baa:	2203      	movs	r2, #3
 8002bac:	4393      	bics	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	220c      	movs	r2, #12
 8002bca:	4393      	bics	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4013      	ands	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2240      	movs	r2, #64	; 0x40
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b006      	add	sp, #24
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40007000 	.word	0x40007000
 8002c64:	fffcffff 	.word	0xfffcffff
 8002c68:	fff7ffff 	.word	0xfff7ffff
 8002c6c:	00001388 	.word	0x00001388
 8002c70:	ffcfffff 	.word	0xffcfffff
 8002c74:	efffffff 	.word	0xefffffff
 8002c78:	fffff3ff 	.word	0xfffff3ff
 8002c7c:	ffffcfff 	.word	0xffffcfff
 8002c80:	fbffffff 	.word	0xfbffffff
 8002c84:	fff3ffff 	.word	0xfff3ffff

08002c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e083      	b.n	8002da2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	2382      	movs	r3, #130	; 0x82
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d009      	beq.n	8002cc2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
 8002cb4:	e005      	b.n	8002cc2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2251      	movs	r2, #81	; 0x51
 8002ccc:	5c9b      	ldrb	r3, [r3, r2]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2250      	movs	r2, #80	; 0x50
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7fe f820 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2251      	movs	r2, #81	; 0x51
 8002ce8:	2102      	movs	r1, #2
 8002cea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2140      	movs	r1, #64	; 0x40
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	2382      	movs	r3, #130	; 0x82
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	401a      	ands	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	2384      	movs	r3, #132	; 0x84
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	400b      	ands	r3, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68d9      	ldr	r1, [r3, #12]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2102      	movs	r1, #2
 8002d24:	400b      	ands	r3, r1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	400b      	ands	r3, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6999      	ldr	r1, [r3, #24]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2138      	movs	r1, #56	; 0x38
 8002d44:	400b      	ands	r3, r1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	400b      	ands	r3, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	0011      	movs	r1, r2
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	019b      	lsls	r3, r3, #6
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2210      	movs	r2, #16
 8002d78:	401a      	ands	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4907      	ldr	r1, [pc, #28]	; (8002dac <HAL_SPI_Init+0x124>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2251      	movs	r2, #81	; 0x51
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	fffff7ff 	.word	0xfffff7ff

08002db0 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e074      	b.n	8002eac <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223c      	movs	r2, #60	; 0x3c
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223d      	movs	r2, #61	; 0x3d
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7fe f83d 	bl	8000e58 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	223c      	movs	r2, #60	; 0x3c
 8002de2:	2102      	movs	r1, #2
 8002de4:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002dfc:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002e04:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002e0a:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002e10:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002e16:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002e1c:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002e22:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7b1b      	ldrb	r3, [r3, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d108      	bne.n	8002e46 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	0249      	lsls	r1, r1, #9
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	43d2      	mvns	r2, r2
 8002e5c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e76:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681c      	ldr	r4, [r3, #0]
 8002e80:	0010      	movs	r0, r2
 8002e82:	f000 f817 	bl	8002eb4 <TSC_extract_groups>
 8002e86:	0003      	movs	r3, r0
 8002e88:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2103      	movs	r1, #3
 8002e96:	438a      	bics	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	223c      	movs	r2, #60	; 0x3c
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b003      	add	sp, #12
 8002eb2:	bd90      	pop	{r4, r7, pc}

08002eb4 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	e011      	b.n	8002eea <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	0013      	movs	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d006      	beq.n	8002ee4 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	409a      	lsls	r2, r3
 8002edc:	0013      	movs	r3, r2
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b07      	cmp	r3, #7
 8002eee:	d9ea      	bls.n	8002ec6 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b004      	add	sp, #16
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e04c      	b.n	8002fa8 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2274      	movs	r2, #116	; 0x74
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fd fe57 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2224      	movs	r2, #36	; 0x24
 8002f2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	438a      	bics	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f8e0 	bl	8003104 <UART_SetConfig>
 8002f44:	0003      	movs	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e02c      	b.n	8002fa8 <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 fb73 	bl	8003644 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4911      	ldr	r1, [pc, #68]	; (8002fb0 <HAL_HalfDuplex_Init+0xb4>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2122      	movs	r1, #34	; 0x22
 8002f7a:	438a      	bics	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2108      	movs	r1, #8
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fc03 	bl	80037ac <UART_CheckIdleState>
 8002fa6:	0003      	movs	r3, r0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	ffffb7ff 	.word	0xffffb7ff

08002fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d000      	beq.n	8002fce <HAL_UART_Transmit+0x1a>
 8002fcc:	e095      	b.n	80030fa <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_UART_Transmit+0x28>
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e08d      	b.n	80030fc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	015b      	lsls	r3, r3, #5
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d109      	bne.n	8003000 <HAL_UART_Transmit+0x4c>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d001      	beq.n	8003000 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e07d      	b.n	80030fc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2274      	movs	r2, #116	; 0x74
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_UART_Transmit+0x5a>
 800300a:	2302      	movs	r3, #2
 800300c:	e076      	b.n	80030fc <HAL_UART_Transmit+0x148>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2274      	movs	r2, #116	; 0x74
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	2100      	movs	r1, #0
 800301c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2221      	movs	r2, #33	; 0x21
 8003022:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003024:	f7fe f8ac 	bl	8001180 <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1dba      	adds	r2, r7, #6
 8003030:	2150      	movs	r1, #80	; 0x50
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1dba      	adds	r2, r7, #6
 800303a:	2152      	movs	r1, #82	; 0x52
 800303c:	8812      	ldrh	r2, [r2, #0]
 800303e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	015b      	lsls	r3, r3, #5
 8003048:	429a      	cmp	r2, r3
 800304a:	d108      	bne.n	800305e <HAL_UART_Transmit+0xaa>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	e003      	b.n	8003066 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2274      	movs	r2, #116	; 0x74
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800306e:	e02c      	b.n	80030ca <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	0013      	movs	r3, r2
 800307a:	2200      	movs	r2, #0
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	f000 fbdd 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 8003082:	1e03      	subs	r3, r0, #0
 8003084:	d001      	beq.n	800308a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e038      	b.n	80030fc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	001a      	movs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	05d2      	lsls	r2, r2, #23
 800309c:	0dd2      	lsrs	r2, r2, #23
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	3302      	adds	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e007      	b.n	80030b8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2252      	movs	r2, #82	; 0x52
 80030bc:	5a9b      	ldrh	r3, [r3, r2]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b299      	uxth	r1, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2252      	movs	r2, #82	; 0x52
 80030c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2252      	movs	r2, #82	; 0x52
 80030ce:	5a9b      	ldrh	r3, [r3, r2]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1cc      	bne.n	8003070 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	0013      	movs	r3, r2
 80030e0:	2200      	movs	r2, #0
 80030e2:	2140      	movs	r1, #64	; 0x40
 80030e4:	f000 fbaa 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e005      	b.n	80030fc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b008      	add	sp, #32
 8003102:	bd80      	pop	{r7, pc}

08003104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800310c:	231a      	movs	r3, #26
 800310e:	2218      	movs	r2, #24
 8003110:	4694      	mov	ip, r2
 8003112:	44bc      	add	ip, r7
 8003114:	4463      	add	r3, ip
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	431a      	orrs	r2, r3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	431a      	orrs	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4313      	orrs	r3, r2
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4ac1      	ldr	r2, [pc, #772]	; (8003440 <UART_SetConfig+0x33c>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4abd      	ldr	r2, [pc, #756]	; (8003444 <UART_SetConfig+0x340>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4ab7      	ldr	r2, [pc, #732]	; (8003448 <UART_SetConfig+0x344>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003176:	4313      	orrs	r3, r2
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4ab2      	ldr	r2, [pc, #712]	; (800344c <UART_SetConfig+0x348>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4aae      	ldr	r2, [pc, #696]	; (8003450 <UART_SetConfig+0x34c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d136      	bne.n	8003208 <UART_SetConfig+0x104>
 800319a:	4bae      	ldr	r3, [pc, #696]	; (8003454 <UART_SetConfig+0x350>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	2203      	movs	r2, #3
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d020      	beq.n	80031e8 <UART_SetConfig+0xe4>
 80031a6:	d827      	bhi.n	80031f8 <UART_SetConfig+0xf4>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d00d      	beq.n	80031c8 <UART_SetConfig+0xc4>
 80031ac:	d824      	bhi.n	80031f8 <UART_SetConfig+0xf4>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <UART_SetConfig+0xb4>
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d010      	beq.n	80031d8 <UART_SetConfig+0xd4>
 80031b6:	e01f      	b.n	80031f8 <UART_SetConfig+0xf4>
 80031b8:	231b      	movs	r3, #27
 80031ba:	2218      	movs	r2, #24
 80031bc:	4694      	mov	ip, r2
 80031be:	44bc      	add	ip, r7
 80031c0:	4463      	add	r3, ip
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e0ab      	b.n	8003320 <UART_SetConfig+0x21c>
 80031c8:	231b      	movs	r3, #27
 80031ca:	2218      	movs	r2, #24
 80031cc:	4694      	mov	ip, r2
 80031ce:	44bc      	add	ip, r7
 80031d0:	4463      	add	r3, ip
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e0a3      	b.n	8003320 <UART_SetConfig+0x21c>
 80031d8:	231b      	movs	r3, #27
 80031da:	2218      	movs	r2, #24
 80031dc:	4694      	mov	ip, r2
 80031de:	44bc      	add	ip, r7
 80031e0:	4463      	add	r3, ip
 80031e2:	2204      	movs	r2, #4
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e09b      	b.n	8003320 <UART_SetConfig+0x21c>
 80031e8:	231b      	movs	r3, #27
 80031ea:	2218      	movs	r2, #24
 80031ec:	4694      	mov	ip, r2
 80031ee:	44bc      	add	ip, r7
 80031f0:	4463      	add	r3, ip
 80031f2:	2208      	movs	r2, #8
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e093      	b.n	8003320 <UART_SetConfig+0x21c>
 80031f8:	231b      	movs	r3, #27
 80031fa:	2218      	movs	r2, #24
 80031fc:	4694      	mov	ip, r2
 80031fe:	44bc      	add	ip, r7
 8003200:	4463      	add	r3, ip
 8003202:	2210      	movs	r2, #16
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e08b      	b.n	8003320 <UART_SetConfig+0x21c>
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a92      	ldr	r2, [pc, #584]	; (8003458 <UART_SetConfig+0x354>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d136      	bne.n	8003280 <UART_SetConfig+0x17c>
 8003212:	4b90      	ldr	r3, [pc, #576]	; (8003454 <UART_SetConfig+0x350>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	220c      	movs	r2, #12
 8003218:	4013      	ands	r3, r2
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d020      	beq.n	8003260 <UART_SetConfig+0x15c>
 800321e:	d827      	bhi.n	8003270 <UART_SetConfig+0x16c>
 8003220:	2b08      	cmp	r3, #8
 8003222:	d00d      	beq.n	8003240 <UART_SetConfig+0x13c>
 8003224:	d824      	bhi.n	8003270 <UART_SetConfig+0x16c>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <UART_SetConfig+0x12c>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d010      	beq.n	8003250 <UART_SetConfig+0x14c>
 800322e:	e01f      	b.n	8003270 <UART_SetConfig+0x16c>
 8003230:	231b      	movs	r3, #27
 8003232:	2218      	movs	r2, #24
 8003234:	4694      	mov	ip, r2
 8003236:	44bc      	add	ip, r7
 8003238:	4463      	add	r3, ip
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e06f      	b.n	8003320 <UART_SetConfig+0x21c>
 8003240:	231b      	movs	r3, #27
 8003242:	2218      	movs	r2, #24
 8003244:	4694      	mov	ip, r2
 8003246:	44bc      	add	ip, r7
 8003248:	4463      	add	r3, ip
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e067      	b.n	8003320 <UART_SetConfig+0x21c>
 8003250:	231b      	movs	r3, #27
 8003252:	2218      	movs	r2, #24
 8003254:	4694      	mov	ip, r2
 8003256:	44bc      	add	ip, r7
 8003258:	4463      	add	r3, ip
 800325a:	2204      	movs	r2, #4
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e05f      	b.n	8003320 <UART_SetConfig+0x21c>
 8003260:	231b      	movs	r3, #27
 8003262:	2218      	movs	r2, #24
 8003264:	4694      	mov	ip, r2
 8003266:	44bc      	add	ip, r7
 8003268:	4463      	add	r3, ip
 800326a:	2208      	movs	r2, #8
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e057      	b.n	8003320 <UART_SetConfig+0x21c>
 8003270:	231b      	movs	r3, #27
 8003272:	2218      	movs	r2, #24
 8003274:	4694      	mov	ip, r2
 8003276:	44bc      	add	ip, r7
 8003278:	4463      	add	r3, ip
 800327a:	2210      	movs	r2, #16
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e04f      	b.n	8003320 <UART_SetConfig+0x21c>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a70      	ldr	r2, [pc, #448]	; (8003448 <UART_SetConfig+0x344>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d143      	bne.n	8003312 <UART_SetConfig+0x20e>
 800328a:	4b72      	ldr	r3, [pc, #456]	; (8003454 <UART_SetConfig+0x350>)
 800328c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800328e:	23c0      	movs	r3, #192	; 0xc0
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	4013      	ands	r3, r2
 8003294:	22c0      	movs	r2, #192	; 0xc0
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4293      	cmp	r3, r2
 800329a:	d02a      	beq.n	80032f2 <UART_SetConfig+0x1ee>
 800329c:	22c0      	movs	r2, #192	; 0xc0
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d82e      	bhi.n	8003302 <UART_SetConfig+0x1fe>
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d012      	beq.n	80032d2 <UART_SetConfig+0x1ce>
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d826      	bhi.n	8003302 <UART_SetConfig+0x1fe>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <UART_SetConfig+0x1be>
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	00d2      	lsls	r2, r2, #3
 80032bc:	4293      	cmp	r3, r2
 80032be:	d010      	beq.n	80032e2 <UART_SetConfig+0x1de>
 80032c0:	e01f      	b.n	8003302 <UART_SetConfig+0x1fe>
 80032c2:	231b      	movs	r3, #27
 80032c4:	2218      	movs	r2, #24
 80032c6:	4694      	mov	ip, r2
 80032c8:	44bc      	add	ip, r7
 80032ca:	4463      	add	r3, ip
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e026      	b.n	8003320 <UART_SetConfig+0x21c>
 80032d2:	231b      	movs	r3, #27
 80032d4:	2218      	movs	r2, #24
 80032d6:	4694      	mov	ip, r2
 80032d8:	44bc      	add	ip, r7
 80032da:	4463      	add	r3, ip
 80032dc:	2202      	movs	r2, #2
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e01e      	b.n	8003320 <UART_SetConfig+0x21c>
 80032e2:	231b      	movs	r3, #27
 80032e4:	2218      	movs	r2, #24
 80032e6:	4694      	mov	ip, r2
 80032e8:	44bc      	add	ip, r7
 80032ea:	4463      	add	r3, ip
 80032ec:	2204      	movs	r2, #4
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e016      	b.n	8003320 <UART_SetConfig+0x21c>
 80032f2:	231b      	movs	r3, #27
 80032f4:	2218      	movs	r2, #24
 80032f6:	4694      	mov	ip, r2
 80032f8:	44bc      	add	ip, r7
 80032fa:	4463      	add	r3, ip
 80032fc:	2208      	movs	r2, #8
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e00e      	b.n	8003320 <UART_SetConfig+0x21c>
 8003302:	231b      	movs	r3, #27
 8003304:	2218      	movs	r2, #24
 8003306:	4694      	mov	ip, r2
 8003308:	44bc      	add	ip, r7
 800330a:	4463      	add	r3, ip
 800330c:	2210      	movs	r2, #16
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e006      	b.n	8003320 <UART_SetConfig+0x21c>
 8003312:	231b      	movs	r3, #27
 8003314:	2218      	movs	r2, #24
 8003316:	4694      	mov	ip, r2
 8003318:	44bc      	add	ip, r7
 800331a:	4463      	add	r3, ip
 800331c:	2210      	movs	r2, #16
 800331e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a48      	ldr	r2, [pc, #288]	; (8003448 <UART_SetConfig+0x344>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d000      	beq.n	800332c <UART_SetConfig+0x228>
 800332a:	e09b      	b.n	8003464 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800332c:	231b      	movs	r3, #27
 800332e:	2218      	movs	r2, #24
 8003330:	4694      	mov	ip, r2
 8003332:	44bc      	add	ip, r7
 8003334:	4463      	add	r3, ip
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d01d      	beq.n	8003378 <UART_SetConfig+0x274>
 800333c:	dc20      	bgt.n	8003380 <UART_SetConfig+0x27c>
 800333e:	2b04      	cmp	r3, #4
 8003340:	d015      	beq.n	800336e <UART_SetConfig+0x26a>
 8003342:	dc1d      	bgt.n	8003380 <UART_SetConfig+0x27c>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <UART_SetConfig+0x24a>
 8003348:	2b02      	cmp	r3, #2
 800334a:	d005      	beq.n	8003358 <UART_SetConfig+0x254>
 800334c:	e018      	b.n	8003380 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800334e:	f7ff fb0b 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8003352:	0003      	movs	r3, r0
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003356:	e01d      	b.n	8003394 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003358:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <UART_SetConfig+0x350>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2210      	movs	r2, #16
 800335e:	4013      	ands	r3, r2
 8003360:	d002      	beq.n	8003368 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003362:	4b3e      	ldr	r3, [pc, #248]	; (800345c <UART_SetConfig+0x358>)
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003366:	e015      	b.n	8003394 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8003368:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <UART_SetConfig+0x35c>)
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800336c:	e012      	b.n	8003394 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336e:	f7ff fa4b 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8003372:	0003      	movs	r3, r0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003376:	e00d      	b.n	8003394 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800337e:	e009      	b.n	8003394 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003384:	231a      	movs	r3, #26
 8003386:	2218      	movs	r2, #24
 8003388:	4694      	mov	ip, r2
 800338a:	44bc      	add	ip, r7
 800338c:	4463      	add	r3, ip
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
        break;
 8003392:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d100      	bne.n	800339c <UART_SetConfig+0x298>
 800339a:	e139      	b.n	8003610 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	0013      	movs	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	189b      	adds	r3, r3, r2
 80033a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d305      	bcc.n	80033b8 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d907      	bls.n	80033c8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80033b8:	231a      	movs	r3, #26
 80033ba:	2218      	movs	r2, #24
 80033bc:	4694      	mov	ip, r2
 80033be:	44bc      	add	ip, r7
 80033c0:	4463      	add	r3, ip
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e123      	b.n	8003610 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	6939      	ldr	r1, [r7, #16]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	000b      	movs	r3, r1
 80033d6:	0e1b      	lsrs	r3, r3, #24
 80033d8:	0010      	movs	r0, r2
 80033da:	0205      	lsls	r5, r0, #8
 80033dc:	431d      	orrs	r5, r3
 80033de:	000b      	movs	r3, r1
 80033e0:	021c      	lsls	r4, r3, #8
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68b8      	ldr	r0, [r7, #8]
 80033f0:	68f9      	ldr	r1, [r7, #12]
 80033f2:	1900      	adds	r0, r0, r4
 80033f4:	4169      	adcs	r1, r5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f7fc ff16 	bl	8000234 <__aeabi_uldivmod>
 8003408:	0002      	movs	r2, r0
 800340a:	000b      	movs	r3, r1
 800340c:	0013      	movs	r3, r2
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003412:	23c0      	movs	r3, #192	; 0xc0
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	429a      	cmp	r2, r3
 8003418:	d309      	bcc.n	800342e <UART_SetConfig+0x32a>
 800341a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	035b      	lsls	r3, r3, #13
 8003420:	429a      	cmp	r2, r3
 8003422:	d204      	bcs.n	800342e <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	e0f0      	b.n	8003610 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800342e:	231a      	movs	r3, #26
 8003430:	2218      	movs	r2, #24
 8003432:	4694      	mov	ip, r2
 8003434:	44bc      	add	ip, r7
 8003436:	4463      	add	r3, ip
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e0e8      	b.n	8003610 <UART_SetConfig+0x50c>
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	efff69f3 	.word	0xefff69f3
 8003444:	ffffcfff 	.word	0xffffcfff
 8003448:	40004800 	.word	0x40004800
 800344c:	fffff4ff 	.word	0xfffff4ff
 8003450:	40013800 	.word	0x40013800
 8003454:	40021000 	.word	0x40021000
 8003458:	40004400 	.word	0x40004400
 800345c:	003d0900 	.word	0x003d0900
 8003460:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	429a      	cmp	r2, r3
 800346e:	d000      	beq.n	8003472 <UART_SetConfig+0x36e>
 8003470:	e074      	b.n	800355c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003472:	231b      	movs	r3, #27
 8003474:	2218      	movs	r2, #24
 8003476:	4694      	mov	ip, r2
 8003478:	44bc      	add	ip, r7
 800347a:	4463      	add	r3, ip
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b08      	cmp	r3, #8
 8003480:	d822      	bhi.n	80034c8 <UART_SetConfig+0x3c4>
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <UART_SetConfig+0x52c>)
 8003486:	18d3      	adds	r3, r2, r3
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800348c:	f7ff fa6c 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8003490:	0003      	movs	r3, r0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003494:	e022      	b.n	80034dc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003496:	f7ff fa7d 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 800349a:	0003      	movs	r3, r0
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800349e:	e01d      	b.n	80034dc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034a0:	4b64      	ldr	r3, [pc, #400]	; (8003634 <UART_SetConfig+0x530>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2210      	movs	r2, #16
 80034a6:	4013      	ands	r3, r2
 80034a8:	d002      	beq.n	80034b0 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034aa:	4b63      	ldr	r3, [pc, #396]	; (8003638 <UART_SetConfig+0x534>)
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034ae:	e015      	b.n	80034dc <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 80034b0:	4b62      	ldr	r3, [pc, #392]	; (800363c <UART_SetConfig+0x538>)
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034b4:	e012      	b.n	80034dc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b6:	f7ff f9a7 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80034ba:	0003      	movs	r3, r0
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034be:	e00d      	b.n	80034dc <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034c6:	e009      	b.n	80034dc <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034cc:	231a      	movs	r3, #26
 80034ce:	2218      	movs	r2, #24
 80034d0:	4694      	mov	ip, r2
 80034d2:	44bc      	add	ip, r7
 80034d4:	4463      	add	r3, ip
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
        break;
 80034da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d100      	bne.n	80034e4 <UART_SetConfig+0x3e0>
 80034e2:	e095      	b.n	8003610 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	005a      	lsls	r2, r3, #1
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	18d2      	adds	r2, r2, r3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0019      	movs	r1, r3
 80034f6:	0010      	movs	r0, r2
 80034f8:	f7fc fe10 	bl	800011c <__udivsi3>
 80034fc:	0003      	movs	r3, r0
 80034fe:	b29b      	uxth	r3, r3
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	2b0f      	cmp	r3, #15
 8003506:	d921      	bls.n	800354c <UART_SetConfig+0x448>
 8003508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	025b      	lsls	r3, r3, #9
 800350e:	429a      	cmp	r2, r3
 8003510:	d21c      	bcs.n	800354c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	b29a      	uxth	r2, r3
 8003516:	200e      	movs	r0, #14
 8003518:	2418      	movs	r4, #24
 800351a:	193b      	adds	r3, r7, r4
 800351c:	181b      	adds	r3, r3, r0
 800351e:	210f      	movs	r1, #15
 8003520:	438a      	bics	r2, r1
 8003522:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	2207      	movs	r2, #7
 800352c:	4013      	ands	r3, r2
 800352e:	b299      	uxth	r1, r3
 8003530:	193b      	adds	r3, r7, r4
 8003532:	181b      	adds	r3, r3, r0
 8003534:	193a      	adds	r2, r7, r4
 8003536:	1812      	adds	r2, r2, r0
 8003538:	8812      	ldrh	r2, [r2, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	193a      	adds	r2, r7, r4
 8003544:	1812      	adds	r2, r2, r0
 8003546:	8812      	ldrh	r2, [r2, #0]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	e061      	b.n	8003610 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800354c:	231a      	movs	r3, #26
 800354e:	2218      	movs	r2, #24
 8003550:	4694      	mov	ip, r2
 8003552:	44bc      	add	ip, r7
 8003554:	4463      	add	r3, ip
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e059      	b.n	8003610 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800355c:	231b      	movs	r3, #27
 800355e:	2218      	movs	r2, #24
 8003560:	4694      	mov	ip, r2
 8003562:	44bc      	add	ip, r7
 8003564:	4463      	add	r3, ip
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d822      	bhi.n	80035b2 <UART_SetConfig+0x4ae>
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	4b34      	ldr	r3, [pc, #208]	; (8003640 <UART_SetConfig+0x53c>)
 8003570:	18d3      	adds	r3, r2, r3
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003576:	f7ff f9f7 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 800357a:	0003      	movs	r3, r0
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800357e:	e022      	b.n	80035c6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7ff fa08 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8003584:	0003      	movs	r3, r0
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003588:	e01d      	b.n	80035c6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <UART_SetConfig+0x530>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2210      	movs	r2, #16
 8003590:	4013      	ands	r3, r2
 8003592:	d002      	beq.n	800359a <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <UART_SetConfig+0x534>)
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003598:	e015      	b.n	80035c6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <UART_SetConfig+0x538>)
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800359e:	e012      	b.n	80035c6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a0:	f7ff f932 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80035a4:	0003      	movs	r3, r0
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035a8:	e00d      	b.n	80035c6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b0:	e009      	b.n	80035c6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035b6:	231a      	movs	r3, #26
 80035b8:	2218      	movs	r2, #24
 80035ba:	4694      	mov	ip, r2
 80035bc:	44bc      	add	ip, r7
 80035be:	4463      	add	r3, ip
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
        break;
 80035c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d021      	beq.n	8003610 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	085a      	lsrs	r2, r3, #1
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	18d2      	adds	r2, r2, r3
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0019      	movs	r1, r3
 80035dc:	0010      	movs	r0, r2
 80035de:	f7fc fd9d 	bl	800011c <__udivsi3>
 80035e2:	0003      	movs	r3, r0
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	2b0f      	cmp	r3, #15
 80035ec:	d909      	bls.n	8003602 <UART_SetConfig+0x4fe>
 80035ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d204      	bcs.n	8003602 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e006      	b.n	8003610 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003602:	231a      	movs	r3, #26
 8003604:	2218      	movs	r2, #24
 8003606:	4694      	mov	ip, r2
 8003608:	44bc      	add	ip, r7
 800360a:	4463      	add	r3, ip
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2200      	movs	r2, #0
 8003614:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2200      	movs	r2, #0
 800361a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800361c:	231a      	movs	r3, #26
 800361e:	2218      	movs	r2, #24
 8003620:	4694      	mov	ip, r2
 8003622:	44bc      	add	ip, r7
 8003624:	4463      	add	r3, ip
 8003626:	781b      	ldrb	r3, [r3, #0]
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b00e      	add	sp, #56	; 0x38
 800362e:	bdb0      	pop	{r4, r5, r7, pc}
 8003630:	08004398 	.word	0x08004398
 8003634:	40021000 	.word	0x40021000
 8003638:	003d0900 	.word	0x003d0900
 800363c:	00f42400 	.word	0x00f42400
 8003640:	080043bc 	.word	0x080043bc

08003644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d00b      	beq.n	800366e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a4a      	ldr	r2, [pc, #296]	; (8003788 <UART_AdvFeatureConfig+0x144>)
 800365e:	4013      	ands	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2202      	movs	r2, #2
 8003674:	4013      	ands	r3, r2
 8003676:	d00b      	beq.n	8003690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a43      	ldr	r2, [pc, #268]	; (800378c <UART_AdvFeatureConfig+0x148>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2204      	movs	r2, #4
 8003696:	4013      	ands	r3, r2
 8003698:	d00b      	beq.n	80036b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a3b      	ldr	r2, [pc, #236]	; (8003790 <UART_AdvFeatureConfig+0x14c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2208      	movs	r2, #8
 80036b8:	4013      	ands	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4a34      	ldr	r2, [pc, #208]	; (8003794 <UART_AdvFeatureConfig+0x150>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2210      	movs	r2, #16
 80036da:	4013      	ands	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <UART_AdvFeatureConfig+0x154>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2220      	movs	r2, #32
 80036fc:	4013      	ands	r3, r2
 80036fe:	d00b      	beq.n	8003718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4a25      	ldr	r2, [pc, #148]	; (800379c <UART_AdvFeatureConfig+0x158>)
 8003708:	4013      	ands	r3, r2
 800370a:	0019      	movs	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2240      	movs	r2, #64	; 0x40
 800371e:	4013      	ands	r3, r2
 8003720:	d01d      	beq.n	800375e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <UART_AdvFeatureConfig+0x15c>)
 800372a:	4013      	ands	r3, r2
 800372c:	0019      	movs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	035b      	lsls	r3, r3, #13
 8003742:	429a      	cmp	r2, r3
 8003744:	d10b      	bne.n	800375e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <UART_AdvFeatureConfig+0x160>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	4013      	ands	r3, r2
 8003766:	d00b      	beq.n	8003780 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <UART_AdvFeatureConfig+0x164>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
  }
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	fffdffff 	.word	0xfffdffff
 800378c:	fffeffff 	.word	0xfffeffff
 8003790:	fffbffff 	.word	0xfffbffff
 8003794:	ffff7fff 	.word	0xffff7fff
 8003798:	ffffefff 	.word	0xffffefff
 800379c:	ffffdfff 	.word	0xffffdfff
 80037a0:	ffefffff 	.word	0xffefffff
 80037a4:	ff9fffff 	.word	0xff9fffff
 80037a8:	fff7ffff 	.word	0xfff7ffff

080037ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	2100      	movs	r1, #0
 80037ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037bc:	f7fd fce0 	bl	8001180 <HAL_GetTick>
 80037c0:	0003      	movs	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2208      	movs	r2, #8
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d10c      	bne.n	80037ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	0391      	lsls	r1, r2, #14
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <UART_CheckIdleState+0x8c>)
 80037dc:	9200      	str	r2, [sp, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	f000 f82c 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 80037e4:	1e03      	subs	r3, r0, #0
 80037e6:	d001      	beq.n	80037ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e021      	b.n	8003830 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2204      	movs	r2, #4
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d10c      	bne.n	8003814 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	03d1      	lsls	r1, r2, #15
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <UART_CheckIdleState+0x8c>)
 8003804:	9200      	str	r2, [sp, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	f000 f818 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d001      	beq.n	8003814 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e00d      	b.n	8003830 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2274      	movs	r2, #116	; 0x74
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}
 8003838:	01ffffff 	.word	0x01ffffff

0800383c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b094      	sub	sp, #80	; 0x50
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	1dfb      	adds	r3, r7, #7
 800384a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	e0a3      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003850:	3301      	adds	r3, #1
 8003852:	d100      	bne.n	8003856 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003854:	e09f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fd fc93 	bl	8001180 <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <UART_WaitOnFlagUntilTimeout+0x30>
 8003866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003868:	2b00      	cmp	r3, #0
 800386a:	d13d      	bne.n	80038e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003874:	647b      	str	r3, [r7, #68]	; 0x44
 8003876:	2301      	movs	r3, #1
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	494c      	ldr	r1, [pc, #304]	; (80039c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	643b      	str	r3, [r7, #64]	; 0x40
 80038a8:	2301      	movs	r3, #1
 80038aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	438a      	bics	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2274      	movs	r2, #116	; 0x74
 80038e0:	2100      	movs	r1, #0
 80038e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e067      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2204      	movs	r2, #4
 80038f0:	4013      	ands	r3, r2
 80038f2:	d050      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	401a      	ands	r2, r3
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	429a      	cmp	r2, r3
 8003906:	d146      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003912:	f3ef 8310 	mrs	r3, PRIMASK
 8003916:	613b      	str	r3, [r7, #16]
  return(result);
 8003918:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4923      	ldr	r1, [pc, #140]	; (80039c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003944:	f3ef 8310 	mrs	r3, PRIMASK
 8003948:	61fb      	str	r3, [r7, #28]
  return(result);
 800394a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	64bb      	str	r3, [r7, #72]	; 0x48
 800394e:	2301      	movs	r3, #1
 8003950:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	438a      	bics	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	2120      	movs	r1, #32
 8003988:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2274      	movs	r2, #116	; 0x74
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e010      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	425a      	negs	r2, r3
 80039a6:	4153      	adcs	r3, r2
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	001a      	movs	r2, r3
 80039ac:	1dfb      	adds	r3, r7, #7
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d100      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80039b4:	e74b      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b014      	add	sp, #80	; 0x50
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	fffffe5f 	.word	0xfffffe5f

080039c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <USB_DisableGlobalInt+0x30>)
 80039ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	5a9b      	ldrh	r3, [r3, r2]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	b292      	uxth	r2, r2
 80039dc:	43d2      	mvns	r2, r2
 80039de:	b292      	uxth	r2, r2
 80039e0:	4013      	ands	r3, r2
 80039e2:	b299      	uxth	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b004      	add	sp, #16
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	0000bf80 	.word	0x0000bf80

080039f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039f8:	b084      	sub	sp, #16
 80039fa:	b590      	push	{r4, r7, lr}
 80039fc:	46c6      	mov	lr, r8
 80039fe:	b500      	push	{lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	2004      	movs	r0, #4
 8003a08:	2410      	movs	r4, #16
 8003a0a:	46a4      	mov	ip, r4
 8003a0c:	2408      	movs	r4, #8
 8003a0e:	46a0      	mov	r8, r4
 8003a10:	44b8      	add	r8, r7
 8003a12:	44c4      	add	ip, r8
 8003a14:	4460      	add	r0, ip
 8003a16:	6001      	str	r1, [r0, #0]
 8003a18:	6042      	str	r2, [r0, #4]
 8003a1a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	2101      	movs	r1, #1
 8003a22:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	2100      	movs	r1, #0
 8003a2a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2244      	movs	r2, #68	; 0x44
 8003a30:	2100      	movs	r1, #0
 8003a32:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2250      	movs	r2, #80	; 0x50
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b002      	add	sp, #8
 8003a44:	bc80      	pop	{r7}
 8003a46:	46b8      	mov	r8, r7
 8003a48:	bc90      	pop	{r4, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	b004      	add	sp, #16
 8003a4e:	4718      	bx	r3

08003a50 <__errno>:
 8003a50:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <__errno+0x8>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	4770      	bx	lr
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	2000000c 	.word	0x2000000c

08003a5c <__libc_init_array>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	2600      	movs	r6, #0
 8003a60:	4d0c      	ldr	r5, [pc, #48]	; (8003a94 <__libc_init_array+0x38>)
 8003a62:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <__libc_init_array+0x3c>)
 8003a64:	1b64      	subs	r4, r4, r5
 8003a66:	10a4      	asrs	r4, r4, #2
 8003a68:	42a6      	cmp	r6, r4
 8003a6a:	d109      	bne.n	8003a80 <__libc_init_array+0x24>
 8003a6c:	2600      	movs	r6, #0
 8003a6e:	f000 fc47 	bl	8004300 <_init>
 8003a72:	4d0a      	ldr	r5, [pc, #40]	; (8003a9c <__libc_init_array+0x40>)
 8003a74:	4c0a      	ldr	r4, [pc, #40]	; (8003aa0 <__libc_init_array+0x44>)
 8003a76:	1b64      	subs	r4, r4, r5
 8003a78:	10a4      	asrs	r4, r4, #2
 8003a7a:	42a6      	cmp	r6, r4
 8003a7c:	d105      	bne.n	8003a8a <__libc_init_array+0x2e>
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	00b3      	lsls	r3, r6, #2
 8003a82:	58eb      	ldr	r3, [r5, r3]
 8003a84:	4798      	blx	r3
 8003a86:	3601      	adds	r6, #1
 8003a88:	e7ee      	b.n	8003a68 <__libc_init_array+0xc>
 8003a8a:	00b3      	lsls	r3, r6, #2
 8003a8c:	58eb      	ldr	r3, [r5, r3]
 8003a8e:	4798      	blx	r3
 8003a90:	3601      	adds	r6, #1
 8003a92:	e7f2      	b.n	8003a7a <__libc_init_array+0x1e>
 8003a94:	0800441c 	.word	0x0800441c
 8003a98:	0800441c 	.word	0x0800441c
 8003a9c:	0800441c 	.word	0x0800441c
 8003aa0:	08004420 	.word	0x08004420

08003aa4 <memset>:
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	1882      	adds	r2, r0, r2
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d100      	bne.n	8003aae <memset+0xa>
 8003aac:	4770      	bx	lr
 8003aae:	7019      	strb	r1, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	e7f9      	b.n	8003aa8 <memset+0x4>

08003ab4 <siprintf>:
 8003ab4:	b40e      	push	{r1, r2, r3}
 8003ab6:	b500      	push	{lr}
 8003ab8:	490b      	ldr	r1, [pc, #44]	; (8003ae8 <siprintf+0x34>)
 8003aba:	b09c      	sub	sp, #112	; 0x70
 8003abc:	ab1d      	add	r3, sp, #116	; 0x74
 8003abe:	9002      	str	r0, [sp, #8]
 8003ac0:	9006      	str	r0, [sp, #24]
 8003ac2:	9107      	str	r1, [sp, #28]
 8003ac4:	9104      	str	r1, [sp, #16]
 8003ac6:	4809      	ldr	r0, [pc, #36]	; (8003aec <siprintf+0x38>)
 8003ac8:	4909      	ldr	r1, [pc, #36]	; (8003af0 <siprintf+0x3c>)
 8003aca:	cb04      	ldmia	r3!, {r2}
 8003acc:	9105      	str	r1, [sp, #20]
 8003ace:	6800      	ldr	r0, [r0, #0]
 8003ad0:	a902      	add	r1, sp, #8
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	f000 f870 	bl	8003bb8 <_svfiprintf_r>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9a02      	ldr	r2, [sp, #8]
 8003adc:	7013      	strb	r3, [r2, #0]
 8003ade:	b01c      	add	sp, #112	; 0x70
 8003ae0:	bc08      	pop	{r3}
 8003ae2:	b003      	add	sp, #12
 8003ae4:	4718      	bx	r3
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	7fffffff 	.word	0x7fffffff
 8003aec:	2000000c 	.word	0x2000000c
 8003af0:	ffff0208 	.word	0xffff0208

08003af4 <__ssputs_r>:
 8003af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af6:	688e      	ldr	r6, [r1, #8]
 8003af8:	b085      	sub	sp, #20
 8003afa:	0007      	movs	r7, r0
 8003afc:	000c      	movs	r4, r1
 8003afe:	9203      	str	r2, [sp, #12]
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	429e      	cmp	r6, r3
 8003b04:	d83c      	bhi.n	8003b80 <__ssputs_r+0x8c>
 8003b06:	2390      	movs	r3, #144	; 0x90
 8003b08:	898a      	ldrh	r2, [r1, #12]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	421a      	tst	r2, r3
 8003b0e:	d034      	beq.n	8003b7a <__ssputs_r+0x86>
 8003b10:	2503      	movs	r5, #3
 8003b12:	6909      	ldr	r1, [r1, #16]
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	1a5b      	subs	r3, r3, r1
 8003b18:	9302      	str	r3, [sp, #8]
 8003b1a:	6963      	ldr	r3, [r4, #20]
 8003b1c:	9802      	ldr	r0, [sp, #8]
 8003b1e:	435d      	muls	r5, r3
 8003b20:	0feb      	lsrs	r3, r5, #31
 8003b22:	195d      	adds	r5, r3, r5
 8003b24:	9b01      	ldr	r3, [sp, #4]
 8003b26:	106d      	asrs	r5, r5, #1
 8003b28:	3301      	adds	r3, #1
 8003b2a:	181b      	adds	r3, r3, r0
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	d900      	bls.n	8003b32 <__ssputs_r+0x3e>
 8003b30:	001d      	movs	r5, r3
 8003b32:	0553      	lsls	r3, r2, #21
 8003b34:	d532      	bpl.n	8003b9c <__ssputs_r+0xa8>
 8003b36:	0029      	movs	r1, r5
 8003b38:	0038      	movs	r0, r7
 8003b3a:	f000 fb31 	bl	80041a0 <_malloc_r>
 8003b3e:	1e06      	subs	r6, r0, #0
 8003b40:	d109      	bne.n	8003b56 <__ssputs_r+0x62>
 8003b42:	230c      	movs	r3, #12
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	2001      	movs	r0, #1
 8003b4a:	89a2      	ldrh	r2, [r4, #12]
 8003b4c:	4240      	negs	r0, r0
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	b005      	add	sp, #20
 8003b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b56:	9a02      	ldr	r2, [sp, #8]
 8003b58:	6921      	ldr	r1, [r4, #16]
 8003b5a:	f000 faba 	bl	80040d2 <memcpy>
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <__ssputs_r+0xc0>)
 8003b62:	401a      	ands	r2, r3
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	4313      	orrs	r3, r2
 8003b68:	81a3      	strh	r3, [r4, #12]
 8003b6a:	9b02      	ldr	r3, [sp, #8]
 8003b6c:	6126      	str	r6, [r4, #16]
 8003b6e:	18f6      	adds	r6, r6, r3
 8003b70:	6026      	str	r6, [r4, #0]
 8003b72:	6165      	str	r5, [r4, #20]
 8003b74:	9e01      	ldr	r6, [sp, #4]
 8003b76:	1aed      	subs	r5, r5, r3
 8003b78:	60a5      	str	r5, [r4, #8]
 8003b7a:	9b01      	ldr	r3, [sp, #4]
 8003b7c:	429e      	cmp	r6, r3
 8003b7e:	d900      	bls.n	8003b82 <__ssputs_r+0x8e>
 8003b80:	9e01      	ldr	r6, [sp, #4]
 8003b82:	0032      	movs	r2, r6
 8003b84:	9903      	ldr	r1, [sp, #12]
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	f000 faac 	bl	80040e4 <memmove>
 8003b8c:	68a3      	ldr	r3, [r4, #8]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	1b9b      	subs	r3, r3, r6
 8003b92:	60a3      	str	r3, [r4, #8]
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	199e      	adds	r6, r3, r6
 8003b98:	6026      	str	r6, [r4, #0]
 8003b9a:	e7da      	b.n	8003b52 <__ssputs_r+0x5e>
 8003b9c:	002a      	movs	r2, r5
 8003b9e:	0038      	movs	r0, r7
 8003ba0:	f000 fb5c 	bl	800425c <_realloc_r>
 8003ba4:	1e06      	subs	r6, r0, #0
 8003ba6:	d1e0      	bne.n	8003b6a <__ssputs_r+0x76>
 8003ba8:	0038      	movs	r0, r7
 8003baa:	6921      	ldr	r1, [r4, #16]
 8003bac:	f000 faae 	bl	800410c <_free_r>
 8003bb0:	e7c7      	b.n	8003b42 <__ssputs_r+0x4e>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	fffffb7f 	.word	0xfffffb7f

08003bb8 <_svfiprintf_r>:
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	b0a1      	sub	sp, #132	; 0x84
 8003bbc:	9003      	str	r0, [sp, #12]
 8003bbe:	001d      	movs	r5, r3
 8003bc0:	898b      	ldrh	r3, [r1, #12]
 8003bc2:	000f      	movs	r7, r1
 8003bc4:	0016      	movs	r6, r2
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	d511      	bpl.n	8003bee <_svfiprintf_r+0x36>
 8003bca:	690b      	ldr	r3, [r1, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10e      	bne.n	8003bee <_svfiprintf_r+0x36>
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	f000 fae5 	bl	80041a0 <_malloc_r>
 8003bd6:	6038      	str	r0, [r7, #0]
 8003bd8:	6138      	str	r0, [r7, #16]
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d105      	bne.n	8003bea <_svfiprintf_r+0x32>
 8003bde:	230c      	movs	r3, #12
 8003be0:	9a03      	ldr	r2, [sp, #12]
 8003be2:	3801      	subs	r0, #1
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	b021      	add	sp, #132	; 0x84
 8003be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bea:	2340      	movs	r3, #64	; 0x40
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	ac08      	add	r4, sp, #32
 8003bf2:	6163      	str	r3, [r4, #20]
 8003bf4:	3320      	adds	r3, #32
 8003bf6:	7663      	strb	r3, [r4, #25]
 8003bf8:	3310      	adds	r3, #16
 8003bfa:	76a3      	strb	r3, [r4, #26]
 8003bfc:	9507      	str	r5, [sp, #28]
 8003bfe:	0035      	movs	r5, r6
 8003c00:	782b      	ldrb	r3, [r5, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <_svfiprintf_r+0x52>
 8003c06:	2b25      	cmp	r3, #37	; 0x25
 8003c08:	d147      	bne.n	8003c9a <_svfiprintf_r+0xe2>
 8003c0a:	1bab      	subs	r3, r5, r6
 8003c0c:	9305      	str	r3, [sp, #20]
 8003c0e:	42b5      	cmp	r5, r6
 8003c10:	d00c      	beq.n	8003c2c <_svfiprintf_r+0x74>
 8003c12:	0032      	movs	r2, r6
 8003c14:	0039      	movs	r1, r7
 8003c16:	9803      	ldr	r0, [sp, #12]
 8003c18:	f7ff ff6c 	bl	8003af4 <__ssputs_r>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d100      	bne.n	8003c22 <_svfiprintf_r+0x6a>
 8003c20:	e0ae      	b.n	8003d80 <_svfiprintf_r+0x1c8>
 8003c22:	6962      	ldr	r2, [r4, #20]
 8003c24:	9b05      	ldr	r3, [sp, #20]
 8003c26:	4694      	mov	ip, r2
 8003c28:	4463      	add	r3, ip
 8003c2a:	6163      	str	r3, [r4, #20]
 8003c2c:	782b      	ldrb	r3, [r5, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d100      	bne.n	8003c34 <_svfiprintf_r+0x7c>
 8003c32:	e0a5      	b.n	8003d80 <_svfiprintf_r+0x1c8>
 8003c34:	2201      	movs	r2, #1
 8003c36:	2300      	movs	r3, #0
 8003c38:	4252      	negs	r2, r2
 8003c3a:	6062      	str	r2, [r4, #4]
 8003c3c:	a904      	add	r1, sp, #16
 8003c3e:	3254      	adds	r2, #84	; 0x54
 8003c40:	1852      	adds	r2, r2, r1
 8003c42:	1c6e      	adds	r6, r5, #1
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	60e3      	str	r3, [r4, #12]
 8003c48:	60a3      	str	r3, [r4, #8]
 8003c4a:	7013      	strb	r3, [r2, #0]
 8003c4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c4e:	2205      	movs	r2, #5
 8003c50:	7831      	ldrb	r1, [r6, #0]
 8003c52:	4854      	ldr	r0, [pc, #336]	; (8003da4 <_svfiprintf_r+0x1ec>)
 8003c54:	f000 fa32 	bl	80040bc <memchr>
 8003c58:	1c75      	adds	r5, r6, #1
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d11f      	bne.n	8003c9e <_svfiprintf_r+0xe6>
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	06d3      	lsls	r3, r2, #27
 8003c62:	d504      	bpl.n	8003c6e <_svfiprintf_r+0xb6>
 8003c64:	2353      	movs	r3, #83	; 0x53
 8003c66:	a904      	add	r1, sp, #16
 8003c68:	185b      	adds	r3, r3, r1
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	7019      	strb	r1, [r3, #0]
 8003c6e:	0713      	lsls	r3, r2, #28
 8003c70:	d504      	bpl.n	8003c7c <_svfiprintf_r+0xc4>
 8003c72:	2353      	movs	r3, #83	; 0x53
 8003c74:	a904      	add	r1, sp, #16
 8003c76:	185b      	adds	r3, r3, r1
 8003c78:	212b      	movs	r1, #43	; 0x2b
 8003c7a:	7019      	strb	r1, [r3, #0]
 8003c7c:	7833      	ldrb	r3, [r6, #0]
 8003c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c80:	d016      	beq.n	8003cb0 <_svfiprintf_r+0xf8>
 8003c82:	0035      	movs	r5, r6
 8003c84:	2100      	movs	r1, #0
 8003c86:	200a      	movs	r0, #10
 8003c88:	68e3      	ldr	r3, [r4, #12]
 8003c8a:	782a      	ldrb	r2, [r5, #0]
 8003c8c:	1c6e      	adds	r6, r5, #1
 8003c8e:	3a30      	subs	r2, #48	; 0x30
 8003c90:	2a09      	cmp	r2, #9
 8003c92:	d94e      	bls.n	8003d32 <_svfiprintf_r+0x17a>
 8003c94:	2900      	cmp	r1, #0
 8003c96:	d111      	bne.n	8003cbc <_svfiprintf_r+0x104>
 8003c98:	e017      	b.n	8003cca <_svfiprintf_r+0x112>
 8003c9a:	3501      	adds	r5, #1
 8003c9c:	e7b0      	b.n	8003c00 <_svfiprintf_r+0x48>
 8003c9e:	4b41      	ldr	r3, [pc, #260]	; (8003da4 <_svfiprintf_r+0x1ec>)
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	1ac0      	subs	r0, r0, r3
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4083      	lsls	r3, r0
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	002e      	movs	r6, r5
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	e7ce      	b.n	8003c4e <_svfiprintf_r+0x96>
 8003cb0:	9b07      	ldr	r3, [sp, #28]
 8003cb2:	1d19      	adds	r1, r3, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	9107      	str	r1, [sp, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	db01      	blt.n	8003cc0 <_svfiprintf_r+0x108>
 8003cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cbe:	e004      	b.n	8003cca <_svfiprintf_r+0x112>
 8003cc0:	425b      	negs	r3, r3
 8003cc2:	60e3      	str	r3, [r4, #12]
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	782b      	ldrb	r3, [r5, #0]
 8003ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8003cce:	d10a      	bne.n	8003ce6 <_svfiprintf_r+0x12e>
 8003cd0:	786b      	ldrb	r3, [r5, #1]
 8003cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd4:	d135      	bne.n	8003d42 <_svfiprintf_r+0x18a>
 8003cd6:	9b07      	ldr	r3, [sp, #28]
 8003cd8:	3502      	adds	r5, #2
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	9207      	str	r2, [sp, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	db2b      	blt.n	8003d3c <_svfiprintf_r+0x184>
 8003ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce6:	4e30      	ldr	r6, [pc, #192]	; (8003da8 <_svfiprintf_r+0x1f0>)
 8003ce8:	2203      	movs	r2, #3
 8003cea:	0030      	movs	r0, r6
 8003cec:	7829      	ldrb	r1, [r5, #0]
 8003cee:	f000 f9e5 	bl	80040bc <memchr>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d006      	beq.n	8003d04 <_svfiprintf_r+0x14c>
 8003cf6:	2340      	movs	r3, #64	; 0x40
 8003cf8:	1b80      	subs	r0, r0, r6
 8003cfa:	4083      	lsls	r3, r0
 8003cfc:	6822      	ldr	r2, [r4, #0]
 8003cfe:	3501      	adds	r5, #1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	7829      	ldrb	r1, [r5, #0]
 8003d06:	2206      	movs	r2, #6
 8003d08:	4828      	ldr	r0, [pc, #160]	; (8003dac <_svfiprintf_r+0x1f4>)
 8003d0a:	1c6e      	adds	r6, r5, #1
 8003d0c:	7621      	strb	r1, [r4, #24]
 8003d0e:	f000 f9d5 	bl	80040bc <memchr>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d03c      	beq.n	8003d90 <_svfiprintf_r+0x1d8>
 8003d16:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <_svfiprintf_r+0x1f8>)
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d125      	bne.n	8003d68 <_svfiprintf_r+0x1b0>
 8003d1c:	2207      	movs	r2, #7
 8003d1e:	9b07      	ldr	r3, [sp, #28]
 8003d20:	3307      	adds	r3, #7
 8003d22:	4393      	bics	r3, r2
 8003d24:	3308      	adds	r3, #8
 8003d26:	9307      	str	r3, [sp, #28]
 8003d28:	6963      	ldr	r3, [r4, #20]
 8003d2a:	9a04      	ldr	r2, [sp, #16]
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	6163      	str	r3, [r4, #20]
 8003d30:	e765      	b.n	8003bfe <_svfiprintf_r+0x46>
 8003d32:	4343      	muls	r3, r0
 8003d34:	0035      	movs	r5, r6
 8003d36:	2101      	movs	r1, #1
 8003d38:	189b      	adds	r3, r3, r2
 8003d3a:	e7a6      	b.n	8003c8a <_svfiprintf_r+0xd2>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	425b      	negs	r3, r3
 8003d40:	e7d0      	b.n	8003ce4 <_svfiprintf_r+0x12c>
 8003d42:	2300      	movs	r3, #0
 8003d44:	200a      	movs	r0, #10
 8003d46:	001a      	movs	r2, r3
 8003d48:	3501      	adds	r5, #1
 8003d4a:	6063      	str	r3, [r4, #4]
 8003d4c:	7829      	ldrb	r1, [r5, #0]
 8003d4e:	1c6e      	adds	r6, r5, #1
 8003d50:	3930      	subs	r1, #48	; 0x30
 8003d52:	2909      	cmp	r1, #9
 8003d54:	d903      	bls.n	8003d5e <_svfiprintf_r+0x1a6>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0c5      	beq.n	8003ce6 <_svfiprintf_r+0x12e>
 8003d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d5c:	e7c3      	b.n	8003ce6 <_svfiprintf_r+0x12e>
 8003d5e:	4342      	muls	r2, r0
 8003d60:	0035      	movs	r5, r6
 8003d62:	2301      	movs	r3, #1
 8003d64:	1852      	adds	r2, r2, r1
 8003d66:	e7f1      	b.n	8003d4c <_svfiprintf_r+0x194>
 8003d68:	ab07      	add	r3, sp, #28
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	003a      	movs	r2, r7
 8003d6e:	0021      	movs	r1, r4
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <_svfiprintf_r+0x1fc>)
 8003d72:	9803      	ldr	r0, [sp, #12]
 8003d74:	e000      	b.n	8003d78 <_svfiprintf_r+0x1c0>
 8003d76:	bf00      	nop
 8003d78:	9004      	str	r0, [sp, #16]
 8003d7a:	9b04      	ldr	r3, [sp, #16]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	d1d3      	bne.n	8003d28 <_svfiprintf_r+0x170>
 8003d80:	89bb      	ldrh	r3, [r7, #12]
 8003d82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d84:	065b      	lsls	r3, r3, #25
 8003d86:	d400      	bmi.n	8003d8a <_svfiprintf_r+0x1d2>
 8003d88:	e72d      	b.n	8003be6 <_svfiprintf_r+0x2e>
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	4240      	negs	r0, r0
 8003d8e:	e72a      	b.n	8003be6 <_svfiprintf_r+0x2e>
 8003d90:	ab07      	add	r3, sp, #28
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	003a      	movs	r2, r7
 8003d96:	0021      	movs	r1, r4
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <_svfiprintf_r+0x1fc>)
 8003d9a:	9803      	ldr	r0, [sp, #12]
 8003d9c:	f000 f87c 	bl	8003e98 <_printf_i>
 8003da0:	e7ea      	b.n	8003d78 <_svfiprintf_r+0x1c0>
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	080043e0 	.word	0x080043e0
 8003da8:	080043e6 	.word	0x080043e6
 8003dac:	080043ea 	.word	0x080043ea
 8003db0:	00000000 	.word	0x00000000
 8003db4:	08003af5 	.word	0x08003af5

08003db8 <_printf_common>:
 8003db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dba:	0015      	movs	r5, r2
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	688a      	ldr	r2, [r1, #8]
 8003dc0:	690b      	ldr	r3, [r1, #16]
 8003dc2:	000c      	movs	r4, r1
 8003dc4:	9000      	str	r0, [sp, #0]
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	da00      	bge.n	8003dcc <_printf_common+0x14>
 8003dca:	0013      	movs	r3, r2
 8003dcc:	0022      	movs	r2, r4
 8003dce:	602b      	str	r3, [r5, #0]
 8003dd0:	3243      	adds	r2, #67	; 0x43
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d001      	beq.n	8003ddc <_printf_common+0x24>
 8003dd8:	3301      	adds	r3, #1
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	069b      	lsls	r3, r3, #26
 8003de0:	d502      	bpl.n	8003de8 <_printf_common+0x30>
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	3302      	adds	r3, #2
 8003de6:	602b      	str	r3, [r5, #0]
 8003de8:	6822      	ldr	r2, [r4, #0]
 8003dea:	2306      	movs	r3, #6
 8003dec:	0017      	movs	r7, r2
 8003dee:	401f      	ands	r7, r3
 8003df0:	421a      	tst	r2, r3
 8003df2:	d027      	beq.n	8003e44 <_printf_common+0x8c>
 8003df4:	0023      	movs	r3, r4
 8003df6:	3343      	adds	r3, #67	; 0x43
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	1e5a      	subs	r2, r3, #1
 8003dfc:	4193      	sbcs	r3, r2
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d430      	bmi.n	8003e66 <_printf_common+0xae>
 8003e04:	0022      	movs	r2, r4
 8003e06:	9901      	ldr	r1, [sp, #4]
 8003e08:	9800      	ldr	r0, [sp, #0]
 8003e0a:	9e08      	ldr	r6, [sp, #32]
 8003e0c:	3243      	adds	r2, #67	; 0x43
 8003e0e:	47b0      	blx	r6
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d025      	beq.n	8003e60 <_printf_common+0xa8>
 8003e14:	2306      	movs	r3, #6
 8003e16:	6820      	ldr	r0, [r4, #0]
 8003e18:	682a      	ldr	r2, [r5, #0]
 8003e1a:	68e1      	ldr	r1, [r4, #12]
 8003e1c:	2500      	movs	r5, #0
 8003e1e:	4003      	ands	r3, r0
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d103      	bne.n	8003e2c <_printf_common+0x74>
 8003e24:	1a8d      	subs	r5, r1, r2
 8003e26:	43eb      	mvns	r3, r5
 8003e28:	17db      	asrs	r3, r3, #31
 8003e2a:	401d      	ands	r5, r3
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	6922      	ldr	r2, [r4, #16]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	dd01      	ble.n	8003e38 <_printf_common+0x80>
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	18ed      	adds	r5, r5, r3
 8003e38:	2700      	movs	r7, #0
 8003e3a:	42bd      	cmp	r5, r7
 8003e3c:	d120      	bne.n	8003e80 <_printf_common+0xc8>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e010      	b.n	8003e64 <_printf_common+0xac>
 8003e42:	3701      	adds	r7, #1
 8003e44:	68e3      	ldr	r3, [r4, #12]
 8003e46:	682a      	ldr	r2, [r5, #0]
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	42bb      	cmp	r3, r7
 8003e4c:	ddd2      	ble.n	8003df4 <_printf_common+0x3c>
 8003e4e:	0022      	movs	r2, r4
 8003e50:	2301      	movs	r3, #1
 8003e52:	9901      	ldr	r1, [sp, #4]
 8003e54:	9800      	ldr	r0, [sp, #0]
 8003e56:	9e08      	ldr	r6, [sp, #32]
 8003e58:	3219      	adds	r2, #25
 8003e5a:	47b0      	blx	r6
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d1f0      	bne.n	8003e42 <_printf_common+0x8a>
 8003e60:	2001      	movs	r0, #1
 8003e62:	4240      	negs	r0, r0
 8003e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e66:	2030      	movs	r0, #48	; 0x30
 8003e68:	18e1      	adds	r1, r4, r3
 8003e6a:	3143      	adds	r1, #67	; 0x43
 8003e6c:	7008      	strb	r0, [r1, #0]
 8003e6e:	0021      	movs	r1, r4
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	3145      	adds	r1, #69	; 0x45
 8003e74:	7809      	ldrb	r1, [r1, #0]
 8003e76:	18a2      	adds	r2, r4, r2
 8003e78:	3243      	adds	r2, #67	; 0x43
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	7011      	strb	r1, [r2, #0]
 8003e7e:	e7c1      	b.n	8003e04 <_printf_common+0x4c>
 8003e80:	0022      	movs	r2, r4
 8003e82:	2301      	movs	r3, #1
 8003e84:	9901      	ldr	r1, [sp, #4]
 8003e86:	9800      	ldr	r0, [sp, #0]
 8003e88:	9e08      	ldr	r6, [sp, #32]
 8003e8a:	321a      	adds	r2, #26
 8003e8c:	47b0      	blx	r6
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d0e6      	beq.n	8003e60 <_printf_common+0xa8>
 8003e92:	3701      	adds	r7, #1
 8003e94:	e7d1      	b.n	8003e3a <_printf_common+0x82>
	...

08003e98 <_printf_i>:
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	b08b      	sub	sp, #44	; 0x2c
 8003e9c:	9206      	str	r2, [sp, #24]
 8003e9e:	000a      	movs	r2, r1
 8003ea0:	3243      	adds	r2, #67	; 0x43
 8003ea2:	9307      	str	r3, [sp, #28]
 8003ea4:	9005      	str	r0, [sp, #20]
 8003ea6:	9204      	str	r2, [sp, #16]
 8003ea8:	7e0a      	ldrb	r2, [r1, #24]
 8003eaa:	000c      	movs	r4, r1
 8003eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003eae:	2a78      	cmp	r2, #120	; 0x78
 8003eb0:	d806      	bhi.n	8003ec0 <_printf_i+0x28>
 8003eb2:	2a62      	cmp	r2, #98	; 0x62
 8003eb4:	d808      	bhi.n	8003ec8 <_printf_i+0x30>
 8003eb6:	2a00      	cmp	r2, #0
 8003eb8:	d100      	bne.n	8003ebc <_printf_i+0x24>
 8003eba:	e0c0      	b.n	800403e <_printf_i+0x1a6>
 8003ebc:	2a58      	cmp	r2, #88	; 0x58
 8003ebe:	d052      	beq.n	8003f66 <_printf_i+0xce>
 8003ec0:	0026      	movs	r6, r4
 8003ec2:	3642      	adds	r6, #66	; 0x42
 8003ec4:	7032      	strb	r2, [r6, #0]
 8003ec6:	e022      	b.n	8003f0e <_printf_i+0x76>
 8003ec8:	0010      	movs	r0, r2
 8003eca:	3863      	subs	r0, #99	; 0x63
 8003ecc:	2815      	cmp	r0, #21
 8003ece:	d8f7      	bhi.n	8003ec0 <_printf_i+0x28>
 8003ed0:	f7fc f91a 	bl	8000108 <__gnu_thumb1_case_shi>
 8003ed4:	001f0016 	.word	0x001f0016
 8003ed8:	fff6fff6 	.word	0xfff6fff6
 8003edc:	fff6fff6 	.word	0xfff6fff6
 8003ee0:	fff6001f 	.word	0xfff6001f
 8003ee4:	fff6fff6 	.word	0xfff6fff6
 8003ee8:	00a8fff6 	.word	0x00a8fff6
 8003eec:	009a0036 	.word	0x009a0036
 8003ef0:	fff6fff6 	.word	0xfff6fff6
 8003ef4:	fff600b9 	.word	0xfff600b9
 8003ef8:	fff60036 	.word	0xfff60036
 8003efc:	009efff6 	.word	0x009efff6
 8003f00:	0026      	movs	r6, r4
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	3642      	adds	r6, #66	; 0x42
 8003f06:	1d11      	adds	r1, r2, #4
 8003f08:	6019      	str	r1, [r3, #0]
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	7033      	strb	r3, [r6, #0]
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e0a7      	b.n	8004062 <_printf_i+0x1ca>
 8003f12:	6808      	ldr	r0, [r1, #0]
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	1d0a      	adds	r2, r1, #4
 8003f18:	0605      	lsls	r5, r0, #24
 8003f1a:	d50b      	bpl.n	8003f34 <_printf_i+0x9c>
 8003f1c:	680d      	ldr	r5, [r1, #0]
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	da03      	bge.n	8003f2c <_printf_i+0x94>
 8003f24:	232d      	movs	r3, #45	; 0x2d
 8003f26:	9a04      	ldr	r2, [sp, #16]
 8003f28:	426d      	negs	r5, r5
 8003f2a:	7013      	strb	r3, [r2, #0]
 8003f2c:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <_printf_i+0x21c>)
 8003f2e:	270a      	movs	r7, #10
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	e032      	b.n	8003f9a <_printf_i+0x102>
 8003f34:	680d      	ldr	r5, [r1, #0]
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	0641      	lsls	r1, r0, #25
 8003f3a:	d5f1      	bpl.n	8003f20 <_printf_i+0x88>
 8003f3c:	b22d      	sxth	r5, r5
 8003f3e:	e7ef      	b.n	8003f20 <_printf_i+0x88>
 8003f40:	680d      	ldr	r5, [r1, #0]
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	1d08      	adds	r0, r1, #4
 8003f46:	6018      	str	r0, [r3, #0]
 8003f48:	062e      	lsls	r6, r5, #24
 8003f4a:	d501      	bpl.n	8003f50 <_printf_i+0xb8>
 8003f4c:	680d      	ldr	r5, [r1, #0]
 8003f4e:	e003      	b.n	8003f58 <_printf_i+0xc0>
 8003f50:	066d      	lsls	r5, r5, #25
 8003f52:	d5fb      	bpl.n	8003f4c <_printf_i+0xb4>
 8003f54:	680d      	ldr	r5, [r1, #0]
 8003f56:	b2ad      	uxth	r5, r5
 8003f58:	4b56      	ldr	r3, [pc, #344]	; (80040b4 <_printf_i+0x21c>)
 8003f5a:	270a      	movs	r7, #10
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	2a6f      	cmp	r2, #111	; 0x6f
 8003f60:	d117      	bne.n	8003f92 <_printf_i+0xfa>
 8003f62:	2708      	movs	r7, #8
 8003f64:	e015      	b.n	8003f92 <_printf_i+0xfa>
 8003f66:	3145      	adds	r1, #69	; 0x45
 8003f68:	700a      	strb	r2, [r1, #0]
 8003f6a:	4a52      	ldr	r2, [pc, #328]	; (80040b4 <_printf_i+0x21c>)
 8003f6c:	9203      	str	r2, [sp, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	6821      	ldr	r1, [r4, #0]
 8003f72:	ca20      	ldmia	r2!, {r5}
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	0608      	lsls	r0, r1, #24
 8003f78:	d550      	bpl.n	800401c <_printf_i+0x184>
 8003f7a:	07cb      	lsls	r3, r1, #31
 8003f7c:	d502      	bpl.n	8003f84 <_printf_i+0xec>
 8003f7e:	2320      	movs	r3, #32
 8003f80:	4319      	orrs	r1, r3
 8003f82:	6021      	str	r1, [r4, #0]
 8003f84:	2710      	movs	r7, #16
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	d103      	bne.n	8003f92 <_printf_i+0xfa>
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	439a      	bics	r2, r3
 8003f90:	6022      	str	r2, [r4, #0]
 8003f92:	0023      	movs	r3, r4
 8003f94:	2200      	movs	r2, #0
 8003f96:	3343      	adds	r3, #67	; 0x43
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	60a3      	str	r3, [r4, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db03      	blt.n	8003faa <_printf_i+0x112>
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	6821      	ldr	r1, [r4, #0]
 8003fa6:	4391      	bics	r1, r2
 8003fa8:	6021      	str	r1, [r4, #0]
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	d102      	bne.n	8003fb4 <_printf_i+0x11c>
 8003fae:	9e04      	ldr	r6, [sp, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <_printf_i+0x136>
 8003fb4:	9e04      	ldr	r6, [sp, #16]
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	0039      	movs	r1, r7
 8003fba:	f7fc f935 	bl	8000228 <__aeabi_uidivmod>
 8003fbe:	9b03      	ldr	r3, [sp, #12]
 8003fc0:	3e01      	subs	r6, #1
 8003fc2:	5c5b      	ldrb	r3, [r3, r1]
 8003fc4:	7033      	strb	r3, [r6, #0]
 8003fc6:	002b      	movs	r3, r5
 8003fc8:	0005      	movs	r5, r0
 8003fca:	429f      	cmp	r7, r3
 8003fcc:	d9f3      	bls.n	8003fb6 <_printf_i+0x11e>
 8003fce:	2f08      	cmp	r7, #8
 8003fd0:	d109      	bne.n	8003fe6 <_printf_i+0x14e>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	07db      	lsls	r3, r3, #31
 8003fd6:	d506      	bpl.n	8003fe6 <_printf_i+0x14e>
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	6922      	ldr	r2, [r4, #16]
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	dc02      	bgt.n	8003fe6 <_printf_i+0x14e>
 8003fe0:	2330      	movs	r3, #48	; 0x30
 8003fe2:	3e01      	subs	r6, #1
 8003fe4:	7033      	strb	r3, [r6, #0]
 8003fe6:	9b04      	ldr	r3, [sp, #16]
 8003fe8:	1b9b      	subs	r3, r3, r6
 8003fea:	6123      	str	r3, [r4, #16]
 8003fec:	9b07      	ldr	r3, [sp, #28]
 8003fee:	0021      	movs	r1, r4
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	9805      	ldr	r0, [sp, #20]
 8003ff4:	9b06      	ldr	r3, [sp, #24]
 8003ff6:	aa09      	add	r2, sp, #36	; 0x24
 8003ff8:	f7ff fede 	bl	8003db8 <_printf_common>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d135      	bne.n	800406c <_printf_i+0x1d4>
 8004000:	2001      	movs	r0, #1
 8004002:	4240      	negs	r0, r0
 8004004:	b00b      	add	sp, #44	; 0x2c
 8004006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004008:	2220      	movs	r2, #32
 800400a:	6809      	ldr	r1, [r1, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	0022      	movs	r2, r4
 8004012:	2178      	movs	r1, #120	; 0x78
 8004014:	3245      	adds	r2, #69	; 0x45
 8004016:	7011      	strb	r1, [r2, #0]
 8004018:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <_printf_i+0x220>)
 800401a:	e7a7      	b.n	8003f6c <_printf_i+0xd4>
 800401c:	0648      	lsls	r0, r1, #25
 800401e:	d5ac      	bpl.n	8003f7a <_printf_i+0xe2>
 8004020:	b2ad      	uxth	r5, r5
 8004022:	e7aa      	b.n	8003f7a <_printf_i+0xe2>
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	680d      	ldr	r5, [r1, #0]
 8004028:	1d10      	adds	r0, r2, #4
 800402a:	6949      	ldr	r1, [r1, #20]
 800402c:	6018      	str	r0, [r3, #0]
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	062e      	lsls	r6, r5, #24
 8004032:	d501      	bpl.n	8004038 <_printf_i+0x1a0>
 8004034:	6019      	str	r1, [r3, #0]
 8004036:	e002      	b.n	800403e <_printf_i+0x1a6>
 8004038:	066d      	lsls	r5, r5, #25
 800403a:	d5fb      	bpl.n	8004034 <_printf_i+0x19c>
 800403c:	8019      	strh	r1, [r3, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	9e04      	ldr	r6, [sp, #16]
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	e7d2      	b.n	8003fec <_printf_i+0x154>
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	1d11      	adds	r1, r2, #4
 800404a:	6019      	str	r1, [r3, #0]
 800404c:	6816      	ldr	r6, [r2, #0]
 800404e:	2100      	movs	r1, #0
 8004050:	0030      	movs	r0, r6
 8004052:	6862      	ldr	r2, [r4, #4]
 8004054:	f000 f832 	bl	80040bc <memchr>
 8004058:	2800      	cmp	r0, #0
 800405a:	d001      	beq.n	8004060 <_printf_i+0x1c8>
 800405c:	1b80      	subs	r0, r0, r6
 800405e:	6060      	str	r0, [r4, #4]
 8004060:	6863      	ldr	r3, [r4, #4]
 8004062:	6123      	str	r3, [r4, #16]
 8004064:	2300      	movs	r3, #0
 8004066:	9a04      	ldr	r2, [sp, #16]
 8004068:	7013      	strb	r3, [r2, #0]
 800406a:	e7bf      	b.n	8003fec <_printf_i+0x154>
 800406c:	6923      	ldr	r3, [r4, #16]
 800406e:	0032      	movs	r2, r6
 8004070:	9906      	ldr	r1, [sp, #24]
 8004072:	9805      	ldr	r0, [sp, #20]
 8004074:	9d07      	ldr	r5, [sp, #28]
 8004076:	47a8      	blx	r5
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d0c1      	beq.n	8004000 <_printf_i+0x168>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	079b      	lsls	r3, r3, #30
 8004080:	d415      	bmi.n	80040ae <_printf_i+0x216>
 8004082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	4298      	cmp	r0, r3
 8004088:	dabc      	bge.n	8004004 <_printf_i+0x16c>
 800408a:	0018      	movs	r0, r3
 800408c:	e7ba      	b.n	8004004 <_printf_i+0x16c>
 800408e:	0022      	movs	r2, r4
 8004090:	2301      	movs	r3, #1
 8004092:	9906      	ldr	r1, [sp, #24]
 8004094:	9805      	ldr	r0, [sp, #20]
 8004096:	9e07      	ldr	r6, [sp, #28]
 8004098:	3219      	adds	r2, #25
 800409a:	47b0      	blx	r6
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d0af      	beq.n	8004000 <_printf_i+0x168>
 80040a0:	3501      	adds	r5, #1
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	42ab      	cmp	r3, r5
 80040aa:	dcf0      	bgt.n	800408e <_printf_i+0x1f6>
 80040ac:	e7e9      	b.n	8004082 <_printf_i+0x1ea>
 80040ae:	2500      	movs	r5, #0
 80040b0:	e7f7      	b.n	80040a2 <_printf_i+0x20a>
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	080043f1 	.word	0x080043f1
 80040b8:	08004402 	.word	0x08004402

080040bc <memchr>:
 80040bc:	b2c9      	uxtb	r1, r1
 80040be:	1882      	adds	r2, r0, r2
 80040c0:	4290      	cmp	r0, r2
 80040c2:	d101      	bne.n	80040c8 <memchr+0xc>
 80040c4:	2000      	movs	r0, #0
 80040c6:	4770      	bx	lr
 80040c8:	7803      	ldrb	r3, [r0, #0]
 80040ca:	428b      	cmp	r3, r1
 80040cc:	d0fb      	beq.n	80040c6 <memchr+0xa>
 80040ce:	3001      	adds	r0, #1
 80040d0:	e7f6      	b.n	80040c0 <memchr+0x4>

080040d2 <memcpy>:
 80040d2:	2300      	movs	r3, #0
 80040d4:	b510      	push	{r4, lr}
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d100      	bne.n	80040dc <memcpy+0xa>
 80040da:	bd10      	pop	{r4, pc}
 80040dc:	5ccc      	ldrb	r4, [r1, r3]
 80040de:	54c4      	strb	r4, [r0, r3]
 80040e0:	3301      	adds	r3, #1
 80040e2:	e7f8      	b.n	80040d6 <memcpy+0x4>

080040e4 <memmove>:
 80040e4:	b510      	push	{r4, lr}
 80040e6:	4288      	cmp	r0, r1
 80040e8:	d902      	bls.n	80040f0 <memmove+0xc>
 80040ea:	188b      	adds	r3, r1, r2
 80040ec:	4298      	cmp	r0, r3
 80040ee:	d303      	bcc.n	80040f8 <memmove+0x14>
 80040f0:	2300      	movs	r3, #0
 80040f2:	e007      	b.n	8004104 <memmove+0x20>
 80040f4:	5c8b      	ldrb	r3, [r1, r2]
 80040f6:	5483      	strb	r3, [r0, r2]
 80040f8:	3a01      	subs	r2, #1
 80040fa:	d2fb      	bcs.n	80040f4 <memmove+0x10>
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	5ccc      	ldrb	r4, [r1, r3]
 8004100:	54c4      	strb	r4, [r0, r3]
 8004102:	3301      	adds	r3, #1
 8004104:	429a      	cmp	r2, r3
 8004106:	d1fa      	bne.n	80040fe <memmove+0x1a>
 8004108:	e7f8      	b.n	80040fc <memmove+0x18>
	...

0800410c <_free_r>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	0005      	movs	r5, r0
 8004110:	2900      	cmp	r1, #0
 8004112:	d010      	beq.n	8004136 <_free_r+0x2a>
 8004114:	1f0c      	subs	r4, r1, #4
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da00      	bge.n	800411e <_free_r+0x12>
 800411c:	18e4      	adds	r4, r4, r3
 800411e:	0028      	movs	r0, r5
 8004120:	f000 f8d4 	bl	80042cc <__malloc_lock>
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <_free_r+0x90>)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <_free_r+0x2c>
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	6014      	str	r4, [r2, #0]
 8004130:	0028      	movs	r0, r5
 8004132:	f000 f8d3 	bl	80042dc <__malloc_unlock>
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	42a3      	cmp	r3, r4
 800413a:	d908      	bls.n	800414e <_free_r+0x42>
 800413c:	6821      	ldr	r1, [r4, #0]
 800413e:	1860      	adds	r0, r4, r1
 8004140:	4283      	cmp	r3, r0
 8004142:	d1f3      	bne.n	800412c <_free_r+0x20>
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	1841      	adds	r1, r0, r1
 800414a:	6021      	str	r1, [r4, #0]
 800414c:	e7ee      	b.n	800412c <_free_r+0x20>
 800414e:	001a      	movs	r2, r3
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <_free_r+0x4e>
 8004156:	42a3      	cmp	r3, r4
 8004158:	d9f9      	bls.n	800414e <_free_r+0x42>
 800415a:	6811      	ldr	r1, [r2, #0]
 800415c:	1850      	adds	r0, r2, r1
 800415e:	42a0      	cmp	r0, r4
 8004160:	d10b      	bne.n	800417a <_free_r+0x6e>
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	1809      	adds	r1, r1, r0
 8004166:	1850      	adds	r0, r2, r1
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	4283      	cmp	r3, r0
 800416c:	d1e0      	bne.n	8004130 <_free_r+0x24>
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	1841      	adds	r1, r0, r1
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	6053      	str	r3, [r2, #4]
 8004178:	e7da      	b.n	8004130 <_free_r+0x24>
 800417a:	42a0      	cmp	r0, r4
 800417c:	d902      	bls.n	8004184 <_free_r+0x78>
 800417e:	230c      	movs	r3, #12
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	e7d5      	b.n	8004130 <_free_r+0x24>
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	1860      	adds	r0, r4, r1
 8004188:	4283      	cmp	r3, r0
 800418a:	d103      	bne.n	8004194 <_free_r+0x88>
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	1841      	adds	r1, r0, r1
 8004192:	6021      	str	r1, [r4, #0]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	6054      	str	r4, [r2, #4]
 8004198:	e7ca      	b.n	8004130 <_free_r+0x24>
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	20000090 	.word	0x20000090

080041a0 <_malloc_r>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	2303      	movs	r3, #3
 80041a4:	1ccd      	adds	r5, r1, #3
 80041a6:	439d      	bics	r5, r3
 80041a8:	3508      	adds	r5, #8
 80041aa:	0006      	movs	r6, r0
 80041ac:	2d0c      	cmp	r5, #12
 80041ae:	d21f      	bcs.n	80041f0 <_malloc_r+0x50>
 80041b0:	250c      	movs	r5, #12
 80041b2:	42a9      	cmp	r1, r5
 80041b4:	d81e      	bhi.n	80041f4 <_malloc_r+0x54>
 80041b6:	0030      	movs	r0, r6
 80041b8:	f000 f888 	bl	80042cc <__malloc_lock>
 80041bc:	4925      	ldr	r1, [pc, #148]	; (8004254 <_malloc_r+0xb4>)
 80041be:	680a      	ldr	r2, [r1, #0]
 80041c0:	0014      	movs	r4, r2
 80041c2:	2c00      	cmp	r4, #0
 80041c4:	d11a      	bne.n	80041fc <_malloc_r+0x5c>
 80041c6:	4f24      	ldr	r7, [pc, #144]	; (8004258 <_malloc_r+0xb8>)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <_malloc_r+0x38>
 80041ce:	0021      	movs	r1, r4
 80041d0:	0030      	movs	r0, r6
 80041d2:	f000 f869 	bl	80042a8 <_sbrk_r>
 80041d6:	6038      	str	r0, [r7, #0]
 80041d8:	0029      	movs	r1, r5
 80041da:	0030      	movs	r0, r6
 80041dc:	f000 f864 	bl	80042a8 <_sbrk_r>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d12b      	bne.n	800423c <_malloc_r+0x9c>
 80041e4:	230c      	movs	r3, #12
 80041e6:	0030      	movs	r0, r6
 80041e8:	6033      	str	r3, [r6, #0]
 80041ea:	f000 f877 	bl	80042dc <__malloc_unlock>
 80041ee:	e003      	b.n	80041f8 <_malloc_r+0x58>
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	dade      	bge.n	80041b2 <_malloc_r+0x12>
 80041f4:	230c      	movs	r3, #12
 80041f6:	6033      	str	r3, [r6, #0]
 80041f8:	2000      	movs	r0, #0
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	1b5b      	subs	r3, r3, r5
 8004200:	d419      	bmi.n	8004236 <_malloc_r+0x96>
 8004202:	2b0b      	cmp	r3, #11
 8004204:	d903      	bls.n	800420e <_malloc_r+0x6e>
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	18e4      	adds	r4, r4, r3
 800420a:	6025      	str	r5, [r4, #0]
 800420c:	e003      	b.n	8004216 <_malloc_r+0x76>
 800420e:	6863      	ldr	r3, [r4, #4]
 8004210:	42a2      	cmp	r2, r4
 8004212:	d10e      	bne.n	8004232 <_malloc_r+0x92>
 8004214:	600b      	str	r3, [r1, #0]
 8004216:	0030      	movs	r0, r6
 8004218:	f000 f860 	bl	80042dc <__malloc_unlock>
 800421c:	0020      	movs	r0, r4
 800421e:	2207      	movs	r2, #7
 8004220:	300b      	adds	r0, #11
 8004222:	1d23      	adds	r3, r4, #4
 8004224:	4390      	bics	r0, r2
 8004226:	1ac2      	subs	r2, r0, r3
 8004228:	4298      	cmp	r0, r3
 800422a:	d0e6      	beq.n	80041fa <_malloc_r+0x5a>
 800422c:	1a1b      	subs	r3, r3, r0
 800422e:	50a3      	str	r3, [r4, r2]
 8004230:	e7e3      	b.n	80041fa <_malloc_r+0x5a>
 8004232:	6053      	str	r3, [r2, #4]
 8004234:	e7ef      	b.n	8004216 <_malloc_r+0x76>
 8004236:	0022      	movs	r2, r4
 8004238:	6864      	ldr	r4, [r4, #4]
 800423a:	e7c2      	b.n	80041c2 <_malloc_r+0x22>
 800423c:	2303      	movs	r3, #3
 800423e:	1cc4      	adds	r4, r0, #3
 8004240:	439c      	bics	r4, r3
 8004242:	42a0      	cmp	r0, r4
 8004244:	d0e1      	beq.n	800420a <_malloc_r+0x6a>
 8004246:	1a21      	subs	r1, r4, r0
 8004248:	0030      	movs	r0, r6
 800424a:	f000 f82d 	bl	80042a8 <_sbrk_r>
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	d1db      	bne.n	800420a <_malloc_r+0x6a>
 8004252:	e7c7      	b.n	80041e4 <_malloc_r+0x44>
 8004254:	20000090 	.word	0x20000090
 8004258:	20000094 	.word	0x20000094

0800425c <_realloc_r>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	0007      	movs	r7, r0
 8004260:	000d      	movs	r5, r1
 8004262:	0016      	movs	r6, r2
 8004264:	2900      	cmp	r1, #0
 8004266:	d105      	bne.n	8004274 <_realloc_r+0x18>
 8004268:	0011      	movs	r1, r2
 800426a:	f7ff ff99 	bl	80041a0 <_malloc_r>
 800426e:	0004      	movs	r4, r0
 8004270:	0020      	movs	r0, r4
 8004272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004274:	2a00      	cmp	r2, #0
 8004276:	d103      	bne.n	8004280 <_realloc_r+0x24>
 8004278:	f7ff ff48 	bl	800410c <_free_r>
 800427c:	0034      	movs	r4, r6
 800427e:	e7f7      	b.n	8004270 <_realloc_r+0x14>
 8004280:	f000 f834 	bl	80042ec <_malloc_usable_size_r>
 8004284:	002c      	movs	r4, r5
 8004286:	42b0      	cmp	r0, r6
 8004288:	d2f2      	bcs.n	8004270 <_realloc_r+0x14>
 800428a:	0031      	movs	r1, r6
 800428c:	0038      	movs	r0, r7
 800428e:	f7ff ff87 	bl	80041a0 <_malloc_r>
 8004292:	1e04      	subs	r4, r0, #0
 8004294:	d0ec      	beq.n	8004270 <_realloc_r+0x14>
 8004296:	0029      	movs	r1, r5
 8004298:	0032      	movs	r2, r6
 800429a:	f7ff ff1a 	bl	80040d2 <memcpy>
 800429e:	0029      	movs	r1, r5
 80042a0:	0038      	movs	r0, r7
 80042a2:	f7ff ff33 	bl	800410c <_free_r>
 80042a6:	e7e3      	b.n	8004270 <_realloc_r+0x14>

080042a8 <_sbrk_r>:
 80042a8:	2300      	movs	r3, #0
 80042aa:	b570      	push	{r4, r5, r6, lr}
 80042ac:	4d06      	ldr	r5, [pc, #24]	; (80042c8 <_sbrk_r+0x20>)
 80042ae:	0004      	movs	r4, r0
 80042b0:	0008      	movs	r0, r1
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	f7fc fe98 	bl	8000fe8 <_sbrk>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d103      	bne.n	80042c4 <_sbrk_r+0x1c>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d000      	beq.n	80042c4 <_sbrk_r+0x1c>
 80042c2:	6023      	str	r3, [r4, #0]
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	200005d8 	.word	0x200005d8

080042cc <__malloc_lock>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	4802      	ldr	r0, [pc, #8]	; (80042d8 <__malloc_lock+0xc>)
 80042d0:	f000 f814 	bl	80042fc <__retarget_lock_acquire_recursive>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	200005e0 	.word	0x200005e0

080042dc <__malloc_unlock>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	4802      	ldr	r0, [pc, #8]	; (80042e8 <__malloc_unlock+0xc>)
 80042e0:	f000 f80d 	bl	80042fe <__retarget_lock_release_recursive>
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	200005e0 	.word	0x200005e0

080042ec <_malloc_usable_size_r>:
 80042ec:	1f0b      	subs	r3, r1, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	1f18      	subs	r0, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da01      	bge.n	80042fa <_malloc_usable_size_r+0xe>
 80042f6:	580b      	ldr	r3, [r1, r0]
 80042f8:	18c0      	adds	r0, r0, r3
 80042fa:	4770      	bx	lr

080042fc <__retarget_lock_acquire_recursive>:
 80042fc:	4770      	bx	lr

080042fe <__retarget_lock_release_recursive>:
 80042fe:	4770      	bx	lr

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
