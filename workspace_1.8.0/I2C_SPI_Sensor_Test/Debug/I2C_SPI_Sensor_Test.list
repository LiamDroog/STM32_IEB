
I2C_SPI_Sensor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080051a0  080051a0  000151a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800539c  0800539c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a4  080053a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a8  080053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  080053b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080053b8  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014693  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002783  00000000  00000000  000346c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d811  00000000  00000000  00036e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  00044660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001280  00000000  00000000  00045150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001dc0  00000000  00000000  000463d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015046  00000000  00000000  00048190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000774ba  00000000  00000000  0005d1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d4690  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002440  00000000  00000000  000d46e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005184 	.word	0x08005184

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005184 	.word	0x08005184

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	1c10      	adds	r0, r2, #0
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	1c19      	adds	r1, r3, #0
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f001 f865 	bl	80014fc <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 ffaf 	bl	80013a0 <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f857 	bl	80014fc <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f84d 	bl	80014fc <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ffd1 	bl	8001418 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 ffc7 	bl	8001418 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_uldivmod>:
 8000498:	2b00      	cmp	r3, #0
 800049a:	d111      	bne.n	80004c0 <__aeabi_uldivmod+0x28>
 800049c:	2a00      	cmp	r2, #0
 800049e:	d10f      	bne.n	80004c0 <__aeabi_uldivmod+0x28>
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d100      	bne.n	80004a6 <__aeabi_uldivmod+0xe>
 80004a4:	2800      	cmp	r0, #0
 80004a6:	d002      	beq.n	80004ae <__aeabi_uldivmod+0x16>
 80004a8:	2100      	movs	r1, #0
 80004aa:	43c9      	mvns	r1, r1
 80004ac:	1c08      	adds	r0, r1, #0
 80004ae:	b407      	push	{r0, r1, r2}
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <__aeabi_uldivmod+0x24>)
 80004b2:	a102      	add	r1, pc, #8	; (adr r1, 80004bc <__aeabi_uldivmod+0x24>)
 80004b4:	1840      	adds	r0, r0, r1
 80004b6:	9002      	str	r0, [sp, #8]
 80004b8:	bd03      	pop	{r0, r1, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	ffffff5d 	.word	0xffffff5d
 80004c0:	b403      	push	{r0, r1}
 80004c2:	4668      	mov	r0, sp
 80004c4:	b501      	push	{r0, lr}
 80004c6:	9802      	ldr	r0, [sp, #8]
 80004c8:	f000 f84c 	bl	8000564 <__udivmoddi4>
 80004cc:	9b01      	ldr	r3, [sp, #4]
 80004ce:	469e      	mov	lr, r3
 80004d0:	b002      	add	sp, #8
 80004d2:	bc0c      	pop	{r2, r3}
 80004d4:	4770      	bx	lr
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_lmul>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	0415      	lsls	r5, r2, #16
 80004dc:	0c2d      	lsrs	r5, r5, #16
 80004de:	000f      	movs	r7, r1
 80004e0:	0001      	movs	r1, r0
 80004e2:	002e      	movs	r6, r5
 80004e4:	46c6      	mov	lr, r8
 80004e6:	4684      	mov	ip, r0
 80004e8:	0400      	lsls	r0, r0, #16
 80004ea:	0c14      	lsrs	r4, r2, #16
 80004ec:	0c00      	lsrs	r0, r0, #16
 80004ee:	0c09      	lsrs	r1, r1, #16
 80004f0:	4346      	muls	r6, r0
 80004f2:	434d      	muls	r5, r1
 80004f4:	4360      	muls	r0, r4
 80004f6:	4361      	muls	r1, r4
 80004f8:	1940      	adds	r0, r0, r5
 80004fa:	0c34      	lsrs	r4, r6, #16
 80004fc:	1824      	adds	r4, r4, r0
 80004fe:	b500      	push	{lr}
 8000500:	42a5      	cmp	r5, r4
 8000502:	d903      	bls.n	800050c <__aeabi_lmul+0x34>
 8000504:	2080      	movs	r0, #128	; 0x80
 8000506:	0240      	lsls	r0, r0, #9
 8000508:	4680      	mov	r8, r0
 800050a:	4441      	add	r1, r8
 800050c:	0c25      	lsrs	r5, r4, #16
 800050e:	186d      	adds	r5, r5, r1
 8000510:	4661      	mov	r1, ip
 8000512:	4359      	muls	r1, r3
 8000514:	437a      	muls	r2, r7
 8000516:	0430      	lsls	r0, r6, #16
 8000518:	1949      	adds	r1, r1, r5
 800051a:	0424      	lsls	r4, r4, #16
 800051c:	0c00      	lsrs	r0, r0, #16
 800051e:	1820      	adds	r0, r4, r0
 8000520:	1889      	adds	r1, r1, r2
 8000522:	bc80      	pop	{r7}
 8000524:	46b8      	mov	r8, r7
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffa7 	bl	8000484 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f001 fe4b 	bl	80021d8 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 fab2 	bl	8001ab4 <__aeabi_dsub>
 8000550:	f001 fe42 	bl	80021d8 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__udivmoddi4>:
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	4657      	mov	r7, sl
 8000568:	464e      	mov	r6, r9
 800056a:	4645      	mov	r5, r8
 800056c:	46de      	mov	lr, fp
 800056e:	b5e0      	push	{r5, r6, r7, lr}
 8000570:	0004      	movs	r4, r0
 8000572:	000d      	movs	r5, r1
 8000574:	4692      	mov	sl, r2
 8000576:	4699      	mov	r9, r3
 8000578:	b083      	sub	sp, #12
 800057a:	428b      	cmp	r3, r1
 800057c:	d830      	bhi.n	80005e0 <__udivmoddi4+0x7c>
 800057e:	d02d      	beq.n	80005dc <__udivmoddi4+0x78>
 8000580:	4649      	mov	r1, r9
 8000582:	4650      	mov	r0, sl
 8000584:	f001 fed2 	bl	800232c <__clzdi2>
 8000588:	0029      	movs	r1, r5
 800058a:	0006      	movs	r6, r0
 800058c:	0020      	movs	r0, r4
 800058e:	f001 fecd 	bl	800232c <__clzdi2>
 8000592:	1a33      	subs	r3, r6, r0
 8000594:	4698      	mov	r8, r3
 8000596:	3b20      	subs	r3, #32
 8000598:	469b      	mov	fp, r3
 800059a:	d433      	bmi.n	8000604 <__udivmoddi4+0xa0>
 800059c:	465a      	mov	r2, fp
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	4642      	mov	r2, r8
 80005a4:	001f      	movs	r7, r3
 80005a6:	4653      	mov	r3, sl
 80005a8:	4093      	lsls	r3, r2
 80005aa:	001e      	movs	r6, r3
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d83a      	bhi.n	8000626 <__udivmoddi4+0xc2>
 80005b0:	42af      	cmp	r7, r5
 80005b2:	d100      	bne.n	80005b6 <__udivmoddi4+0x52>
 80005b4:	e078      	b.n	80006a8 <__udivmoddi4+0x144>
 80005b6:	465b      	mov	r3, fp
 80005b8:	1ba4      	subs	r4, r4, r6
 80005ba:	41bd      	sbcs	r5, r7
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da00      	bge.n	80005c2 <__udivmoddi4+0x5e>
 80005c0:	e075      	b.n	80006ae <__udivmoddi4+0x14a>
 80005c2:	2200      	movs	r2, #0
 80005c4:	2300      	movs	r3, #0
 80005c6:	9200      	str	r2, [sp, #0]
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	465a      	mov	r2, fp
 80005ce:	4093      	lsls	r3, r2
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2301      	movs	r3, #1
 80005d4:	4642      	mov	r2, r8
 80005d6:	4093      	lsls	r3, r2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	e028      	b.n	800062e <__udivmoddi4+0xca>
 80005dc:	4282      	cmp	r2, r0
 80005de:	d9cf      	bls.n	8000580 <__udivmoddi4+0x1c>
 80005e0:	2200      	movs	r2, #0
 80005e2:	2300      	movs	r3, #0
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <__udivmoddi4+0x8e>
 80005ee:	601c      	str	r4, [r3, #0]
 80005f0:	605d      	str	r5, [r3, #4]
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	b003      	add	sp, #12
 80005f8:	bcf0      	pop	{r4, r5, r6, r7}
 80005fa:	46bb      	mov	fp, r7
 80005fc:	46b2      	mov	sl, r6
 80005fe:	46a9      	mov	r9, r5
 8000600:	46a0      	mov	r8, r4
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	4652      	mov	r2, sl
 800060c:	40da      	lsrs	r2, r3
 800060e:	4641      	mov	r1, r8
 8000610:	0013      	movs	r3, r2
 8000612:	464a      	mov	r2, r9
 8000614:	408a      	lsls	r2, r1
 8000616:	0017      	movs	r7, r2
 8000618:	4642      	mov	r2, r8
 800061a:	431f      	orrs	r7, r3
 800061c:	4653      	mov	r3, sl
 800061e:	4093      	lsls	r3, r2
 8000620:	001e      	movs	r6, r3
 8000622:	42af      	cmp	r7, r5
 8000624:	d9c4      	bls.n	80005b0 <__udivmoddi4+0x4c>
 8000626:	2200      	movs	r2, #0
 8000628:	2300      	movs	r3, #0
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0d9      	beq.n	80005e8 <__udivmoddi4+0x84>
 8000634:	07fb      	lsls	r3, r7, #31
 8000636:	0872      	lsrs	r2, r6, #1
 8000638:	431a      	orrs	r2, r3
 800063a:	4646      	mov	r6, r8
 800063c:	087b      	lsrs	r3, r7, #1
 800063e:	e00e      	b.n	800065e <__udivmoddi4+0xfa>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d101      	bne.n	8000648 <__udivmoddi4+0xe4>
 8000644:	42a2      	cmp	r2, r4
 8000646:	d80c      	bhi.n	8000662 <__udivmoddi4+0xfe>
 8000648:	1aa4      	subs	r4, r4, r2
 800064a:	419d      	sbcs	r5, r3
 800064c:	2001      	movs	r0, #1
 800064e:	1924      	adds	r4, r4, r4
 8000650:	416d      	adcs	r5, r5
 8000652:	2100      	movs	r1, #0
 8000654:	3e01      	subs	r6, #1
 8000656:	1824      	adds	r4, r4, r0
 8000658:	414d      	adcs	r5, r1
 800065a:	2e00      	cmp	r6, #0
 800065c:	d006      	beq.n	800066c <__udivmoddi4+0x108>
 800065e:	42ab      	cmp	r3, r5
 8000660:	d9ee      	bls.n	8000640 <__udivmoddi4+0xdc>
 8000662:	3e01      	subs	r6, #1
 8000664:	1924      	adds	r4, r4, r4
 8000666:	416d      	adcs	r5, r5
 8000668:	2e00      	cmp	r6, #0
 800066a:	d1f8      	bne.n	800065e <__udivmoddi4+0xfa>
 800066c:	9800      	ldr	r0, [sp, #0]
 800066e:	9901      	ldr	r1, [sp, #4]
 8000670:	465b      	mov	r3, fp
 8000672:	1900      	adds	r0, r0, r4
 8000674:	4169      	adcs	r1, r5
 8000676:	2b00      	cmp	r3, #0
 8000678:	db24      	blt.n	80006c4 <__udivmoddi4+0x160>
 800067a:	002b      	movs	r3, r5
 800067c:	465a      	mov	r2, fp
 800067e:	4644      	mov	r4, r8
 8000680:	40d3      	lsrs	r3, r2
 8000682:	002a      	movs	r2, r5
 8000684:	40e2      	lsrs	r2, r4
 8000686:	001c      	movs	r4, r3
 8000688:	465b      	mov	r3, fp
 800068a:	0015      	movs	r5, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	db2a      	blt.n	80006e6 <__udivmoddi4+0x182>
 8000690:	0026      	movs	r6, r4
 8000692:	409e      	lsls	r6, r3
 8000694:	0033      	movs	r3, r6
 8000696:	0026      	movs	r6, r4
 8000698:	4647      	mov	r7, r8
 800069a:	40be      	lsls	r6, r7
 800069c:	0032      	movs	r2, r6
 800069e:	1a80      	subs	r0, r0, r2
 80006a0:	4199      	sbcs	r1, r3
 80006a2:	9000      	str	r0, [sp, #0]
 80006a4:	9101      	str	r1, [sp, #4]
 80006a6:	e79f      	b.n	80005e8 <__udivmoddi4+0x84>
 80006a8:	42a3      	cmp	r3, r4
 80006aa:	d8bc      	bhi.n	8000626 <__udivmoddi4+0xc2>
 80006ac:	e783      	b.n	80005b6 <__udivmoddi4+0x52>
 80006ae:	4642      	mov	r2, r8
 80006b0:	2320      	movs	r3, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	2200      	movs	r2, #0
 80006b8:	9100      	str	r1, [sp, #0]
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	40da      	lsrs	r2, r3
 80006c0:	9201      	str	r2, [sp, #4]
 80006c2:	e786      	b.n	80005d2 <__udivmoddi4+0x6e>
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	002a      	movs	r2, r5
 80006cc:	4646      	mov	r6, r8
 80006ce:	409a      	lsls	r2, r3
 80006d0:	0023      	movs	r3, r4
 80006d2:	40f3      	lsrs	r3, r6
 80006d4:	4644      	mov	r4, r8
 80006d6:	4313      	orrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dad4      	bge.n	8000690 <__udivmoddi4+0x12c>
 80006e6:	4642      	mov	r2, r8
 80006e8:	002f      	movs	r7, r5
 80006ea:	2320      	movs	r3, #32
 80006ec:	0026      	movs	r6, r4
 80006ee:	4097      	lsls	r7, r2
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	40de      	lsrs	r6, r3
 80006f4:	003b      	movs	r3, r7
 80006f6:	4333      	orrs	r3, r6
 80006f8:	e7cd      	b.n	8000696 <__udivmoddi4+0x132>
 80006fa:	46c0      	nop			; (mov r8, r8)

080006fc <__aeabi_dadd>:
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	464f      	mov	r7, r9
 8000700:	46d6      	mov	lr, sl
 8000702:	4646      	mov	r6, r8
 8000704:	000d      	movs	r5, r1
 8000706:	0001      	movs	r1, r0
 8000708:	0018      	movs	r0, r3
 800070a:	b5c0      	push	{r6, r7, lr}
 800070c:	0017      	movs	r7, r2
 800070e:	032b      	lsls	r3, r5, #12
 8000710:	0a5a      	lsrs	r2, r3, #9
 8000712:	0f4b      	lsrs	r3, r1, #29
 8000714:	4313      	orrs	r3, r2
 8000716:	00ca      	lsls	r2, r1, #3
 8000718:	4691      	mov	r9, r2
 800071a:	0302      	lsls	r2, r0, #12
 800071c:	006e      	lsls	r6, r5, #1
 800071e:	0041      	lsls	r1, r0, #1
 8000720:	0a52      	lsrs	r2, r2, #9
 8000722:	0fec      	lsrs	r4, r5, #31
 8000724:	0f7d      	lsrs	r5, r7, #29
 8000726:	4315      	orrs	r5, r2
 8000728:	0d76      	lsrs	r6, r6, #21
 800072a:	0d49      	lsrs	r1, r1, #21
 800072c:	0fc0      	lsrs	r0, r0, #31
 800072e:	4682      	mov	sl, r0
 8000730:	46ac      	mov	ip, r5
 8000732:	00ff      	lsls	r7, r7, #3
 8000734:	1a72      	subs	r2, r6, r1
 8000736:	4284      	cmp	r4, r0
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x40>
 800073a:	e098      	b.n	800086e <__aeabi_dadd+0x172>
 800073c:	2a00      	cmp	r2, #0
 800073e:	dc00      	bgt.n	8000742 <__aeabi_dadd+0x46>
 8000740:	e081      	b.n	8000846 <__aeabi_dadd+0x14a>
 8000742:	2900      	cmp	r1, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x4c>
 8000746:	e0b6      	b.n	80008b6 <__aeabi_dadd+0x1ba>
 8000748:	49c9      	ldr	r1, [pc, #804]	; (8000a70 <__aeabi_dadd+0x374>)
 800074a:	428e      	cmp	r6, r1
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x54>
 800074e:	e172      	b.n	8000a36 <__aeabi_dadd+0x33a>
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	0028      	movs	r0, r5
 8000754:	0409      	lsls	r1, r1, #16
 8000756:	4308      	orrs	r0, r1
 8000758:	4684      	mov	ip, r0
 800075a:	2a38      	cmp	r2, #56	; 0x38
 800075c:	dd00      	ble.n	8000760 <__aeabi_dadd+0x64>
 800075e:	e15e      	b.n	8000a1e <__aeabi_dadd+0x322>
 8000760:	2a1f      	cmp	r2, #31
 8000762:	dd00      	ble.n	8000766 <__aeabi_dadd+0x6a>
 8000764:	e1ee      	b.n	8000b44 <__aeabi_dadd+0x448>
 8000766:	2020      	movs	r0, #32
 8000768:	0039      	movs	r1, r7
 800076a:	4665      	mov	r5, ip
 800076c:	1a80      	subs	r0, r0, r2
 800076e:	4087      	lsls	r7, r0
 8000770:	40d1      	lsrs	r1, r2
 8000772:	4085      	lsls	r5, r0
 8000774:	430d      	orrs	r5, r1
 8000776:	0039      	movs	r1, r7
 8000778:	1e4f      	subs	r7, r1, #1
 800077a:	41b9      	sbcs	r1, r7
 800077c:	4667      	mov	r7, ip
 800077e:	40d7      	lsrs	r7, r2
 8000780:	4329      	orrs	r1, r5
 8000782:	1bdb      	subs	r3, r3, r7
 8000784:	464a      	mov	r2, r9
 8000786:	1a55      	subs	r5, r2, r1
 8000788:	45a9      	cmp	r9, r5
 800078a:	4189      	sbcs	r1, r1
 800078c:	4249      	negs	r1, r1
 800078e:	1a5b      	subs	r3, r3, r1
 8000790:	4698      	mov	r8, r3
 8000792:	4643      	mov	r3, r8
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	d400      	bmi.n	800079a <__aeabi_dadd+0x9e>
 8000798:	e0cc      	b.n	8000934 <__aeabi_dadd+0x238>
 800079a:	4643      	mov	r3, r8
 800079c:	025b      	lsls	r3, r3, #9
 800079e:	0a5b      	lsrs	r3, r3, #9
 80007a0:	4698      	mov	r8, r3
 80007a2:	4643      	mov	r3, r8
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0xae>
 80007a8:	e12c      	b.n	8000a04 <__aeabi_dadd+0x308>
 80007aa:	4640      	mov	r0, r8
 80007ac:	f001 fda0 	bl	80022f0 <__clzsi2>
 80007b0:	0001      	movs	r1, r0
 80007b2:	3908      	subs	r1, #8
 80007b4:	2220      	movs	r2, #32
 80007b6:	0028      	movs	r0, r5
 80007b8:	4643      	mov	r3, r8
 80007ba:	1a52      	subs	r2, r2, r1
 80007bc:	408b      	lsls	r3, r1
 80007be:	40d0      	lsrs	r0, r2
 80007c0:	408d      	lsls	r5, r1
 80007c2:	4303      	orrs	r3, r0
 80007c4:	428e      	cmp	r6, r1
 80007c6:	dd00      	ble.n	80007ca <__aeabi_dadd+0xce>
 80007c8:	e117      	b.n	80009fa <__aeabi_dadd+0x2fe>
 80007ca:	1b8e      	subs	r6, r1, r6
 80007cc:	1c72      	adds	r2, r6, #1
 80007ce:	2a1f      	cmp	r2, #31
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dadd+0xd8>
 80007d2:	e1a7      	b.n	8000b24 <__aeabi_dadd+0x428>
 80007d4:	2120      	movs	r1, #32
 80007d6:	0018      	movs	r0, r3
 80007d8:	002e      	movs	r6, r5
 80007da:	1a89      	subs	r1, r1, r2
 80007dc:	408d      	lsls	r5, r1
 80007de:	4088      	lsls	r0, r1
 80007e0:	40d6      	lsrs	r6, r2
 80007e2:	40d3      	lsrs	r3, r2
 80007e4:	1e69      	subs	r1, r5, #1
 80007e6:	418d      	sbcs	r5, r1
 80007e8:	4330      	orrs	r0, r6
 80007ea:	4698      	mov	r8, r3
 80007ec:	2600      	movs	r6, #0
 80007ee:	4305      	orrs	r5, r0
 80007f0:	076b      	lsls	r3, r5, #29
 80007f2:	d009      	beq.n	8000808 <__aeabi_dadd+0x10c>
 80007f4:	230f      	movs	r3, #15
 80007f6:	402b      	ands	r3, r5
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d005      	beq.n	8000808 <__aeabi_dadd+0x10c>
 80007fc:	1d2b      	adds	r3, r5, #4
 80007fe:	42ab      	cmp	r3, r5
 8000800:	41ad      	sbcs	r5, r5
 8000802:	426d      	negs	r5, r5
 8000804:	44a8      	add	r8, r5
 8000806:	001d      	movs	r5, r3
 8000808:	4643      	mov	r3, r8
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	d400      	bmi.n	8000810 <__aeabi_dadd+0x114>
 800080e:	e094      	b.n	800093a <__aeabi_dadd+0x23e>
 8000810:	4b97      	ldr	r3, [pc, #604]	; (8000a70 <__aeabi_dadd+0x374>)
 8000812:	1c72      	adds	r2, r6, #1
 8000814:	429a      	cmp	r2, r3
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x11e>
 8000818:	e09d      	b.n	8000956 <__aeabi_dadd+0x25a>
 800081a:	4641      	mov	r1, r8
 800081c:	4b95      	ldr	r3, [pc, #596]	; (8000a74 <__aeabi_dadd+0x378>)
 800081e:	08ed      	lsrs	r5, r5, #3
 8000820:	4019      	ands	r1, r3
 8000822:	000b      	movs	r3, r1
 8000824:	0552      	lsls	r2, r2, #21
 8000826:	0749      	lsls	r1, r1, #29
 8000828:	025b      	lsls	r3, r3, #9
 800082a:	4329      	orrs	r1, r5
 800082c:	0b1b      	lsrs	r3, r3, #12
 800082e:	0d52      	lsrs	r2, r2, #21
 8000830:	0512      	lsls	r2, r2, #20
 8000832:	4313      	orrs	r3, r2
 8000834:	07e4      	lsls	r4, r4, #31
 8000836:	4323      	orrs	r3, r4
 8000838:	0008      	movs	r0, r1
 800083a:	0019      	movs	r1, r3
 800083c:	bce0      	pop	{r5, r6, r7}
 800083e:	46ba      	mov	sl, r7
 8000840:	46b1      	mov	r9, r6
 8000842:	46a8      	mov	r8, r5
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000846:	2a00      	cmp	r2, #0
 8000848:	d043      	beq.n	80008d2 <__aeabi_dadd+0x1d6>
 800084a:	1b8a      	subs	r2, r1, r6
 800084c:	2e00      	cmp	r6, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x156>
 8000850:	e12a      	b.n	8000aa8 <__aeabi_dadd+0x3ac>
 8000852:	464c      	mov	r4, r9
 8000854:	431c      	orrs	r4, r3
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x15e>
 8000858:	e1d1      	b.n	8000bfe <__aeabi_dadd+0x502>
 800085a:	1e54      	subs	r4, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x166>
 8000860:	e21f      	b.n	8000ca2 <__aeabi_dadd+0x5a6>
 8000862:	4d83      	ldr	r5, [pc, #524]	; (8000a70 <__aeabi_dadd+0x374>)
 8000864:	42aa      	cmp	r2, r5
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x16e>
 8000868:	e272      	b.n	8000d50 <__aeabi_dadd+0x654>
 800086a:	0022      	movs	r2, r4
 800086c:	e123      	b.n	8000ab6 <__aeabi_dadd+0x3ba>
 800086e:	2a00      	cmp	r2, #0
 8000870:	dc00      	bgt.n	8000874 <__aeabi_dadd+0x178>
 8000872:	e098      	b.n	80009a6 <__aeabi_dadd+0x2aa>
 8000874:	2900      	cmp	r1, #0
 8000876:	d042      	beq.n	80008fe <__aeabi_dadd+0x202>
 8000878:	497d      	ldr	r1, [pc, #500]	; (8000a70 <__aeabi_dadd+0x374>)
 800087a:	428e      	cmp	r6, r1
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x184>
 800087e:	e0da      	b.n	8000a36 <__aeabi_dadd+0x33a>
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0028      	movs	r0, r5
 8000884:	0409      	lsls	r1, r1, #16
 8000886:	4308      	orrs	r0, r1
 8000888:	4684      	mov	ip, r0
 800088a:	2a38      	cmp	r2, #56	; 0x38
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x194>
 800088e:	e129      	b.n	8000ae4 <__aeabi_dadd+0x3e8>
 8000890:	2a1f      	cmp	r2, #31
 8000892:	dc00      	bgt.n	8000896 <__aeabi_dadd+0x19a>
 8000894:	e187      	b.n	8000ba6 <__aeabi_dadd+0x4aa>
 8000896:	0011      	movs	r1, r2
 8000898:	4665      	mov	r5, ip
 800089a:	3920      	subs	r1, #32
 800089c:	40cd      	lsrs	r5, r1
 800089e:	2a20      	cmp	r2, #32
 80008a0:	d004      	beq.n	80008ac <__aeabi_dadd+0x1b0>
 80008a2:	2040      	movs	r0, #64	; 0x40
 80008a4:	4661      	mov	r1, ip
 80008a6:	1a82      	subs	r2, r0, r2
 80008a8:	4091      	lsls	r1, r2
 80008aa:	430f      	orrs	r7, r1
 80008ac:	0039      	movs	r1, r7
 80008ae:	1e4f      	subs	r7, r1, #1
 80008b0:	41b9      	sbcs	r1, r7
 80008b2:	430d      	orrs	r5, r1
 80008b4:	e11b      	b.n	8000aee <__aeabi_dadd+0x3f2>
 80008b6:	0029      	movs	r1, r5
 80008b8:	4339      	orrs	r1, r7
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x1c2>
 80008bc:	e0b5      	b.n	8000a2a <__aeabi_dadd+0x32e>
 80008be:	1e51      	subs	r1, r2, #1
 80008c0:	2a01      	cmp	r2, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x1ca>
 80008c4:	e1ab      	b.n	8000c1e <__aeabi_dadd+0x522>
 80008c6:	486a      	ldr	r0, [pc, #424]	; (8000a70 <__aeabi_dadd+0x374>)
 80008c8:	4282      	cmp	r2, r0
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x1d2>
 80008cc:	e1b2      	b.n	8000c34 <__aeabi_dadd+0x538>
 80008ce:	000a      	movs	r2, r1
 80008d0:	e743      	b.n	800075a <__aeabi_dadd+0x5e>
 80008d2:	4969      	ldr	r1, [pc, #420]	; (8000a78 <__aeabi_dadd+0x37c>)
 80008d4:	1c75      	adds	r5, r6, #1
 80008d6:	420d      	tst	r5, r1
 80008d8:	d000      	beq.n	80008dc <__aeabi_dadd+0x1e0>
 80008da:	e0cf      	b.n	8000a7c <__aeabi_dadd+0x380>
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x1e6>
 80008e0:	e193      	b.n	8000c0a <__aeabi_dadd+0x50e>
 80008e2:	4649      	mov	r1, r9
 80008e4:	4319      	orrs	r1, r3
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x1ee>
 80008e8:	e1d1      	b.n	8000c8e <__aeabi_dadd+0x592>
 80008ea:	4661      	mov	r1, ip
 80008ec:	4339      	orrs	r1, r7
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x1f6>
 80008f0:	e1e3      	b.n	8000cba <__aeabi_dadd+0x5be>
 80008f2:	4649      	mov	r1, r9
 80008f4:	0758      	lsls	r0, r3, #29
 80008f6:	08c9      	lsrs	r1, r1, #3
 80008f8:	4301      	orrs	r1, r0
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	e026      	b.n	800094c <__aeabi_dadd+0x250>
 80008fe:	0029      	movs	r1, r5
 8000900:	4339      	orrs	r1, r7
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x20a>
 8000904:	e091      	b.n	8000a2a <__aeabi_dadd+0x32e>
 8000906:	1e51      	subs	r1, r2, #1
 8000908:	2a01      	cmp	r2, #1
 800090a:	d005      	beq.n	8000918 <__aeabi_dadd+0x21c>
 800090c:	4858      	ldr	r0, [pc, #352]	; (8000a70 <__aeabi_dadd+0x374>)
 800090e:	4282      	cmp	r2, r0
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x218>
 8000912:	e18f      	b.n	8000c34 <__aeabi_dadd+0x538>
 8000914:	000a      	movs	r2, r1
 8000916:	e7b8      	b.n	800088a <__aeabi_dadd+0x18e>
 8000918:	003d      	movs	r5, r7
 800091a:	444d      	add	r5, r9
 800091c:	454d      	cmp	r5, r9
 800091e:	4189      	sbcs	r1, r1
 8000920:	4463      	add	r3, ip
 8000922:	4698      	mov	r8, r3
 8000924:	4249      	negs	r1, r1
 8000926:	4488      	add	r8, r1
 8000928:	4643      	mov	r3, r8
 800092a:	2602      	movs	r6, #2
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	d500      	bpl.n	8000932 <__aeabi_dadd+0x236>
 8000930:	e0eb      	b.n	8000b0a <__aeabi_dadd+0x40e>
 8000932:	3e01      	subs	r6, #1
 8000934:	076b      	lsls	r3, r5, #29
 8000936:	d000      	beq.n	800093a <__aeabi_dadd+0x23e>
 8000938:	e75c      	b.n	80007f4 <__aeabi_dadd+0xf8>
 800093a:	4643      	mov	r3, r8
 800093c:	08e9      	lsrs	r1, r5, #3
 800093e:	075a      	lsls	r2, r3, #29
 8000940:	4311      	orrs	r1, r2
 8000942:	0032      	movs	r2, r6
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	484a      	ldr	r0, [pc, #296]	; (8000a70 <__aeabi_dadd+0x374>)
 8000948:	4282      	cmp	r2, r0
 800094a:	d021      	beq.n	8000990 <__aeabi_dadd+0x294>
 800094c:	031b      	lsls	r3, r3, #12
 800094e:	0552      	lsls	r2, r2, #21
 8000950:	0b1b      	lsrs	r3, r3, #12
 8000952:	0d52      	lsrs	r2, r2, #21
 8000954:	e76c      	b.n	8000830 <__aeabi_dadd+0x134>
 8000956:	2300      	movs	r3, #0
 8000958:	2100      	movs	r1, #0
 800095a:	e769      	b.n	8000830 <__aeabi_dadd+0x134>
 800095c:	002a      	movs	r2, r5
 800095e:	433a      	orrs	r2, r7
 8000960:	d069      	beq.n	8000a36 <__aeabi_dadd+0x33a>
 8000962:	464a      	mov	r2, r9
 8000964:	0758      	lsls	r0, r3, #29
 8000966:	08d1      	lsrs	r1, r2, #3
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	031b      	lsls	r3, r3, #12
 800096e:	4308      	orrs	r0, r1
 8000970:	421a      	tst	r2, r3
 8000972:	d007      	beq.n	8000984 <__aeabi_dadd+0x288>
 8000974:	0029      	movs	r1, r5
 8000976:	08ed      	lsrs	r5, r5, #3
 8000978:	421d      	tst	r5, r3
 800097a:	d103      	bne.n	8000984 <__aeabi_dadd+0x288>
 800097c:	002a      	movs	r2, r5
 800097e:	08ff      	lsrs	r7, r7, #3
 8000980:	0748      	lsls	r0, r1, #29
 8000982:	4338      	orrs	r0, r7
 8000984:	0f43      	lsrs	r3, r0, #29
 8000986:	00c1      	lsls	r1, r0, #3
 8000988:	075b      	lsls	r3, r3, #29
 800098a:	08c9      	lsrs	r1, r1, #3
 800098c:	4319      	orrs	r1, r3
 800098e:	0013      	movs	r3, r2
 8000990:	000a      	movs	r2, r1
 8000992:	431a      	orrs	r2, r3
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x29c>
 8000996:	e213      	b.n	8000dc0 <__aeabi_dadd+0x6c4>
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	0312      	lsls	r2, r2, #12
 800099c:	4313      	orrs	r3, r2
 800099e:	031b      	lsls	r3, r3, #12
 80009a0:	4a33      	ldr	r2, [pc, #204]	; (8000a70 <__aeabi_dadd+0x374>)
 80009a2:	0b1b      	lsrs	r3, r3, #12
 80009a4:	e744      	b.n	8000830 <__aeabi_dadd+0x134>
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d04b      	beq.n	8000a42 <__aeabi_dadd+0x346>
 80009aa:	1b8a      	subs	r2, r1, r6
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x2b6>
 80009b0:	e0e7      	b.n	8000b82 <__aeabi_dadd+0x486>
 80009b2:	482f      	ldr	r0, [pc, #188]	; (8000a70 <__aeabi_dadd+0x374>)
 80009b4:	4281      	cmp	r1, r0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x2be>
 80009b8:	e195      	b.n	8000ce6 <__aeabi_dadd+0x5ea>
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	0400      	lsls	r0, r0, #16
 80009be:	4303      	orrs	r3, r0
 80009c0:	2a38      	cmp	r2, #56	; 0x38
 80009c2:	dd00      	ble.n	80009c6 <__aeabi_dadd+0x2ca>
 80009c4:	e143      	b.n	8000c4e <__aeabi_dadd+0x552>
 80009c6:	2a1f      	cmp	r2, #31
 80009c8:	dd00      	ble.n	80009cc <__aeabi_dadd+0x2d0>
 80009ca:	e1db      	b.n	8000d84 <__aeabi_dadd+0x688>
 80009cc:	2020      	movs	r0, #32
 80009ce:	001d      	movs	r5, r3
 80009d0:	464e      	mov	r6, r9
 80009d2:	1a80      	subs	r0, r0, r2
 80009d4:	4085      	lsls	r5, r0
 80009d6:	40d6      	lsrs	r6, r2
 80009d8:	4335      	orrs	r5, r6
 80009da:	464e      	mov	r6, r9
 80009dc:	4086      	lsls	r6, r0
 80009de:	0030      	movs	r0, r6
 80009e0:	40d3      	lsrs	r3, r2
 80009e2:	1e46      	subs	r6, r0, #1
 80009e4:	41b0      	sbcs	r0, r6
 80009e6:	449c      	add	ip, r3
 80009e8:	4305      	orrs	r5, r0
 80009ea:	19ed      	adds	r5, r5, r7
 80009ec:	42bd      	cmp	r5, r7
 80009ee:	419b      	sbcs	r3, r3
 80009f0:	425b      	negs	r3, r3
 80009f2:	4463      	add	r3, ip
 80009f4:	4698      	mov	r8, r3
 80009f6:	000e      	movs	r6, r1
 80009f8:	e07f      	b.n	8000afa <__aeabi_dadd+0x3fe>
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <__aeabi_dadd+0x378>)
 80009fc:	1a76      	subs	r6, r6, r1
 80009fe:	4013      	ands	r3, r2
 8000a00:	4698      	mov	r8, r3
 8000a02:	e6f5      	b.n	80007f0 <__aeabi_dadd+0xf4>
 8000a04:	0028      	movs	r0, r5
 8000a06:	f001 fc73 	bl	80022f0 <__clzsi2>
 8000a0a:	0001      	movs	r1, r0
 8000a0c:	3118      	adds	r1, #24
 8000a0e:	291f      	cmp	r1, #31
 8000a10:	dc00      	bgt.n	8000a14 <__aeabi_dadd+0x318>
 8000a12:	e6cf      	b.n	80007b4 <__aeabi_dadd+0xb8>
 8000a14:	002b      	movs	r3, r5
 8000a16:	3808      	subs	r0, #8
 8000a18:	4083      	lsls	r3, r0
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e6d2      	b.n	80007c4 <__aeabi_dadd+0xc8>
 8000a1e:	4662      	mov	r2, ip
 8000a20:	433a      	orrs	r2, r7
 8000a22:	0011      	movs	r1, r2
 8000a24:	1e4f      	subs	r7, r1, #1
 8000a26:	41b9      	sbcs	r1, r7
 8000a28:	e6ac      	b.n	8000784 <__aeabi_dadd+0x88>
 8000a2a:	4649      	mov	r1, r9
 8000a2c:	0758      	lsls	r0, r3, #29
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	4301      	orrs	r1, r0
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	e787      	b.n	8000946 <__aeabi_dadd+0x24a>
 8000a36:	4649      	mov	r1, r9
 8000a38:	075a      	lsls	r2, r3, #29
 8000a3a:	08c9      	lsrs	r1, r1, #3
 8000a3c:	4311      	orrs	r1, r2
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	e7a6      	b.n	8000990 <__aeabi_dadd+0x294>
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <__aeabi_dadd+0x37c>)
 8000a44:	1c70      	adds	r0, r6, #1
 8000a46:	4208      	tst	r0, r1
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x350>
 8000a4a:	e0bb      	b.n	8000bc4 <__aeabi_dadd+0x4c8>
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x356>
 8000a50:	e114      	b.n	8000c7c <__aeabi_dadd+0x580>
 8000a52:	4649      	mov	r1, r9
 8000a54:	4319      	orrs	r1, r3
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x35e>
 8000a58:	e175      	b.n	8000d46 <__aeabi_dadd+0x64a>
 8000a5a:	0029      	movs	r1, r5
 8000a5c:	4339      	orrs	r1, r7
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_dadd+0x366>
 8000a60:	e17e      	b.n	8000d60 <__aeabi_dadd+0x664>
 8000a62:	4649      	mov	r1, r9
 8000a64:	0758      	lsls	r0, r3, #29
 8000a66:	08c9      	lsrs	r1, r1, #3
 8000a68:	4301      	orrs	r1, r0
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	e76e      	b.n	800094c <__aeabi_dadd+0x250>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	000007ff 	.word	0x000007ff
 8000a74:	ff7fffff 	.word	0xff7fffff
 8000a78:	000007fe 	.word	0x000007fe
 8000a7c:	4649      	mov	r1, r9
 8000a7e:	1bcd      	subs	r5, r1, r7
 8000a80:	4661      	mov	r1, ip
 8000a82:	1a58      	subs	r0, r3, r1
 8000a84:	45a9      	cmp	r9, r5
 8000a86:	4189      	sbcs	r1, r1
 8000a88:	4249      	negs	r1, r1
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	0001      	movs	r1, r0
 8000a8e:	4640      	mov	r0, r8
 8000a90:	1a09      	subs	r1, r1, r0
 8000a92:	4688      	mov	r8, r1
 8000a94:	0209      	lsls	r1, r1, #8
 8000a96:	d500      	bpl.n	8000a9a <__aeabi_dadd+0x39e>
 8000a98:	e0a6      	b.n	8000be8 <__aeabi_dadd+0x4ec>
 8000a9a:	4641      	mov	r1, r8
 8000a9c:	4329      	orrs	r1, r5
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x3a6>
 8000aa0:	e67f      	b.n	80007a2 <__aeabi_dadd+0xa6>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	e751      	b.n	800094c <__aeabi_dadd+0x250>
 8000aa8:	4cc7      	ldr	r4, [pc, #796]	; (8000dc8 <__aeabi_dadd+0x6cc>)
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x3b4>
 8000aae:	e0c7      	b.n	8000c40 <__aeabi_dadd+0x544>
 8000ab0:	2480      	movs	r4, #128	; 0x80
 8000ab2:	0424      	lsls	r4, r4, #16
 8000ab4:	4323      	orrs	r3, r4
 8000ab6:	2a38      	cmp	r2, #56	; 0x38
 8000ab8:	dc54      	bgt.n	8000b64 <__aeabi_dadd+0x468>
 8000aba:	2a1f      	cmp	r2, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x3c4>
 8000abe:	e0cc      	b.n	8000c5a <__aeabi_dadd+0x55e>
 8000ac0:	2420      	movs	r4, #32
 8000ac2:	4648      	mov	r0, r9
 8000ac4:	1aa4      	subs	r4, r4, r2
 8000ac6:	001d      	movs	r5, r3
 8000ac8:	464e      	mov	r6, r9
 8000aca:	40a0      	lsls	r0, r4
 8000acc:	40d6      	lsrs	r6, r2
 8000ace:	40a5      	lsls	r5, r4
 8000ad0:	0004      	movs	r4, r0
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	4335      	orrs	r5, r6
 8000ad8:	1e66      	subs	r6, r4, #1
 8000ada:	41b4      	sbcs	r4, r6
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	469c      	mov	ip, r3
 8000ae0:	4325      	orrs	r5, r4
 8000ae2:	e044      	b.n	8000b6e <__aeabi_dadd+0x472>
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	433a      	orrs	r2, r7
 8000ae8:	0015      	movs	r5, r2
 8000aea:	1e6f      	subs	r7, r5, #1
 8000aec:	41bd      	sbcs	r5, r7
 8000aee:	444d      	add	r5, r9
 8000af0:	454d      	cmp	r5, r9
 8000af2:	4189      	sbcs	r1, r1
 8000af4:	4249      	negs	r1, r1
 8000af6:	4688      	mov	r8, r1
 8000af8:	4498      	add	r8, r3
 8000afa:	4643      	mov	r3, r8
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	d400      	bmi.n	8000b02 <__aeabi_dadd+0x406>
 8000b00:	e718      	b.n	8000934 <__aeabi_dadd+0x238>
 8000b02:	4bb1      	ldr	r3, [pc, #708]	; (8000dc8 <__aeabi_dadd+0x6cc>)
 8000b04:	3601      	adds	r6, #1
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d049      	beq.n	8000b9e <__aeabi_dadd+0x4a2>
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	4baf      	ldr	r3, [pc, #700]	; (8000dcc <__aeabi_dadd+0x6d0>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	401a      	ands	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	086a      	lsrs	r2, r5, #1
 8000b16:	400d      	ands	r5, r1
 8000b18:	4315      	orrs	r5, r2
 8000b1a:	07d9      	lsls	r1, r3, #31
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	4698      	mov	r8, r3
 8000b20:	430d      	orrs	r5, r1
 8000b22:	e665      	b.n	80007f0 <__aeabi_dadd+0xf4>
 8000b24:	0018      	movs	r0, r3
 8000b26:	3e1f      	subs	r6, #31
 8000b28:	40f0      	lsrs	r0, r6
 8000b2a:	2a20      	cmp	r2, #32
 8000b2c:	d003      	beq.n	8000b36 <__aeabi_dadd+0x43a>
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	1a8a      	subs	r2, r1, r2
 8000b32:	4093      	lsls	r3, r2
 8000b34:	431d      	orrs	r5, r3
 8000b36:	1e69      	subs	r1, r5, #1
 8000b38:	418d      	sbcs	r5, r1
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	4698      	mov	r8, r3
 8000b40:	4305      	orrs	r5, r0
 8000b42:	e6f7      	b.n	8000934 <__aeabi_dadd+0x238>
 8000b44:	0011      	movs	r1, r2
 8000b46:	4665      	mov	r5, ip
 8000b48:	3920      	subs	r1, #32
 8000b4a:	40cd      	lsrs	r5, r1
 8000b4c:	2a20      	cmp	r2, #32
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_dadd+0x45e>
 8000b50:	2040      	movs	r0, #64	; 0x40
 8000b52:	4661      	mov	r1, ip
 8000b54:	1a82      	subs	r2, r0, r2
 8000b56:	4091      	lsls	r1, r2
 8000b58:	430f      	orrs	r7, r1
 8000b5a:	0039      	movs	r1, r7
 8000b5c:	1e4f      	subs	r7, r1, #1
 8000b5e:	41b9      	sbcs	r1, r7
 8000b60:	4329      	orrs	r1, r5
 8000b62:	e60f      	b.n	8000784 <__aeabi_dadd+0x88>
 8000b64:	464a      	mov	r2, r9
 8000b66:	4313      	orrs	r3, r2
 8000b68:	001d      	movs	r5, r3
 8000b6a:	1e6b      	subs	r3, r5, #1
 8000b6c:	419d      	sbcs	r5, r3
 8000b6e:	1b7d      	subs	r5, r7, r5
 8000b70:	42af      	cmp	r7, r5
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4662      	mov	r2, ip
 8000b76:	425b      	negs	r3, r3
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	4654      	mov	r4, sl
 8000b7e:	000e      	movs	r6, r1
 8000b80:	e607      	b.n	8000792 <__aeabi_dadd+0x96>
 8000b82:	4648      	mov	r0, r9
 8000b84:	4318      	orrs	r0, r3
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dadd+0x48e>
 8000b88:	e0b3      	b.n	8000cf2 <__aeabi_dadd+0x5f6>
 8000b8a:	1e50      	subs	r0, r2, #1
 8000b8c:	2a01      	cmp	r2, #1
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x496>
 8000b90:	e10d      	b.n	8000dae <__aeabi_dadd+0x6b2>
 8000b92:	4d8d      	ldr	r5, [pc, #564]	; (8000dc8 <__aeabi_dadd+0x6cc>)
 8000b94:	42aa      	cmp	r2, r5
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x49e>
 8000b98:	e0a5      	b.n	8000ce6 <__aeabi_dadd+0x5ea>
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	e710      	b.n	80009c0 <__aeabi_dadd+0x2c4>
 8000b9e:	0032      	movs	r2, r6
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	e644      	b.n	8000830 <__aeabi_dadd+0x134>
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	0038      	movs	r0, r7
 8000baa:	1a89      	subs	r1, r1, r2
 8000bac:	4665      	mov	r5, ip
 8000bae:	408f      	lsls	r7, r1
 8000bb0:	408d      	lsls	r5, r1
 8000bb2:	40d0      	lsrs	r0, r2
 8000bb4:	1e79      	subs	r1, r7, #1
 8000bb6:	418f      	sbcs	r7, r1
 8000bb8:	4305      	orrs	r5, r0
 8000bba:	433d      	orrs	r5, r7
 8000bbc:	4667      	mov	r7, ip
 8000bbe:	40d7      	lsrs	r7, r2
 8000bc0:	19db      	adds	r3, r3, r7
 8000bc2:	e794      	b.n	8000aee <__aeabi_dadd+0x3f2>
 8000bc4:	4a80      	ldr	r2, [pc, #512]	; (8000dc8 <__aeabi_dadd+0x6cc>)
 8000bc6:	4290      	cmp	r0, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x4d0>
 8000bca:	e0ec      	b.n	8000da6 <__aeabi_dadd+0x6aa>
 8000bcc:	0039      	movs	r1, r7
 8000bce:	4449      	add	r1, r9
 8000bd0:	4549      	cmp	r1, r9
 8000bd2:	4192      	sbcs	r2, r2
 8000bd4:	4463      	add	r3, ip
 8000bd6:	4252      	negs	r2, r2
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	07dd      	lsls	r5, r3, #31
 8000bdc:	0849      	lsrs	r1, r1, #1
 8000bde:	085b      	lsrs	r3, r3, #1
 8000be0:	4698      	mov	r8, r3
 8000be2:	0006      	movs	r6, r0
 8000be4:	430d      	orrs	r5, r1
 8000be6:	e6a5      	b.n	8000934 <__aeabi_dadd+0x238>
 8000be8:	464a      	mov	r2, r9
 8000bea:	1abd      	subs	r5, r7, r2
 8000bec:	42af      	cmp	r7, r5
 8000bee:	4189      	sbcs	r1, r1
 8000bf0:	4662      	mov	r2, ip
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	1a5b      	subs	r3, r3, r1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	4654      	mov	r4, sl
 8000bfc:	e5d1      	b.n	80007a2 <__aeabi_dadd+0xa6>
 8000bfe:	076c      	lsls	r4, r5, #29
 8000c00:	08f9      	lsrs	r1, r7, #3
 8000c02:	4321      	orrs	r1, r4
 8000c04:	08eb      	lsrs	r3, r5, #3
 8000c06:	0004      	movs	r4, r0
 8000c08:	e69d      	b.n	8000946 <__aeabi_dadd+0x24a>
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	d175      	bne.n	8000cfc <__aeabi_dadd+0x600>
 8000c10:	4661      	mov	r1, ip
 8000c12:	4339      	orrs	r1, r7
 8000c14:	d114      	bne.n	8000c40 <__aeabi_dadd+0x544>
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	2400      	movs	r4, #0
 8000c1a:	031b      	lsls	r3, r3, #12
 8000c1c:	e6bc      	b.n	8000998 <__aeabi_dadd+0x29c>
 8000c1e:	464a      	mov	r2, r9
 8000c20:	1bd5      	subs	r5, r2, r7
 8000c22:	45a9      	cmp	r9, r5
 8000c24:	4189      	sbcs	r1, r1
 8000c26:	4662      	mov	r2, ip
 8000c28:	4249      	negs	r1, r1
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	4698      	mov	r8, r3
 8000c30:	2601      	movs	r6, #1
 8000c32:	e5ae      	b.n	8000792 <__aeabi_dadd+0x96>
 8000c34:	464a      	mov	r2, r9
 8000c36:	08d1      	lsrs	r1, r2, #3
 8000c38:	075a      	lsls	r2, r3, #29
 8000c3a:	4311      	orrs	r1, r2
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	e6a7      	b.n	8000990 <__aeabi_dadd+0x294>
 8000c40:	4663      	mov	r3, ip
 8000c42:	08f9      	lsrs	r1, r7, #3
 8000c44:	075a      	lsls	r2, r3, #29
 8000c46:	4654      	mov	r4, sl
 8000c48:	4311      	orrs	r1, r2
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	e6a0      	b.n	8000990 <__aeabi_dadd+0x294>
 8000c4e:	464a      	mov	r2, r9
 8000c50:	4313      	orrs	r3, r2
 8000c52:	001d      	movs	r5, r3
 8000c54:	1e6b      	subs	r3, r5, #1
 8000c56:	419d      	sbcs	r5, r3
 8000c58:	e6c7      	b.n	80009ea <__aeabi_dadd+0x2ee>
 8000c5a:	0014      	movs	r4, r2
 8000c5c:	001e      	movs	r6, r3
 8000c5e:	3c20      	subs	r4, #32
 8000c60:	40e6      	lsrs	r6, r4
 8000c62:	2a20      	cmp	r2, #32
 8000c64:	d005      	beq.n	8000c72 <__aeabi_dadd+0x576>
 8000c66:	2440      	movs	r4, #64	; 0x40
 8000c68:	1aa2      	subs	r2, r4, r2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	464a      	mov	r2, r9
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	4691      	mov	r9, r2
 8000c72:	464d      	mov	r5, r9
 8000c74:	1e6b      	subs	r3, r5, #1
 8000c76:	419d      	sbcs	r5, r3
 8000c78:	4335      	orrs	r5, r6
 8000c7a:	e778      	b.n	8000b6e <__aeabi_dadd+0x472>
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	d000      	beq.n	8000c84 <__aeabi_dadd+0x588>
 8000c82:	e66b      	b.n	800095c <__aeabi_dadd+0x260>
 8000c84:	076b      	lsls	r3, r5, #29
 8000c86:	08f9      	lsrs	r1, r7, #3
 8000c88:	4319      	orrs	r1, r3
 8000c8a:	08eb      	lsrs	r3, r5, #3
 8000c8c:	e680      	b.n	8000990 <__aeabi_dadd+0x294>
 8000c8e:	4661      	mov	r1, ip
 8000c90:	4339      	orrs	r1, r7
 8000c92:	d054      	beq.n	8000d3e <__aeabi_dadd+0x642>
 8000c94:	4663      	mov	r3, ip
 8000c96:	08f9      	lsrs	r1, r7, #3
 8000c98:	075c      	lsls	r4, r3, #29
 8000c9a:	4321      	orrs	r1, r4
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	0004      	movs	r4, r0
 8000ca0:	e654      	b.n	800094c <__aeabi_dadd+0x250>
 8000ca2:	464a      	mov	r2, r9
 8000ca4:	1abd      	subs	r5, r7, r2
 8000ca6:	42af      	cmp	r7, r5
 8000ca8:	4189      	sbcs	r1, r1
 8000caa:	4662      	mov	r2, ip
 8000cac:	4249      	negs	r1, r1
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	4698      	mov	r8, r3
 8000cb4:	0004      	movs	r4, r0
 8000cb6:	2601      	movs	r6, #1
 8000cb8:	e56b      	b.n	8000792 <__aeabi_dadd+0x96>
 8000cba:	464a      	mov	r2, r9
 8000cbc:	1bd5      	subs	r5, r2, r7
 8000cbe:	45a9      	cmp	r9, r5
 8000cc0:	4189      	sbcs	r1, r1
 8000cc2:	4662      	mov	r2, ip
 8000cc4:	4249      	negs	r1, r1
 8000cc6:	1a9a      	subs	r2, r3, r2
 8000cc8:	1a52      	subs	r2, r2, r1
 8000cca:	4690      	mov	r8, r2
 8000ccc:	0212      	lsls	r2, r2, #8
 8000cce:	d532      	bpl.n	8000d36 <__aeabi_dadd+0x63a>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1abd      	subs	r5, r7, r2
 8000cd4:	42af      	cmp	r7, r5
 8000cd6:	4189      	sbcs	r1, r1
 8000cd8:	4662      	mov	r2, ip
 8000cda:	4249      	negs	r1, r1
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	1a5b      	subs	r3, r3, r1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	e584      	b.n	80007f0 <__aeabi_dadd+0xf4>
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	08f9      	lsrs	r1, r7, #3
 8000cea:	075a      	lsls	r2, r3, #29
 8000cec:	4311      	orrs	r1, r2
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	e64e      	b.n	8000990 <__aeabi_dadd+0x294>
 8000cf2:	08f9      	lsrs	r1, r7, #3
 8000cf4:	0768      	lsls	r0, r5, #29
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	08eb      	lsrs	r3, r5, #3
 8000cfa:	e624      	b.n	8000946 <__aeabi_dadd+0x24a>
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	433a      	orrs	r2, r7
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x608>
 8000d02:	e698      	b.n	8000a36 <__aeabi_dadd+0x33a>
 8000d04:	464a      	mov	r2, r9
 8000d06:	08d1      	lsrs	r1, r2, #3
 8000d08:	075a      	lsls	r2, r3, #29
 8000d0a:	4311      	orrs	r1, r2
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	031b      	lsls	r3, r3, #12
 8000d12:	421a      	tst	r2, r3
 8000d14:	d008      	beq.n	8000d28 <__aeabi_dadd+0x62c>
 8000d16:	4660      	mov	r0, ip
 8000d18:	08c5      	lsrs	r5, r0, #3
 8000d1a:	421d      	tst	r5, r3
 8000d1c:	d104      	bne.n	8000d28 <__aeabi_dadd+0x62c>
 8000d1e:	4654      	mov	r4, sl
 8000d20:	002a      	movs	r2, r5
 8000d22:	08f9      	lsrs	r1, r7, #3
 8000d24:	0743      	lsls	r3, r0, #29
 8000d26:	4319      	orrs	r1, r3
 8000d28:	0f4b      	lsrs	r3, r1, #29
 8000d2a:	00c9      	lsls	r1, r1, #3
 8000d2c:	075b      	lsls	r3, r3, #29
 8000d2e:	08c9      	lsrs	r1, r1, #3
 8000d30:	4319      	orrs	r1, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	e62c      	b.n	8000990 <__aeabi_dadd+0x294>
 8000d36:	4641      	mov	r1, r8
 8000d38:	4329      	orrs	r1, r5
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_dadd+0x642>
 8000d3c:	e5fa      	b.n	8000934 <__aeabi_dadd+0x238>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	000a      	movs	r2, r1
 8000d42:	2400      	movs	r4, #0
 8000d44:	e602      	b.n	800094c <__aeabi_dadd+0x250>
 8000d46:	076b      	lsls	r3, r5, #29
 8000d48:	08f9      	lsrs	r1, r7, #3
 8000d4a:	4319      	orrs	r1, r3
 8000d4c:	08eb      	lsrs	r3, r5, #3
 8000d4e:	e5fd      	b.n	800094c <__aeabi_dadd+0x250>
 8000d50:	4663      	mov	r3, ip
 8000d52:	08f9      	lsrs	r1, r7, #3
 8000d54:	075b      	lsls	r3, r3, #29
 8000d56:	4319      	orrs	r1, r3
 8000d58:	4663      	mov	r3, ip
 8000d5a:	0004      	movs	r4, r0
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	e617      	b.n	8000990 <__aeabi_dadd+0x294>
 8000d60:	003d      	movs	r5, r7
 8000d62:	444d      	add	r5, r9
 8000d64:	4463      	add	r3, ip
 8000d66:	454d      	cmp	r5, r9
 8000d68:	4189      	sbcs	r1, r1
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4249      	negs	r1, r1
 8000d6e:	4488      	add	r8, r1
 8000d70:	4643      	mov	r3, r8
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	d400      	bmi.n	8000d78 <__aeabi_dadd+0x67c>
 8000d76:	e5dd      	b.n	8000934 <__aeabi_dadd+0x238>
 8000d78:	4642      	mov	r2, r8
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <__aeabi_dadd+0x6d0>)
 8000d7c:	2601      	movs	r6, #1
 8000d7e:	401a      	ands	r2, r3
 8000d80:	4690      	mov	r8, r2
 8000d82:	e5d7      	b.n	8000934 <__aeabi_dadd+0x238>
 8000d84:	0010      	movs	r0, r2
 8000d86:	001e      	movs	r6, r3
 8000d88:	3820      	subs	r0, #32
 8000d8a:	40c6      	lsrs	r6, r0
 8000d8c:	2a20      	cmp	r2, #32
 8000d8e:	d005      	beq.n	8000d9c <__aeabi_dadd+0x6a0>
 8000d90:	2040      	movs	r0, #64	; 0x40
 8000d92:	1a82      	subs	r2, r0, r2
 8000d94:	4093      	lsls	r3, r2
 8000d96:	464a      	mov	r2, r9
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	4691      	mov	r9, r2
 8000d9c:	464d      	mov	r5, r9
 8000d9e:	1e6b      	subs	r3, r5, #1
 8000da0:	419d      	sbcs	r5, r3
 8000da2:	4335      	orrs	r5, r6
 8000da4:	e621      	b.n	80009ea <__aeabi_dadd+0x2ee>
 8000da6:	0002      	movs	r2, r0
 8000da8:	2300      	movs	r3, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	e540      	b.n	8000830 <__aeabi_dadd+0x134>
 8000dae:	464a      	mov	r2, r9
 8000db0:	19d5      	adds	r5, r2, r7
 8000db2:	42bd      	cmp	r5, r7
 8000db4:	4189      	sbcs	r1, r1
 8000db6:	4463      	add	r3, ip
 8000db8:	4698      	mov	r8, r3
 8000dba:	4249      	negs	r1, r1
 8000dbc:	4488      	add	r8, r1
 8000dbe:	e5b3      	b.n	8000928 <__aeabi_dadd+0x22c>
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4a01      	ldr	r2, [pc, #4]	; (8000dc8 <__aeabi_dadd+0x6cc>)
 8000dc4:	000b      	movs	r3, r1
 8000dc6:	e533      	b.n	8000830 <__aeabi_dadd+0x134>
 8000dc8:	000007ff 	.word	0x000007ff
 8000dcc:	ff7fffff 	.word	0xff7fffff

08000dd0 <__aeabi_ddiv>:
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	4657      	mov	r7, sl
 8000dd4:	464e      	mov	r6, r9
 8000dd6:	4645      	mov	r5, r8
 8000dd8:	46de      	mov	lr, fp
 8000dda:	b5e0      	push	{r5, r6, r7, lr}
 8000ddc:	4681      	mov	r9, r0
 8000dde:	0005      	movs	r5, r0
 8000de0:	030c      	lsls	r4, r1, #12
 8000de2:	0048      	lsls	r0, r1, #1
 8000de4:	4692      	mov	sl, r2
 8000de6:	001f      	movs	r7, r3
 8000de8:	b085      	sub	sp, #20
 8000dea:	0b24      	lsrs	r4, r4, #12
 8000dec:	0d40      	lsrs	r0, r0, #21
 8000dee:	0fce      	lsrs	r6, r1, #31
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d059      	beq.n	8000ea8 <__aeabi_ddiv+0xd8>
 8000df4:	4b87      	ldr	r3, [pc, #540]	; (8001014 <__aeabi_ddiv+0x244>)
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d100      	bne.n	8000dfc <__aeabi_ddiv+0x2c>
 8000dfa:	e098      	b.n	8000f2e <__aeabi_ddiv+0x15e>
 8000dfc:	0f6b      	lsrs	r3, r5, #29
 8000dfe:	00e4      	lsls	r4, r4, #3
 8000e00:	431c      	orrs	r4, r3
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	041b      	lsls	r3, r3, #16
 8000e06:	4323      	orrs	r3, r4
 8000e08:	4698      	mov	r8, r3
 8000e0a:	4b83      	ldr	r3, [pc, #524]	; (8001018 <__aeabi_ddiv+0x248>)
 8000e0c:	00ed      	lsls	r5, r5, #3
 8000e0e:	469b      	mov	fp, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	4699      	mov	r9, r3
 8000e14:	4483      	add	fp, r0
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	033c      	lsls	r4, r7, #12
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	4650      	mov	r0, sl
 8000e1e:	0b24      	lsrs	r4, r4, #12
 8000e20:	0d5b      	lsrs	r3, r3, #21
 8000e22:	0fff      	lsrs	r7, r7, #31
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d067      	beq.n	8000ef8 <__aeabi_ddiv+0x128>
 8000e28:	4a7a      	ldr	r2, [pc, #488]	; (8001014 <__aeabi_ddiv+0x244>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d018      	beq.n	8000e60 <__aeabi_ddiv+0x90>
 8000e2e:	497a      	ldr	r1, [pc, #488]	; (8001018 <__aeabi_ddiv+0x248>)
 8000e30:	0f42      	lsrs	r2, r0, #29
 8000e32:	468c      	mov	ip, r1
 8000e34:	00e4      	lsls	r4, r4, #3
 8000e36:	4659      	mov	r1, fp
 8000e38:	4314      	orrs	r4, r2
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	4463      	add	r3, ip
 8000e3e:	0412      	lsls	r2, r2, #16
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	4314      	orrs	r4, r2
 8000e44:	469b      	mov	fp, r3
 8000e46:	00c2      	lsls	r2, r0, #3
 8000e48:	2000      	movs	r0, #0
 8000e4a:	0033      	movs	r3, r6
 8000e4c:	407b      	eors	r3, r7
 8000e4e:	469a      	mov	sl, r3
 8000e50:	464b      	mov	r3, r9
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	d900      	bls.n	8000e58 <__aeabi_ddiv+0x88>
 8000e56:	e0ef      	b.n	8001038 <__aeabi_ddiv+0x268>
 8000e58:	4970      	ldr	r1, [pc, #448]	; (800101c <__aeabi_ddiv+0x24c>)
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	58cb      	ldr	r3, [r1, r3]
 8000e5e:	469f      	mov	pc, r3
 8000e60:	4b6f      	ldr	r3, [pc, #444]	; (8001020 <__aeabi_ddiv+0x250>)
 8000e62:	4652      	mov	r2, sl
 8000e64:	469c      	mov	ip, r3
 8000e66:	4322      	orrs	r2, r4
 8000e68:	44e3      	add	fp, ip
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_ddiv+0xa0>
 8000e6e:	e095      	b.n	8000f9c <__aeabi_ddiv+0x1cc>
 8000e70:	4649      	mov	r1, r9
 8000e72:	2302      	movs	r3, #2
 8000e74:	4319      	orrs	r1, r3
 8000e76:	4689      	mov	r9, r1
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	e7e5      	b.n	8000e4a <__aeabi_ddiv+0x7a>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	2400      	movs	r4, #0
 8000e82:	2500      	movs	r5, #0
 8000e84:	4652      	mov	r2, sl
 8000e86:	051b      	lsls	r3, r3, #20
 8000e88:	4323      	orrs	r3, r4
 8000e8a:	07d2      	lsls	r2, r2, #31
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	0028      	movs	r0, r5
 8000e90:	0019      	movs	r1, r3
 8000e92:	b005      	add	sp, #20
 8000e94:	bcf0      	pop	{r4, r5, r6, r7}
 8000e96:	46bb      	mov	fp, r7
 8000e98:	46b2      	mov	sl, r6
 8000e9a:	46a9      	mov	r9, r5
 8000e9c:	46a0      	mov	r8, r4
 8000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4b5b      	ldr	r3, [pc, #364]	; (8001014 <__aeabi_ddiv+0x244>)
 8000ea6:	e7ed      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	4698      	mov	r8, r3
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xe2>
 8000eb0:	e089      	b.n	8000fc6 <__aeabi_ddiv+0x1f6>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0xe8>
 8000eb6:	e1e0      	b.n	800127a <__aeabi_ddiv+0x4aa>
 8000eb8:	0020      	movs	r0, r4
 8000eba:	f001 fa19 	bl	80022f0 <__clzsi2>
 8000ebe:	0001      	movs	r1, r0
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	390b      	subs	r1, #11
 8000ec4:	231d      	movs	r3, #29
 8000ec6:	1a5b      	subs	r3, r3, r1
 8000ec8:	4649      	mov	r1, r9
 8000eca:	0010      	movs	r0, r2
 8000ecc:	40d9      	lsrs	r1, r3
 8000ece:	3808      	subs	r0, #8
 8000ed0:	4084      	lsls	r4, r0
 8000ed2:	000b      	movs	r3, r1
 8000ed4:	464d      	mov	r5, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	4085      	lsls	r5, r0
 8000edc:	4851      	ldr	r0, [pc, #324]	; (8001024 <__aeabi_ddiv+0x254>)
 8000ede:	033c      	lsls	r4, r7, #12
 8000ee0:	1a83      	subs	r3, r0, r2
 8000ee2:	469b      	mov	fp, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4699      	mov	r9, r3
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	007b      	lsls	r3, r7, #1
 8000eec:	4650      	mov	r0, sl
 8000eee:	0b24      	lsrs	r4, r4, #12
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	0fff      	lsrs	r7, r7, #31
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d197      	bne.n	8000e28 <__aeabi_ddiv+0x58>
 8000ef8:	4652      	mov	r2, sl
 8000efa:	4322      	orrs	r2, r4
 8000efc:	d055      	beq.n	8000faa <__aeabi_ddiv+0x1da>
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_ddiv+0x134>
 8000f02:	e1ca      	b.n	800129a <__aeabi_ddiv+0x4ca>
 8000f04:	0020      	movs	r0, r4
 8000f06:	f001 f9f3 	bl	80022f0 <__clzsi2>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	3a0b      	subs	r2, #11
 8000f0e:	231d      	movs	r3, #29
 8000f10:	0001      	movs	r1, r0
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	4652      	mov	r2, sl
 8000f16:	3908      	subs	r1, #8
 8000f18:	40da      	lsrs	r2, r3
 8000f1a:	408c      	lsls	r4, r1
 8000f1c:	4314      	orrs	r4, r2
 8000f1e:	4652      	mov	r2, sl
 8000f20:	408a      	lsls	r2, r1
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <__aeabi_ddiv+0x258>)
 8000f24:	4458      	add	r0, fp
 8000f26:	469b      	mov	fp, r3
 8000f28:	4483      	add	fp, r0
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	e78d      	b.n	8000e4a <__aeabi_ddiv+0x7a>
 8000f2e:	464b      	mov	r3, r9
 8000f30:	4323      	orrs	r3, r4
 8000f32:	4698      	mov	r8, r3
 8000f34:	d140      	bne.n	8000fb8 <__aeabi_ddiv+0x1e8>
 8000f36:	2308      	movs	r3, #8
 8000f38:	4699      	mov	r9, r3
 8000f3a:	3b06      	subs	r3, #6
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	4683      	mov	fp, r0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	e769      	b.n	8000e18 <__aeabi_ddiv+0x48>
 8000f44:	46b2      	mov	sl, r6
 8000f46:	9b00      	ldr	r3, [sp, #0]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d0a9      	beq.n	8000ea0 <__aeabi_ddiv+0xd0>
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_ddiv+0x182>
 8000f50:	e211      	b.n	8001376 <__aeabi_ddiv+0x5a6>
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d093      	beq.n	8000e7e <__aeabi_ddiv+0xae>
 8000f56:	4a35      	ldr	r2, [pc, #212]	; (800102c <__aeabi_ddiv+0x25c>)
 8000f58:	445a      	add	r2, fp
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x190>
 8000f5e:	e13c      	b.n	80011da <__aeabi_ddiv+0x40a>
 8000f60:	076b      	lsls	r3, r5, #29
 8000f62:	d000      	beq.n	8000f66 <__aeabi_ddiv+0x196>
 8000f64:	e1a7      	b.n	80012b6 <__aeabi_ddiv+0x4e6>
 8000f66:	08ed      	lsrs	r5, r5, #3
 8000f68:	4643      	mov	r3, r8
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	d506      	bpl.n	8000f7c <__aeabi_ddiv+0x1ac>
 8000f6e:	4642      	mov	r2, r8
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <__aeabi_ddiv+0x260>)
 8000f72:	401a      	ands	r2, r3
 8000f74:	4690      	mov	r8, r2
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	445a      	add	r2, fp
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <__aeabi_ddiv+0x264>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	dc8e      	bgt.n	8000ea0 <__aeabi_ddiv+0xd0>
 8000f82:	4643      	mov	r3, r8
 8000f84:	0552      	lsls	r2, r2, #21
 8000f86:	0758      	lsls	r0, r3, #29
 8000f88:	025c      	lsls	r4, r3, #9
 8000f8a:	4305      	orrs	r5, r0
 8000f8c:	0b24      	lsrs	r4, r4, #12
 8000f8e:	0d53      	lsrs	r3, r2, #21
 8000f90:	e778      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 8000f92:	46ba      	mov	sl, r7
 8000f94:	46a0      	mov	r8, r4
 8000f96:	0015      	movs	r5, r2
 8000f98:	9000      	str	r0, [sp, #0]
 8000f9a:	e7d4      	b.n	8000f46 <__aeabi_ddiv+0x176>
 8000f9c:	464a      	mov	r2, r9
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	4691      	mov	r9, r2
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	4652      	mov	r2, sl
 8000fa8:	e74f      	b.n	8000e4a <__aeabi_ddiv+0x7a>
 8000faa:	4649      	mov	r1, r9
 8000fac:	2301      	movs	r3, #1
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	4689      	mov	r9, r1
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	e748      	b.n	8000e4a <__aeabi_ddiv+0x7a>
 8000fb8:	230c      	movs	r3, #12
 8000fba:	4699      	mov	r9, r3
 8000fbc:	3b09      	subs	r3, #9
 8000fbe:	46a0      	mov	r8, r4
 8000fc0:	4683      	mov	fp, r0
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	e728      	b.n	8000e18 <__aeabi_ddiv+0x48>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	4699      	mov	r9, r3
 8000fca:	2300      	movs	r3, #0
 8000fcc:	469b      	mov	fp, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	e720      	b.n	8000e18 <__aeabi_ddiv+0x48>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2480      	movs	r4, #128	; 0x80
 8000fda:	469a      	mov	sl, r3
 8000fdc:	2500      	movs	r5, #0
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <__aeabi_ddiv+0x244>)
 8000fe0:	0324      	lsls	r4, r4, #12
 8000fe2:	e74f      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	4641      	mov	r1, r8
 8000fe8:	031b      	lsls	r3, r3, #12
 8000fea:	4219      	tst	r1, r3
 8000fec:	d008      	beq.n	8001000 <__aeabi_ddiv+0x230>
 8000fee:	421c      	tst	r4, r3
 8000ff0:	d106      	bne.n	8001000 <__aeabi_ddiv+0x230>
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	0324      	lsls	r4, r4, #12
 8000ff6:	46ba      	mov	sl, r7
 8000ff8:	0015      	movs	r5, r2
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <__aeabi_ddiv+0x244>)
 8000ffc:	0b24      	lsrs	r4, r4, #12
 8000ffe:	e741      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 8001000:	2480      	movs	r4, #128	; 0x80
 8001002:	4643      	mov	r3, r8
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	431c      	orrs	r4, r3
 8001008:	0324      	lsls	r4, r4, #12
 800100a:	46b2      	mov	sl, r6
 800100c:	4b01      	ldr	r3, [pc, #4]	; (8001014 <__aeabi_ddiv+0x244>)
 800100e:	0b24      	lsrs	r4, r4, #12
 8001010:	e738      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	000007ff 	.word	0x000007ff
 8001018:	fffffc01 	.word	0xfffffc01
 800101c:	080051a0 	.word	0x080051a0
 8001020:	fffff801 	.word	0xfffff801
 8001024:	fffffc0d 	.word	0xfffffc0d
 8001028:	000003f3 	.word	0x000003f3
 800102c:	000003ff 	.word	0x000003ff
 8001030:	feffffff 	.word	0xfeffffff
 8001034:	000007fe 	.word	0x000007fe
 8001038:	4544      	cmp	r4, r8
 800103a:	d200      	bcs.n	800103e <__aeabi_ddiv+0x26e>
 800103c:	e116      	b.n	800126c <__aeabi_ddiv+0x49c>
 800103e:	d100      	bne.n	8001042 <__aeabi_ddiv+0x272>
 8001040:	e111      	b.n	8001266 <__aeabi_ddiv+0x496>
 8001042:	2301      	movs	r3, #1
 8001044:	425b      	negs	r3, r3
 8001046:	469c      	mov	ip, r3
 8001048:	002e      	movs	r6, r5
 800104a:	4640      	mov	r0, r8
 800104c:	2500      	movs	r5, #0
 800104e:	44e3      	add	fp, ip
 8001050:	0223      	lsls	r3, r4, #8
 8001052:	0e14      	lsrs	r4, r2, #24
 8001054:	431c      	orrs	r4, r3
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	4699      	mov	r9, r3
 800105a:	0423      	lsls	r3, r4, #16
 800105c:	0c1f      	lsrs	r7, r3, #16
 800105e:	0212      	lsls	r2, r2, #8
 8001060:	4649      	mov	r1, r9
 8001062:	9200      	str	r2, [sp, #0]
 8001064:	9701      	str	r7, [sp, #4]
 8001066:	f7ff f8e9 	bl	800023c <__aeabi_uidivmod>
 800106a:	0002      	movs	r2, r0
 800106c:	437a      	muls	r2, r7
 800106e:	040b      	lsls	r3, r1, #16
 8001070:	0c31      	lsrs	r1, r6, #16
 8001072:	4680      	mov	r8, r0
 8001074:	4319      	orrs	r1, r3
 8001076:	428a      	cmp	r2, r1
 8001078:	d90b      	bls.n	8001092 <__aeabi_ddiv+0x2c2>
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	469c      	mov	ip, r3
 8001080:	1909      	adds	r1, r1, r4
 8001082:	44e0      	add	r8, ip
 8001084:	428c      	cmp	r4, r1
 8001086:	d804      	bhi.n	8001092 <__aeabi_ddiv+0x2c2>
 8001088:	428a      	cmp	r2, r1
 800108a:	d902      	bls.n	8001092 <__aeabi_ddiv+0x2c2>
 800108c:	1e83      	subs	r3, r0, #2
 800108e:	4698      	mov	r8, r3
 8001090:	1909      	adds	r1, r1, r4
 8001092:	1a88      	subs	r0, r1, r2
 8001094:	4649      	mov	r1, r9
 8001096:	f7ff f8d1 	bl	800023c <__aeabi_uidivmod>
 800109a:	0409      	lsls	r1, r1, #16
 800109c:	468c      	mov	ip, r1
 800109e:	0431      	lsls	r1, r6, #16
 80010a0:	4666      	mov	r6, ip
 80010a2:	9a01      	ldr	r2, [sp, #4]
 80010a4:	0c09      	lsrs	r1, r1, #16
 80010a6:	4342      	muls	r2, r0
 80010a8:	0003      	movs	r3, r0
 80010aa:	4331      	orrs	r1, r6
 80010ac:	428a      	cmp	r2, r1
 80010ae:	d904      	bls.n	80010ba <__aeabi_ddiv+0x2ea>
 80010b0:	1909      	adds	r1, r1, r4
 80010b2:	3b01      	subs	r3, #1
 80010b4:	428c      	cmp	r4, r1
 80010b6:	d800      	bhi.n	80010ba <__aeabi_ddiv+0x2ea>
 80010b8:	e111      	b.n	80012de <__aeabi_ddiv+0x50e>
 80010ba:	1a89      	subs	r1, r1, r2
 80010bc:	4642      	mov	r2, r8
 80010be:	9e00      	ldr	r6, [sp, #0]
 80010c0:	0412      	lsls	r2, r2, #16
 80010c2:	431a      	orrs	r2, r3
 80010c4:	0c33      	lsrs	r3, r6, #16
 80010c6:	001f      	movs	r7, r3
 80010c8:	0c10      	lsrs	r0, r2, #16
 80010ca:	4690      	mov	r8, r2
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	0413      	lsls	r3, r2, #16
 80010d0:	0432      	lsls	r2, r6, #16
 80010d2:	0c16      	lsrs	r6, r2, #16
 80010d4:	0032      	movs	r2, r6
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	435a      	muls	r2, r3
 80010da:	9603      	str	r6, [sp, #12]
 80010dc:	437b      	muls	r3, r7
 80010de:	4346      	muls	r6, r0
 80010e0:	4378      	muls	r0, r7
 80010e2:	0c17      	lsrs	r7, r2, #16
 80010e4:	46bc      	mov	ip, r7
 80010e6:	199b      	adds	r3, r3, r6
 80010e8:	4463      	add	r3, ip
 80010ea:	429e      	cmp	r6, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_ddiv+0x326>
 80010ee:	2680      	movs	r6, #128	; 0x80
 80010f0:	0276      	lsls	r6, r6, #9
 80010f2:	46b4      	mov	ip, r6
 80010f4:	4460      	add	r0, ip
 80010f6:	0c1e      	lsrs	r6, r3, #16
 80010f8:	1830      	adds	r0, r6, r0
 80010fa:	0416      	lsls	r6, r2, #16
 80010fc:	041b      	lsls	r3, r3, #16
 80010fe:	0c36      	lsrs	r6, r6, #16
 8001100:	199e      	adds	r6, r3, r6
 8001102:	4281      	cmp	r1, r0
 8001104:	d200      	bcs.n	8001108 <__aeabi_ddiv+0x338>
 8001106:	e09c      	b.n	8001242 <__aeabi_ddiv+0x472>
 8001108:	d100      	bne.n	800110c <__aeabi_ddiv+0x33c>
 800110a:	e097      	b.n	800123c <__aeabi_ddiv+0x46c>
 800110c:	1bae      	subs	r6, r5, r6
 800110e:	1a09      	subs	r1, r1, r0
 8001110:	42b5      	cmp	r5, r6
 8001112:	4180      	sbcs	r0, r0
 8001114:	4240      	negs	r0, r0
 8001116:	1a08      	subs	r0, r1, r0
 8001118:	4284      	cmp	r4, r0
 800111a:	d100      	bne.n	800111e <__aeabi_ddiv+0x34e>
 800111c:	e111      	b.n	8001342 <__aeabi_ddiv+0x572>
 800111e:	4649      	mov	r1, r9
 8001120:	f7ff f88c 	bl	800023c <__aeabi_uidivmod>
 8001124:	9a01      	ldr	r2, [sp, #4]
 8001126:	040b      	lsls	r3, r1, #16
 8001128:	4342      	muls	r2, r0
 800112a:	0c31      	lsrs	r1, r6, #16
 800112c:	0005      	movs	r5, r0
 800112e:	4319      	orrs	r1, r3
 8001130:	428a      	cmp	r2, r1
 8001132:	d907      	bls.n	8001144 <__aeabi_ddiv+0x374>
 8001134:	1909      	adds	r1, r1, r4
 8001136:	3d01      	subs	r5, #1
 8001138:	428c      	cmp	r4, r1
 800113a:	d803      	bhi.n	8001144 <__aeabi_ddiv+0x374>
 800113c:	428a      	cmp	r2, r1
 800113e:	d901      	bls.n	8001144 <__aeabi_ddiv+0x374>
 8001140:	1e85      	subs	r5, r0, #2
 8001142:	1909      	adds	r1, r1, r4
 8001144:	1a88      	subs	r0, r1, r2
 8001146:	4649      	mov	r1, r9
 8001148:	f7ff f878 	bl	800023c <__aeabi_uidivmod>
 800114c:	0409      	lsls	r1, r1, #16
 800114e:	468c      	mov	ip, r1
 8001150:	0431      	lsls	r1, r6, #16
 8001152:	4666      	mov	r6, ip
 8001154:	9a01      	ldr	r2, [sp, #4]
 8001156:	0c09      	lsrs	r1, r1, #16
 8001158:	4342      	muls	r2, r0
 800115a:	0003      	movs	r3, r0
 800115c:	4331      	orrs	r1, r6
 800115e:	428a      	cmp	r2, r1
 8001160:	d907      	bls.n	8001172 <__aeabi_ddiv+0x3a2>
 8001162:	1909      	adds	r1, r1, r4
 8001164:	3b01      	subs	r3, #1
 8001166:	428c      	cmp	r4, r1
 8001168:	d803      	bhi.n	8001172 <__aeabi_ddiv+0x3a2>
 800116a:	428a      	cmp	r2, r1
 800116c:	d901      	bls.n	8001172 <__aeabi_ddiv+0x3a2>
 800116e:	1e83      	subs	r3, r0, #2
 8001170:	1909      	adds	r1, r1, r4
 8001172:	9e03      	ldr	r6, [sp, #12]
 8001174:	1a89      	subs	r1, r1, r2
 8001176:	0032      	movs	r2, r6
 8001178:	042d      	lsls	r5, r5, #16
 800117a:	431d      	orrs	r5, r3
 800117c:	9f02      	ldr	r7, [sp, #8]
 800117e:	042b      	lsls	r3, r5, #16
 8001180:	0c1b      	lsrs	r3, r3, #16
 8001182:	435a      	muls	r2, r3
 8001184:	437b      	muls	r3, r7
 8001186:	469c      	mov	ip, r3
 8001188:	0c28      	lsrs	r0, r5, #16
 800118a:	4346      	muls	r6, r0
 800118c:	0c13      	lsrs	r3, r2, #16
 800118e:	44b4      	add	ip, r6
 8001190:	4463      	add	r3, ip
 8001192:	4378      	muls	r0, r7
 8001194:	429e      	cmp	r6, r3
 8001196:	d903      	bls.n	80011a0 <__aeabi_ddiv+0x3d0>
 8001198:	2680      	movs	r6, #128	; 0x80
 800119a:	0276      	lsls	r6, r6, #9
 800119c:	46b4      	mov	ip, r6
 800119e:	4460      	add	r0, ip
 80011a0:	0c1e      	lsrs	r6, r3, #16
 80011a2:	0412      	lsls	r2, r2, #16
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	0c12      	lsrs	r2, r2, #16
 80011a8:	1830      	adds	r0, r6, r0
 80011aa:	189b      	adds	r3, r3, r2
 80011ac:	4281      	cmp	r1, r0
 80011ae:	d306      	bcc.n	80011be <__aeabi_ddiv+0x3ee>
 80011b0:	d002      	beq.n	80011b8 <__aeabi_ddiv+0x3e8>
 80011b2:	2301      	movs	r3, #1
 80011b4:	431d      	orrs	r5, r3
 80011b6:	e6ce      	b.n	8000f56 <__aeabi_ddiv+0x186>
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x3ee>
 80011bc:	e6cb      	b.n	8000f56 <__aeabi_ddiv+0x186>
 80011be:	1861      	adds	r1, r4, r1
 80011c0:	1e6e      	subs	r6, r5, #1
 80011c2:	42a1      	cmp	r1, r4
 80011c4:	d200      	bcs.n	80011c8 <__aeabi_ddiv+0x3f8>
 80011c6:	e0a4      	b.n	8001312 <__aeabi_ddiv+0x542>
 80011c8:	4281      	cmp	r1, r0
 80011ca:	d200      	bcs.n	80011ce <__aeabi_ddiv+0x3fe>
 80011cc:	e0c9      	b.n	8001362 <__aeabi_ddiv+0x592>
 80011ce:	d100      	bne.n	80011d2 <__aeabi_ddiv+0x402>
 80011d0:	e0d9      	b.n	8001386 <__aeabi_ddiv+0x5b6>
 80011d2:	0035      	movs	r5, r6
 80011d4:	e7ed      	b.n	80011b2 <__aeabi_ddiv+0x3e2>
 80011d6:	2501      	movs	r5, #1
 80011d8:	426d      	negs	r5, r5
 80011da:	2101      	movs	r1, #1
 80011dc:	1a89      	subs	r1, r1, r2
 80011de:	2938      	cmp	r1, #56	; 0x38
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_ddiv+0x414>
 80011e2:	e64c      	b.n	8000e7e <__aeabi_ddiv+0xae>
 80011e4:	291f      	cmp	r1, #31
 80011e6:	dc00      	bgt.n	80011ea <__aeabi_ddiv+0x41a>
 80011e8:	e07f      	b.n	80012ea <__aeabi_ddiv+0x51a>
 80011ea:	231f      	movs	r3, #31
 80011ec:	425b      	negs	r3, r3
 80011ee:	1a9a      	subs	r2, r3, r2
 80011f0:	4643      	mov	r3, r8
 80011f2:	40d3      	lsrs	r3, r2
 80011f4:	2920      	cmp	r1, #32
 80011f6:	d004      	beq.n	8001202 <__aeabi_ddiv+0x432>
 80011f8:	4644      	mov	r4, r8
 80011fa:	4a65      	ldr	r2, [pc, #404]	; (8001390 <__aeabi_ddiv+0x5c0>)
 80011fc:	445a      	add	r2, fp
 80011fe:	4094      	lsls	r4, r2
 8001200:	4325      	orrs	r5, r4
 8001202:	1e6a      	subs	r2, r5, #1
 8001204:	4195      	sbcs	r5, r2
 8001206:	2207      	movs	r2, #7
 8001208:	432b      	orrs	r3, r5
 800120a:	0015      	movs	r5, r2
 800120c:	2400      	movs	r4, #0
 800120e:	401d      	ands	r5, r3
 8001210:	421a      	tst	r2, r3
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x446>
 8001214:	e0a1      	b.n	800135a <__aeabi_ddiv+0x58a>
 8001216:	220f      	movs	r2, #15
 8001218:	2400      	movs	r4, #0
 800121a:	401a      	ands	r2, r3
 800121c:	2a04      	cmp	r2, #4
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x452>
 8001220:	e098      	b.n	8001354 <__aeabi_ddiv+0x584>
 8001222:	1d1a      	adds	r2, r3, #4
 8001224:	429a      	cmp	r2, r3
 8001226:	419b      	sbcs	r3, r3
 8001228:	425b      	negs	r3, r3
 800122a:	18e4      	adds	r4, r4, r3
 800122c:	0013      	movs	r3, r2
 800122e:	0222      	lsls	r2, r4, #8
 8001230:	d400      	bmi.n	8001234 <__aeabi_ddiv+0x464>
 8001232:	e08f      	b.n	8001354 <__aeabi_ddiv+0x584>
 8001234:	2301      	movs	r3, #1
 8001236:	2400      	movs	r4, #0
 8001238:	2500      	movs	r5, #0
 800123a:	e623      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 800123c:	42b5      	cmp	r5, r6
 800123e:	d300      	bcc.n	8001242 <__aeabi_ddiv+0x472>
 8001240:	e764      	b.n	800110c <__aeabi_ddiv+0x33c>
 8001242:	4643      	mov	r3, r8
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	9b00      	ldr	r3, [sp, #0]
 8001248:	469c      	mov	ip, r3
 800124a:	4465      	add	r5, ip
 800124c:	001f      	movs	r7, r3
 800124e:	429d      	cmp	r5, r3
 8001250:	419b      	sbcs	r3, r3
 8001252:	425b      	negs	r3, r3
 8001254:	191b      	adds	r3, r3, r4
 8001256:	18c9      	adds	r1, r1, r3
 8001258:	428c      	cmp	r4, r1
 800125a:	d23a      	bcs.n	80012d2 <__aeabi_ddiv+0x502>
 800125c:	4288      	cmp	r0, r1
 800125e:	d863      	bhi.n	8001328 <__aeabi_ddiv+0x558>
 8001260:	d060      	beq.n	8001324 <__aeabi_ddiv+0x554>
 8001262:	4690      	mov	r8, r2
 8001264:	e752      	b.n	800110c <__aeabi_ddiv+0x33c>
 8001266:	42aa      	cmp	r2, r5
 8001268:	d900      	bls.n	800126c <__aeabi_ddiv+0x49c>
 800126a:	e6ea      	b.n	8001042 <__aeabi_ddiv+0x272>
 800126c:	4643      	mov	r3, r8
 800126e:	07de      	lsls	r6, r3, #31
 8001270:	0858      	lsrs	r0, r3, #1
 8001272:	086b      	lsrs	r3, r5, #1
 8001274:	431e      	orrs	r6, r3
 8001276:	07ed      	lsls	r5, r5, #31
 8001278:	e6ea      	b.n	8001050 <__aeabi_ddiv+0x280>
 800127a:	4648      	mov	r0, r9
 800127c:	f001 f838 	bl	80022f0 <__clzsi2>
 8001280:	0001      	movs	r1, r0
 8001282:	0002      	movs	r2, r0
 8001284:	3115      	adds	r1, #21
 8001286:	3220      	adds	r2, #32
 8001288:	291c      	cmp	r1, #28
 800128a:	dc00      	bgt.n	800128e <__aeabi_ddiv+0x4be>
 800128c:	e61a      	b.n	8000ec4 <__aeabi_ddiv+0xf4>
 800128e:	464b      	mov	r3, r9
 8001290:	3808      	subs	r0, #8
 8001292:	4083      	lsls	r3, r0
 8001294:	2500      	movs	r5, #0
 8001296:	4698      	mov	r8, r3
 8001298:	e620      	b.n	8000edc <__aeabi_ddiv+0x10c>
 800129a:	f001 f829 	bl	80022f0 <__clzsi2>
 800129e:	0003      	movs	r3, r0
 80012a0:	001a      	movs	r2, r3
 80012a2:	3215      	adds	r2, #21
 80012a4:	3020      	adds	r0, #32
 80012a6:	2a1c      	cmp	r2, #28
 80012a8:	dc00      	bgt.n	80012ac <__aeabi_ddiv+0x4dc>
 80012aa:	e630      	b.n	8000f0e <__aeabi_ddiv+0x13e>
 80012ac:	4654      	mov	r4, sl
 80012ae:	3b08      	subs	r3, #8
 80012b0:	2200      	movs	r2, #0
 80012b2:	409c      	lsls	r4, r3
 80012b4:	e635      	b.n	8000f22 <__aeabi_ddiv+0x152>
 80012b6:	230f      	movs	r3, #15
 80012b8:	402b      	ands	r3, r5
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d100      	bne.n	80012c0 <__aeabi_ddiv+0x4f0>
 80012be:	e652      	b.n	8000f66 <__aeabi_ddiv+0x196>
 80012c0:	2305      	movs	r3, #5
 80012c2:	425b      	negs	r3, r3
 80012c4:	42ab      	cmp	r3, r5
 80012c6:	419b      	sbcs	r3, r3
 80012c8:	3504      	adds	r5, #4
 80012ca:	425b      	negs	r3, r3
 80012cc:	08ed      	lsrs	r5, r5, #3
 80012ce:	4498      	add	r8, r3
 80012d0:	e64a      	b.n	8000f68 <__aeabi_ddiv+0x198>
 80012d2:	428c      	cmp	r4, r1
 80012d4:	d1c5      	bne.n	8001262 <__aeabi_ddiv+0x492>
 80012d6:	42af      	cmp	r7, r5
 80012d8:	d9c0      	bls.n	800125c <__aeabi_ddiv+0x48c>
 80012da:	4690      	mov	r8, r2
 80012dc:	e716      	b.n	800110c <__aeabi_ddiv+0x33c>
 80012de:	428a      	cmp	r2, r1
 80012e0:	d800      	bhi.n	80012e4 <__aeabi_ddiv+0x514>
 80012e2:	e6ea      	b.n	80010ba <__aeabi_ddiv+0x2ea>
 80012e4:	1e83      	subs	r3, r0, #2
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	e6e7      	b.n	80010ba <__aeabi_ddiv+0x2ea>
 80012ea:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <__aeabi_ddiv+0x5c4>)
 80012ec:	0028      	movs	r0, r5
 80012ee:	445a      	add	r2, fp
 80012f0:	4643      	mov	r3, r8
 80012f2:	4095      	lsls	r5, r2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	40c8      	lsrs	r0, r1
 80012f8:	1e6a      	subs	r2, r5, #1
 80012fa:	4195      	sbcs	r5, r2
 80012fc:	4644      	mov	r4, r8
 80012fe:	4303      	orrs	r3, r0
 8001300:	432b      	orrs	r3, r5
 8001302:	40cc      	lsrs	r4, r1
 8001304:	075a      	lsls	r2, r3, #29
 8001306:	d092      	beq.n	800122e <__aeabi_ddiv+0x45e>
 8001308:	220f      	movs	r2, #15
 800130a:	401a      	ands	r2, r3
 800130c:	2a04      	cmp	r2, #4
 800130e:	d188      	bne.n	8001222 <__aeabi_ddiv+0x452>
 8001310:	e78d      	b.n	800122e <__aeabi_ddiv+0x45e>
 8001312:	0035      	movs	r5, r6
 8001314:	4281      	cmp	r1, r0
 8001316:	d000      	beq.n	800131a <__aeabi_ddiv+0x54a>
 8001318:	e74b      	b.n	80011b2 <__aeabi_ddiv+0x3e2>
 800131a:	9a00      	ldr	r2, [sp, #0]
 800131c:	4293      	cmp	r3, r2
 800131e:	d000      	beq.n	8001322 <__aeabi_ddiv+0x552>
 8001320:	e747      	b.n	80011b2 <__aeabi_ddiv+0x3e2>
 8001322:	e618      	b.n	8000f56 <__aeabi_ddiv+0x186>
 8001324:	42ae      	cmp	r6, r5
 8001326:	d99c      	bls.n	8001262 <__aeabi_ddiv+0x492>
 8001328:	2302      	movs	r3, #2
 800132a:	425b      	negs	r3, r3
 800132c:	469c      	mov	ip, r3
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	44e0      	add	r8, ip
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	429d      	cmp	r5, r3
 8001338:	419b      	sbcs	r3, r3
 800133a:	425b      	negs	r3, r3
 800133c:	191b      	adds	r3, r3, r4
 800133e:	18c9      	adds	r1, r1, r3
 8001340:	e6e4      	b.n	800110c <__aeabi_ddiv+0x33c>
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <__aeabi_ddiv+0x5c8>)
 8001344:	445a      	add	r2, fp
 8001346:	2a00      	cmp	r2, #0
 8001348:	dc00      	bgt.n	800134c <__aeabi_ddiv+0x57c>
 800134a:	e744      	b.n	80011d6 <__aeabi_ddiv+0x406>
 800134c:	2301      	movs	r3, #1
 800134e:	2500      	movs	r5, #0
 8001350:	4498      	add	r8, r3
 8001352:	e609      	b.n	8000f68 <__aeabi_ddiv+0x198>
 8001354:	0765      	lsls	r5, r4, #29
 8001356:	0264      	lsls	r4, r4, #9
 8001358:	0b24      	lsrs	r4, r4, #12
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	431d      	orrs	r5, r3
 800135e:	2300      	movs	r3, #0
 8001360:	e590      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 8001362:	9e00      	ldr	r6, [sp, #0]
 8001364:	3d02      	subs	r5, #2
 8001366:	0072      	lsls	r2, r6, #1
 8001368:	42b2      	cmp	r2, r6
 800136a:	41bf      	sbcs	r7, r7
 800136c:	427f      	negs	r7, r7
 800136e:	193c      	adds	r4, r7, r4
 8001370:	1909      	adds	r1, r1, r4
 8001372:	9200      	str	r2, [sp, #0]
 8001374:	e7ce      	b.n	8001314 <__aeabi_ddiv+0x544>
 8001376:	2480      	movs	r4, #128	; 0x80
 8001378:	4643      	mov	r3, r8
 800137a:	0324      	lsls	r4, r4, #12
 800137c:	431c      	orrs	r4, r3
 800137e:	0324      	lsls	r4, r4, #12
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <__aeabi_ddiv+0x5cc>)
 8001382:	0b24      	lsrs	r4, r4, #12
 8001384:	e57e      	b.n	8000e84 <__aeabi_ddiv+0xb4>
 8001386:	9a00      	ldr	r2, [sp, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3ea      	bcc.n	8001362 <__aeabi_ddiv+0x592>
 800138c:	0035      	movs	r5, r6
 800138e:	e7c4      	b.n	800131a <__aeabi_ddiv+0x54a>
 8001390:	0000043e 	.word	0x0000043e
 8001394:	0000041e 	.word	0x0000041e
 8001398:	000003ff 	.word	0x000003ff
 800139c:	000007ff 	.word	0x000007ff

080013a0 <__eqdf2>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	464f      	mov	r7, r9
 80013a4:	4646      	mov	r6, r8
 80013a6:	46d6      	mov	lr, sl
 80013a8:	4694      	mov	ip, r2
 80013aa:	4691      	mov	r9, r2
 80013ac:	031a      	lsls	r2, r3, #12
 80013ae:	0b12      	lsrs	r2, r2, #12
 80013b0:	4d18      	ldr	r5, [pc, #96]	; (8001414 <__eqdf2+0x74>)
 80013b2:	b5c0      	push	{r6, r7, lr}
 80013b4:	004c      	lsls	r4, r1, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	4692      	mov	sl, r2
 80013ba:	005a      	lsls	r2, r3, #1
 80013bc:	0006      	movs	r6, r0
 80013be:	4680      	mov	r8, r0
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	2001      	movs	r0, #1
 80013c4:	0d64      	lsrs	r4, r4, #21
 80013c6:	0fc9      	lsrs	r1, r1, #31
 80013c8:	0d52      	lsrs	r2, r2, #21
 80013ca:	0fdb      	lsrs	r3, r3, #31
 80013cc:	42ac      	cmp	r4, r5
 80013ce:	d00a      	beq.n	80013e6 <__eqdf2+0x46>
 80013d0:	42aa      	cmp	r2, r5
 80013d2:	d003      	beq.n	80013dc <__eqdf2+0x3c>
 80013d4:	4294      	cmp	r4, r2
 80013d6:	d101      	bne.n	80013dc <__eqdf2+0x3c>
 80013d8:	4557      	cmp	r7, sl
 80013da:	d00d      	beq.n	80013f8 <__eqdf2+0x58>
 80013dc:	bce0      	pop	{r5, r6, r7}
 80013de:	46ba      	mov	sl, r7
 80013e0:	46b1      	mov	r9, r6
 80013e2:	46a8      	mov	r8, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	003d      	movs	r5, r7
 80013e8:	4335      	orrs	r5, r6
 80013ea:	d1f7      	bne.n	80013dc <__eqdf2+0x3c>
 80013ec:	42a2      	cmp	r2, r4
 80013ee:	d1f5      	bne.n	80013dc <__eqdf2+0x3c>
 80013f0:	4652      	mov	r2, sl
 80013f2:	4665      	mov	r5, ip
 80013f4:	432a      	orrs	r2, r5
 80013f6:	d1f1      	bne.n	80013dc <__eqdf2+0x3c>
 80013f8:	2001      	movs	r0, #1
 80013fa:	45c8      	cmp	r8, r9
 80013fc:	d1ee      	bne.n	80013dc <__eqdf2+0x3c>
 80013fe:	4299      	cmp	r1, r3
 8001400:	d006      	beq.n	8001410 <__eqdf2+0x70>
 8001402:	2c00      	cmp	r4, #0
 8001404:	d1ea      	bne.n	80013dc <__eqdf2+0x3c>
 8001406:	433e      	orrs	r6, r7
 8001408:	0030      	movs	r0, r6
 800140a:	1e46      	subs	r6, r0, #1
 800140c:	41b0      	sbcs	r0, r6
 800140e:	e7e5      	b.n	80013dc <__eqdf2+0x3c>
 8001410:	2000      	movs	r0, #0
 8001412:	e7e3      	b.n	80013dc <__eqdf2+0x3c>
 8001414:	000007ff 	.word	0x000007ff

08001418 <__gedf2>:
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	464e      	mov	r6, r9
 800141c:	4645      	mov	r5, r8
 800141e:	4657      	mov	r7, sl
 8001420:	46de      	mov	lr, fp
 8001422:	0004      	movs	r4, r0
 8001424:	0018      	movs	r0, r3
 8001426:	b5e0      	push	{r5, r6, r7, lr}
 8001428:	0016      	movs	r6, r2
 800142a:	031b      	lsls	r3, r3, #12
 800142c:	0b1b      	lsrs	r3, r3, #12
 800142e:	4d32      	ldr	r5, [pc, #200]	; (80014f8 <__gedf2+0xe0>)
 8001430:	030f      	lsls	r7, r1, #12
 8001432:	004a      	lsls	r2, r1, #1
 8001434:	4699      	mov	r9, r3
 8001436:	0043      	lsls	r3, r0, #1
 8001438:	46a4      	mov	ip, r4
 800143a:	46b0      	mov	r8, r6
 800143c:	0b3f      	lsrs	r7, r7, #12
 800143e:	0d52      	lsrs	r2, r2, #21
 8001440:	0fc9      	lsrs	r1, r1, #31
 8001442:	0d5b      	lsrs	r3, r3, #21
 8001444:	0fc0      	lsrs	r0, r0, #31
 8001446:	42aa      	cmp	r2, r5
 8001448:	d029      	beq.n	800149e <__gedf2+0x86>
 800144a:	42ab      	cmp	r3, r5
 800144c:	d018      	beq.n	8001480 <__gedf2+0x68>
 800144e:	2a00      	cmp	r2, #0
 8001450:	d12a      	bne.n	80014a8 <__gedf2+0x90>
 8001452:	433c      	orrs	r4, r7
 8001454:	46a3      	mov	fp, r4
 8001456:	4265      	negs	r5, r4
 8001458:	4165      	adcs	r5, r4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <__gedf2+0x4c>
 800145e:	464c      	mov	r4, r9
 8001460:	4326      	orrs	r6, r4
 8001462:	d027      	beq.n	80014b4 <__gedf2+0x9c>
 8001464:	2d00      	cmp	r5, #0
 8001466:	d115      	bne.n	8001494 <__gedf2+0x7c>
 8001468:	4281      	cmp	r1, r0
 800146a:	d028      	beq.n	80014be <__gedf2+0xa6>
 800146c:	2002      	movs	r0, #2
 800146e:	3901      	subs	r1, #1
 8001470:	4008      	ands	r0, r1
 8001472:	3801      	subs	r0, #1
 8001474:	bcf0      	pop	{r4, r5, r6, r7}
 8001476:	46bb      	mov	fp, r7
 8001478:	46b2      	mov	sl, r6
 800147a:	46a9      	mov	r9, r5
 800147c:	46a0      	mov	r8, r4
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001480:	464d      	mov	r5, r9
 8001482:	432e      	orrs	r6, r5
 8001484:	d12f      	bne.n	80014e6 <__gedf2+0xce>
 8001486:	2a00      	cmp	r2, #0
 8001488:	d1ee      	bne.n	8001468 <__gedf2+0x50>
 800148a:	433c      	orrs	r4, r7
 800148c:	4265      	negs	r5, r4
 800148e:	4165      	adcs	r5, r4
 8001490:	2d00      	cmp	r5, #0
 8001492:	d0e9      	beq.n	8001468 <__gedf2+0x50>
 8001494:	2800      	cmp	r0, #0
 8001496:	d1ed      	bne.n	8001474 <__gedf2+0x5c>
 8001498:	2001      	movs	r0, #1
 800149a:	4240      	negs	r0, r0
 800149c:	e7ea      	b.n	8001474 <__gedf2+0x5c>
 800149e:	003d      	movs	r5, r7
 80014a0:	4325      	orrs	r5, r4
 80014a2:	d120      	bne.n	80014e6 <__gedf2+0xce>
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d0eb      	beq.n	8001480 <__gedf2+0x68>
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1dd      	bne.n	8001468 <__gedf2+0x50>
 80014ac:	464c      	mov	r4, r9
 80014ae:	4326      	orrs	r6, r4
 80014b0:	d1da      	bne.n	8001468 <__gedf2+0x50>
 80014b2:	e7db      	b.n	800146c <__gedf2+0x54>
 80014b4:	465b      	mov	r3, fp
 80014b6:	2000      	movs	r0, #0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0db      	beq.n	8001474 <__gedf2+0x5c>
 80014bc:	e7d6      	b.n	800146c <__gedf2+0x54>
 80014be:	429a      	cmp	r2, r3
 80014c0:	dc0a      	bgt.n	80014d8 <__gedf2+0xc0>
 80014c2:	dbe7      	blt.n	8001494 <__gedf2+0x7c>
 80014c4:	454f      	cmp	r7, r9
 80014c6:	d8d1      	bhi.n	800146c <__gedf2+0x54>
 80014c8:	d010      	beq.n	80014ec <__gedf2+0xd4>
 80014ca:	2000      	movs	r0, #0
 80014cc:	454f      	cmp	r7, r9
 80014ce:	d2d1      	bcs.n	8001474 <__gedf2+0x5c>
 80014d0:	2900      	cmp	r1, #0
 80014d2:	d0e1      	beq.n	8001498 <__gedf2+0x80>
 80014d4:	0008      	movs	r0, r1
 80014d6:	e7cd      	b.n	8001474 <__gedf2+0x5c>
 80014d8:	4243      	negs	r3, r0
 80014da:	4158      	adcs	r0, r3
 80014dc:	2302      	movs	r3, #2
 80014de:	4240      	negs	r0, r0
 80014e0:	4018      	ands	r0, r3
 80014e2:	3801      	subs	r0, #1
 80014e4:	e7c6      	b.n	8001474 <__gedf2+0x5c>
 80014e6:	2002      	movs	r0, #2
 80014e8:	4240      	negs	r0, r0
 80014ea:	e7c3      	b.n	8001474 <__gedf2+0x5c>
 80014ec:	45c4      	cmp	ip, r8
 80014ee:	d8bd      	bhi.n	800146c <__gedf2+0x54>
 80014f0:	2000      	movs	r0, #0
 80014f2:	45c4      	cmp	ip, r8
 80014f4:	d2be      	bcs.n	8001474 <__gedf2+0x5c>
 80014f6:	e7eb      	b.n	80014d0 <__gedf2+0xb8>
 80014f8:	000007ff 	.word	0x000007ff

080014fc <__ledf2>:
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	464e      	mov	r6, r9
 8001500:	4645      	mov	r5, r8
 8001502:	4657      	mov	r7, sl
 8001504:	46de      	mov	lr, fp
 8001506:	0004      	movs	r4, r0
 8001508:	0018      	movs	r0, r3
 800150a:	b5e0      	push	{r5, r6, r7, lr}
 800150c:	0016      	movs	r6, r2
 800150e:	031b      	lsls	r3, r3, #12
 8001510:	0b1b      	lsrs	r3, r3, #12
 8001512:	4d31      	ldr	r5, [pc, #196]	; (80015d8 <__ledf2+0xdc>)
 8001514:	030f      	lsls	r7, r1, #12
 8001516:	004a      	lsls	r2, r1, #1
 8001518:	4699      	mov	r9, r3
 800151a:	0043      	lsls	r3, r0, #1
 800151c:	46a4      	mov	ip, r4
 800151e:	46b0      	mov	r8, r6
 8001520:	0b3f      	lsrs	r7, r7, #12
 8001522:	0d52      	lsrs	r2, r2, #21
 8001524:	0fc9      	lsrs	r1, r1, #31
 8001526:	0d5b      	lsrs	r3, r3, #21
 8001528:	0fc0      	lsrs	r0, r0, #31
 800152a:	42aa      	cmp	r2, r5
 800152c:	d011      	beq.n	8001552 <__ledf2+0x56>
 800152e:	42ab      	cmp	r3, r5
 8001530:	d014      	beq.n	800155c <__ledf2+0x60>
 8001532:	2a00      	cmp	r2, #0
 8001534:	d12f      	bne.n	8001596 <__ledf2+0x9a>
 8001536:	433c      	orrs	r4, r7
 8001538:	46a3      	mov	fp, r4
 800153a:	4265      	negs	r5, r4
 800153c:	4165      	adcs	r5, r4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d114      	bne.n	800156c <__ledf2+0x70>
 8001542:	464c      	mov	r4, r9
 8001544:	4326      	orrs	r6, r4
 8001546:	d111      	bne.n	800156c <__ledf2+0x70>
 8001548:	465b      	mov	r3, fp
 800154a:	2000      	movs	r0, #0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d017      	beq.n	8001580 <__ledf2+0x84>
 8001550:	e010      	b.n	8001574 <__ledf2+0x78>
 8001552:	003d      	movs	r5, r7
 8001554:	4325      	orrs	r5, r4
 8001556:	d112      	bne.n	800157e <__ledf2+0x82>
 8001558:	4293      	cmp	r3, r2
 800155a:	d11c      	bne.n	8001596 <__ledf2+0x9a>
 800155c:	464d      	mov	r5, r9
 800155e:	432e      	orrs	r6, r5
 8001560:	d10d      	bne.n	800157e <__ledf2+0x82>
 8001562:	2a00      	cmp	r2, #0
 8001564:	d104      	bne.n	8001570 <__ledf2+0x74>
 8001566:	433c      	orrs	r4, r7
 8001568:	4265      	negs	r5, r4
 800156a:	4165      	adcs	r5, r4
 800156c:	2d00      	cmp	r5, #0
 800156e:	d10d      	bne.n	800158c <__ledf2+0x90>
 8001570:	4281      	cmp	r1, r0
 8001572:	d016      	beq.n	80015a2 <__ledf2+0xa6>
 8001574:	2002      	movs	r0, #2
 8001576:	3901      	subs	r1, #1
 8001578:	4008      	ands	r0, r1
 800157a:	3801      	subs	r0, #1
 800157c:	e000      	b.n	8001580 <__ledf2+0x84>
 800157e:	2002      	movs	r0, #2
 8001580:	bcf0      	pop	{r4, r5, r6, r7}
 8001582:	46bb      	mov	fp, r7
 8001584:	46b2      	mov	sl, r6
 8001586:	46a9      	mov	r9, r5
 8001588:	46a0      	mov	r8, r4
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	2800      	cmp	r0, #0
 800158e:	d1f7      	bne.n	8001580 <__ledf2+0x84>
 8001590:	2001      	movs	r0, #1
 8001592:	4240      	negs	r0, r0
 8001594:	e7f4      	b.n	8001580 <__ledf2+0x84>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ea      	bne.n	8001570 <__ledf2+0x74>
 800159a:	464c      	mov	r4, r9
 800159c:	4326      	orrs	r6, r4
 800159e:	d1e7      	bne.n	8001570 <__ledf2+0x74>
 80015a0:	e7e8      	b.n	8001574 <__ledf2+0x78>
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dd06      	ble.n	80015b4 <__ledf2+0xb8>
 80015a6:	4243      	negs	r3, r0
 80015a8:	4158      	adcs	r0, r3
 80015aa:	2302      	movs	r3, #2
 80015ac:	4240      	negs	r0, r0
 80015ae:	4018      	ands	r0, r3
 80015b0:	3801      	subs	r0, #1
 80015b2:	e7e5      	b.n	8001580 <__ledf2+0x84>
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbe9      	blt.n	800158c <__ledf2+0x90>
 80015b8:	454f      	cmp	r7, r9
 80015ba:	d8db      	bhi.n	8001574 <__ledf2+0x78>
 80015bc:	d006      	beq.n	80015cc <__ledf2+0xd0>
 80015be:	2000      	movs	r0, #0
 80015c0:	454f      	cmp	r7, r9
 80015c2:	d2dd      	bcs.n	8001580 <__ledf2+0x84>
 80015c4:	2900      	cmp	r1, #0
 80015c6:	d0e3      	beq.n	8001590 <__ledf2+0x94>
 80015c8:	0008      	movs	r0, r1
 80015ca:	e7d9      	b.n	8001580 <__ledf2+0x84>
 80015cc:	45c4      	cmp	ip, r8
 80015ce:	d8d1      	bhi.n	8001574 <__ledf2+0x78>
 80015d0:	2000      	movs	r0, #0
 80015d2:	45c4      	cmp	ip, r8
 80015d4:	d2d4      	bcs.n	8001580 <__ledf2+0x84>
 80015d6:	e7f5      	b.n	80015c4 <__ledf2+0xc8>
 80015d8:	000007ff 	.word	0x000007ff

080015dc <__aeabi_dmul>:
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	4657      	mov	r7, sl
 80015e0:	464e      	mov	r6, r9
 80015e2:	4645      	mov	r5, r8
 80015e4:	46de      	mov	lr, fp
 80015e6:	b5e0      	push	{r5, r6, r7, lr}
 80015e8:	4698      	mov	r8, r3
 80015ea:	030c      	lsls	r4, r1, #12
 80015ec:	004b      	lsls	r3, r1, #1
 80015ee:	0006      	movs	r6, r0
 80015f0:	4692      	mov	sl, r2
 80015f2:	b087      	sub	sp, #28
 80015f4:	0b24      	lsrs	r4, r4, #12
 80015f6:	0d5b      	lsrs	r3, r3, #21
 80015f8:	0fcf      	lsrs	r7, r1, #31
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d06c      	beq.n	80016d8 <__aeabi_dmul+0xfc>
 80015fe:	4add      	ldr	r2, [pc, #884]	; (8001974 <__aeabi_dmul+0x398>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d100      	bne.n	8001606 <__aeabi_dmul+0x2a>
 8001604:	e086      	b.n	8001714 <__aeabi_dmul+0x138>
 8001606:	0f42      	lsrs	r2, r0, #29
 8001608:	00e4      	lsls	r4, r4, #3
 800160a:	4314      	orrs	r4, r2
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	0412      	lsls	r2, r2, #16
 8001610:	4314      	orrs	r4, r2
 8001612:	4ad9      	ldr	r2, [pc, #868]	; (8001978 <__aeabi_dmul+0x39c>)
 8001614:	00c5      	lsls	r5, r0, #3
 8001616:	4694      	mov	ip, r2
 8001618:	4463      	add	r3, ip
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	4699      	mov	r9, r3
 8001620:	469b      	mov	fp, r3
 8001622:	4643      	mov	r3, r8
 8001624:	4642      	mov	r2, r8
 8001626:	031e      	lsls	r6, r3, #12
 8001628:	0fd2      	lsrs	r2, r2, #31
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4650      	mov	r0, sl
 800162e:	4690      	mov	r8, r2
 8001630:	0b36      	lsrs	r6, r6, #12
 8001632:	0d5b      	lsrs	r3, r3, #21
 8001634:	d100      	bne.n	8001638 <__aeabi_dmul+0x5c>
 8001636:	e078      	b.n	800172a <__aeabi_dmul+0x14e>
 8001638:	4ace      	ldr	r2, [pc, #824]	; (8001974 <__aeabi_dmul+0x398>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01d      	beq.n	800167a <__aeabi_dmul+0x9e>
 800163e:	49ce      	ldr	r1, [pc, #824]	; (8001978 <__aeabi_dmul+0x39c>)
 8001640:	0f42      	lsrs	r2, r0, #29
 8001642:	468c      	mov	ip, r1
 8001644:	9900      	ldr	r1, [sp, #0]
 8001646:	4463      	add	r3, ip
 8001648:	00f6      	lsls	r6, r6, #3
 800164a:	468c      	mov	ip, r1
 800164c:	4316      	orrs	r6, r2
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	449c      	add	ip, r3
 8001652:	0412      	lsls	r2, r2, #16
 8001654:	4663      	mov	r3, ip
 8001656:	4316      	orrs	r6, r2
 8001658:	00c2      	lsls	r2, r0, #3
 800165a:	2000      	movs	r0, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	9900      	ldr	r1, [sp, #0]
 8001660:	4643      	mov	r3, r8
 8001662:	3101      	adds	r1, #1
 8001664:	468c      	mov	ip, r1
 8001666:	4649      	mov	r1, r9
 8001668:	407b      	eors	r3, r7
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	290f      	cmp	r1, #15
 800166e:	d900      	bls.n	8001672 <__aeabi_dmul+0x96>
 8001670:	e07e      	b.n	8001770 <__aeabi_dmul+0x194>
 8001672:	4bc2      	ldr	r3, [pc, #776]	; (800197c <__aeabi_dmul+0x3a0>)
 8001674:	0089      	lsls	r1, r1, #2
 8001676:	5859      	ldr	r1, [r3, r1]
 8001678:	468f      	mov	pc, r1
 800167a:	4652      	mov	r2, sl
 800167c:	9b00      	ldr	r3, [sp, #0]
 800167e:	4332      	orrs	r2, r6
 8001680:	d000      	beq.n	8001684 <__aeabi_dmul+0xa8>
 8001682:	e156      	b.n	8001932 <__aeabi_dmul+0x356>
 8001684:	49bb      	ldr	r1, [pc, #748]	; (8001974 <__aeabi_dmul+0x398>)
 8001686:	2600      	movs	r6, #0
 8001688:	468c      	mov	ip, r1
 800168a:	4463      	add	r3, ip
 800168c:	4649      	mov	r1, r9
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2302      	movs	r3, #2
 8001692:	4319      	orrs	r1, r3
 8001694:	4689      	mov	r9, r1
 8001696:	2002      	movs	r0, #2
 8001698:	e7e1      	b.n	800165e <__aeabi_dmul+0x82>
 800169a:	4643      	mov	r3, r8
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	0034      	movs	r4, r6
 80016a0:	0015      	movs	r5, r2
 80016a2:	4683      	mov	fp, r0
 80016a4:	465b      	mov	r3, fp
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d05e      	beq.n	8001768 <__aeabi_dmul+0x18c>
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dmul+0xd4>
 80016ae:	e1f3      	b.n	8001a98 <__aeabi_dmul+0x4bc>
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d000      	beq.n	80016b6 <__aeabi_dmul+0xda>
 80016b4:	e118      	b.n	80018e8 <__aeabi_dmul+0x30c>
 80016b6:	2200      	movs	r2, #0
 80016b8:	2400      	movs	r4, #0
 80016ba:	2500      	movs	r5, #0
 80016bc:	9b01      	ldr	r3, [sp, #4]
 80016be:	0512      	lsls	r2, r2, #20
 80016c0:	4322      	orrs	r2, r4
 80016c2:	07db      	lsls	r3, r3, #31
 80016c4:	431a      	orrs	r2, r3
 80016c6:	0028      	movs	r0, r5
 80016c8:	0011      	movs	r1, r2
 80016ca:	b007      	add	sp, #28
 80016cc:	bcf0      	pop	{r4, r5, r6, r7}
 80016ce:	46bb      	mov	fp, r7
 80016d0:	46b2      	mov	sl, r6
 80016d2:	46a9      	mov	r9, r5
 80016d4:	46a0      	mov	r8, r4
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	0025      	movs	r5, r4
 80016da:	4305      	orrs	r5, r0
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dmul+0x104>
 80016de:	e141      	b.n	8001964 <__aeabi_dmul+0x388>
 80016e0:	2c00      	cmp	r4, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dmul+0x10a>
 80016e4:	e1ad      	b.n	8001a42 <__aeabi_dmul+0x466>
 80016e6:	0020      	movs	r0, r4
 80016e8:	f000 fe02 	bl	80022f0 <__clzsi2>
 80016ec:	0001      	movs	r1, r0
 80016ee:	0002      	movs	r2, r0
 80016f0:	390b      	subs	r1, #11
 80016f2:	231d      	movs	r3, #29
 80016f4:	0010      	movs	r0, r2
 80016f6:	1a5b      	subs	r3, r3, r1
 80016f8:	0031      	movs	r1, r6
 80016fa:	0035      	movs	r5, r6
 80016fc:	3808      	subs	r0, #8
 80016fe:	4084      	lsls	r4, r0
 8001700:	40d9      	lsrs	r1, r3
 8001702:	4085      	lsls	r5, r0
 8001704:	430c      	orrs	r4, r1
 8001706:	489e      	ldr	r0, [pc, #632]	; (8001980 <__aeabi_dmul+0x3a4>)
 8001708:	1a83      	subs	r3, r0, r2
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2300      	movs	r3, #0
 800170e:	4699      	mov	r9, r3
 8001710:	469b      	mov	fp, r3
 8001712:	e786      	b.n	8001622 <__aeabi_dmul+0x46>
 8001714:	0005      	movs	r5, r0
 8001716:	4325      	orrs	r5, r4
 8001718:	d000      	beq.n	800171c <__aeabi_dmul+0x140>
 800171a:	e11c      	b.n	8001956 <__aeabi_dmul+0x37a>
 800171c:	2208      	movs	r2, #8
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2302      	movs	r3, #2
 8001722:	2400      	movs	r4, #0
 8001724:	4691      	mov	r9, r2
 8001726:	469b      	mov	fp, r3
 8001728:	e77b      	b.n	8001622 <__aeabi_dmul+0x46>
 800172a:	4652      	mov	r2, sl
 800172c:	4332      	orrs	r2, r6
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0x156>
 8001730:	e10a      	b.n	8001948 <__aeabi_dmul+0x36c>
 8001732:	2e00      	cmp	r6, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dmul+0x15c>
 8001736:	e176      	b.n	8001a26 <__aeabi_dmul+0x44a>
 8001738:	0030      	movs	r0, r6
 800173a:	f000 fdd9 	bl	80022f0 <__clzsi2>
 800173e:	0002      	movs	r2, r0
 8001740:	3a0b      	subs	r2, #11
 8001742:	231d      	movs	r3, #29
 8001744:	0001      	movs	r1, r0
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	4652      	mov	r2, sl
 800174a:	3908      	subs	r1, #8
 800174c:	40da      	lsrs	r2, r3
 800174e:	408e      	lsls	r6, r1
 8001750:	4316      	orrs	r6, r2
 8001752:	4652      	mov	r2, sl
 8001754:	408a      	lsls	r2, r1
 8001756:	9b00      	ldr	r3, [sp, #0]
 8001758:	4989      	ldr	r1, [pc, #548]	; (8001980 <__aeabi_dmul+0x3a4>)
 800175a:	1a18      	subs	r0, r3, r0
 800175c:	0003      	movs	r3, r0
 800175e:	468c      	mov	ip, r1
 8001760:	4463      	add	r3, ip
 8001762:	2000      	movs	r0, #0
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	e77a      	b.n	800165e <__aeabi_dmul+0x82>
 8001768:	2400      	movs	r4, #0
 800176a:	2500      	movs	r5, #0
 800176c:	4a81      	ldr	r2, [pc, #516]	; (8001974 <__aeabi_dmul+0x398>)
 800176e:	e7a5      	b.n	80016bc <__aeabi_dmul+0xe0>
 8001770:	0c2f      	lsrs	r7, r5, #16
 8001772:	042d      	lsls	r5, r5, #16
 8001774:	0c2d      	lsrs	r5, r5, #16
 8001776:	002b      	movs	r3, r5
 8001778:	0c11      	lsrs	r1, r2, #16
 800177a:	0412      	lsls	r2, r2, #16
 800177c:	0c12      	lsrs	r2, r2, #16
 800177e:	4353      	muls	r3, r2
 8001780:	4698      	mov	r8, r3
 8001782:	0013      	movs	r3, r2
 8001784:	0028      	movs	r0, r5
 8001786:	437b      	muls	r3, r7
 8001788:	4699      	mov	r9, r3
 800178a:	4348      	muls	r0, r1
 800178c:	4448      	add	r0, r9
 800178e:	4683      	mov	fp, r0
 8001790:	4640      	mov	r0, r8
 8001792:	000b      	movs	r3, r1
 8001794:	0c00      	lsrs	r0, r0, #16
 8001796:	4682      	mov	sl, r0
 8001798:	4658      	mov	r0, fp
 800179a:	437b      	muls	r3, r7
 800179c:	4450      	add	r0, sl
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	4581      	cmp	r9, r0
 80017a2:	d906      	bls.n	80017b2 <__aeabi_dmul+0x1d6>
 80017a4:	469a      	mov	sl, r3
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4699      	mov	r9, r3
 80017ac:	44ca      	add	sl, r9
 80017ae:	4653      	mov	r3, sl
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	0c03      	lsrs	r3, r0, #16
 80017b4:	469b      	mov	fp, r3
 80017b6:	4643      	mov	r3, r8
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	0400      	lsls	r0, r0, #16
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	4698      	mov	r8, r3
 80017c0:	0003      	movs	r3, r0
 80017c2:	4443      	add	r3, r8
 80017c4:	9304      	str	r3, [sp, #16]
 80017c6:	0c33      	lsrs	r3, r6, #16
 80017c8:	4699      	mov	r9, r3
 80017ca:	002b      	movs	r3, r5
 80017cc:	0436      	lsls	r6, r6, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	4373      	muls	r3, r6
 80017d2:	4698      	mov	r8, r3
 80017d4:	0033      	movs	r3, r6
 80017d6:	437b      	muls	r3, r7
 80017d8:	469a      	mov	sl, r3
 80017da:	464b      	mov	r3, r9
 80017dc:	435d      	muls	r5, r3
 80017de:	435f      	muls	r7, r3
 80017e0:	4643      	mov	r3, r8
 80017e2:	4455      	add	r5, sl
 80017e4:	0c18      	lsrs	r0, r3, #16
 80017e6:	1940      	adds	r0, r0, r5
 80017e8:	4582      	cmp	sl, r0
 80017ea:	d903      	bls.n	80017f4 <__aeabi_dmul+0x218>
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	025b      	lsls	r3, r3, #9
 80017f0:	469a      	mov	sl, r3
 80017f2:	4457      	add	r7, sl
 80017f4:	0c05      	lsrs	r5, r0, #16
 80017f6:	19eb      	adds	r3, r5, r7
 80017f8:	9305      	str	r3, [sp, #20]
 80017fa:	4643      	mov	r3, r8
 80017fc:	041d      	lsls	r5, r3, #16
 80017fe:	0c2d      	lsrs	r5, r5, #16
 8001800:	0400      	lsls	r0, r0, #16
 8001802:	1940      	adds	r0, r0, r5
 8001804:	0c25      	lsrs	r5, r4, #16
 8001806:	0424      	lsls	r4, r4, #16
 8001808:	0c24      	lsrs	r4, r4, #16
 800180a:	0027      	movs	r7, r4
 800180c:	4357      	muls	r7, r2
 800180e:	436a      	muls	r2, r5
 8001810:	4690      	mov	r8, r2
 8001812:	002a      	movs	r2, r5
 8001814:	0c3b      	lsrs	r3, r7, #16
 8001816:	469a      	mov	sl, r3
 8001818:	434a      	muls	r2, r1
 800181a:	4361      	muls	r1, r4
 800181c:	4441      	add	r1, r8
 800181e:	4451      	add	r1, sl
 8001820:	4483      	add	fp, r0
 8001822:	4588      	cmp	r8, r1
 8001824:	d903      	bls.n	800182e <__aeabi_dmul+0x252>
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	025b      	lsls	r3, r3, #9
 800182a:	4698      	mov	r8, r3
 800182c:	4442      	add	r2, r8
 800182e:	043f      	lsls	r7, r7, #16
 8001830:	0c0b      	lsrs	r3, r1, #16
 8001832:	0c3f      	lsrs	r7, r7, #16
 8001834:	0409      	lsls	r1, r1, #16
 8001836:	19c9      	adds	r1, r1, r7
 8001838:	0027      	movs	r7, r4
 800183a:	4698      	mov	r8, r3
 800183c:	464b      	mov	r3, r9
 800183e:	4377      	muls	r7, r6
 8001840:	435c      	muls	r4, r3
 8001842:	436e      	muls	r6, r5
 8001844:	435d      	muls	r5, r3
 8001846:	0c3b      	lsrs	r3, r7, #16
 8001848:	4699      	mov	r9, r3
 800184a:	19a4      	adds	r4, r4, r6
 800184c:	444c      	add	r4, r9
 800184e:	4442      	add	r2, r8
 8001850:	9503      	str	r5, [sp, #12]
 8001852:	42a6      	cmp	r6, r4
 8001854:	d904      	bls.n	8001860 <__aeabi_dmul+0x284>
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	025b      	lsls	r3, r3, #9
 800185a:	4698      	mov	r8, r3
 800185c:	4445      	add	r5, r8
 800185e:	9503      	str	r5, [sp, #12]
 8001860:	9b02      	ldr	r3, [sp, #8]
 8001862:	043f      	lsls	r7, r7, #16
 8001864:	445b      	add	r3, fp
 8001866:	001e      	movs	r6, r3
 8001868:	4283      	cmp	r3, r0
 800186a:	4180      	sbcs	r0, r0
 800186c:	0423      	lsls	r3, r4, #16
 800186e:	4698      	mov	r8, r3
 8001870:	9b05      	ldr	r3, [sp, #20]
 8001872:	0c3f      	lsrs	r7, r7, #16
 8001874:	4447      	add	r7, r8
 8001876:	4698      	mov	r8, r3
 8001878:	1876      	adds	r6, r6, r1
 800187a:	428e      	cmp	r6, r1
 800187c:	4189      	sbcs	r1, r1
 800187e:	4447      	add	r7, r8
 8001880:	4240      	negs	r0, r0
 8001882:	183d      	adds	r5, r7, r0
 8001884:	46a8      	mov	r8, r5
 8001886:	4693      	mov	fp, r2
 8001888:	4249      	negs	r1, r1
 800188a:	468a      	mov	sl, r1
 800188c:	44c3      	add	fp, r8
 800188e:	429f      	cmp	r7, r3
 8001890:	41bf      	sbcs	r7, r7
 8001892:	4580      	cmp	r8, r0
 8001894:	4180      	sbcs	r0, r0
 8001896:	9b03      	ldr	r3, [sp, #12]
 8001898:	44da      	add	sl, fp
 800189a:	4698      	mov	r8, r3
 800189c:	4653      	mov	r3, sl
 800189e:	4240      	negs	r0, r0
 80018a0:	427f      	negs	r7, r7
 80018a2:	4307      	orrs	r7, r0
 80018a4:	0c24      	lsrs	r4, r4, #16
 80018a6:	4593      	cmp	fp, r2
 80018a8:	4192      	sbcs	r2, r2
 80018aa:	458a      	cmp	sl, r1
 80018ac:	4189      	sbcs	r1, r1
 80018ae:	193f      	adds	r7, r7, r4
 80018b0:	0ddc      	lsrs	r4, r3, #23
 80018b2:	9b04      	ldr	r3, [sp, #16]
 80018b4:	0275      	lsls	r5, r6, #9
 80018b6:	431d      	orrs	r5, r3
 80018b8:	1e68      	subs	r0, r5, #1
 80018ba:	4185      	sbcs	r5, r0
 80018bc:	4653      	mov	r3, sl
 80018be:	4252      	negs	r2, r2
 80018c0:	4249      	negs	r1, r1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	18bf      	adds	r7, r7, r2
 80018c6:	4447      	add	r7, r8
 80018c8:	0df6      	lsrs	r6, r6, #23
 80018ca:	027f      	lsls	r7, r7, #9
 80018cc:	4335      	orrs	r5, r6
 80018ce:	025a      	lsls	r2, r3, #9
 80018d0:	433c      	orrs	r4, r7
 80018d2:	4315      	orrs	r5, r2
 80018d4:	01fb      	lsls	r3, r7, #7
 80018d6:	d400      	bmi.n	80018da <__aeabi_dmul+0x2fe>
 80018d8:	e0c1      	b.n	8001a5e <__aeabi_dmul+0x482>
 80018da:	2101      	movs	r1, #1
 80018dc:	086a      	lsrs	r2, r5, #1
 80018de:	400d      	ands	r5, r1
 80018e0:	4315      	orrs	r5, r2
 80018e2:	07e2      	lsls	r2, r4, #31
 80018e4:	4315      	orrs	r5, r2
 80018e6:	0864      	lsrs	r4, r4, #1
 80018e8:	4926      	ldr	r1, [pc, #152]	; (8001984 <__aeabi_dmul+0x3a8>)
 80018ea:	4461      	add	r1, ip
 80018ec:	2900      	cmp	r1, #0
 80018ee:	dd56      	ble.n	800199e <__aeabi_dmul+0x3c2>
 80018f0:	076b      	lsls	r3, r5, #29
 80018f2:	d009      	beq.n	8001908 <__aeabi_dmul+0x32c>
 80018f4:	220f      	movs	r2, #15
 80018f6:	402a      	ands	r2, r5
 80018f8:	2a04      	cmp	r2, #4
 80018fa:	d005      	beq.n	8001908 <__aeabi_dmul+0x32c>
 80018fc:	1d2a      	adds	r2, r5, #4
 80018fe:	42aa      	cmp	r2, r5
 8001900:	41ad      	sbcs	r5, r5
 8001902:	426d      	negs	r5, r5
 8001904:	1964      	adds	r4, r4, r5
 8001906:	0015      	movs	r5, r2
 8001908:	01e3      	lsls	r3, r4, #7
 800190a:	d504      	bpl.n	8001916 <__aeabi_dmul+0x33a>
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <__aeabi_dmul+0x3ac>)
 8001910:	00c9      	lsls	r1, r1, #3
 8001912:	4014      	ands	r4, r2
 8001914:	4461      	add	r1, ip
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <__aeabi_dmul+0x3b0>)
 8001918:	4291      	cmp	r1, r2
 800191a:	dd00      	ble.n	800191e <__aeabi_dmul+0x342>
 800191c:	e724      	b.n	8001768 <__aeabi_dmul+0x18c>
 800191e:	0762      	lsls	r2, r4, #29
 8001920:	08ed      	lsrs	r5, r5, #3
 8001922:	0264      	lsls	r4, r4, #9
 8001924:	0549      	lsls	r1, r1, #21
 8001926:	4315      	orrs	r5, r2
 8001928:	0b24      	lsrs	r4, r4, #12
 800192a:	0d4a      	lsrs	r2, r1, #21
 800192c:	e6c6      	b.n	80016bc <__aeabi_dmul+0xe0>
 800192e:	9701      	str	r7, [sp, #4]
 8001930:	e6b8      	b.n	80016a4 <__aeabi_dmul+0xc8>
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <__aeabi_dmul+0x398>)
 8001934:	2003      	movs	r0, #3
 8001936:	4694      	mov	ip, r2
 8001938:	4463      	add	r3, ip
 800193a:	464a      	mov	r2, r9
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2303      	movs	r3, #3
 8001940:	431a      	orrs	r2, r3
 8001942:	4691      	mov	r9, r2
 8001944:	4652      	mov	r2, sl
 8001946:	e68a      	b.n	800165e <__aeabi_dmul+0x82>
 8001948:	4649      	mov	r1, r9
 800194a:	2301      	movs	r3, #1
 800194c:	4319      	orrs	r1, r3
 800194e:	4689      	mov	r9, r1
 8001950:	2600      	movs	r6, #0
 8001952:	2001      	movs	r0, #1
 8001954:	e683      	b.n	800165e <__aeabi_dmul+0x82>
 8001956:	220c      	movs	r2, #12
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2303      	movs	r3, #3
 800195c:	0005      	movs	r5, r0
 800195e:	4691      	mov	r9, r2
 8001960:	469b      	mov	fp, r3
 8001962:	e65e      	b.n	8001622 <__aeabi_dmul+0x46>
 8001964:	2304      	movs	r3, #4
 8001966:	4699      	mov	r9, r3
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	2400      	movs	r4, #0
 8001970:	469b      	mov	fp, r3
 8001972:	e656      	b.n	8001622 <__aeabi_dmul+0x46>
 8001974:	000007ff 	.word	0x000007ff
 8001978:	fffffc01 	.word	0xfffffc01
 800197c:	080051e0 	.word	0x080051e0
 8001980:	fffffc0d 	.word	0xfffffc0d
 8001984:	000003ff 	.word	0x000003ff
 8001988:	feffffff 	.word	0xfeffffff
 800198c:	000007fe 	.word	0x000007fe
 8001990:	2300      	movs	r3, #0
 8001992:	2480      	movs	r4, #128	; 0x80
 8001994:	2500      	movs	r5, #0
 8001996:	4a44      	ldr	r2, [pc, #272]	; (8001aa8 <__aeabi_dmul+0x4cc>)
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	0324      	lsls	r4, r4, #12
 800199c:	e68e      	b.n	80016bc <__aeabi_dmul+0xe0>
 800199e:	2001      	movs	r0, #1
 80019a0:	1a40      	subs	r0, r0, r1
 80019a2:	2838      	cmp	r0, #56	; 0x38
 80019a4:	dd00      	ble.n	80019a8 <__aeabi_dmul+0x3cc>
 80019a6:	e686      	b.n	80016b6 <__aeabi_dmul+0xda>
 80019a8:	281f      	cmp	r0, #31
 80019aa:	dd5b      	ble.n	8001a64 <__aeabi_dmul+0x488>
 80019ac:	221f      	movs	r2, #31
 80019ae:	0023      	movs	r3, r4
 80019b0:	4252      	negs	r2, r2
 80019b2:	1a51      	subs	r1, r2, r1
 80019b4:	40cb      	lsrs	r3, r1
 80019b6:	0019      	movs	r1, r3
 80019b8:	2820      	cmp	r0, #32
 80019ba:	d003      	beq.n	80019c4 <__aeabi_dmul+0x3e8>
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <__aeabi_dmul+0x4d0>)
 80019be:	4462      	add	r2, ip
 80019c0:	4094      	lsls	r4, r2
 80019c2:	4325      	orrs	r5, r4
 80019c4:	1e6a      	subs	r2, r5, #1
 80019c6:	4195      	sbcs	r5, r2
 80019c8:	002a      	movs	r2, r5
 80019ca:	430a      	orrs	r2, r1
 80019cc:	2107      	movs	r1, #7
 80019ce:	000d      	movs	r5, r1
 80019d0:	2400      	movs	r4, #0
 80019d2:	4015      	ands	r5, r2
 80019d4:	4211      	tst	r1, r2
 80019d6:	d05b      	beq.n	8001a90 <__aeabi_dmul+0x4b4>
 80019d8:	210f      	movs	r1, #15
 80019da:	2400      	movs	r4, #0
 80019dc:	4011      	ands	r1, r2
 80019de:	2904      	cmp	r1, #4
 80019e0:	d053      	beq.n	8001a8a <__aeabi_dmul+0x4ae>
 80019e2:	1d11      	adds	r1, r2, #4
 80019e4:	4291      	cmp	r1, r2
 80019e6:	4192      	sbcs	r2, r2
 80019e8:	4252      	negs	r2, r2
 80019ea:	18a4      	adds	r4, r4, r2
 80019ec:	000a      	movs	r2, r1
 80019ee:	0223      	lsls	r3, r4, #8
 80019f0:	d54b      	bpl.n	8001a8a <__aeabi_dmul+0x4ae>
 80019f2:	2201      	movs	r2, #1
 80019f4:	2400      	movs	r4, #0
 80019f6:	2500      	movs	r5, #0
 80019f8:	e660      	b.n	80016bc <__aeabi_dmul+0xe0>
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	421c      	tst	r4, r3
 8001a00:	d009      	beq.n	8001a16 <__aeabi_dmul+0x43a>
 8001a02:	421e      	tst	r6, r3
 8001a04:	d107      	bne.n	8001a16 <__aeabi_dmul+0x43a>
 8001a06:	4333      	orrs	r3, r6
 8001a08:	031c      	lsls	r4, r3, #12
 8001a0a:	4643      	mov	r3, r8
 8001a0c:	0015      	movs	r5, r2
 8001a0e:	0b24      	lsrs	r4, r4, #12
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <__aeabi_dmul+0x4cc>)
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	e652      	b.n	80016bc <__aeabi_dmul+0xe0>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0312      	lsls	r2, r2, #12
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <__aeabi_dmul+0x4cc>)
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	9701      	str	r7, [sp, #4]
 8001a24:	e64a      	b.n	80016bc <__aeabi_dmul+0xe0>
 8001a26:	f000 fc63 	bl	80022f0 <__clzsi2>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	3215      	adds	r2, #21
 8001a30:	3020      	adds	r0, #32
 8001a32:	2a1c      	cmp	r2, #28
 8001a34:	dc00      	bgt.n	8001a38 <__aeabi_dmul+0x45c>
 8001a36:	e684      	b.n	8001742 <__aeabi_dmul+0x166>
 8001a38:	4656      	mov	r6, sl
 8001a3a:	3b08      	subs	r3, #8
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	409e      	lsls	r6, r3
 8001a40:	e689      	b.n	8001756 <__aeabi_dmul+0x17a>
 8001a42:	f000 fc55 	bl	80022f0 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0002      	movs	r2, r0
 8001a4a:	3115      	adds	r1, #21
 8001a4c:	3220      	adds	r2, #32
 8001a4e:	291c      	cmp	r1, #28
 8001a50:	dc00      	bgt.n	8001a54 <__aeabi_dmul+0x478>
 8001a52:	e64e      	b.n	80016f2 <__aeabi_dmul+0x116>
 8001a54:	0034      	movs	r4, r6
 8001a56:	3808      	subs	r0, #8
 8001a58:	2500      	movs	r5, #0
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	e653      	b.n	8001706 <__aeabi_dmul+0x12a>
 8001a5e:	9b00      	ldr	r3, [sp, #0]
 8001a60:	469c      	mov	ip, r3
 8001a62:	e741      	b.n	80018e8 <__aeabi_dmul+0x30c>
 8001a64:	4912      	ldr	r1, [pc, #72]	; (8001ab0 <__aeabi_dmul+0x4d4>)
 8001a66:	0022      	movs	r2, r4
 8001a68:	4461      	add	r1, ip
 8001a6a:	002e      	movs	r6, r5
 8001a6c:	408d      	lsls	r5, r1
 8001a6e:	408a      	lsls	r2, r1
 8001a70:	40c6      	lsrs	r6, r0
 8001a72:	1e69      	subs	r1, r5, #1
 8001a74:	418d      	sbcs	r5, r1
 8001a76:	4332      	orrs	r2, r6
 8001a78:	432a      	orrs	r2, r5
 8001a7a:	40c4      	lsrs	r4, r0
 8001a7c:	0753      	lsls	r3, r2, #29
 8001a7e:	d0b6      	beq.n	80019ee <__aeabi_dmul+0x412>
 8001a80:	210f      	movs	r1, #15
 8001a82:	4011      	ands	r1, r2
 8001a84:	2904      	cmp	r1, #4
 8001a86:	d1ac      	bne.n	80019e2 <__aeabi_dmul+0x406>
 8001a88:	e7b1      	b.n	80019ee <__aeabi_dmul+0x412>
 8001a8a:	0765      	lsls	r5, r4, #29
 8001a8c:	0264      	lsls	r4, r4, #9
 8001a8e:	0b24      	lsrs	r4, r4, #12
 8001a90:	08d2      	lsrs	r2, r2, #3
 8001a92:	4315      	orrs	r5, r2
 8001a94:	2200      	movs	r2, #0
 8001a96:	e611      	b.n	80016bc <__aeabi_dmul+0xe0>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0312      	lsls	r2, r2, #12
 8001a9c:	4314      	orrs	r4, r2
 8001a9e:	0324      	lsls	r4, r4, #12
 8001aa0:	4a01      	ldr	r2, [pc, #4]	; (8001aa8 <__aeabi_dmul+0x4cc>)
 8001aa2:	0b24      	lsrs	r4, r4, #12
 8001aa4:	e60a      	b.n	80016bc <__aeabi_dmul+0xe0>
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	0000043e 	.word	0x0000043e
 8001ab0:	0000041e 	.word	0x0000041e

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	0004      	movs	r4, r0
 8001ac0:	b5e0      	push	{r5, r6, r7, lr}
 8001ac2:	001f      	movs	r7, r3
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	030b      	lsls	r3, r1, #12
 8001ac8:	0f62      	lsrs	r2, r4, #29
 8001aca:	004e      	lsls	r6, r1, #1
 8001acc:	0fcd      	lsrs	r5, r1, #31
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	0339      	lsls	r1, r7, #12
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	0a49      	lsrs	r1, r1, #9
 8001ad6:	00e2      	lsls	r2, r4, #3
 8001ad8:	0f44      	lsrs	r4, r0, #29
 8001ada:	4321      	orrs	r1, r4
 8001adc:	4cc2      	ldr	r4, [pc, #776]	; (8001de8 <__aeabi_dsub+0x334>)
 8001ade:	4691      	mov	r9, r2
 8001ae0:	4692      	mov	sl, r2
 8001ae2:	00c0      	lsls	r0, r0, #3
 8001ae4:	007a      	lsls	r2, r7, #1
 8001ae6:	4680      	mov	r8, r0
 8001ae8:	0d76      	lsrs	r6, r6, #21
 8001aea:	0d52      	lsrs	r2, r2, #21
 8001aec:	0fff      	lsrs	r7, r7, #31
 8001aee:	42a2      	cmp	r2, r4
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x40>
 8001af2:	e0b4      	b.n	8001c5e <__aeabi_dsub+0x1aa>
 8001af4:	2401      	movs	r4, #1
 8001af6:	4067      	eors	r7, r4
 8001af8:	46bb      	mov	fp, r7
 8001afa:	42bd      	cmp	r5, r7
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x4c>
 8001afe:	e088      	b.n	8001c12 <__aeabi_dsub+0x15e>
 8001b00:	1ab4      	subs	r4, r6, r2
 8001b02:	46a4      	mov	ip, r4
 8001b04:	2c00      	cmp	r4, #0
 8001b06:	dc00      	bgt.n	8001b0a <__aeabi_dsub+0x56>
 8001b08:	e0b2      	b.n	8001c70 <__aeabi_dsub+0x1bc>
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0c5      	b.n	8001c9c <__aeabi_dsub+0x1e8>
 8001b10:	4ab5      	ldr	r2, [pc, #724]	; (8001de8 <__aeabi_dsub+0x334>)
 8001b12:	4296      	cmp	r6, r2
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x64>
 8001b16:	e28b      	b.n	8002030 <__aeabi_dsub+0x57c>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0412      	lsls	r2, r2, #16
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	4662      	mov	r2, ip
 8001b20:	2a38      	cmp	r2, #56	; 0x38
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x72>
 8001b24:	e1a1      	b.n	8001e6a <__aeabi_dsub+0x3b6>
 8001b26:	2a1f      	cmp	r2, #31
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e216      	b.n	8001f5a <__aeabi_dsub+0x4a6>
 8001b2c:	2720      	movs	r7, #32
 8001b2e:	000c      	movs	r4, r1
 8001b30:	1abf      	subs	r7, r7, r2
 8001b32:	40bc      	lsls	r4, r7
 8001b34:	0002      	movs	r2, r0
 8001b36:	46a0      	mov	r8, r4
 8001b38:	4664      	mov	r4, ip
 8001b3a:	40b8      	lsls	r0, r7
 8001b3c:	40e2      	lsrs	r2, r4
 8001b3e:	4644      	mov	r4, r8
 8001b40:	4314      	orrs	r4, r2
 8001b42:	0002      	movs	r2, r0
 8001b44:	1e50      	subs	r0, r2, #1
 8001b46:	4182      	sbcs	r2, r0
 8001b48:	4660      	mov	r0, ip
 8001b4a:	40c1      	lsrs	r1, r0
 8001b4c:	4322      	orrs	r2, r4
 8001b4e:	1a5b      	subs	r3, r3, r1
 8001b50:	4649      	mov	r1, r9
 8001b52:	1a8c      	subs	r4, r1, r2
 8001b54:	45a1      	cmp	r9, r4
 8001b56:	4192      	sbcs	r2, r2
 8001b58:	4252      	negs	r2, r2
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	4643      	mov	r3, r8
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	d400      	bmi.n	8001b66 <__aeabi_dsub+0xb2>
 8001b64:	e117      	b.n	8001d96 <__aeabi_dsub+0x2e2>
 8001b66:	4643      	mov	r3, r8
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	0a5b      	lsrs	r3, r3, #9
 8001b6c:	4698      	mov	r8, r3
 8001b6e:	4643      	mov	r3, r8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dsub+0xc2>
 8001b74:	e16c      	b.n	8001e50 <__aeabi_dsub+0x39c>
 8001b76:	4640      	mov	r0, r8
 8001b78:	f000 fbba 	bl	80022f0 <__clzsi2>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	3a08      	subs	r2, #8
 8001b80:	2120      	movs	r1, #32
 8001b82:	0020      	movs	r0, r4
 8001b84:	4643      	mov	r3, r8
 8001b86:	1a89      	subs	r1, r1, r2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	40c8      	lsrs	r0, r1
 8001b8c:	4094      	lsls	r4, r2
 8001b8e:	4303      	orrs	r3, r0
 8001b90:	4296      	cmp	r6, r2
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dsub+0xe2>
 8001b94:	e157      	b.n	8001e46 <__aeabi_dsub+0x392>
 8001b96:	1b96      	subs	r6, r2, r6
 8001b98:	1c71      	adds	r1, r6, #1
 8001b9a:	291f      	cmp	r1, #31
 8001b9c:	dd00      	ble.n	8001ba0 <__aeabi_dsub+0xec>
 8001b9e:	e1cb      	b.n	8001f38 <__aeabi_dsub+0x484>
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	0026      	movs	r6, r4
 8001ba6:	1a52      	subs	r2, r2, r1
 8001ba8:	4094      	lsls	r4, r2
 8001baa:	4090      	lsls	r0, r2
 8001bac:	40ce      	lsrs	r6, r1
 8001bae:	40cb      	lsrs	r3, r1
 8001bb0:	1e62      	subs	r2, r4, #1
 8001bb2:	4194      	sbcs	r4, r2
 8001bb4:	4330      	orrs	r0, r6
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	2600      	movs	r6, #0
 8001bba:	4304      	orrs	r4, r0
 8001bbc:	0763      	lsls	r3, r4, #29
 8001bbe:	d009      	beq.n	8001bd4 <__aeabi_dsub+0x120>
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	4023      	ands	r3, r4
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d005      	beq.n	8001bd4 <__aeabi_dsub+0x120>
 8001bc8:	1d23      	adds	r3, r4, #4
 8001bca:	42a3      	cmp	r3, r4
 8001bcc:	41a4      	sbcs	r4, r4
 8001bce:	4264      	negs	r4, r4
 8001bd0:	44a0      	add	r8, r4
 8001bd2:	001c      	movs	r4, r3
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	d400      	bmi.n	8001bdc <__aeabi_dsub+0x128>
 8001bda:	e0df      	b.n	8001d9c <__aeabi_dsub+0x2e8>
 8001bdc:	4b82      	ldr	r3, [pc, #520]	; (8001de8 <__aeabi_dsub+0x334>)
 8001bde:	3601      	adds	r6, #1
 8001be0:	429e      	cmp	r6, r3
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x132>
 8001be4:	e0fb      	b.n	8001dde <__aeabi_dsub+0x32a>
 8001be6:	4642      	mov	r2, r8
 8001be8:	4b80      	ldr	r3, [pc, #512]	; (8001dec <__aeabi_dsub+0x338>)
 8001bea:	08e4      	lsrs	r4, r4, #3
 8001bec:	401a      	ands	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	0571      	lsls	r1, r6, #21
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4322      	orrs	r2, r4
 8001bf8:	0b1b      	lsrs	r3, r3, #12
 8001bfa:	0d49      	lsrs	r1, r1, #21
 8001bfc:	0509      	lsls	r1, r1, #20
 8001bfe:	07ed      	lsls	r5, r5, #31
 8001c00:	4319      	orrs	r1, r3
 8001c02:	4329      	orrs	r1, r5
 8001c04:	0010      	movs	r0, r2
 8001c06:	bcf0      	pop	{r4, r5, r6, r7}
 8001c08:	46bb      	mov	fp, r7
 8001c0a:	46b2      	mov	sl, r6
 8001c0c:	46a9      	mov	r9, r5
 8001c0e:	46a0      	mov	r8, r4
 8001c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c12:	1ab4      	subs	r4, r6, r2
 8001c14:	46a4      	mov	ip, r4
 8001c16:	2c00      	cmp	r4, #0
 8001c18:	dd58      	ble.n	8001ccc <__aeabi_dsub+0x218>
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x16c>
 8001c1e:	e09e      	b.n	8001d5e <__aeabi_dsub+0x2aa>
 8001c20:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <__aeabi_dsub+0x334>)
 8001c22:	4296      	cmp	r6, r2
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x174>
 8001c26:	e13b      	b.n	8001ea0 <__aeabi_dsub+0x3ec>
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	0412      	lsls	r2, r2, #16
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	4662      	mov	r2, ip
 8001c30:	2a38      	cmp	r2, #56	; 0x38
 8001c32:	dd00      	ble.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0c1      	b.n	8001dba <__aeabi_dsub+0x306>
 8001c36:	2a1f      	cmp	r2, #31
 8001c38:	dc00      	bgt.n	8001c3c <__aeabi_dsub+0x188>
 8001c3a:	e1bb      	b.n	8001fb4 <__aeabi_dsub+0x500>
 8001c3c:	000c      	movs	r4, r1
 8001c3e:	3a20      	subs	r2, #32
 8001c40:	40d4      	lsrs	r4, r2
 8001c42:	0022      	movs	r2, r4
 8001c44:	4664      	mov	r4, ip
 8001c46:	2c20      	cmp	r4, #32
 8001c48:	d004      	beq.n	8001c54 <__aeabi_dsub+0x1a0>
 8001c4a:	2740      	movs	r7, #64	; 0x40
 8001c4c:	1b3f      	subs	r7, r7, r4
 8001c4e:	40b9      	lsls	r1, r7
 8001c50:	4308      	orrs	r0, r1
 8001c52:	4680      	mov	r8, r0
 8001c54:	4644      	mov	r4, r8
 8001c56:	1e61      	subs	r1, r4, #1
 8001c58:	418c      	sbcs	r4, r1
 8001c5a:	4314      	orrs	r4, r2
 8001c5c:	e0b1      	b.n	8001dc2 <__aeabi_dsub+0x30e>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	4304      	orrs	r4, r0
 8001c62:	d02a      	beq.n	8001cba <__aeabi_dsub+0x206>
 8001c64:	46bb      	mov	fp, r7
 8001c66:	42bd      	cmp	r5, r7
 8001c68:	d02d      	beq.n	8001cc6 <__aeabi_dsub+0x212>
 8001c6a:	4c61      	ldr	r4, [pc, #388]	; (8001df0 <__aeabi_dsub+0x33c>)
 8001c6c:	46a4      	mov	ip, r4
 8001c6e:	44b4      	add	ip, r6
 8001c70:	4664      	mov	r4, ip
 8001c72:	2c00      	cmp	r4, #0
 8001c74:	d05c      	beq.n	8001d30 <__aeabi_dsub+0x27c>
 8001c76:	1b94      	subs	r4, r2, r6
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	2e00      	cmp	r6, #0
 8001c7c:	d000      	beq.n	8001c80 <__aeabi_dsub+0x1cc>
 8001c7e:	e115      	b.n	8001eac <__aeabi_dsub+0x3f8>
 8001c80:	464d      	mov	r5, r9
 8001c82:	431d      	orrs	r5, r3
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x1d4>
 8001c86:	e1c3      	b.n	8002010 <__aeabi_dsub+0x55c>
 8001c88:	1e65      	subs	r5, r4, #1
 8001c8a:	2c01      	cmp	r4, #1
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e20c      	b.n	80020aa <__aeabi_dsub+0x5f6>
 8001c90:	4e55      	ldr	r6, [pc, #340]	; (8001de8 <__aeabi_dsub+0x334>)
 8001c92:	42b4      	cmp	r4, r6
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1f8      	b.n	800208a <__aeabi_dsub+0x5d6>
 8001c98:	46ac      	mov	ip, r5
 8001c9a:	e10e      	b.n	8001eba <__aeabi_dsub+0x406>
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	4302      	orrs	r2, r0
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x1f0>
 8001ca2:	e136      	b.n	8001f12 <__aeabi_dsub+0x45e>
 8001ca4:	0022      	movs	r2, r4
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	2c01      	cmp	r4, #1
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x1fa>
 8001cac:	e1c6      	b.n	800203c <__aeabi_dsub+0x588>
 8001cae:	4c4e      	ldr	r4, [pc, #312]	; (8001de8 <__aeabi_dsub+0x334>)
 8001cb0:	45a4      	cmp	ip, r4
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0f4      	b.n	8001ea0 <__aeabi_dsub+0x3ec>
 8001cb6:	4694      	mov	ip, r2
 8001cb8:	e731      	b.n	8001b1e <__aeabi_dsub+0x6a>
 8001cba:	2401      	movs	r4, #1
 8001cbc:	4067      	eors	r7, r4
 8001cbe:	46bb      	mov	fp, r7
 8001cc0:	42bd      	cmp	r5, r7
 8001cc2:	d000      	beq.n	8001cc6 <__aeabi_dsub+0x212>
 8001cc4:	e71c      	b.n	8001b00 <__aeabi_dsub+0x4c>
 8001cc6:	4c4a      	ldr	r4, [pc, #296]	; (8001df0 <__aeabi_dsub+0x33c>)
 8001cc8:	46a4      	mov	ip, r4
 8001cca:	44b4      	add	ip, r6
 8001ccc:	4664      	mov	r4, ip
 8001cce:	2c00      	cmp	r4, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x220>
 8001cd2:	e0cf      	b.n	8001e74 <__aeabi_dsub+0x3c0>
 8001cd4:	1b94      	subs	r4, r2, r6
 8001cd6:	46a4      	mov	ip, r4
 8001cd8:	2e00      	cmp	r6, #0
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x22a>
 8001cdc:	e15c      	b.n	8001f98 <__aeabi_dsub+0x4e4>
 8001cde:	4e42      	ldr	r6, [pc, #264]	; (8001de8 <__aeabi_dsub+0x334>)
 8001ce0:	42b2      	cmp	r2, r6
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e1ec      	b.n	80020c0 <__aeabi_dsub+0x60c>
 8001ce6:	2680      	movs	r6, #128	; 0x80
 8001ce8:	0436      	lsls	r6, r6, #16
 8001cea:	4333      	orrs	r3, r6
 8001cec:	4664      	mov	r4, ip
 8001cee:	2c38      	cmp	r4, #56	; 0x38
 8001cf0:	dd00      	ble.n	8001cf4 <__aeabi_dsub+0x240>
 8001cf2:	e1b3      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001cf4:	2c1f      	cmp	r4, #31
 8001cf6:	dd00      	ble.n	8001cfa <__aeabi_dsub+0x246>
 8001cf8:	e238      	b.n	800216c <__aeabi_dsub+0x6b8>
 8001cfa:	2620      	movs	r6, #32
 8001cfc:	1b36      	subs	r6, r6, r4
 8001cfe:	001c      	movs	r4, r3
 8001d00:	40b4      	lsls	r4, r6
 8001d02:	464f      	mov	r7, r9
 8001d04:	46a0      	mov	r8, r4
 8001d06:	4664      	mov	r4, ip
 8001d08:	40e7      	lsrs	r7, r4
 8001d0a:	4644      	mov	r4, r8
 8001d0c:	433c      	orrs	r4, r7
 8001d0e:	464f      	mov	r7, r9
 8001d10:	40b7      	lsls	r7, r6
 8001d12:	003e      	movs	r6, r7
 8001d14:	1e77      	subs	r7, r6, #1
 8001d16:	41be      	sbcs	r6, r7
 8001d18:	4334      	orrs	r4, r6
 8001d1a:	4666      	mov	r6, ip
 8001d1c:	40f3      	lsrs	r3, r6
 8001d1e:	18c9      	adds	r1, r1, r3
 8001d20:	1824      	adds	r4, r4, r0
 8001d22:	4284      	cmp	r4, r0
 8001d24:	419b      	sbcs	r3, r3
 8001d26:	425b      	negs	r3, r3
 8001d28:	4698      	mov	r8, r3
 8001d2a:	0016      	movs	r6, r2
 8001d2c:	4488      	add	r8, r1
 8001d2e:	e04e      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001d30:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <__aeabi_dsub+0x340>)
 8001d32:	1c74      	adds	r4, r6, #1
 8001d34:	4214      	tst	r4, r2
 8001d36:	d000      	beq.n	8001d3a <__aeabi_dsub+0x286>
 8001d38:	e0d6      	b.n	8001ee8 <__aeabi_dsub+0x434>
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	2e00      	cmp	r6, #0
 8001d40:	d000      	beq.n	8001d44 <__aeabi_dsub+0x290>
 8001d42:	e15b      	b.n	8001ffc <__aeabi_dsub+0x548>
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x296>
 8001d48:	e1a5      	b.n	8002096 <__aeabi_dsub+0x5e2>
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	4302      	orrs	r2, r0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x29e>
 8001d50:	e1bb      	b.n	80020ca <__aeabi_dsub+0x616>
 8001d52:	464a      	mov	r2, r9
 8001d54:	0759      	lsls	r1, r3, #29
 8001d56:	08d2      	lsrs	r2, r2, #3
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	08db      	lsrs	r3, r3, #3
 8001d5c:	e027      	b.n	8001dae <__aeabi_dsub+0x2fa>
 8001d5e:	000a      	movs	r2, r1
 8001d60:	4302      	orrs	r2, r0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x2b2>
 8001d64:	e174      	b.n	8002050 <__aeabi_dsub+0x59c>
 8001d66:	0022      	movs	r2, r4
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	2c01      	cmp	r4, #1
 8001d6c:	d005      	beq.n	8001d7a <__aeabi_dsub+0x2c6>
 8001d6e:	4c1e      	ldr	r4, [pc, #120]	; (8001de8 <__aeabi_dsub+0x334>)
 8001d70:	45a4      	cmp	ip, r4
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x2c2>
 8001d74:	e094      	b.n	8001ea0 <__aeabi_dsub+0x3ec>
 8001d76:	4694      	mov	ip, r2
 8001d78:	e759      	b.n	8001c2e <__aeabi_dsub+0x17a>
 8001d7a:	4448      	add	r0, r9
 8001d7c:	4548      	cmp	r0, r9
 8001d7e:	4192      	sbcs	r2, r2
 8001d80:	185b      	adds	r3, r3, r1
 8001d82:	4698      	mov	r8, r3
 8001d84:	0004      	movs	r4, r0
 8001d86:	4252      	negs	r2, r2
 8001d88:	4490      	add	r8, r2
 8001d8a:	4643      	mov	r3, r8
 8001d8c:	2602      	movs	r6, #2
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	d500      	bpl.n	8001d94 <__aeabi_dsub+0x2e0>
 8001d92:	e0c4      	b.n	8001f1e <__aeabi_dsub+0x46a>
 8001d94:	3e01      	subs	r6, #1
 8001d96:	0763      	lsls	r3, r4, #29
 8001d98:	d000      	beq.n	8001d9c <__aeabi_dsub+0x2e8>
 8001d9a:	e711      	b.n	8001bc0 <__aeabi_dsub+0x10c>
 8001d9c:	4643      	mov	r3, r8
 8001d9e:	46b4      	mov	ip, r6
 8001da0:	0759      	lsls	r1, r3, #29
 8001da2:	08e2      	lsrs	r2, r4, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	490f      	ldr	r1, [pc, #60]	; (8001de8 <__aeabi_dsub+0x334>)
 8001daa:	458c      	cmp	ip, r1
 8001dac:	d040      	beq.n	8001e30 <__aeabi_dsub+0x37c>
 8001dae:	4661      	mov	r1, ip
 8001db0:	031b      	lsls	r3, r3, #12
 8001db2:	0549      	lsls	r1, r1, #21
 8001db4:	0b1b      	lsrs	r3, r3, #12
 8001db6:	0d49      	lsrs	r1, r1, #21
 8001db8:	e720      	b.n	8001bfc <__aeabi_dsub+0x148>
 8001dba:	4301      	orrs	r1, r0
 8001dbc:	000c      	movs	r4, r1
 8001dbe:	1e61      	subs	r1, r4, #1
 8001dc0:	418c      	sbcs	r4, r1
 8001dc2:	444c      	add	r4, r9
 8001dc4:	454c      	cmp	r4, r9
 8001dc6:	4192      	sbcs	r2, r2
 8001dc8:	4252      	negs	r2, r2
 8001dca:	4690      	mov	r8, r2
 8001dcc:	4498      	add	r8, r3
 8001dce:	4643      	mov	r3, r8
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	d5e0      	bpl.n	8001d96 <__aeabi_dsub+0x2e2>
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__aeabi_dsub+0x334>)
 8001dd6:	3601      	adds	r6, #1
 8001dd8:	429e      	cmp	r6, r3
 8001dda:	d000      	beq.n	8001dde <__aeabi_dsub+0x32a>
 8001ddc:	e09f      	b.n	8001f1e <__aeabi_dsub+0x46a>
 8001dde:	0031      	movs	r1, r6
 8001de0:	2300      	movs	r3, #0
 8001de2:	2200      	movs	r2, #0
 8001de4:	e70a      	b.n	8001bfc <__aeabi_dsub+0x148>
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	000007ff 	.word	0x000007ff
 8001dec:	ff7fffff 	.word	0xff7fffff
 8001df0:	fffff801 	.word	0xfffff801
 8001df4:	000007fe 	.word	0x000007fe
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x34a>
 8001dfc:	e160      	b.n	80020c0 <__aeabi_dsub+0x60c>
 8001dfe:	000a      	movs	r2, r1
 8001e00:	4302      	orrs	r2, r0
 8001e02:	d04d      	beq.n	8001ea0 <__aeabi_dsub+0x3ec>
 8001e04:	464a      	mov	r2, r9
 8001e06:	075c      	lsls	r4, r3, #29
 8001e08:	08d2      	lsrs	r2, r2, #3
 8001e0a:	4322      	orrs	r2, r4
 8001e0c:	2480      	movs	r4, #128	; 0x80
 8001e0e:	08db      	lsrs	r3, r3, #3
 8001e10:	0324      	lsls	r4, r4, #12
 8001e12:	4223      	tst	r3, r4
 8001e14:	d007      	beq.n	8001e26 <__aeabi_dsub+0x372>
 8001e16:	08ce      	lsrs	r6, r1, #3
 8001e18:	4226      	tst	r6, r4
 8001e1a:	d104      	bne.n	8001e26 <__aeabi_dsub+0x372>
 8001e1c:	465d      	mov	r5, fp
 8001e1e:	0033      	movs	r3, r6
 8001e20:	08c2      	lsrs	r2, r0, #3
 8001e22:	0749      	lsls	r1, r1, #29
 8001e24:	430a      	orrs	r2, r1
 8001e26:	0f51      	lsrs	r1, r2, #29
 8001e28:	00d2      	lsls	r2, r2, #3
 8001e2a:	08d2      	lsrs	r2, r2, #3
 8001e2c:	0749      	lsls	r1, r1, #29
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	0011      	movs	r1, r2
 8001e32:	4319      	orrs	r1, r3
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x384>
 8001e36:	e1c8      	b.n	80021ca <__aeabi_dsub+0x716>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	0309      	lsls	r1, r1, #12
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	031b      	lsls	r3, r3, #12
 8001e40:	49d5      	ldr	r1, [pc, #852]	; (8002198 <__aeabi_dsub+0x6e4>)
 8001e42:	0b1b      	lsrs	r3, r3, #12
 8001e44:	e6da      	b.n	8001bfc <__aeabi_dsub+0x148>
 8001e46:	49d5      	ldr	r1, [pc, #852]	; (800219c <__aeabi_dsub+0x6e8>)
 8001e48:	1ab6      	subs	r6, r6, r2
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	e6b5      	b.n	8001bbc <__aeabi_dsub+0x108>
 8001e50:	0020      	movs	r0, r4
 8001e52:	f000 fa4d 	bl	80022f0 <__clzsi2>
 8001e56:	0002      	movs	r2, r0
 8001e58:	3218      	adds	r2, #24
 8001e5a:	2a1f      	cmp	r2, #31
 8001e5c:	dc00      	bgt.n	8001e60 <__aeabi_dsub+0x3ac>
 8001e5e:	e68f      	b.n	8001b80 <__aeabi_dsub+0xcc>
 8001e60:	0023      	movs	r3, r4
 8001e62:	3808      	subs	r0, #8
 8001e64:	4083      	lsls	r3, r0
 8001e66:	2400      	movs	r4, #0
 8001e68:	e692      	b.n	8001b90 <__aeabi_dsub+0xdc>
 8001e6a:	4308      	orrs	r0, r1
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	1e50      	subs	r0, r2, #1
 8001e70:	4182      	sbcs	r2, r0
 8001e72:	e66d      	b.n	8001b50 <__aeabi_dsub+0x9c>
 8001e74:	4cca      	ldr	r4, [pc, #808]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e76:	1c72      	adds	r2, r6, #1
 8001e78:	4222      	tst	r2, r4
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_dsub+0x3ca>
 8001e7c:	e0ad      	b.n	8001fda <__aeabi_dsub+0x526>
 8001e7e:	464a      	mov	r2, r9
 8001e80:	431a      	orrs	r2, r3
 8001e82:	2e00      	cmp	r6, #0
 8001e84:	d1b8      	bne.n	8001df8 <__aeabi_dsub+0x344>
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x3d8>
 8001e8a:	e158      	b.n	800213e <__aeabi_dsub+0x68a>
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	4302      	orrs	r2, r0
 8001e90:	d000      	beq.n	8001e94 <__aeabi_dsub+0x3e0>
 8001e92:	e159      	b.n	8002148 <__aeabi_dsub+0x694>
 8001e94:	464a      	mov	r2, r9
 8001e96:	0759      	lsls	r1, r3, #29
 8001e98:	08d2      	lsrs	r2, r2, #3
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	08db      	lsrs	r3, r3, #3
 8001e9e:	e786      	b.n	8001dae <__aeabi_dsub+0x2fa>
 8001ea0:	464a      	mov	r2, r9
 8001ea2:	0759      	lsls	r1, r3, #29
 8001ea4:	08d2      	lsrs	r2, r2, #3
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	e7c1      	b.n	8001e30 <__aeabi_dsub+0x37c>
 8001eac:	4dba      	ldr	r5, [pc, #744]	; (8002198 <__aeabi_dsub+0x6e4>)
 8001eae:	42aa      	cmp	r2, r5
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x400>
 8001eb2:	e11e      	b.n	80020f2 <__aeabi_dsub+0x63e>
 8001eb4:	2580      	movs	r5, #128	; 0x80
 8001eb6:	042d      	lsls	r5, r5, #16
 8001eb8:	432b      	orrs	r3, r5
 8001eba:	4664      	mov	r4, ip
 8001ebc:	2c38      	cmp	r4, #56	; 0x38
 8001ebe:	dc5d      	bgt.n	8001f7c <__aeabi_dsub+0x4c8>
 8001ec0:	2c1f      	cmp	r4, #31
 8001ec2:	dd00      	ble.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e0d0      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001ec6:	2520      	movs	r5, #32
 8001ec8:	4667      	mov	r7, ip
 8001eca:	1b2d      	subs	r5, r5, r4
 8001ecc:	464e      	mov	r6, r9
 8001ece:	001c      	movs	r4, r3
 8001ed0:	40fe      	lsrs	r6, r7
 8001ed2:	40ac      	lsls	r4, r5
 8001ed4:	4334      	orrs	r4, r6
 8001ed6:	464e      	mov	r6, r9
 8001ed8:	40ae      	lsls	r6, r5
 8001eda:	0035      	movs	r5, r6
 8001edc:	40fb      	lsrs	r3, r7
 8001ede:	1e6e      	subs	r6, r5, #1
 8001ee0:	41b5      	sbcs	r5, r6
 8001ee2:	1ac9      	subs	r1, r1, r3
 8001ee4:	432c      	orrs	r4, r5
 8001ee6:	e04e      	b.n	8001f86 <__aeabi_dsub+0x4d2>
 8001ee8:	464a      	mov	r2, r9
 8001eea:	1a14      	subs	r4, r2, r0
 8001eec:	45a1      	cmp	r9, r4
 8001eee:	4192      	sbcs	r2, r2
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	1a5f      	subs	r7, r3, r1
 8001ef6:	003a      	movs	r2, r7
 8001ef8:	4647      	mov	r7, r8
 8001efa:	1bd2      	subs	r2, r2, r7
 8001efc:	4690      	mov	r8, r2
 8001efe:	0212      	lsls	r2, r2, #8
 8001f00:	d500      	bpl.n	8001f04 <__aeabi_dsub+0x450>
 8001f02:	e08b      	b.n	800201c <__aeabi_dsub+0x568>
 8001f04:	4642      	mov	r2, r8
 8001f06:	4322      	orrs	r2, r4
 8001f08:	d000      	beq.n	8001f0c <__aeabi_dsub+0x458>
 8001f0a:	e630      	b.n	8001b6e <__aeabi_dsub+0xba>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2500      	movs	r5, #0
 8001f10:	e74d      	b.n	8001dae <__aeabi_dsub+0x2fa>
 8001f12:	464a      	mov	r2, r9
 8001f14:	0759      	lsls	r1, r3, #29
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	08db      	lsrs	r3, r3, #3
 8001f1c:	e744      	b.n	8001da8 <__aeabi_dsub+0x2f4>
 8001f1e:	4642      	mov	r2, r8
 8001f20:	4b9e      	ldr	r3, [pc, #632]	; (800219c <__aeabi_dsub+0x6e8>)
 8001f22:	0861      	lsrs	r1, r4, #1
 8001f24:	401a      	ands	r2, r3
 8001f26:	0013      	movs	r3, r2
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4014      	ands	r4, r2
 8001f2c:	430c      	orrs	r4, r1
 8001f2e:	07da      	lsls	r2, r3, #31
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	4698      	mov	r8, r3
 8001f34:	4314      	orrs	r4, r2
 8001f36:	e641      	b.n	8001bbc <__aeabi_dsub+0x108>
 8001f38:	001a      	movs	r2, r3
 8001f3a:	3e1f      	subs	r6, #31
 8001f3c:	40f2      	lsrs	r2, r6
 8001f3e:	0016      	movs	r6, r2
 8001f40:	2920      	cmp	r1, #32
 8001f42:	d003      	beq.n	8001f4c <__aeabi_dsub+0x498>
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	1a51      	subs	r1, r2, r1
 8001f48:	408b      	lsls	r3, r1
 8001f4a:	431c      	orrs	r4, r3
 8001f4c:	1e62      	subs	r2, r4, #1
 8001f4e:	4194      	sbcs	r4, r2
 8001f50:	2300      	movs	r3, #0
 8001f52:	4334      	orrs	r4, r6
 8001f54:	4698      	mov	r8, r3
 8001f56:	2600      	movs	r6, #0
 8001f58:	e71d      	b.n	8001d96 <__aeabi_dsub+0x2e2>
 8001f5a:	000c      	movs	r4, r1
 8001f5c:	3a20      	subs	r2, #32
 8001f5e:	40d4      	lsrs	r4, r2
 8001f60:	0022      	movs	r2, r4
 8001f62:	4664      	mov	r4, ip
 8001f64:	2c20      	cmp	r4, #32
 8001f66:	d004      	beq.n	8001f72 <__aeabi_dsub+0x4be>
 8001f68:	2740      	movs	r7, #64	; 0x40
 8001f6a:	1b3f      	subs	r7, r7, r4
 8001f6c:	40b9      	lsls	r1, r7
 8001f6e:	4308      	orrs	r0, r1
 8001f70:	4680      	mov	r8, r0
 8001f72:	4644      	mov	r4, r8
 8001f74:	1e61      	subs	r1, r4, #1
 8001f76:	418c      	sbcs	r4, r1
 8001f78:	4322      	orrs	r2, r4
 8001f7a:	e5e9      	b.n	8001b50 <__aeabi_dsub+0x9c>
 8001f7c:	464c      	mov	r4, r9
 8001f7e:	4323      	orrs	r3, r4
 8001f80:	001c      	movs	r4, r3
 8001f82:	1e63      	subs	r3, r4, #1
 8001f84:	419c      	sbcs	r4, r3
 8001f86:	1b04      	subs	r4, r0, r4
 8001f88:	42a0      	cmp	r0, r4
 8001f8a:	419b      	sbcs	r3, r3
 8001f8c:	425b      	negs	r3, r3
 8001f8e:	1acb      	subs	r3, r1, r3
 8001f90:	4698      	mov	r8, r3
 8001f92:	465d      	mov	r5, fp
 8001f94:	0016      	movs	r6, r2
 8001f96:	e5e2      	b.n	8001b5e <__aeabi_dsub+0xaa>
 8001f98:	464e      	mov	r6, r9
 8001f9a:	431e      	orrs	r6, r3
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x4ec>
 8001f9e:	e0ae      	b.n	80020fe <__aeabi_dsub+0x64a>
 8001fa0:	1e66      	subs	r6, r4, #1
 8001fa2:	2c01      	cmp	r4, #1
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x4f4>
 8001fa6:	e0fd      	b.n	80021a4 <__aeabi_dsub+0x6f0>
 8001fa8:	4f7b      	ldr	r7, [pc, #492]	; (8002198 <__aeabi_dsub+0x6e4>)
 8001faa:	42bc      	cmp	r4, r7
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4fc>
 8001fae:	e107      	b.n	80021c0 <__aeabi_dsub+0x70c>
 8001fb0:	46b4      	mov	ip, r6
 8001fb2:	e69b      	b.n	8001cec <__aeabi_dsub+0x238>
 8001fb4:	4664      	mov	r4, ip
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	1b12      	subs	r2, r2, r4
 8001fba:	000c      	movs	r4, r1
 8001fbc:	4094      	lsls	r4, r2
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4090      	lsls	r0, r2
 8001fc2:	46a0      	mov	r8, r4
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	1e42      	subs	r2, r0, #1
 8001fc8:	4190      	sbcs	r0, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	40e7      	lsrs	r7, r4
 8001fce:	4644      	mov	r4, r8
 8001fd0:	40d1      	lsrs	r1, r2
 8001fd2:	433c      	orrs	r4, r7
 8001fd4:	4304      	orrs	r4, r0
 8001fd6:	185b      	adds	r3, r3, r1
 8001fd8:	e6f3      	b.n	8001dc2 <__aeabi_dsub+0x30e>
 8001fda:	4c6f      	ldr	r4, [pc, #444]	; (8002198 <__aeabi_dsub+0x6e4>)
 8001fdc:	42a2      	cmp	r2, r4
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x52e>
 8001fe0:	e0d5      	b.n	800218e <__aeabi_dsub+0x6da>
 8001fe2:	4448      	add	r0, r9
 8001fe4:	185b      	adds	r3, r3, r1
 8001fe6:	4548      	cmp	r0, r9
 8001fe8:	4189      	sbcs	r1, r1
 8001fea:	4249      	negs	r1, r1
 8001fec:	185b      	adds	r3, r3, r1
 8001fee:	07dc      	lsls	r4, r3, #31
 8001ff0:	0840      	lsrs	r0, r0, #1
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	4698      	mov	r8, r3
 8001ff6:	0016      	movs	r6, r2
 8001ff8:	4304      	orrs	r4, r0
 8001ffa:	e6cc      	b.n	8001d96 <__aeabi_dsub+0x2e2>
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d000      	beq.n	8002002 <__aeabi_dsub+0x54e>
 8002000:	e082      	b.n	8002108 <__aeabi_dsub+0x654>
 8002002:	000a      	movs	r2, r1
 8002004:	4302      	orrs	r2, r0
 8002006:	d140      	bne.n	800208a <__aeabi_dsub+0x5d6>
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	2500      	movs	r5, #0
 800200c:	031b      	lsls	r3, r3, #12
 800200e:	e713      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002010:	074b      	lsls	r3, r1, #29
 8002012:	08c2      	lsrs	r2, r0, #3
 8002014:	431a      	orrs	r2, r3
 8002016:	465d      	mov	r5, fp
 8002018:	08cb      	lsrs	r3, r1, #3
 800201a:	e6c5      	b.n	8001da8 <__aeabi_dsub+0x2f4>
 800201c:	464a      	mov	r2, r9
 800201e:	1a84      	subs	r4, r0, r2
 8002020:	42a0      	cmp	r0, r4
 8002022:	4192      	sbcs	r2, r2
 8002024:	1acb      	subs	r3, r1, r3
 8002026:	4252      	negs	r2, r2
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	4698      	mov	r8, r3
 800202c:	465d      	mov	r5, fp
 800202e:	e59e      	b.n	8001b6e <__aeabi_dsub+0xba>
 8002030:	464a      	mov	r2, r9
 8002032:	0759      	lsls	r1, r3, #29
 8002034:	08d2      	lsrs	r2, r2, #3
 8002036:	430a      	orrs	r2, r1
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	e6f9      	b.n	8001e30 <__aeabi_dsub+0x37c>
 800203c:	464a      	mov	r2, r9
 800203e:	1a14      	subs	r4, r2, r0
 8002040:	45a1      	cmp	r9, r4
 8002042:	4192      	sbcs	r2, r2
 8002044:	1a5b      	subs	r3, r3, r1
 8002046:	4252      	negs	r2, r2
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	4698      	mov	r8, r3
 800204c:	2601      	movs	r6, #1
 800204e:	e586      	b.n	8001b5e <__aeabi_dsub+0xaa>
 8002050:	464a      	mov	r2, r9
 8002052:	0759      	lsls	r1, r3, #29
 8002054:	08d2      	lsrs	r2, r2, #3
 8002056:	430a      	orrs	r2, r1
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	e6a5      	b.n	8001da8 <__aeabi_dsub+0x2f4>
 800205c:	464c      	mov	r4, r9
 800205e:	4323      	orrs	r3, r4
 8002060:	001c      	movs	r4, r3
 8002062:	1e63      	subs	r3, r4, #1
 8002064:	419c      	sbcs	r4, r3
 8002066:	e65b      	b.n	8001d20 <__aeabi_dsub+0x26c>
 8002068:	4665      	mov	r5, ip
 800206a:	001e      	movs	r6, r3
 800206c:	3d20      	subs	r5, #32
 800206e:	40ee      	lsrs	r6, r5
 8002070:	2c20      	cmp	r4, #32
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x5cc>
 8002074:	2540      	movs	r5, #64	; 0x40
 8002076:	1b2d      	subs	r5, r5, r4
 8002078:	40ab      	lsls	r3, r5
 800207a:	464c      	mov	r4, r9
 800207c:	431c      	orrs	r4, r3
 800207e:	46a2      	mov	sl, r4
 8002080:	4654      	mov	r4, sl
 8002082:	1e63      	subs	r3, r4, #1
 8002084:	419c      	sbcs	r4, r3
 8002086:	4334      	orrs	r4, r6
 8002088:	e77d      	b.n	8001f86 <__aeabi_dsub+0x4d2>
 800208a:	074b      	lsls	r3, r1, #29
 800208c:	08c2      	lsrs	r2, r0, #3
 800208e:	431a      	orrs	r2, r3
 8002090:	465d      	mov	r5, fp
 8002092:	08cb      	lsrs	r3, r1, #3
 8002094:	e6cc      	b.n	8001e30 <__aeabi_dsub+0x37c>
 8002096:	000a      	movs	r2, r1
 8002098:	4302      	orrs	r2, r0
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x5ea>
 800209c:	e736      	b.n	8001f0c <__aeabi_dsub+0x458>
 800209e:	074b      	lsls	r3, r1, #29
 80020a0:	08c2      	lsrs	r2, r0, #3
 80020a2:	431a      	orrs	r2, r3
 80020a4:	465d      	mov	r5, fp
 80020a6:	08cb      	lsrs	r3, r1, #3
 80020a8:	e681      	b.n	8001dae <__aeabi_dsub+0x2fa>
 80020aa:	464a      	mov	r2, r9
 80020ac:	1a84      	subs	r4, r0, r2
 80020ae:	42a0      	cmp	r0, r4
 80020b0:	4192      	sbcs	r2, r2
 80020b2:	1acb      	subs	r3, r1, r3
 80020b4:	4252      	negs	r2, r2
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	4698      	mov	r8, r3
 80020ba:	465d      	mov	r5, fp
 80020bc:	2601      	movs	r6, #1
 80020be:	e54e      	b.n	8001b5e <__aeabi_dsub+0xaa>
 80020c0:	074b      	lsls	r3, r1, #29
 80020c2:	08c2      	lsrs	r2, r0, #3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	08cb      	lsrs	r3, r1, #3
 80020c8:	e6b2      	b.n	8001e30 <__aeabi_dsub+0x37c>
 80020ca:	464a      	mov	r2, r9
 80020cc:	1a14      	subs	r4, r2, r0
 80020ce:	45a1      	cmp	r9, r4
 80020d0:	4192      	sbcs	r2, r2
 80020d2:	1a5f      	subs	r7, r3, r1
 80020d4:	4252      	negs	r2, r2
 80020d6:	1aba      	subs	r2, r7, r2
 80020d8:	4690      	mov	r8, r2
 80020da:	0212      	lsls	r2, r2, #8
 80020dc:	d56b      	bpl.n	80021b6 <__aeabi_dsub+0x702>
 80020de:	464a      	mov	r2, r9
 80020e0:	1a84      	subs	r4, r0, r2
 80020e2:	42a0      	cmp	r0, r4
 80020e4:	4192      	sbcs	r2, r2
 80020e6:	1acb      	subs	r3, r1, r3
 80020e8:	4252      	negs	r2, r2
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	4698      	mov	r8, r3
 80020ee:	465d      	mov	r5, fp
 80020f0:	e564      	b.n	8001bbc <__aeabi_dsub+0x108>
 80020f2:	074b      	lsls	r3, r1, #29
 80020f4:	08c2      	lsrs	r2, r0, #3
 80020f6:	431a      	orrs	r2, r3
 80020f8:	465d      	mov	r5, fp
 80020fa:	08cb      	lsrs	r3, r1, #3
 80020fc:	e698      	b.n	8001e30 <__aeabi_dsub+0x37c>
 80020fe:	074b      	lsls	r3, r1, #29
 8002100:	08c2      	lsrs	r2, r0, #3
 8002102:	431a      	orrs	r2, r3
 8002104:	08cb      	lsrs	r3, r1, #3
 8002106:	e64f      	b.n	8001da8 <__aeabi_dsub+0x2f4>
 8002108:	000a      	movs	r2, r1
 800210a:	4302      	orrs	r2, r0
 800210c:	d090      	beq.n	8002030 <__aeabi_dsub+0x57c>
 800210e:	464a      	mov	r2, r9
 8002110:	075c      	lsls	r4, r3, #29
 8002112:	08d2      	lsrs	r2, r2, #3
 8002114:	4314      	orrs	r4, r2
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	0312      	lsls	r2, r2, #12
 800211c:	4213      	tst	r3, r2
 800211e:	d008      	beq.n	8002132 <__aeabi_dsub+0x67e>
 8002120:	08ce      	lsrs	r6, r1, #3
 8002122:	4216      	tst	r6, r2
 8002124:	d105      	bne.n	8002132 <__aeabi_dsub+0x67e>
 8002126:	08c0      	lsrs	r0, r0, #3
 8002128:	0749      	lsls	r1, r1, #29
 800212a:	4308      	orrs	r0, r1
 800212c:	0004      	movs	r4, r0
 800212e:	465d      	mov	r5, fp
 8002130:	0033      	movs	r3, r6
 8002132:	0f61      	lsrs	r1, r4, #29
 8002134:	00e2      	lsls	r2, r4, #3
 8002136:	0749      	lsls	r1, r1, #29
 8002138:	08d2      	lsrs	r2, r2, #3
 800213a:	430a      	orrs	r2, r1
 800213c:	e678      	b.n	8001e30 <__aeabi_dsub+0x37c>
 800213e:	074b      	lsls	r3, r1, #29
 8002140:	08c2      	lsrs	r2, r0, #3
 8002142:	431a      	orrs	r2, r3
 8002144:	08cb      	lsrs	r3, r1, #3
 8002146:	e632      	b.n	8001dae <__aeabi_dsub+0x2fa>
 8002148:	4448      	add	r0, r9
 800214a:	185b      	adds	r3, r3, r1
 800214c:	4548      	cmp	r0, r9
 800214e:	4192      	sbcs	r2, r2
 8002150:	4698      	mov	r8, r3
 8002152:	4252      	negs	r2, r2
 8002154:	4490      	add	r8, r2
 8002156:	4643      	mov	r3, r8
 8002158:	0004      	movs	r4, r0
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	d400      	bmi.n	8002160 <__aeabi_dsub+0x6ac>
 800215e:	e61a      	b.n	8001d96 <__aeabi_dsub+0x2e2>
 8002160:	4642      	mov	r2, r8
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <__aeabi_dsub+0x6e8>)
 8002164:	2601      	movs	r6, #1
 8002166:	401a      	ands	r2, r3
 8002168:	4690      	mov	r8, r2
 800216a:	e614      	b.n	8001d96 <__aeabi_dsub+0x2e2>
 800216c:	4666      	mov	r6, ip
 800216e:	001f      	movs	r7, r3
 8002170:	3e20      	subs	r6, #32
 8002172:	40f7      	lsrs	r7, r6
 8002174:	2c20      	cmp	r4, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x6d0>
 8002178:	2640      	movs	r6, #64	; 0x40
 800217a:	1b36      	subs	r6, r6, r4
 800217c:	40b3      	lsls	r3, r6
 800217e:	464c      	mov	r4, r9
 8002180:	431c      	orrs	r4, r3
 8002182:	46a2      	mov	sl, r4
 8002184:	4654      	mov	r4, sl
 8002186:	1e63      	subs	r3, r4, #1
 8002188:	419c      	sbcs	r4, r3
 800218a:	433c      	orrs	r4, r7
 800218c:	e5c8      	b.n	8001d20 <__aeabi_dsub+0x26c>
 800218e:	0011      	movs	r1, r2
 8002190:	2300      	movs	r3, #0
 8002192:	2200      	movs	r2, #0
 8002194:	e532      	b.n	8001bfc <__aeabi_dsub+0x148>
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	000007ff 	.word	0x000007ff
 800219c:	ff7fffff 	.word	0xff7fffff
 80021a0:	000007fe 	.word	0x000007fe
 80021a4:	464a      	mov	r2, r9
 80021a6:	1814      	adds	r4, r2, r0
 80021a8:	4284      	cmp	r4, r0
 80021aa:	4192      	sbcs	r2, r2
 80021ac:	185b      	adds	r3, r3, r1
 80021ae:	4698      	mov	r8, r3
 80021b0:	4252      	negs	r2, r2
 80021b2:	4490      	add	r8, r2
 80021b4:	e5e9      	b.n	8001d8a <__aeabi_dsub+0x2d6>
 80021b6:	4642      	mov	r2, r8
 80021b8:	4322      	orrs	r2, r4
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x70a>
 80021bc:	e6a6      	b.n	8001f0c <__aeabi_dsub+0x458>
 80021be:	e5ea      	b.n	8001d96 <__aeabi_dsub+0x2e2>
 80021c0:	074b      	lsls	r3, r1, #29
 80021c2:	08c2      	lsrs	r2, r0, #3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	08cb      	lsrs	r3, r1, #3
 80021c8:	e632      	b.n	8001e30 <__aeabi_dsub+0x37c>
 80021ca:	2200      	movs	r2, #0
 80021cc:	4901      	ldr	r1, [pc, #4]	; (80021d4 <__aeabi_dsub+0x720>)
 80021ce:	0013      	movs	r3, r2
 80021d0:	e514      	b.n	8001bfc <__aeabi_dsub+0x148>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff

080021d8 <__aeabi_d2iz>:
 80021d8:	000a      	movs	r2, r1
 80021da:	b530      	push	{r4, r5, lr}
 80021dc:	4c13      	ldr	r4, [pc, #76]	; (800222c <__aeabi_d2iz+0x54>)
 80021de:	0053      	lsls	r3, r2, #1
 80021e0:	0309      	lsls	r1, r1, #12
 80021e2:	0005      	movs	r5, r0
 80021e4:	0b09      	lsrs	r1, r1, #12
 80021e6:	2000      	movs	r0, #0
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	0fd2      	lsrs	r2, r2, #31
 80021ec:	42a3      	cmp	r3, r4
 80021ee:	dd04      	ble.n	80021fa <__aeabi_d2iz+0x22>
 80021f0:	480f      	ldr	r0, [pc, #60]	; (8002230 <__aeabi_d2iz+0x58>)
 80021f2:	4283      	cmp	r3, r0
 80021f4:	dd02      	ble.n	80021fc <__aeabi_d2iz+0x24>
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <__aeabi_d2iz+0x5c>)
 80021f8:	18d0      	adds	r0, r2, r3
 80021fa:	bd30      	pop	{r4, r5, pc}
 80021fc:	2080      	movs	r0, #128	; 0x80
 80021fe:	0340      	lsls	r0, r0, #13
 8002200:	4301      	orrs	r1, r0
 8002202:	480d      	ldr	r0, [pc, #52]	; (8002238 <__aeabi_d2iz+0x60>)
 8002204:	1ac0      	subs	r0, r0, r3
 8002206:	281f      	cmp	r0, #31
 8002208:	dd08      	ble.n	800221c <__aeabi_d2iz+0x44>
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <__aeabi_d2iz+0x64>)
 800220c:	1ac3      	subs	r3, r0, r3
 800220e:	40d9      	lsrs	r1, r3
 8002210:	000b      	movs	r3, r1
 8002212:	4258      	negs	r0, r3
 8002214:	2a00      	cmp	r2, #0
 8002216:	d1f0      	bne.n	80021fa <__aeabi_d2iz+0x22>
 8002218:	0018      	movs	r0, r3
 800221a:	e7ee      	b.n	80021fa <__aeabi_d2iz+0x22>
 800221c:	4c08      	ldr	r4, [pc, #32]	; (8002240 <__aeabi_d2iz+0x68>)
 800221e:	40c5      	lsrs	r5, r0
 8002220:	46a4      	mov	ip, r4
 8002222:	4463      	add	r3, ip
 8002224:	4099      	lsls	r1, r3
 8002226:	000b      	movs	r3, r1
 8002228:	432b      	orrs	r3, r5
 800222a:	e7f2      	b.n	8002212 <__aeabi_d2iz+0x3a>
 800222c:	000003fe 	.word	0x000003fe
 8002230:	0000041d 	.word	0x0000041d
 8002234:	7fffffff 	.word	0x7fffffff
 8002238:	00000433 	.word	0x00000433
 800223c:	00000413 	.word	0x00000413
 8002240:	fffffbed 	.word	0xfffffbed

08002244 <__aeabi_i2d>:
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	2800      	cmp	r0, #0
 8002248:	d016      	beq.n	8002278 <__aeabi_i2d+0x34>
 800224a:	17c3      	asrs	r3, r0, #31
 800224c:	18c5      	adds	r5, r0, r3
 800224e:	405d      	eors	r5, r3
 8002250:	0fc4      	lsrs	r4, r0, #31
 8002252:	0028      	movs	r0, r5
 8002254:	f000 f84c 	bl	80022f0 <__clzsi2>
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <__aeabi_i2d+0x5c>)
 800225a:	1a12      	subs	r2, r2, r0
 800225c:	280a      	cmp	r0, #10
 800225e:	dc16      	bgt.n	800228e <__aeabi_i2d+0x4a>
 8002260:	0003      	movs	r3, r0
 8002262:	002e      	movs	r6, r5
 8002264:	3315      	adds	r3, #21
 8002266:	409e      	lsls	r6, r3
 8002268:	230b      	movs	r3, #11
 800226a:	1a18      	subs	r0, r3, r0
 800226c:	40c5      	lsrs	r5, r0
 800226e:	0553      	lsls	r3, r2, #21
 8002270:	032d      	lsls	r5, r5, #12
 8002272:	0b2d      	lsrs	r5, r5, #12
 8002274:	0d5b      	lsrs	r3, r3, #21
 8002276:	e003      	b.n	8002280 <__aeabi_i2d+0x3c>
 8002278:	2400      	movs	r4, #0
 800227a:	2300      	movs	r3, #0
 800227c:	2500      	movs	r5, #0
 800227e:	2600      	movs	r6, #0
 8002280:	051b      	lsls	r3, r3, #20
 8002282:	432b      	orrs	r3, r5
 8002284:	07e4      	lsls	r4, r4, #31
 8002286:	4323      	orrs	r3, r4
 8002288:	0030      	movs	r0, r6
 800228a:	0019      	movs	r1, r3
 800228c:	bd70      	pop	{r4, r5, r6, pc}
 800228e:	380b      	subs	r0, #11
 8002290:	4085      	lsls	r5, r0
 8002292:	0553      	lsls	r3, r2, #21
 8002294:	032d      	lsls	r5, r5, #12
 8002296:	2600      	movs	r6, #0
 8002298:	0b2d      	lsrs	r5, r5, #12
 800229a:	0d5b      	lsrs	r3, r3, #21
 800229c:	e7f0      	b.n	8002280 <__aeabi_i2d+0x3c>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	0000041e 	.word	0x0000041e

080022a4 <__aeabi_ui2d>:
 80022a4:	b510      	push	{r4, lr}
 80022a6:	1e04      	subs	r4, r0, #0
 80022a8:	d010      	beq.n	80022cc <__aeabi_ui2d+0x28>
 80022aa:	f000 f821 	bl	80022f0 <__clzsi2>
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <__aeabi_ui2d+0x48>)
 80022b0:	1a1b      	subs	r3, r3, r0
 80022b2:	280a      	cmp	r0, #10
 80022b4:	dc11      	bgt.n	80022da <__aeabi_ui2d+0x36>
 80022b6:	220b      	movs	r2, #11
 80022b8:	0021      	movs	r1, r4
 80022ba:	1a12      	subs	r2, r2, r0
 80022bc:	40d1      	lsrs	r1, r2
 80022be:	3015      	adds	r0, #21
 80022c0:	030a      	lsls	r2, r1, #12
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4084      	lsls	r4, r0
 80022c6:	0b12      	lsrs	r2, r2, #12
 80022c8:	0d5b      	lsrs	r3, r3, #21
 80022ca:	e001      	b.n	80022d0 <__aeabi_ui2d+0x2c>
 80022cc:	2300      	movs	r3, #0
 80022ce:	2200      	movs	r2, #0
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	4313      	orrs	r3, r2
 80022d4:	0020      	movs	r0, r4
 80022d6:	0019      	movs	r1, r3
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	0022      	movs	r2, r4
 80022dc:	380b      	subs	r0, #11
 80022de:	4082      	lsls	r2, r0
 80022e0:	055b      	lsls	r3, r3, #21
 80022e2:	0312      	lsls	r2, r2, #12
 80022e4:	2400      	movs	r4, #0
 80022e6:	0b12      	lsrs	r2, r2, #12
 80022e8:	0d5b      	lsrs	r3, r3, #21
 80022ea:	e7f1      	b.n	80022d0 <__aeabi_ui2d+0x2c>
 80022ec:	0000041e 	.word	0x0000041e

080022f0 <__clzsi2>:
 80022f0:	211c      	movs	r1, #28
 80022f2:	2301      	movs	r3, #1
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	4298      	cmp	r0, r3
 80022f8:	d301      	bcc.n	80022fe <__clzsi2+0xe>
 80022fa:	0c00      	lsrs	r0, r0, #16
 80022fc:	3910      	subs	r1, #16
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	4298      	cmp	r0, r3
 8002302:	d301      	bcc.n	8002308 <__clzsi2+0x18>
 8002304:	0a00      	lsrs	r0, r0, #8
 8002306:	3908      	subs	r1, #8
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	4298      	cmp	r0, r3
 800230c:	d301      	bcc.n	8002312 <__clzsi2+0x22>
 800230e:	0900      	lsrs	r0, r0, #4
 8002310:	3904      	subs	r1, #4
 8002312:	a202      	add	r2, pc, #8	; (adr r2, 800231c <__clzsi2+0x2c>)
 8002314:	5c10      	ldrb	r0, [r2, r0]
 8002316:	1840      	adds	r0, r0, r1
 8002318:	4770      	bx	lr
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	02020304 	.word	0x02020304
 8002320:	01010101 	.word	0x01010101
	...

0800232c <__clzdi2>:
 800232c:	b510      	push	{r4, lr}
 800232e:	2900      	cmp	r1, #0
 8002330:	d103      	bne.n	800233a <__clzdi2+0xe>
 8002332:	f7ff ffdd 	bl	80022f0 <__clzsi2>
 8002336:	3020      	adds	r0, #32
 8002338:	e002      	b.n	8002340 <__clzdi2+0x14>
 800233a:	1c08      	adds	r0, r1, #0
 800233c:	f7ff ffd8 	bl	80022f0 <__clzsi2>
 8002340:	bd10      	pop	{r4, pc}
 8002342:	46c0      	nop			; (mov r8, r8)

08002344 <scan_i2c>:
        // Error handling, for example re-initialization of the I2C peripheral
    	printf("I2C write to 0x%x failed...\r\n", register_pointer );
    }
}

void scan_i2c(){
 8002344:	b570      	push	{r4, r5, r6, lr}
	HAL_StatusTypeDef result;
	uint8_t i =0;

	printf("--------------------\r\n");
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <scan_i2c+0x3c>)
 8002348:	f001 f9a0 	bl	800368c <printf_>
	printf("Scanning I2C...\r\n");

	for (i=0; i<128; i++){
 800234c:	2680      	movs	r6, #128	; 0x80
	printf("Scanning I2C...\r\n");
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <scan_i2c+0x40>)
 8002350:	f001 f99c 	bl	800368c <printf_>
 8002354:	2400      	movs	r4, #0
		result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 8002356:	2502      	movs	r5, #2
	for (i=0; i<128; i++){
 8002358:	0076      	lsls	r6, r6, #1
		result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 800235a:	002b      	movs	r3, r5
 800235c:	002a      	movs	r2, r5
 800235e:	480a      	ldr	r0, [pc, #40]	; (8002388 <scan_i2c+0x44>)
 8002360:	b2a1      	uxth	r1, r4
 8002362:	f001 fcc5 	bl	8003cf0 <HAL_I2C_IsDeviceReady>

		if (result == HAL_OK){
 8002366:	2800      	cmp	r0, #0
 8002368:	d103      	bne.n	8002372 <scan_i2c+0x2e>
			printf("I2C address found: 0x%X\r\n", (uint16_t)(i<<1));
 800236a:	0021      	movs	r1, r4
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <scan_i2c+0x48>)
 800236e:	f001 f98d 	bl	800368c <printf_>
	for (i=0; i<128; i++){
 8002372:	3402      	adds	r4, #2
 8002374:	42b4      	cmp	r4, r6
 8002376:	d1f0      	bne.n	800235a <scan_i2c+0x16>
		}
	}
	printf("I2C Scan Complete\r\n--------------------\r\n");
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <scan_i2c+0x4c>)
 800237a:	f001 f987 	bl	800368c <printf_>

}
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	0800525f 	.word	0x0800525f
 8002384:	08005220 	.word	0x08005220
 8002388:	200000d0 	.word	0x200000d0
 800238c:	08005232 	.word	0x08005232
 8002390:	0800524c 	.word	0x0800524c

08002394 <SPI_Read>:
	HAL_GPIO_WritePin(GPIO_PB6_GPIO_Port, GPIO_PB6_Pin, GPIO_PIN_SET);

	return status;
}

uint8_t SPI_Read(uint8_t addr, uint8_t *data) {
 8002394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002396:	b085      	sub	sp, #20
	uint8_t txBuf[2] = {addr, 0x0A};
 8002398:	466b      	mov	r3, sp
 800239a:	466a      	mov	r2, sp
 800239c:	7218      	strb	r0, [r3, #8]
 800239e:	230a      	movs	r3, #10
	uint8_t rxBuf[2];
	HAL_GPIO_WritePin(GPIO_PB6_GPIO_Port, GPIO_PB6_Pin, GPIO_PIN_RESET);
 80023a0:	4f0f      	ldr	r7, [pc, #60]	; (80023e0 <SPI_Read+0x4c>)
uint8_t SPI_Read(uint8_t addr, uint8_t *data) {
 80023a2:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(GPIO_PB6_GPIO_Port, GPIO_PB6_Pin, GPIO_PIN_RESET);
 80023a4:	0038      	movs	r0, r7
	uint8_t txBuf[2] = {addr, 0x0A};
 80023a6:	7253      	strb	r3, [r2, #9]
	HAL_GPIO_WritePin(GPIO_PB6_GPIO_Port, GPIO_PB6_Pin, GPIO_PIN_RESET);
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	2200      	movs	r2, #0
 80023ac:	f001 fc1c 	bl	8003be8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(&hspi2, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80023b0:	2301      	movs	r3, #1
 80023b2:	ae03      	add	r6, sp, #12
 80023b4:	425b      	negs	r3, r3
 80023b6:	0032      	movs	r2, r6
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	a902      	add	r1, sp, #8
 80023bc:	3303      	adds	r3, #3
 80023be:	4809      	ldr	r0, [pc, #36]	; (80023e4 <SPI_Read+0x50>)
 80023c0:	f002 fb0e 	bl	80049e0 <HAL_SPI_TransmitReceive>
 80023c4:	0004      	movs	r4, r0
//	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIO_PB6_GPIO_Port, GPIO_PB6_Pin, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	0038      	movs	r0, r7
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	f001 fc0c 	bl	8003be8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(&hspi2, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80023d0:	4260      	negs	r0, r4
 80023d2:	4160      	adcs	r0, r4
	*data = rxBuf[1];
 80023d4:	7873      	ldrb	r3, [r6, #1]
	return status;
 80023d6:	b2c0      	uxtb	r0, r0
	*data = rxBuf[1];
 80023d8:	702b      	strb	r3, [r5, #0]
}
 80023da:	b005      	add	sp, #20
 80023dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	50000400 	.word	0x50000400
 80023e4:	2000002c 	.word	0x2000002c

080023e8 <CS_HIGH>:

void CS_LOW(){
	HAL_GPIO_WritePin(GPIO_PB6_GPIO_Port, GPIO_PB6_Pin, GPIO_PIN_RESET);
}

void CS_HIGH(){
 80023e8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIO_PB6_GPIO_Port, GPIO_PB6_Pin, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	4802      	ldr	r0, [pc, #8]	; (80023f8 <CS_HIGH+0x10>)
 80023f0:	f001 fbfa 	bl	8003be8 <HAL_GPIO_WritePin>

}
 80023f4:	bd10      	pop	{r4, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	50000400 	.word	0x50000400

080023fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b500      	push	{lr}
 80023fe:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002400:	2230      	movs	r2, #48	; 0x30
 8002402:	2100      	movs	r1, #0
 8002404:	a810      	add	r0, sp, #64	; 0x40
 8002406:	f002 feb5 	bl	8005174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240a:	2214      	movs	r2, #20
 800240c:	2100      	movs	r1, #0
 800240e:	4668      	mov	r0, sp
 8002410:	f002 feb0 	bl	8005174 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002414:	2224      	movs	r2, #36	; 0x24
 8002416:	2100      	movs	r1, #0
 8002418:	a805      	add	r0, sp, #20
 800241a:	f002 feab 	bl	8005174 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241e:	4918      	ldr	r1, [pc, #96]	; (8002480 <SystemClock_Config+0x84>)
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <SystemClock_Config+0x88>)
 8002422:	680b      	ldr	r3, [r1, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002424:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002426:	401a      	ands	r2, r3
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002430:	2301      	movs	r3, #1
 8002432:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800243a:	2300      	movs	r3, #0
 800243c:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243e:	f001 fd8d 	bl	8003f5c <HAL_RCC_OscConfig>
 8002442:	1e01      	subs	r1, r0, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002446:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002448:	e7fe      	b.n	8002448 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002450:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002452:	3b0d      	subs	r3, #13
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002454:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002456:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002458:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800245a:	f002 f803 	bl	8004464 <HAL_RCC_ClockConfig>
 800245e:	2800      	cmp	r0, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0x6a>
 8002462:	b672      	cpsid	i
  while (1)
 8002464:	e7fe      	b.n	8002464 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002466:	2309      	movs	r3, #9
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002468:	9008      	str	r0, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800246a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800246c:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800246e:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002470:	f002 f8e6 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 8002474:	2800      	cmp	r0, #0
 8002476:	d001      	beq.n	800247c <SystemClock_Config+0x80>
 8002478:	b672      	cpsid	i
  while (1)
 800247a:	e7fe      	b.n	800247a <SystemClock_Config+0x7e>
}
 800247c:	b01d      	add	sp, #116	; 0x74
 800247e:	bd00      	pop	{pc}
 8002480:	40007000 	.word	0x40007000
 8002484:	ffffe7ff 	.word	0xffffe7ff

08002488 <main>:
{
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	ac05      	add	r4, sp, #20
  HAL_Init();
 800248e:	f001 fa73 	bl	8003978 <HAL_Init>
  SystemClock_Config();
 8002492:	f7ff ffb3 	bl	80023fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002496:	2214      	movs	r2, #20
 8002498:	2100      	movs	r1, #0
 800249a:	0020      	movs	r0, r4
 800249c:	f002 fe6a 	bl	8005174 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a0:	2004      	movs	r0, #4
 80024a2:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <main+0x25c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024aa:	4301      	orrs	r1, r0
 80024ac:	62d9      	str	r1, [r3, #44]	; 0x2c
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	4002      	ands	r2, r0
 80024b4:	9201      	str	r2, [sp, #4]
 80024b6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ba:	307c      	adds	r0, #124	; 0x7c
 80024bc:	4301      	orrs	r1, r0
 80024be:	62d9      	str	r1, [r3, #44]	; 0x2c
 80024c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80024c2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024c4:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80024c6:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024c8:	9202      	str	r2, [sp, #8]
 80024ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80024ce:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4332      	orrs	r2, r6
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80024d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d6:	4032      	ands	r2, r6
 80024d8:	9203      	str	r2, [sp, #12]
 80024da:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024de:	433a      	orrs	r2, r7
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	403b      	ands	r3, r7
 80024e8:	9304      	str	r3, [sp, #16]
 80024ea:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80024ec:	f001 fb7c 	bl	8003be8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|GPIO_PB6_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2144      	movs	r1, #68	; 0x44
 80024f4:	487c      	ldr	r0, [pc, #496]	; (80026e8 <main+0x260>)
 80024f6:	f001 fb77 	bl	8003be8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	019b      	lsls	r3, r3, #6
 80024fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002500:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8002502:	0021      	movs	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002504:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8002506:	4879      	ldr	r0, [pc, #484]	; (80026ec <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002508:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800250c:	f001 fab0 	bl	8003a70 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002510:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002512:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002514:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002516:	0021      	movs	r1, r4
 8002518:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800251a:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Pin = B1_Pin;
 800251e:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002520:	f001 faa6 	bl	8003a70 <HAL_GPIO_Init>
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002524:	20a0      	movs	r0, #160	; 0xa0
 8002526:	0021      	movs	r1, r4
 8002528:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800252a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252c:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002530:	f001 fa9e 	bl	8003a70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8002534:	23d4      	movs	r3, #212	; 0xd4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	20a0      	movs	r0, #160	; 0xa0
 8002538:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800253a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800253e:	3bd1      	subs	r3, #209	; 0xd1
 8002540:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f001 fa92 	bl	8003a70 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800254c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LD_R_Pin;
 800254e:	2220      	movs	r2, #32
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8002550:	0021      	movs	r1, r4
 8002552:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD_R_Pin;
 8002554:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	6066      	str	r6, [r4, #4]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800255c:	f001 fa88 	bl	8003a70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002560:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	0021      	movs	r1, r4
 8002564:	4860      	ldr	r0, [pc, #384]	; (80026e8 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002566:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800256e:	6123      	str	r3, [r4, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f001 fa7e 	bl	8003a70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|GPIO_PB6_Pin;
 8002574:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	0021      	movs	r1, r4
 8002578:	485b      	ldr	r0, [pc, #364]	; (80026e8 <main+0x260>)
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|GPIO_PB6_Pin;
 800257a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	6066      	str	r6, [r4, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f001 fa75 	bl	8003a70 <HAL_GPIO_Init>
  hspi2.Instance = SPI2;
 8002586:	4f5a      	ldr	r7, [pc, #360]	; (80026f0 <main+0x268>)
 8002588:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <main+0x26c>)
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800258a:	2220      	movs	r2, #32
  hspi2.Instance = SPI2;
 800258c:	603b      	str	r3, [r7, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800258e:	2382      	movs	r3, #130	; 0x82
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	607b      	str	r3, [r7, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002594:	60bd      	str	r5, [r7, #8]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002596:	33fc      	adds	r3, #252	; 0xfc
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002598:	60fd      	str	r5, [r7, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800259a:	613d      	str	r5, [r7, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800259c:	617d      	str	r5, [r7, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800259e:	623d      	str	r5, [r7, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025a0:	627d      	str	r5, [r7, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a2:	62bd      	str	r5, [r7, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025a4:	0038      	movs	r0, r7
  hspi2.Init.CRCPolynomial = 7;
 80025a6:	3507      	adds	r5, #7
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025a8:	61bb      	str	r3, [r7, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80025aa:	61fa      	str	r2, [r7, #28]
  hspi2.Init.CRCPolynomial = 7;
 80025ac:	62fd      	str	r5, [r7, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025ae:	f002 f9b5 	bl	800491c <HAL_SPI_Init>
 80025b2:	1e03      	subs	r3, r0, #0
 80025b4:	d001      	beq.n	80025ba <main+0x132>
 80025b6:	b672      	cpsid	i
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <main+0x130>
  hspi1.Instance = SPI1;
 80025ba:	484f      	ldr	r0, [pc, #316]	; (80026f8 <main+0x270>)
 80025bc:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <main+0x274>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025be:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 80025c0:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025c2:	2282      	movs	r2, #130	; 0x82
 80025c4:	0052      	lsls	r2, r2, #1
 80025c6:	6042      	str	r2, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025c8:	32fc      	adds	r2, #252	; 0xfc
 80025ca:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025cc:	3ac9      	subs	r2, #201	; 0xc9
 80025ce:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d0:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d2:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d4:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025d6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025da:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025dc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025de:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025e0:	f002 f99c 	bl	800491c <HAL_SPI_Init>
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d001      	beq.n	80025ec <main+0x164>
 80025e8:	b672      	cpsid	i
  while (1)
 80025ea:	e7fe      	b.n	80025ea <main+0x162>
  hi2c1.Instance = I2C1;
 80025ec:	4d44      	ldr	r5, [pc, #272]	; (8002700 <main+0x278>)
 80025ee:	4b45      	ldr	r3, [pc, #276]	; (8002704 <main+0x27c>)
  hi2c1.Init.OwnAddress1 = 0;
 80025f0:	60a8      	str	r0, [r5, #8]
  hi2c1.Instance = I2C1;
 80025f2:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80025f4:	4b44      	ldr	r3, [pc, #272]	; (8002708 <main+0x280>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f6:	6128      	str	r0, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025f8:	6168      	str	r0, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025fa:	61a8      	str	r0, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025fc:	61e8      	str	r0, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fe:	6228      	str	r0, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002600:	0028      	movs	r0, r5
  hi2c1.Init.Timing = 0x0000020B;
 8002602:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002604:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002606:	f001 fb1d 	bl	8003c44 <HAL_I2C_Init>
 800260a:	1e01      	subs	r1, r0, #0
 800260c:	d001      	beq.n	8002612 <main+0x18a>
 800260e:	b672      	cpsid	i
  while (1)
 8002610:	e7fe      	b.n	8002610 <main+0x188>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002612:	0028      	movs	r0, r5
 8002614:	f001 fc10 	bl	8003e38 <HAL_I2CEx_ConfigAnalogFilter>
 8002618:	1e01      	subs	r1, r0, #0
 800261a:	d001      	beq.n	8002620 <main+0x198>
 800261c:	b672      	cpsid	i
  while (1)
 800261e:	e7fe      	b.n	800261e <main+0x196>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002620:	0028      	movs	r0, r5
 8002622:	f001 fc2f 	bl	8003e84 <HAL_I2CEx_ConfigDigitalFilter>
 8002626:	2800      	cmp	r0, #0
 8002628:	d001      	beq.n	800262e <main+0x1a6>
 800262a:	b672      	cpsid	i
  while (1)
 800262c:	e7fe      	b.n	800262c <main+0x1a4>
  hi2c2.Instance = I2C2;
 800262e:	4d37      	ldr	r5, [pc, #220]	; (800270c <main+0x284>)
 8002630:	4b37      	ldr	r3, [pc, #220]	; (8002710 <main+0x288>)
  hi2c2.Init.OwnAddress1 = 0;
 8002632:	60a8      	str	r0, [r5, #8]
  hi2c2.Instance = I2C2;
 8002634:	602b      	str	r3, [r5, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002636:	4b37      	ldr	r3, [pc, #220]	; (8002714 <main+0x28c>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002638:	6128      	str	r0, [r5, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800263a:	6168      	str	r0, [r5, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800263c:	61a8      	str	r0, [r5, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800263e:	61e8      	str	r0, [r5, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002640:	6228      	str	r0, [r5, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002642:	0028      	movs	r0, r5
  hi2c2.Init.Timing = 0x2000090E;
 8002644:	606b      	str	r3, [r5, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002646:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002648:	f001 fafc 	bl	8003c44 <HAL_I2C_Init>
 800264c:	1e01      	subs	r1, r0, #0
 800264e:	d001      	beq.n	8002654 <main+0x1cc>
 8002650:	b672      	cpsid	i
  while (1)
 8002652:	e7fe      	b.n	8002652 <main+0x1ca>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002654:	0028      	movs	r0, r5
 8002656:	f001 fbef 	bl	8003e38 <HAL_I2CEx_ConfigAnalogFilter>
 800265a:	1e01      	subs	r1, r0, #0
 800265c:	d001      	beq.n	8002662 <main+0x1da>
 800265e:	b672      	cpsid	i
  while (1)
 8002660:	e7fe      	b.n	8002660 <main+0x1d8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002662:	0028      	movs	r0, r5
 8002664:	f001 fc0e 	bl	8003e84 <HAL_I2CEx_ConfigDigitalFilter>
 8002668:	1e03      	subs	r3, r0, #0
 800266a:	d001      	beq.n	8002670 <main+0x1e8>
 800266c:	b672      	cpsid	i
  while (1)
 800266e:	e7fe      	b.n	800266e <main+0x1e6>
  huart1.Instance = USART1;
 8002670:	4829      	ldr	r0, [pc, #164]	; (8002718 <main+0x290>)
 8002672:	4a2a      	ldr	r2, [pc, #168]	; (800271c <main+0x294>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002674:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 8002676:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002678:	22e1      	movs	r2, #225	; 0xe1
 800267a:	0252      	lsls	r2, r2, #9
 800267c:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800267e:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002680:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002682:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002684:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002686:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800268e:	f002 fd17 	bl	80050c0 <HAL_HalfDuplex_Init>
 8002692:	2800      	cmp	r0, #0
 8002694:	d001      	beq.n	800269a <main+0x212>
 8002696:	b672      	cpsid	i
  while (1)
 8002698:	e7fe      	b.n	8002698 <main+0x210>
	HAL_Delay(1000);
 800269a:	20fa      	movs	r0, #250	; 0xfa
 800269c:	0080      	lsls	r0, r0, #2
 800269e:	f001 f991 	bl	80039c4 <HAL_Delay>
	printf("\r\n--------\r\n\r\nProject: I2C__SPI_Sensor_Test; V0.1\r\nInitializing UART..\n\rConnected to UART.\r\n");
 80026a2:	481f      	ldr	r0, [pc, #124]	; (8002720 <main+0x298>)
 80026a4:	f000 fff2 	bl	800368c <printf_>
	scan_i2c();
 80026a8:	f7ff fe4c 	bl	8002344 <scan_i2c>
	CS_HIGH();
 80026ac:	f7ff fe9c 	bl	80023e8 <CS_HIGH>
	printf("Testing SPI Connection\r\n");
 80026b0:	481c      	ldr	r0, [pc, #112]	; (8002724 <main+0x29c>)
 80026b2:	f000 ffeb 	bl	800368c <printf_>
		HAL_SPI_Init(&hspi2);
 80026b6:	0038      	movs	r0, r7
 80026b8:	f002 f930 	bl	800491c <HAL_SPI_Init>
		for (int i=0x00; i<0x45; i++){
 80026bc:	2500      	movs	r5, #0
	        SPI_Read(i, &data);
 80026be:	0021      	movs	r1, r4
 80026c0:	b2e8      	uxtb	r0, r5
 80026c2:	f7ff fe67 	bl	8002394 <SPI_Read>
	        if (data != 0){
 80026c6:	7822      	ldrb	r2, [r4, #0]
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	d003      	beq.n	80026d4 <main+0x24c>
		        printf("Reading from 0x%x: 0x%x\r\n", i, data);
 80026cc:	0029      	movs	r1, r5
 80026ce:	4816      	ldr	r0, [pc, #88]	; (8002728 <main+0x2a0>)
 80026d0:	f000 ffdc 	bl	800368c <printf_>
			HAL_Delay(50);
 80026d4:	2032      	movs	r0, #50	; 0x32
		for (int i=0x00; i<0x45; i++){
 80026d6:	3501      	adds	r5, #1
			HAL_Delay(50);
 80026d8:	f001 f974 	bl	80039c4 <HAL_Delay>
		for (int i=0x00; i<0x45; i++){
 80026dc:	2d45      	cmp	r5, #69	; 0x45
 80026de:	d1ee      	bne.n	80026be <main+0x236>
		printf("--------\r\n");
 80026e0:	4812      	ldr	r0, [pc, #72]	; (800272c <main+0x2a4>)
 80026e2:	e7e6      	b.n	80026b2 <main+0x22a>
 80026e4:	40021000 	.word	0x40021000
 80026e8:	50000400 	.word	0x50000400
 80026ec:	50000800 	.word	0x50000800
 80026f0:	2000002c 	.word	0x2000002c
 80026f4:	40003800 	.word	0x40003800
 80026f8:	200001a0 	.word	0x200001a0
 80026fc:	40013000 	.word	0x40013000
 8002700:	20000084 	.word	0x20000084
 8002704:	40005400 	.word	0x40005400
 8002708:	0000020b 	.word	0x0000020b
 800270c:	200000d0 	.word	0x200000d0
 8002710:	40005800 	.word	0x40005800
 8002714:	2000090e 	.word	0x2000090e
 8002718:	2000011c 	.word	0x2000011c
 800271c:	40013800 	.word	0x40013800
 8002720:	08005276 	.word	0x08005276
 8002724:	080052d3 	.word	0x080052d3
 8002728:	080052ec 	.word	0x080052ec
 800272c:	0800526b 	.word	0x0800526b

08002730 <_out_null>:
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 8002730:	4770      	bx	lr

08002732 <_out_rev>:
    return i;
}

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
 8002732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002734:	b085      	sub	sp, #20
 8002736:	9302      	str	r3, [sp, #8]
    const size_t start_idx = idx;

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                       unsigned int width, unsigned int flags) {
 800273a:	000f      	movs	r7, r1
 800273c:	0014      	movs	r4, r2
 800273e:	9001      	str	r0, [sp, #4]
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002740:	079b      	lsls	r3, r3, #30
 8002742:	d032      	beq.n	80027aa <_out_rev+0x78>
 8002744:	9200      	str	r2, [sp, #0]
 8002746:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800274a:	9b00      	ldr	r3, [sp, #0]
 800274c:	189d      	adds	r5, r3, r2
 800274e:	1baa      	subs	r2, r5, r6
            out(' ', buffer, idx++, maxlen);
        }
    }

    // reverse string
    while (len) {
 8002750:	2e00      	cmp	r6, #0
 8002752:	d12c      	bne.n	80027ae <_out_rev+0x7c>
        out(buf[--len], buffer, idx++, maxlen);
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
 8002754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002756:	079b      	lsls	r3, r3, #30
 8002758:	d50f      	bpl.n	800277a <_out_rev+0x48>
 800275a:	1b2b      	subs	r3, r5, r4
 800275c:	9303      	str	r3, [sp, #12]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	9b00      	ldr	r3, [sp, #0]
        while (idx - start_idx < width) {
 8002762:	9900      	ldr	r1, [sp, #0]
 8002764:	18e2      	adds	r2, r4, r3
 8002766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002768:	428b      	cmp	r3, r1
 800276a:	d828      	bhi.n	80027be <_out_rev+0x8c>
 800276c:	9903      	ldr	r1, [sp, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	428b      	cmp	r3, r1
 8002772:	d301      	bcc.n	8002778 <_out_rev+0x46>
 8002774:	18e4      	adds	r4, r4, r3
 8002776:	1b62      	subs	r2, r4, r5
 8002778:	18ad      	adds	r5, r5, r2
            out(' ', buffer, idx++, maxlen);
        }
    }

    return idx;
}
 800277a:	0028      	movs	r0, r5
 800277c:	b005      	add	sp, #20
 800277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            out(' ', buffer, idx++, maxlen);
 8002780:	0039      	movs	r1, r7
 8002782:	2020      	movs	r0, #32
 8002784:	9b02      	ldr	r3, [sp, #8]
 8002786:	9e01      	ldr	r6, [sp, #4]
 8002788:	47b0      	blx	r6
        for (i = len; i < width; i++) {
 800278a:	3501      	adds	r5, #1
 800278c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800278e:	1ae2      	subs	r2, r4, r3
 8002790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002792:	1952      	adds	r2, r2, r5
 8002794:	429d      	cmp	r5, r3
 8002796:	d3f3      	bcc.n	8002780 <_out_rev+0x4e>
 8002798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800279a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800279c:	2300      	movs	r3, #0
 800279e:	428a      	cmp	r2, r1
 80027a0:	d800      	bhi.n	80027a4 <_out_rev+0x72>
 80027a2:	1a8b      	subs	r3, r1, r2
 80027a4:	191b      	adds	r3, r3, r4
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	e7cd      	b.n	8002746 <_out_rev+0x14>
 80027aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80027ac:	e7ee      	b.n	800278c <_out_rev+0x5a>
        out(buf[--len], buffer, idx++, maxlen);
 80027ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027b0:	3e01      	subs	r6, #1
 80027b2:	5d98      	ldrb	r0, [r3, r6]
 80027b4:	0039      	movs	r1, r7
 80027b6:	9b02      	ldr	r3, [sp, #8]
 80027b8:	9d01      	ldr	r5, [sp, #4]
 80027ba:	47a8      	blx	r5
 80027bc:	e7c4      	b.n	8002748 <_out_rev+0x16>
            out(' ', buffer, idx++, maxlen);
 80027be:	9b02      	ldr	r3, [sp, #8]
 80027c0:	0039      	movs	r1, r7
 80027c2:	2020      	movs	r0, #32
 80027c4:	9e01      	ldr	r6, [sp, #4]
 80027c6:	47b0      	blx	r6
 80027c8:	9b00      	ldr	r3, [sp, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	e7c7      	b.n	800275e <_out_rev+0x2c>

080027ce <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
 80027ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d0:	b089      	sub	sp, #36	; 0x24
 80027d2:	0007      	movs	r7, r0
 80027d4:	a810      	add	r0, sp, #64	; 0x40
 80027d6:	7806      	ldrb	r6, [r0, #0]
 80027d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80027da:	9105      	str	r1, [sp, #20]
 80027dc:	9206      	str	r2, [sp, #24]
 80027de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80027e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80027e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80027e4:	9307      	str	r3, [sp, #28]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
 80027e6:	0783      	lsls	r3, r0, #30
 80027e8:	d41e      	bmi.n	8002828 <_ntoa_format+0x5a>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80027ea:	2501      	movs	r5, #1
 80027ec:	4005      	ands	r5, r0
 80027ee:	2c00      	cmp	r4, #0
 80027f0:	d007      	beq.n	8002802 <_ntoa_format+0x34>
 80027f2:	2d00      	cmp	r5, #0
 80027f4:	d005      	beq.n	8002802 <_ntoa_format+0x34>
 80027f6:	2e00      	cmp	r6, #0
 80027f8:	d102      	bne.n	8002800 <_ntoa_format+0x32>
 80027fa:	230c      	movs	r3, #12
 80027fc:	4218      	tst	r0, r3
 80027fe:	d000      	beq.n	8002802 <_ntoa_format+0x34>
            width--;
 8002800:	3c01      	subs	r4, #1
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8002802:	2330      	movs	r3, #48	; 0x30
 8002804:	469c      	mov	ip, r3
 8002806:	e002      	b.n	800280e <_ntoa_format+0x40>
 8002808:	4663      	mov	r3, ip
 800280a:	548b      	strb	r3, [r1, r2]
 800280c:	3201      	adds	r2, #1
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800280e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002810:	429a      	cmp	r2, r3
 8002812:	d201      	bcs.n	8002818 <_ntoa_format+0x4a>
 8002814:	2a20      	cmp	r2, #32
 8002816:	d1f7      	bne.n	8002808 <_ntoa_format+0x3a>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8002818:	2330      	movs	r3, #48	; 0x30
 800281a:	469c      	mov	ip, r3
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800281c:	2d00      	cmp	r5, #0
 800281e:	d003      	beq.n	8002828 <_ntoa_format+0x5a>
 8002820:	42a2      	cmp	r2, r4
 8002822:	d201      	bcs.n	8002828 <_ntoa_format+0x5a>
 8002824:	2a1f      	cmp	r2, #31
 8002826:	d919      	bls.n	800285c <_ntoa_format+0x8e>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
 8002828:	06c3      	lsls	r3, r0, #27
 800282a:	d53a      	bpl.n	80028a2 <_ntoa_format+0xd4>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800282c:	0543      	lsls	r3, r0, #21
 800282e:	d41a      	bmi.n	8002866 <_ntoa_format+0x98>
 8002830:	2a00      	cmp	r2, #0
 8002832:	d018      	beq.n	8002866 <_ntoa_format+0x98>
 8002834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <_ntoa_format+0x70>
 800283a:	42a2      	cmp	r2, r4
 800283c:	d113      	bne.n	8002866 <_ntoa_format+0x98>
            len--;
 800283e:	1e55      	subs	r5, r2, #1
            if (len && (base == 16U)) {
 8002840:	2a01      	cmp	r2, #1
 8002842:	d00f      	beq.n	8002864 <_ntoa_format+0x96>
 8002844:	9b11      	ldr	r3, [sp, #68]	; 0x44
                len--;
 8002846:	3a02      	subs	r2, #2
            if (len && (base == 16U)) {
 8002848:	2b10      	cmp	r3, #16
 800284a:	d00f      	beq.n	800286c <_ntoa_format+0x9e>
 800284c:	002a      	movs	r2, r5
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'x';
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        } else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800284e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002850:	2b02      	cmp	r3, #2
 8002852:	d121      	bne.n	8002898 <_ntoa_format+0xca>
 8002854:	2a1f      	cmp	r2, #31
 8002856:	d80e      	bhi.n	8002876 <_ntoa_format+0xa8>
            buf[len++] = 'b';
 8002858:	2562      	movs	r5, #98	; 0x62
 800285a:	e01b      	b.n	8002894 <_ntoa_format+0xc6>
            buf[len++] = '0';
 800285c:	4663      	mov	r3, ip
 800285e:	548b      	strb	r3, [r1, r2]
 8002860:	3201      	adds	r2, #1
 8002862:	e7db      	b.n	800281c <_ntoa_format+0x4e>
 8002864:	002a      	movs	r2, r5
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002868:	2b10      	cmp	r3, #16
 800286a:	d1f0      	bne.n	800284e <_ntoa_format+0x80>
 800286c:	0683      	lsls	r3, r0, #26
 800286e:	d40e      	bmi.n	800288e <_ntoa_format+0xc0>
            buf[len++] = 'x';
 8002870:	2578      	movs	r5, #120	; 0x78
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002872:	2a1f      	cmp	r2, #31
 8002874:	d90e      	bls.n	8002894 <_ntoa_format+0xc6>
        } else if (flags & FLAGS_SPACE) {
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002876:	9003      	str	r0, [sp, #12]
 8002878:	9201      	str	r2, [sp, #4]
 800287a:	9100      	str	r1, [sp, #0]
 800287c:	0038      	movs	r0, r7
 800287e:	9b07      	ldr	r3, [sp, #28]
 8002880:	9a06      	ldr	r2, [sp, #24]
 8002882:	9905      	ldr	r1, [sp, #20]
 8002884:	9402      	str	r4, [sp, #8]
 8002886:	f7ff ff54 	bl	8002732 <_out_rev>
}
 800288a:	b009      	add	sp, #36	; 0x24
 800288c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            buf[len++] = 'X';
 800288e:	2558      	movs	r5, #88	; 0x58
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002890:	2a1f      	cmp	r2, #31
 8002892:	d8f0      	bhi.n	8002876 <_ntoa_format+0xa8>
            buf[len++] = 'b';
 8002894:	548d      	strb	r5, [r1, r2]
 8002896:	3201      	adds	r2, #1
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002898:	2a1f      	cmp	r2, #31
 800289a:	d8ec      	bhi.n	8002876 <_ntoa_format+0xa8>
            buf[len++] = '0';
 800289c:	2530      	movs	r5, #48	; 0x30
 800289e:	548d      	strb	r5, [r1, r2]
 80028a0:	3201      	adds	r2, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80028a2:	2a1f      	cmp	r2, #31
 80028a4:	d8e7      	bhi.n	8002876 <_ntoa_format+0xa8>
            buf[len++] = '-';
 80028a6:	252d      	movs	r5, #45	; 0x2d
        if (negative) {
 80028a8:	2e00      	cmp	r6, #0
 80028aa:	d105      	bne.n	80028b8 <_ntoa_format+0xea>
            buf[len++] = '+'; // ignore the space if the '+' exists
 80028ac:	252b      	movs	r5, #43	; 0x2b
        } else if (flags & FLAGS_PLUS) {
 80028ae:	0743      	lsls	r3, r0, #29
 80028b0:	d402      	bmi.n	80028b8 <_ntoa_format+0xea>
        } else if (flags & FLAGS_SPACE) {
 80028b2:	0703      	lsls	r3, r0, #28
 80028b4:	d5df      	bpl.n	8002876 <_ntoa_format+0xa8>
            buf[len++] = ' ';
 80028b6:	2520      	movs	r5, #32
 80028b8:	548d      	strb	r5, [r1, r2]
 80028ba:	3201      	adds	r2, #1
 80028bc:	e7db      	b.n	8002876 <_ntoa_format+0xa8>

080028be <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value,
                         bool negative, unsigned long base, unsigned int prec, unsigned int width,
                         unsigned int flags) {
 80028be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c0:	b097      	sub	sp, #92	; 0x5c
 80028c2:	920a      	str	r2, [sp, #40]	; 0x28
 80028c4:	aa1c      	add	r2, sp, #112	; 0x70
 80028c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80028c8:	ca08      	ldmia	r2!, {r3}
 80028ca:	000d      	movs	r5, r1
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80028d0:	9009      	str	r0, [sp, #36]	; 0x24
 80028d2:	920c      	str	r2, [sp, #48]	; 0x30
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if (!value) {
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <_ntoa_long+0x1e>
        flags &= ~FLAGS_HASH;
 80028d8:	2210      	movs	r2, #16
 80028da:	4394      	bics	r4, r2
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 80028dc:	0562      	lsls	r2, r4, #21
 80028de:	d501      	bpl.n	80028e4 <_ntoa_long+0x26>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01f      	beq.n	8002924 <_ntoa_long+0x66>
 80028e4:	2261      	movs	r2, #97	; 0x61
 80028e6:	06a1      	lsls	r1, r4, #26
 80028e8:	d500      	bpl.n	80028ec <_ntoa_long+0x2e>
 80028ea:	2241      	movs	r2, #65	; 0x41
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80028ec:	001e      	movs	r6, r3
 80028ee:	2700      	movs	r7, #0
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	3a0a      	subs	r2, #10
 80028f4:	920d      	str	r2, [sp, #52]	; 0x34
            const char digit = (char)(value % base);
 80028f6:	0030      	movs	r0, r6
 80028f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80028fa:	f7fd fc9f 	bl	800023c <__aeabi_uidivmod>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80028fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            const char digit = (char)(value % base);
 8002900:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002902:	189a      	adds	r2, r3, r2
 8002904:	4684      	mov	ip, r0
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	2909      	cmp	r1, #9
 800290a:	d801      	bhi.n	8002910 <_ntoa_long+0x52>
 800290c:	3330      	adds	r3, #48	; 0x30
 800290e:	b2da      	uxtb	r2, r3
 8002910:	2020      	movs	r0, #32
 8002912:	a906      	add	r1, sp, #24
 8002914:	1809      	adds	r1, r1, r0
 8002916:	55ca      	strb	r2, [r1, r7]
            value /= base;
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002918:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800291a:	1c7b      	adds	r3, r7, #1
 800291c:	4296      	cmp	r6, r2
 800291e:	d301      	bcc.n	8002924 <_ntoa_long+0x66>
 8002920:	4283      	cmp	r3, r0
 8002922:	d113      	bne.n	800294c <_ntoa_long+0x8e>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002924:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	9205      	str	r2, [sp, #20]
 800292a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800292c:	ab0e      	add	r3, sp, #56	; 0x38
 800292e:	9204      	str	r2, [sp, #16]
 8002930:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	9203      	str	r2, [sp, #12]
 8002936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002938:	0029      	movs	r1, r5
 800293a:	9202      	str	r2, [sp, #8]
 800293c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800293e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002942:	9406      	str	r4, [sp, #24]
 8002944:	f7ff ff43 	bl	80027ce <_ntoa_format>
}
 8002948:	b017      	add	sp, #92	; 0x5c
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294c:	001f      	movs	r7, r3
            value /= base;
 800294e:	4666      	mov	r6, ip
 8002950:	e7d1      	b.n	80028f6 <_ntoa_long+0x38>

08002952 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
 8002952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002954:	b09b      	sub	sp, #108	; 0x6c
 8002956:	930d      	str	r3, [sp, #52]	; 0x34
 8002958:	ab22      	add	r3, sp, #136	; 0x88
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800295e:	930e      	str	r3, [sp, #56]	; 0x38
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if (!value) {
 8002960:	002b      	movs	r3, r5
                              unsigned int flags) {
 8002962:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8002964:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8002966:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8002968:	900a      	str	r0, [sp, #40]	; 0x28
 800296a:	910b      	str	r1, [sp, #44]	; 0x2c
 800296c:	920c      	str	r2, [sp, #48]	; 0x30
    if (!value) {
 800296e:	4323      	orrs	r3, r4
 8002970:	d103      	bne.n	800297a <_ntoa_long_long+0x28>
        flags &= ~FLAGS_HASH;
 8002972:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002974:	3310      	adds	r3, #16
 8002976:	439a      	bics	r2, r3
 8002978:	9228      	str	r2, [sp, #160]	; 0xa0
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 800297a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800297c:	055b      	lsls	r3, r3, #21
 800297e:	d504      	bpl.n	800298a <_ntoa_long_long+0x38>
 8002980:	002a      	movs	r2, r5
    size_t len = 0U;
 8002982:	2300      	movs	r3, #0
    if (!(flags & FLAGS_PRECISION) || value) {
 8002984:	4322      	orrs	r2, r4
 8002986:	429a      	cmp	r2, r3
 8002988:	d02a      	beq.n	80029e0 <_ntoa_long_long+0x8e>
 800298a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800298c:	2361      	movs	r3, #97	; 0x61
 800298e:	0692      	lsls	r2, r2, #26
 8002990:	d500      	bpl.n	8002994 <_ntoa_long_long+0x42>
 8002992:	2341      	movs	r3, #65	; 0x41
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002994:	2200      	movs	r2, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3b0a      	subs	r3, #10
 800299a:	9209      	str	r2, [sp, #36]	; 0x24
 800299c:	930f      	str	r3, [sp, #60]	; 0x3c
            const char digit = (char)(value % base);
 800299e:	003a      	movs	r2, r7
 80029a0:	0033      	movs	r3, r6
 80029a2:	0028      	movs	r0, r5
 80029a4:	0021      	movs	r1, r4
 80029a6:	f7fd fd77 	bl	8000498 <__aeabi_uldivmod>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80029aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            const char digit = (char)(value % base);
 80029ac:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80029ae:	18d3      	adds	r3, r2, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	469c      	mov	ip, r3
 80029b4:	9010      	str	r0, [sp, #64]	; 0x40
 80029b6:	9111      	str	r1, [sp, #68]	; 0x44
 80029b8:	2a09      	cmp	r2, #9
 80029ba:	d802      	bhi.n	80029c2 <_ntoa_long_long+0x70>
 80029bc:	3230      	adds	r2, #48	; 0x30
 80029be:	b2d3      	uxtb	r3, r2
 80029c0:	469c      	mov	ip, r3
 80029c2:	2020      	movs	r0, #32
 80029c4:	aa0a      	add	r2, sp, #40	; 0x28
 80029c6:	1812      	adds	r2, r2, r0
 80029c8:	4660      	mov	r0, ip
 80029ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029ce:	3301      	adds	r3, #1
 80029d0:	5450      	strb	r0, [r2, r1]
            value /= base;
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d804      	bhi.n	80029e0 <_ntoa_long_long+0x8e>
 80029d6:	d101      	bne.n	80029dc <_ntoa_long_long+0x8a>
 80029d8:	42af      	cmp	r7, r5
 80029da:	d801      	bhi.n	80029e0 <_ntoa_long_long+0x8e>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d113      	bne.n	8002a08 <_ntoa_long_long+0xb6>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80029e0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	9206      	str	r2, [sp, #24]
 80029e6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80029e8:	ab12      	add	r3, sp, #72	; 0x48
 80029ea:	9205      	str	r2, [sp, #20]
 80029ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	9204      	str	r2, [sp, #16]
 80029f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029f6:	9202      	str	r2, [sp, #8]
 80029f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80029fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029fe:	9703      	str	r7, [sp, #12]
 8002a00:	f7ff fee5 	bl	80027ce <_ntoa_format>
}
 8002a04:	b01b      	add	sp, #108	; 0x6c
 8002a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            value /= base;
 8002a08:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0e:	e7c6      	b.n	800299e <_ntoa_long_long+0x4c>

08002a10 <_ftoa>:
                    unsigned int width, unsigned int flags);
#endif

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	b09b      	sub	sp, #108	; 0x6c
 8002a14:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8002a16:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8002a18:	9009      	str	r0, [sp, #36]	; 0x24
 8002a1a:	910a      	str	r1, [sp, #40]	; 0x28
 8002a1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8002a1e:	930c      	str	r3, [sp, #48]	; 0x30

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (value != value)
 8002a20:	0032      	movs	r2, r6
 8002a22:	003b      	movs	r3, r7
 8002a24:	0030      	movs	r0, r6
 8002a26:	0039      	movs	r1, r7
                    unsigned int width, unsigned int flags) {
 8002a28:	9c22      	ldr	r4, [sp, #136]	; 0x88
    if (value != value)
 8002a2a:	f7fd fd07 	bl	800043c <__aeabi_dcmpeq>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d108      	bne.n	8002a44 <_ftoa+0x34>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002a32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	4bb0      	ldr	r3, [pc, #704]	; (8002d00 <_ftoa+0x2f0>)
        } else if (flags & FLAGS_SPACE) {
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	e024      	b.n	8002a8e <_ftoa+0x7e>
    if (value < -DBL_MAX)
 8002a44:	2201      	movs	r2, #1
 8002a46:	0030      	movs	r0, r6
 8002a48:	0039      	movs	r1, r7
 8002a4a:	4bae      	ldr	r3, [pc, #696]	; (8002d04 <_ftoa+0x2f4>)
 8002a4c:	4252      	negs	r2, r2
 8002a4e:	f7fd fcfb 	bl	8000448 <__aeabi_dcmplt>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d007      	beq.n	8002a66 <_ftoa+0x56>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002a58:	9303      	str	r3, [sp, #12]
 8002a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	2304      	movs	r3, #4
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	4ba9      	ldr	r3, [pc, #676]	; (8002d08 <_ftoa+0x2f8>)
 8002a64:	e7ec      	b.n	8002a40 <_ftoa+0x30>
    if (value > DBL_MAX)
 8002a66:	2201      	movs	r2, #1
 8002a68:	0030      	movs	r0, r6
 8002a6a:	0039      	movs	r1, r7
 8002a6c:	4ba7      	ldr	r3, [pc, #668]	; (8002d0c <_ftoa+0x2fc>)
 8002a6e:	4252      	negs	r2, r2
 8002a70:	f7fd fcfe 	bl	8000470 <__aeabi_dcmpgt>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d014      	beq.n	8002aa2 <_ftoa+0x92>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 8002a78:	2304      	movs	r3, #4
 8002a7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002a7c:	421a      	tst	r2, r3
 8002a7e:	d00d      	beq.n	8002a9c <_ftoa+0x8c>
 8002a80:	4aa3      	ldr	r2, [pc, #652]	; (8002d10 <_ftoa+0x300>)
 8002a82:	9924      	ldr	r1, [sp, #144]	; 0x90
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	9103      	str	r1, [sp, #12]
 8002a88:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002a8a:	9200      	str	r2, [sp, #0]
 8002a8c:	9102      	str	r1, [sp, #8]
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002a92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a96:	f7ff fe4c 	bl	8002732 <_out_rev>
 8002a9a:	e01f      	b.n	8002adc <_ftoa+0xcc>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	4a9d      	ldr	r2, [pc, #628]	; (8002d14 <_ftoa+0x304>)
 8002aa0:	e7ef      	b.n	8002a82 <_ftoa+0x72>
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	0030      	movs	r0, r6
 8002aa6:	0039      	movs	r1, r7
 8002aa8:	4b9b      	ldr	r3, [pc, #620]	; (8002d18 <_ftoa+0x308>)
 8002aaa:	f7fd fce1 	bl	8000470 <__aeabi_dcmpgt>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d107      	bne.n	8002ac2 <_ftoa+0xb2>
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	0030      	movs	r0, r6
 8002ab6:	0039      	movs	r1, r7
 8002ab8:	4b98      	ldr	r3, [pc, #608]	; (8002d1c <_ftoa+0x30c>)
 8002aba:	f7fd fcc5 	bl	8000448 <__aeabi_dcmplt>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d00e      	beq.n	8002ae0 <_ftoa+0xd0>
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002ac2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002ac4:	9600      	str	r6, [sp, #0]
 8002ac6:	9701      	str	r7, [sp, #4]
 8002ac8:	9304      	str	r3, [sp, #16]
 8002aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ace:	9303      	str	r3, [sp, #12]
 8002ad0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ad6:	9402      	str	r4, [sp, #8]
 8002ad8:	f000 f926 	bl	8002d28 <_etoa>
}
 8002adc:	b01b      	add	sp, #108	; 0x6c
 8002ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (value < 0) {
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	0030      	movs	r0, r6
 8002ae6:	0039      	movs	r1, r7
 8002ae8:	f7fd fcae 	bl	8000448 <__aeabi_dcmplt>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d077      	beq.n	8002be0 <_ftoa+0x1d0>
        value = 0 - value;
 8002af0:	003b      	movs	r3, r7
 8002af2:	0032      	movs	r2, r6
 8002af4:	2000      	movs	r0, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	f7fe ffdc 	bl	8001ab4 <__aeabi_dsub>
        negative = true;
 8002afc:	2301      	movs	r3, #1
        value = 0 - value;
 8002afe:	0006      	movs	r6, r0
 8002b00:	000f      	movs	r7, r1
        negative = true;
 8002b02:	930d      	str	r3, [sp, #52]	; 0x34
    if (!(flags & FLAGS_PRECISION)) {
 8002b04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002b06:	055b      	lsls	r3, r3, #21
 8002b08:	d56c      	bpl.n	8002be4 <_ftoa+0x1d4>
 8002b0a:	0022      	movs	r2, r4
        buf[len++] = '0';
 8002b0c:	2130      	movs	r1, #48	; 0x30
 8002b0e:	ab12      	add	r3, sp, #72	; 0x48
 8002b10:	3a20      	subs	r2, #32
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002b12:	9408      	str	r4, [sp, #32]
 8002b14:	9808      	ldr	r0, [sp, #32]
 8002b16:	1a25      	subs	r5, r4, r0
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002b18:	2809      	cmp	r0, #9
 8002b1a:	d907      	bls.n	8002b2c <_ftoa+0x11c>
        prec--;
 8002b1c:	9808      	ldr	r0, [sp, #32]
        buf[len++] = '0';
 8002b1e:	7019      	strb	r1, [r3, #0]
        prec--;
 8002b20:	3801      	subs	r0, #1
 8002b22:	9008      	str	r0, [sp, #32]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002b24:	3301      	adds	r3, #1
 8002b26:	4290      	cmp	r0, r2
 8002b28:	d1f4      	bne.n	8002b14 <_ftoa+0x104>
 8002b2a:	2520      	movs	r5, #32
    int whole = (int)value;
 8002b2c:	0039      	movs	r1, r7
 8002b2e:	0030      	movs	r0, r6
 8002b30:	f7ff fb52 	bl	80021d8 <__aeabi_d2iz>
    double tmp = (value - whole) * pow10[prec];
 8002b34:	9b08      	ldr	r3, [sp, #32]
    int whole = (int)value;
 8002b36:	9007      	str	r0, [sp, #28]
    double tmp = (value - whole) * pow10[prec];
 8002b38:	00da      	lsls	r2, r3, #3
 8002b3a:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <_ftoa+0x310>)
 8002b3c:	189b      	adds	r3, r3, r2
 8002b3e:	685c      	ldr	r4, [r3, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	930e      	str	r3, [sp, #56]	; 0x38
 8002b44:	940f      	str	r4, [sp, #60]	; 0x3c
 8002b46:	f7ff fb7d 	bl	8002244 <__aeabi_i2d>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	000b      	movs	r3, r1
 8002b4e:	0030      	movs	r0, r6
 8002b50:	0039      	movs	r1, r7
 8002b52:	f7fe ffaf 	bl	8001ab4 <__aeabi_dsub>
 8002b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b5a:	f7fe fd3f 	bl	80015dc <__aeabi_dmul>
 8002b5e:	9010      	str	r0, [sp, #64]	; 0x40
 8002b60:	9111      	str	r1, [sp, #68]	; 0x44
    unsigned long frac = (unsigned long)tmp;
 8002b62:	f7fd fce1 	bl	8000528 <__aeabi_d2uiz>
 8002b66:	0004      	movs	r4, r0
    diff = tmp - frac;
 8002b68:	f7ff fb9c 	bl	80022a4 <__aeabi_ui2d>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	000b      	movs	r3, r1
 8002b70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002b72:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002b74:	f7fe ff9e 	bl	8001ab4 <__aeabi_dsub>
    if (diff > 0.5) {
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <_ftoa+0x314>)
    diff = tmp - frac;
 8002b7c:	9010      	str	r0, [sp, #64]	; 0x40
 8002b7e:	9111      	str	r1, [sp, #68]	; 0x44
    if (diff > 0.5) {
 8002b80:	f7fd fc76 	bl	8000470 <__aeabi_dcmpgt>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d02f      	beq.n	8002be8 <_ftoa+0x1d8>
        ++frac;
 8002b88:	3401      	adds	r4, #1
        if (frac >= pow10[prec]) {
 8002b8a:	0020      	movs	r0, r4
 8002b8c:	f7ff fb8a 	bl	80022a4 <__aeabi_ui2d>
 8002b90:	0002      	movs	r2, r0
 8002b92:	000b      	movs	r3, r1
 8002b94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002b96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002b98:	f7fd fc60 	bl	800045c <__aeabi_dcmple>
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d003      	beq.n	8002ba8 <_ftoa+0x198>
            frac = 0;
 8002ba0:	2400      	movs	r4, #0
            ++whole;
 8002ba2:	9b07      	ldr	r3, [sp, #28]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	9307      	str	r3, [sp, #28]
    if (prec == 0U) {
 8002ba8:	9b08      	ldr	r3, [sp, #32]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02a      	beq.n	8002c04 <_ftoa+0x1f4>
            buf[len++] = (char)(48U + (frac % 10U));
 8002bae:	270a      	movs	r7, #10
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002bb0:	2d20      	cmp	r5, #32
 8002bb2:	d149      	bne.n	8002c48 <_ftoa+0x238>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d000      	beq.n	8002bc0 <_ftoa+0x1b0>
 8002bbe:	e08b      	b.n	8002cd8 <_ftoa+0x2c8>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002bc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d100      	bne.n	8002bc8 <_ftoa+0x1b8>
 8002bc6:	e087      	b.n	8002cd8 <_ftoa+0x2c8>
 8002bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <_ftoa+0x1c4>
 8002bce:	330c      	adds	r3, #12
 8002bd0:	421a      	tst	r2, r3
 8002bd2:	d002      	beq.n	8002bda <_ftoa+0x1ca>
            width--;
 8002bd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	9323      	str	r3, [sp, #140]	; 0x8c
            buf[len++] = '0';
 8002bda:	2230      	movs	r2, #48	; 0x30
 8002bdc:	ab12      	add	r3, sp, #72	; 0x48
 8002bde:	e06f      	b.n	8002cc0 <_ftoa+0x2b0>
    bool negative = false;
 8002be0:	900d      	str	r0, [sp, #52]	; 0x34
 8002be2:	e78f      	b.n	8002b04 <_ftoa+0xf4>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002be4:	2406      	movs	r4, #6
 8002be6:	e790      	b.n	8002b0a <_ftoa+0xfa>
    } else if (diff < 0.5) {
 8002be8:	2200      	movs	r2, #0
 8002bea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002bec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002bee:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <_ftoa+0x314>)
 8002bf0:	f7fd fc2a 	bl	8000448 <__aeabi_dcmplt>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d1d7      	bne.n	8002ba8 <_ftoa+0x198>
    } else if ((frac == 0U) || (frac & 1U)) {
 8002bf8:	2c00      	cmp	r4, #0
 8002bfa:	d001      	beq.n	8002c00 <_ftoa+0x1f0>
 8002bfc:	07e3      	lsls	r3, r4, #31
 8002bfe:	d5d3      	bpl.n	8002ba8 <_ftoa+0x198>
        ++frac;
 8002c00:	3401      	adds	r4, #1
 8002c02:	e7d1      	b.n	8002ba8 <_ftoa+0x198>
        diff = value - (double)whole;
 8002c04:	9807      	ldr	r0, [sp, #28]
 8002c06:	f7ff fb1d 	bl	8002244 <__aeabi_i2d>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	000b      	movs	r3, r1
 8002c0e:	0030      	movs	r0, r6
 8002c10:	0039      	movs	r1, r7
 8002c12:	f7fe ff4f 	bl	8001ab4 <__aeabi_dsub>
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002c16:	2200      	movs	r2, #0
 8002c18:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <_ftoa+0x314>)
        diff = value - (double)whole;
 8002c1a:	0006      	movs	r6, r0
 8002c1c:	000f      	movs	r7, r1
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002c1e:	f7fd fc13 	bl	8000448 <__aeabi_dcmplt>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d007      	beq.n	8002c36 <_ftoa+0x226>
 8002c26:	2200      	movs	r2, #0
 8002c28:	0030      	movs	r0, r6
 8002c2a:	0039      	movs	r1, r7
 8002c2c:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <_ftoa+0x314>)
 8002c2e:	f7fd fc1f 	bl	8000470 <__aeabi_dcmpgt>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d004      	beq.n	8002c40 <_ftoa+0x230>
            ++whole;
 8002c36:	2301      	movs	r3, #1
 8002c38:	9a07      	ldr	r2, [sp, #28]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	18d3      	adds	r3, r2, r3
 8002c3e:	9307      	str	r3, [sp, #28]
            buf[len++] = '.';
 8002c40:	002c      	movs	r4, r5
        buf[len++] = (char)(48 + (whole % 10));
 8002c42:	260a      	movs	r6, #10
 8002c44:	af12      	add	r7, sp, #72	; 0x48
 8002c46:	e036      	b.n	8002cb6 <_ftoa+0x2a6>
            --count;
 8002c48:	9b08      	ldr	r3, [sp, #32]
            buf[len++] = (char)(48U + (frac % 10U));
 8002c4a:	0039      	movs	r1, r7
            --count;
 8002c4c:	3b01      	subs	r3, #1
            buf[len++] = (char)(48U + (frac % 10U));
 8002c4e:	0020      	movs	r0, r4
            --count;
 8002c50:	9308      	str	r3, [sp, #32]
            buf[len++] = (char)(48U + (frac % 10U));
 8002c52:	f7fd faf3 	bl	800023c <__aeabi_uidivmod>
 8002c56:	2218      	movs	r2, #24
 8002c58:	ab0c      	add	r3, sp, #48	; 0x30
 8002c5a:	3130      	adds	r1, #48	; 0x30
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	5559      	strb	r1, [r3, r5]
            if (!(frac /= 10U)) {
 8002c60:	0020      	movs	r0, r4
 8002c62:	0039      	movs	r1, r7
            buf[len++] = (char)(48U + (frac % 10U));
 8002c64:	1c6e      	adds	r6, r5, #1
            if (!(frac /= 10U)) {
 8002c66:	f7fd fa63 	bl	8000130 <__udivsi3>
 8002c6a:	2c09      	cmp	r4, #9
 8002c6c:	d80d      	bhi.n	8002c8a <_ftoa+0x27a>
            buf[len++] = (char)(48U + (frac % 10U));
 8002c6e:	0035      	movs	r5, r6
            buf[len++] = '0';
 8002c70:	2030      	movs	r0, #48	; 0x30
 8002c72:	9b08      	ldr	r3, [sp, #32]
 8002c74:	a912      	add	r1, sp, #72	; 0x48
 8002c76:	199b      	adds	r3, r3, r6
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002c78:	2d20      	cmp	r5, #32
 8002c7a:	d09b      	beq.n	8002bb4 <_ftoa+0x1a4>
 8002c7c:	1c6a      	adds	r2, r5, #1
 8002c7e:	429d      	cmp	r5, r3
 8002c80:	d106      	bne.n	8002c90 <_ftoa+0x280>
            buf[len++] = '.';
 8002c82:	232e      	movs	r3, #46	; 0x2e
 8002c84:	554b      	strb	r3, [r1, r5]
 8002c86:	0015      	movs	r5, r2
 8002c88:	e7da      	b.n	8002c40 <_ftoa+0x230>
            buf[len++] = (char)(48U + (frac % 10U));
 8002c8a:	0035      	movs	r5, r6
            if (!(frac /= 10U)) {
 8002c8c:	0004      	movs	r4, r0
 8002c8e:	e78f      	b.n	8002bb0 <_ftoa+0x1a0>
            buf[len++] = '0';
 8002c90:	5548      	strb	r0, [r1, r5]
 8002c92:	0015      	movs	r5, r2
 8002c94:	e7f0      	b.n	8002c78 <_ftoa+0x268>
        buf[len++] = (char)(48 + (whole % 10));
 8002c96:	9807      	ldr	r0, [sp, #28]
 8002c98:	0031      	movs	r1, r6
 8002c9a:	f7fd fbb9 	bl	8000410 <__aeabi_idivmod>
 8002c9e:	3130      	adds	r1, #48	; 0x30
        if (!(whole /= 10)) {
 8002ca0:	9807      	ldr	r0, [sp, #28]
        buf[len++] = (char)(48 + (whole % 10));
 8002ca2:	55e1      	strb	r1, [r4, r7]
        if (!(whole /= 10)) {
 8002ca4:	0031      	movs	r1, r6
 8002ca6:	f7fd facd 	bl	8000244 <__divsi3>
        buf[len++] = (char)(48 + (whole % 10));
 8002caa:	3501      	adds	r5, #1
        if (!(whole /= 10)) {
 8002cac:	9007      	str	r0, [sp, #28]
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d100      	bne.n	8002cb4 <_ftoa+0x2a4>
 8002cb2:	e77f      	b.n	8002bb4 <_ftoa+0x1a4>
        buf[len++] = (char)(48 + (whole % 10));
 8002cb4:	002c      	movs	r4, r5
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cb6:	2d20      	cmp	r5, #32
 8002cb8:	d1ed      	bne.n	8002c96 <_ftoa+0x286>
 8002cba:	e77b      	b.n	8002bb4 <_ftoa+0x1a4>
            buf[len++] = '0';
 8002cbc:	54ea      	strb	r2, [r5, r3]
 8002cbe:	3501      	adds	r5, #1
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002cc0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002cc2:	42a9      	cmp	r1, r5
 8002cc4:	d908      	bls.n	8002cd8 <_ftoa+0x2c8>
 8002cc6:	2d20      	cmp	r5, #32
 8002cc8:	d1f8      	bne.n	8002cbc <_ftoa+0x2ac>
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002ccc:	9501      	str	r5, [sp, #4]
 8002cce:	9303      	str	r3, [sp, #12]
 8002cd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002cd2:	9302      	str	r3, [sp, #8]
 8002cd4:	ab12      	add	r3, sp, #72	; 0x48
 8002cd6:	e6b3      	b.n	8002a40 <_ftoa+0x30>
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cd8:	2d20      	cmp	r5, #32
 8002cda:	d0f6      	beq.n	8002cca <_ftoa+0x2ba>
        if (negative) {
 8002cdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002cde:	ab12      	add	r3, sp, #72	; 0x48
 8002ce0:	2a00      	cmp	r2, #0
 8002ce2:	d003      	beq.n	8002cec <_ftoa+0x2dc>
            buf[len++] = '-';
 8002ce4:	222d      	movs	r2, #45	; 0x2d
            buf[len++] = ' ';
 8002ce6:	555a      	strb	r2, [r3, r5]
 8002ce8:	3501      	adds	r5, #1
 8002cea:	e7ee      	b.n	8002cca <_ftoa+0x2ba>
        } else if (flags & FLAGS_PLUS) {
 8002cec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002cee:	0752      	lsls	r2, r2, #29
 8002cf0:	d501      	bpl.n	8002cf6 <_ftoa+0x2e6>
            buf[len++] = '+'; // ignore the space if the '+' exists
 8002cf2:	222b      	movs	r2, #43	; 0x2b
 8002cf4:	e7f7      	b.n	8002ce6 <_ftoa+0x2d6>
        } else if (flags & FLAGS_SPACE) {
 8002cf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002cf8:	0712      	lsls	r2, r2, #28
 8002cfa:	d5e6      	bpl.n	8002cca <_ftoa+0x2ba>
            buf[len++] = ' ';
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	e7f2      	b.n	8002ce6 <_ftoa+0x2d6>
 8002d00:	0800530f 	.word	0x0800530f
 8002d04:	ffefffff 	.word	0xffefffff
 8002d08:	08005313 	.word	0x08005313
 8002d0c:	7fefffff 	.word	0x7fefffff
 8002d10:	0800530a 	.word	0x0800530a
 8002d14:	08005306 	.word	0x08005306
 8002d18:	41cdcd65 	.word	0x41cdcd65
 8002d1c:	c1cdcd65 	.word	0xc1cdcd65
 8002d20:	08005318 	.word	0x08005318
 8002d24:	3fe00000 	.word	0x3fe00000

08002d28 <_etoa>:

#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse
// <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b095      	sub	sp, #84	; 0x54
 8002d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002d30:	920e      	str	r2, [sp, #56]	; 0x38
 8002d32:	930a      	str	r3, [sp, #40]	; 0x28
 8002d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    unsigned int width, unsigned int flags) {
 8002d38:	930b      	str	r3, [sp, #44]	; 0x2c
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    unsigned int width, unsigned int flags) {
 8002d3c:	900c      	str	r0, [sp, #48]	; 0x30
 8002d3e:	910d      	str	r1, [sp, #52]	; 0x34
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002d40:	0010      	movs	r0, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	f7fd fb7a 	bl	800043c <__aeabi_dcmpeq>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d011      	beq.n	8002d70 <_etoa+0x48>
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4bd4      	ldr	r3, [pc, #848]	; (80030a0 <_etoa+0x378>)
 8002d50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d54:	4252      	negs	r2, r2
 8002d56:	f7fd fb8b 	bl	8000470 <__aeabi_dcmpgt>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d108      	bne.n	8002d70 <_etoa+0x48>
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4bd0      	ldr	r3, [pc, #832]	; (80030a4 <_etoa+0x37c>)
 8002d62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d66:	4252      	negs	r2, r2
 8002d68:	f7fd fb6e 	bl	8000448 <__aeabi_dcmplt>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d013      	beq.n	8002d98 <_etoa+0x70>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002d70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002d78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002d7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d80:	9302      	str	r3, [sp, #8]
 8002d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d84:	9200      	str	r2, [sp, #0]
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d8c:	f7ff fe40 	bl	8002a10 <_ftoa>
 8002d90:	0006      	movs	r6, r0
            while (idx - start_idx < width)
                out(' ', buffer, idx++, maxlen);
        }
    }
    return idx;
}
 8002d92:	0030      	movs	r0, r6
 8002d94:	b015      	add	sp, #84	; 0x54
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (negative) {
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002da0:	f7fd fb52 	bl	8000448 <__aeabi_dcmplt>
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d100      	bne.n	8002daa <_etoa+0x82>
 8002da8:	e162      	b.n	8003070 <_etoa+0x348>
        value = -value;
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	0612      	lsls	r2, r2, #24
 8002dae:	4694      	mov	ip, r2
 8002db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002db2:	9309      	str	r3, [sp, #36]	; 0x24
 8002db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002db6:	4463      	add	r3, ip
 8002db8:	9307      	str	r3, [sp, #28]
    if (!(flags & FLAGS_PRECISION)) {
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	9211      	str	r2, [sp, #68]	; 0x44
 8002dc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002dc6:	421a      	tst	r2, r3
 8002dc8:	d101      	bne.n	8002dce <_etoa+0xa6>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002dca:	2306      	movs	r3, #6
 8002dcc:	931c      	str	r3, [sp, #112]	; 0x70
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;          // effectively log2
 8002dce:	9b07      	ldr	r3, [sp, #28]
    conv.F = value;
 8002dd0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;          // effectively log2
 8002dd2:	0058      	lsls	r0, r3, #1
 8002dd4:	4bb4      	ldr	r3, [pc, #720]	; (80030a8 <_etoa+0x380>)
 8002dd6:	0d40      	lsrs	r0, r0, #21
 8002dd8:	18c0      	adds	r0, r0, r3
    int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002dda:	f7ff fa33 	bl	8002244 <__aeabi_i2d>
 8002dde:	4ab3      	ldr	r2, [pc, #716]	; (80030ac <_etoa+0x384>)
 8002de0:	4bb3      	ldr	r3, [pc, #716]	; (80030b0 <_etoa+0x388>)
 8002de2:	f7fe fbfb 	bl	80015dc <__aeabi_dmul>
 8002de6:	4ab3      	ldr	r2, [pc, #716]	; (80030b4 <_etoa+0x38c>)
 8002de8:	4bb3      	ldr	r3, [pc, #716]	; (80030b8 <_etoa+0x390>)
 8002dea:	f7fd fc87 	bl	80006fc <__aeabi_dadd>
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U); // drop the exponent so conv.F is now in [1,2)
 8002dee:	9b07      	ldr	r3, [sp, #28]
 8002df0:	4ab2      	ldr	r2, [pc, #712]	; (80030bc <_etoa+0x394>)
 8002df2:	031b      	lsls	r3, r3, #12
 8002df4:	0b1b      	lsrs	r3, r3, #12
 8002df6:	431a      	orrs	r2, r3
    int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002df8:	0004      	movs	r4, r0
 8002dfa:	000d      	movs	r5, r1
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U); // drop the exponent so conv.F is now in [1,2)
 8002dfc:	0030      	movs	r0, r6
 8002dfe:	0011      	movs	r1, r2
    int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e00:	4baf      	ldr	r3, [pc, #700]	; (80030c0 <_etoa+0x398>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	f7fe fe56 	bl	8001ab4 <__aeabi_dsub>
 8002e08:	4aae      	ldr	r2, [pc, #696]	; (80030c4 <_etoa+0x39c>)
 8002e0a:	4baf      	ldr	r3, [pc, #700]	; (80030c8 <_etoa+0x3a0>)
 8002e0c:	f7fe fbe6 	bl	80015dc <__aeabi_dmul>
 8002e10:	0002      	movs	r2, r0
 8002e12:	000b      	movs	r3, r1
 8002e14:	0020      	movs	r0, r4
 8002e16:	0029      	movs	r1, r5
 8002e18:	f7fd fc70 	bl	80006fc <__aeabi_dadd>
 8002e1c:	f7ff f9dc 	bl	80021d8 <__aeabi_d2iz>
 8002e20:	9008      	str	r0, [sp, #32]
    exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002e22:	f7ff fa0f 	bl	8002244 <__aeabi_i2d>
 8002e26:	4aa9      	ldr	r2, [pc, #676]	; (80030cc <_etoa+0x3a4>)
 8002e28:	4ba9      	ldr	r3, [pc, #676]	; (80030d0 <_etoa+0x3a8>)
 8002e2a:	0006      	movs	r6, r0
 8002e2c:	000f      	movs	r7, r1
 8002e2e:	f7fe fbd5 	bl	80015dc <__aeabi_dmul>
 8002e32:	2200      	movs	r2, #0
 8002e34:	4ba7      	ldr	r3, [pc, #668]	; (80030d4 <_etoa+0x3ac>)
 8002e36:	f7fd fc61 	bl	80006fc <__aeabi_dadd>
 8002e3a:	f7ff f9cd 	bl	80021d8 <__aeabi_d2iz>
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002e3e:	4aa6      	ldr	r2, [pc, #664]	; (80030d8 <_etoa+0x3b0>)
 8002e40:	4ba6      	ldr	r3, [pc, #664]	; (80030dc <_etoa+0x3b4>)
 8002e42:	0039      	movs	r1, r7
    exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002e44:	9010      	str	r0, [sp, #64]	; 0x40
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002e46:	0030      	movs	r0, r6
 8002e48:	f7fe fbc8 	bl	80015dc <__aeabi_dmul>
 8002e4c:	0006      	movs	r6, r0
 8002e4e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002e50:	000f      	movs	r7, r1
 8002e52:	f7ff f9f7 	bl	8002244 <__aeabi_i2d>
 8002e56:	4aa2      	ldr	r2, [pc, #648]	; (80030e0 <_etoa+0x3b8>)
 8002e58:	4ba2      	ldr	r3, [pc, #648]	; (80030e4 <_etoa+0x3bc>)
 8002e5a:	f7fe fbbf 	bl	80015dc <__aeabi_dmul>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	000b      	movs	r3, r1
 8002e62:	0030      	movs	r0, r6
 8002e64:	0039      	movs	r1, r7
 8002e66:	f7fe fe25 	bl	8001ab4 <__aeabi_dsub>
    const double z2 = z * z;
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	000b      	movs	r3, r1
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002e6e:	0004      	movs	r4, r0
 8002e70:	000d      	movs	r5, r1
    const double z2 = z * z;
 8002e72:	f7fe fbb3 	bl	80015dc <__aeabi_dmul>
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002e76:	0022      	movs	r2, r4
    const double z2 = z * z;
 8002e78:	0006      	movs	r6, r0
 8002e7a:	000f      	movs	r7, r1
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002e7c:	002b      	movs	r3, r5
 8002e7e:	0020      	movs	r0, r4
 8002e80:	0029      	movs	r1, r5
 8002e82:	f7fd fc3b 	bl	80006fc <__aeabi_dadd>
 8002e86:	2200      	movs	r2, #0
 8002e88:	9012      	str	r0, [sp, #72]	; 0x48
 8002e8a:	9113      	str	r1, [sp, #76]	; 0x4c
 8002e8c:	4b96      	ldr	r3, [pc, #600]	; (80030e8 <_etoa+0x3c0>)
 8002e8e:	0030      	movs	r0, r6
 8002e90:	0039      	movs	r1, r7
 8002e92:	f7fd ff9d 	bl	8000dd0 <__aeabi_ddiv>
 8002e96:	2200      	movs	r2, #0
 8002e98:	4b94      	ldr	r3, [pc, #592]	; (80030ec <_etoa+0x3c4>)
 8002e9a:	f7fd fc2f 	bl	80006fc <__aeabi_dadd>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	000b      	movs	r3, r1
 8002ea2:	0030      	movs	r0, r6
 8002ea4:	0039      	movs	r1, r7
 8002ea6:	f7fd ff93 	bl	8000dd0 <__aeabi_ddiv>
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4b90      	ldr	r3, [pc, #576]	; (80030f0 <_etoa+0x3c8>)
 8002eae:	f7fd fc25 	bl	80006fc <__aeabi_dadd>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	000b      	movs	r3, r1
 8002eb6:	0030      	movs	r0, r6
 8002eb8:	0039      	movs	r1, r7
 8002eba:	f7fd ff89 	bl	8000dd0 <__aeabi_ddiv>
 8002ebe:	000f      	movs	r7, r1
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	0006      	movs	r6, r0
 8002ec4:	0022      	movs	r2, r4
 8002ec6:	002b      	movs	r3, r5
 8002ec8:	2000      	movs	r0, #0
 8002eca:	05c9      	lsls	r1, r1, #23
 8002ecc:	f7fe fdf2 	bl	8001ab4 <__aeabi_dsub>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	0030      	movs	r0, r6
 8002ed6:	0039      	movs	r1, r7
 8002ed8:	f7fd fc10 	bl	80006fc <__aeabi_dadd>
 8002edc:	0002      	movs	r2, r0
 8002ede:	000b      	movs	r3, r1
 8002ee0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002ee2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002ee4:	f7fd ff74 	bl	8000dd0 <__aeabi_ddiv>
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4b74      	ldr	r3, [pc, #464]	; (80030bc <_etoa+0x394>)
 8002eec:	f7fd fc06 	bl	80006fc <__aeabi_dadd>
    conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002ef0:	4a80      	ldr	r2, [pc, #512]	; (80030f4 <_etoa+0x3cc>)
 8002ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ef4:	4694      	mov	ip, r2
 8002ef6:	4463      	add	r3, ip
 8002ef8:	2200      	movs	r2, #0
 8002efa:	051b      	lsls	r3, r3, #20
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002efc:	f7fe fb6e 	bl	80015dc <__aeabi_dmul>
 8002f00:	0006      	movs	r6, r0
 8002f02:	000f      	movs	r7, r1
    if (value < conv.F) {
 8002f04:	0002      	movs	r2, r0
 8002f06:	000b      	movs	r3, r1
 8002f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f0a:	9907      	ldr	r1, [sp, #28]
 8002f0c:	f7fd fa9c 	bl	8000448 <__aeabi_dcmplt>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d00a      	beq.n	8002f2a <_etoa+0x202>
        expval--;
 8002f14:	9b08      	ldr	r3, [sp, #32]
        conv.F /= 10;
 8002f16:	0030      	movs	r0, r6
        expval--;
 8002f18:	3b01      	subs	r3, #1
        conv.F /= 10;
 8002f1a:	0039      	movs	r1, r7
        expval--;
 8002f1c:	9308      	str	r3, [sp, #32]
        conv.F /= 10;
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4b72      	ldr	r3, [pc, #456]	; (80030ec <_etoa+0x3c4>)
 8002f22:	f7fd ff55 	bl	8000dd0 <__aeabi_ddiv>
 8002f26:	0006      	movs	r6, r0
 8002f28:	000f      	movs	r7, r1
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002f2a:	24c6      	movs	r4, #198	; 0xc6
 8002f2c:	9b08      	ldr	r3, [sp, #32]
 8002f2e:	3363      	adds	r3, #99	; 0x63
 8002f30:	429c      	cmp	r4, r3
 8002f32:	41a4      	sbcs	r4, r4
    if (flags & FLAGS_ADAPT_EXP) {
 8002f34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002f36:	4264      	negs	r4, r4
 8002f38:	3404      	adds	r4, #4
    if (flags & FLAGS_ADAPT_EXP) {
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	d522      	bpl.n	8002f84 <_etoa+0x25c>
        if ((value >= 1e-4) && (value < 1e6)) {
 8002f3e:	4a6e      	ldr	r2, [pc, #440]	; (80030f8 <_etoa+0x3d0>)
 8002f40:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <_etoa+0x3d4>)
 8002f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f44:	9907      	ldr	r1, [sp, #28]
 8002f46:	f7fd fa9d 	bl	8000484 <__aeabi_dcmpge>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d100      	bne.n	8002f50 <_etoa+0x228>
 8002f4e:	e095      	b.n	800307c <_etoa+0x354>
 8002f50:	2200      	movs	r2, #0
 8002f52:	4b6b      	ldr	r3, [pc, #428]	; (8003100 <_etoa+0x3d8>)
 8002f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f56:	9907      	ldr	r1, [sp, #28]
 8002f58:	f7fd fa76 	bl	8000448 <__aeabi_dcmplt>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d100      	bne.n	8002f62 <_etoa+0x23a>
 8002f60:	e08c      	b.n	800307c <_etoa+0x354>
            if ((int)prec > expval) {
 8002f62:	9b08      	ldr	r3, [sp, #32]
 8002f64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002f66:	4293      	cmp	r3, r2
 8002f68:	db00      	blt.n	8002f6c <_etoa+0x244>
 8002f6a:	e085      	b.n	8003078 <_etoa+0x350>
                prec = (unsigned)((int)prec - expval - 1);
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	9a08      	ldr	r2, [sp, #32]
 8002f70:	1a9d      	subs	r5, r3, r2
 8002f72:	1e6b      	subs	r3, r5, #1
                prec = 0;
 8002f74:	931c      	str	r3, [sp, #112]	; 0x70
            flags |= FLAGS_PRECISION; // make sure _ftoa respects precision
 8002f76:	2380      	movs	r3, #128	; 0x80
            minwidth = 0U;
 8002f78:	2400      	movs	r4, #0
            flags |= FLAGS_PRECISION; // make sure _ftoa respects precision
 8002f7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	921e      	str	r2, [sp, #120]	; 0x78
            expval = 0;
 8002f82:	9408      	str	r4, [sp, #32]
    if (width > minwidth) {
 8002f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        fwidth = 0U;
 8002f86:	2500      	movs	r5, #0
    if (width > minwidth) {
 8002f88:	42a3      	cmp	r3, r4
 8002f8a:	d900      	bls.n	8002f8e <_etoa+0x266>
        fwidth -= minwidth;
 8002f8c:	1b1d      	subs	r5, r3, r4
    if ((flags & FLAGS_LEFT) && minwidth) {
 8002f8e:	2302      	movs	r3, #2
 8002f90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002f92:	401a      	ands	r2, r3
 8002f94:	9210      	str	r2, [sp, #64]	; 0x40
 8002f96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002f98:	421a      	tst	r2, r3
 8002f9a:	d003      	beq.n	8002fa4 <_etoa+0x27c>
        fwidth = 0U;
 8002f9c:	4263      	negs	r3, r4
 8002f9e:	4163      	adcs	r3, r4
 8002fa0:	425b      	negs	r3, r3
 8002fa2:	401d      	ands	r5, r3
    if (expval) {
 8002fa4:	9b08      	ldr	r3, [sp, #32]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <_etoa+0x292>
        value /= conv.F;
 8002faa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fac:	9907      	ldr	r1, [sp, #28]
 8002fae:	0032      	movs	r2, r6
 8002fb0:	003b      	movs	r3, r7
 8002fb2:	f7fd ff0d 	bl	8000dd0 <__aeabi_ddiv>
 8002fb6:	9009      	str	r0, [sp, #36]	; 0x24
 8002fb8:	9107      	str	r1, [sp, #28]
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002fc2:	f7fd fa41 	bl	8000448 <__aeabi_dcmplt>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d005      	beq.n	8002fd6 <_etoa+0x2ae>
 8002fca:	2080      	movs	r0, #128	; 0x80
 8002fcc:	0600      	lsls	r0, r0, #24
 8002fce:	4684      	mov	ip, r0
 8002fd0:	9907      	ldr	r1, [sp, #28]
 8002fd2:	4461      	add	r1, ip
 8002fd4:	9107      	str	r1, [sp, #28]
 8002fd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <_etoa+0x3dc>)
 8002fda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fdc:	4013      	ands	r3, r2
 8002fde:	9304      	str	r3, [sp, #16]
 8002fe0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	9b07      	ldr	r3, [sp, #28]
 8002fe8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	9503      	str	r5, [sp, #12]
 8002ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ff4:	f7ff fd0c 	bl	8002a10 <_ftoa>
 8002ff8:	0006      	movs	r6, r0
    if (minwidth) {
 8002ffa:	2c00      	cmp	r4, #0
 8002ffc:	d100      	bne.n	8003000 <_etoa+0x2d8>
 8002ffe:	e6c8      	b.n	8002d92 <_etoa+0x6a>
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003000:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003002:	2045      	movs	r0, #69	; 0x45
 8003004:	069b      	lsls	r3, r3, #26
 8003006:	d400      	bmi.n	800300a <_etoa+0x2e2>
 8003008:	3020      	adds	r0, #32
 800300a:	0032      	movs	r2, r6
 800300c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800300e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003010:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003012:	47a8      	blx	r5
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0,
 8003014:	2305      	movs	r3, #5
 8003016:	9305      	str	r3, [sp, #20]
 8003018:	2300      	movs	r3, #0
 800301a:	9303      	str	r3, [sp, #12]
 800301c:	330a      	adds	r3, #10
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	9b08      	ldr	r3, [sp, #32]
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003022:	1c77      	adds	r7, r6, #1
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0,
 8003024:	0fdb      	lsrs	r3, r3, #31
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9b08      	ldr	r3, [sp, #32]
 800302a:	3c01      	subs	r4, #1
 800302c:	17da      	asrs	r2, r3, #31
 800302e:	189d      	adds	r5, r3, r2
 8003030:	4055      	eors	r5, r2
 8003032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003034:	003a      	movs	r2, r7
 8003036:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003038:	980c      	ldr	r0, [sp, #48]	; 0x30
 800303a:	9404      	str	r4, [sp, #16]
 800303c:	9500      	str	r5, [sp, #0]
 800303e:	f7ff fc3e 	bl	80028be <_ntoa_long>
        if (flags & FLAGS_LEFT) {
 8003042:	9b10      	ldr	r3, [sp, #64]	; 0x40
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0,
 8003044:	0006      	movs	r6, r0
        if (flags & FLAGS_LEFT) {
 8003046:	2b00      	cmp	r3, #0
 8003048:	d100      	bne.n	800304c <_etoa+0x324>
 800304a:	e6a2      	b.n	8002d92 <_etoa+0x6a>
 800304c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800304e:	1ac5      	subs	r5, r0, r3
 8003050:	002c      	movs	r4, r5
 8003052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003054:	191a      	adds	r2, r3, r4
            while (idx - start_idx < width)
 8003056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003058:	42a3      	cmp	r3, r4
 800305a:	d819      	bhi.n	8003090 <_etoa+0x368>
 800305c:	2200      	movs	r2, #0
 800305e:	42ab      	cmp	r3, r5
 8003060:	d304      	bcc.n	800306c <_etoa+0x344>
 8003062:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003066:	468c      	mov	ip, r1
 8003068:	4463      	add	r3, ip
 800306a:	1b9a      	subs	r2, r3, r6
 800306c:	18b6      	adds	r6, r6, r2
 800306e:	e690      	b.n	8002d92 <_etoa+0x6a>
 8003070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003074:	9209      	str	r2, [sp, #36]	; 0x24
 8003076:	e69f      	b.n	8002db8 <_etoa+0x90>
                prec = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	e77b      	b.n	8002f74 <_etoa+0x24c>
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800307c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800307e:	2b00      	cmp	r3, #0
 8003080:	d080      	beq.n	8002f84 <_etoa+0x25c>
                --prec;
 8003082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003084:	1e5a      	subs	r2, r3, #1
 8003086:	4193      	sbcs	r3, r2
 8003088:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	931c      	str	r3, [sp, #112]	; 0x70
 800308e:	e779      	b.n	8002f84 <_etoa+0x25c>
                out(' ', buffer, idx++, maxlen);
 8003090:	2020      	movs	r0, #32
 8003092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003094:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003096:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003098:	47b8      	blx	r7
 800309a:	3401      	adds	r4, #1
 800309c:	e7d9      	b.n	8003052 <_etoa+0x32a>
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	7fefffff 	.word	0x7fefffff
 80030a4:	ffefffff 	.word	0xffefffff
 80030a8:	fffffc01 	.word	0xfffffc01
 80030ac:	509f79fb 	.word	0x509f79fb
 80030b0:	3fd34413 	.word	0x3fd34413
 80030b4:	8b60c8b3 	.word	0x8b60c8b3
 80030b8:	3fc68a28 	.word	0x3fc68a28
 80030bc:	3ff00000 	.word	0x3ff00000
 80030c0:	3ff80000 	.word	0x3ff80000
 80030c4:	636f4361 	.word	0x636f4361
 80030c8:	3fd287a7 	.word	0x3fd287a7
 80030cc:	0979a371 	.word	0x0979a371
 80030d0:	400a934f 	.word	0x400a934f
 80030d4:	3fe00000 	.word	0x3fe00000
 80030d8:	bbb55516 	.word	0xbbb55516
 80030dc:	40026bb1 	.word	0x40026bb1
 80030e0:	fefa39ef 	.word	0xfefa39ef
 80030e4:	3fe62e42 	.word	0x3fe62e42
 80030e8:	402c0000 	.word	0x402c0000
 80030ec:	40240000 	.word	0x40240000
 80030f0:	40180000 	.word	0x40180000
 80030f4:	000003ff 	.word	0x000003ff
 80030f8:	eb1c432d 	.word	0xeb1c432d
 80030fc:	3f1a36e2 	.word	0x3f1a36e2
 8003100:	412e8480 	.word	0x412e8480
 8003104:	fffff7ff 	.word	0xfffff7ff

08003108 <_vsnprintf>:
#endif // PRINTF_SUPPORT_EXPONENTIAL
#endif // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b09b      	sub	sp, #108	; 0x6c
 800310c:	0015      	movs	r5, r2
 800310e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8003110:	900d      	str	r0, [sp, #52]	; 0x34
 8003112:	910e      	str	r1, [sp, #56]	; 0x38
 8003114:	930f      	str	r3, [sp, #60]	; 0x3c
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if (!buffer) {
 8003116:	2900      	cmp	r1, #0
 8003118:	d101      	bne.n	800311e <_vsnprintf+0x16>
        // use null output function
        out = _out_null;
 800311a:	4b8c      	ldr	r3, [pc, #560]	; (800334c <_vsnprintf+0x244>)
 800311c:	930d      	str	r3, [sp, #52]	; 0x34
            out('%', buffer, idx++, maxlen);
            format++;
            break;

        default:
            out(*format, buffer, idx++, maxlen);
 800311e:	2600      	movs	r6, #0
 8003120:	e00b      	b.n	800313a <_vsnprintf+0x32>
        if (*format != '%') {
 8003122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003124:	3301      	adds	r3, #1
 8003126:	930f      	str	r3, [sp, #60]	; 0x3c
 8003128:	2825      	cmp	r0, #37	; 0x25
 800312a:	d016      	beq.n	800315a <_vsnprintf+0x52>
            out(*format, buffer, idx++, maxlen);
 800312c:	0032      	movs	r2, r6
 800312e:	1c74      	adds	r4, r6, #1
 8003130:	002b      	movs	r3, r5
 8003132:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8003134:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003136:	47b0      	blx	r6
 8003138:	0026      	movs	r6, r4
    while (*format) {
 800313a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800313c:	7818      	ldrb	r0, [r3, #0]
 800313e:	2800      	cmp	r0, #0
 8003140:	d1ef      	bne.n	8003122 <_vsnprintf+0x1a>
            break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003142:	0032      	movs	r2, r6
 8003144:	42ae      	cmp	r6, r5
 8003146:	d300      	bcc.n	800314a <_vsnprintf+0x42>
 8003148:	1e6a      	subs	r2, r5, #1
 800314a:	002b      	movs	r3, r5
 800314c:	2000      	movs	r0, #0
 800314e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003150:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003152:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
}
 8003154:	0030      	movs	r0, r6
 8003156:	b01b      	add	sp, #108	; 0x6c
 8003158:	bdf0      	pop	{r4, r5, r6, r7, pc}
        flags = 0U;
 800315a:	2200      	movs	r2, #0
                flags |= FLAGS_ZEROPAD;
 800315c:	2001      	movs	r0, #1
                flags |= FLAGS_SPACE;
 800315e:	2408      	movs	r4, #8
 8003160:	e005      	b.n	800316e <_vsnprintf+0x66>
            switch (*format) {
 8003162:	2b2d      	cmp	r3, #45	; 0x2d
 8003164:	d016      	beq.n	8003194 <_vsnprintf+0x8c>
 8003166:	2b30      	cmp	r3, #48	; 0x30
 8003168:	d10c      	bne.n	8003184 <_vsnprintf+0x7c>
                flags |= FLAGS_ZEROPAD;
 800316a:	4302      	orrs	r2, r0
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
 800316c:	910f      	str	r1, [sp, #60]	; 0x3c
            switch (*format) {
 800316e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003170:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	3101      	adds	r1, #1
 8003176:	2b2b      	cmp	r3, #43	; 0x2b
 8003178:	d00f      	beq.n	800319a <_vsnprintf+0x92>
 800317a:	d8f2      	bhi.n	8003162 <_vsnprintf+0x5a>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d00e      	beq.n	800319e <_vsnprintf+0x96>
 8003180:	2b23      	cmp	r3, #35	; 0x23
 8003182:	d00e      	beq.n	80031a2 <_vsnprintf+0x9a>
        if (_is_digit(*format)) {
 8003184:	0018      	movs	r0, r3
 8003186:	3830      	subs	r0, #48	; 0x30
 8003188:	2809      	cmp	r0, #9
 800318a:	d82d      	bhi.n	80031e8 <_vsnprintf+0xe0>
    unsigned int i = 0U;
 800318c:	2300      	movs	r3, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800318e:	240a      	movs	r4, #10
    unsigned int i = 0U;
 8003190:	930b      	str	r3, [sp, #44]	; 0x2c
 8003192:	e00e      	b.n	80031b2 <_vsnprintf+0xaa>
                flags |= FLAGS_LEFT;
 8003194:	2302      	movs	r3, #2
                flags |= FLAGS_PLUS;
 8003196:	431a      	orrs	r2, r3
        } while (n);
 8003198:	e7e8      	b.n	800316c <_vsnprintf+0x64>
                flags |= FLAGS_PLUS;
 800319a:	2304      	movs	r3, #4
 800319c:	e7fb      	b.n	8003196 <_vsnprintf+0x8e>
                flags |= FLAGS_SPACE;
 800319e:	4322      	orrs	r2, r4
        } while (n);
 80031a0:	e7e4      	b.n	800316c <_vsnprintf+0x64>
                flags |= FLAGS_HASH;
 80031a2:	2310      	movs	r3, #16
 80031a4:	e7f7      	b.n	8003196 <_vsnprintf+0x8e>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80031a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80031aa:	4363      	muls	r3, r4
 80031ac:	3b30      	subs	r3, #48	; 0x30
 80031ae:	18cb      	adds	r3, r1, r3
 80031b0:	930b      	str	r3, [sp, #44]	; 0x2c
    while (_is_digit(**str)) {
 80031b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031b4:	7819      	ldrb	r1, [r3, #0]
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
 80031b6:	1c58      	adds	r0, r3, #1
    while (_is_digit(**str)) {
 80031b8:	000b      	movs	r3, r1
 80031ba:	3b30      	subs	r3, #48	; 0x30
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d9f2      	bls.n	80031a6 <_vsnprintf+0x9e>
        if (*format == '.') {
 80031c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b2e      	cmp	r3, #46	; 0x2e
 80031c6:	d157      	bne.n	8003278 <_vsnprintf+0x170>
 80031c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031ca:	1c59      	adds	r1, r3, #1
            flags |= FLAGS_PRECISION;
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	431a      	orrs	r2, r3
            if (_is_digit(*format)) {
 80031d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	0018      	movs	r0, r3
 80031d8:	3830      	subs	r0, #48	; 0x30
 80031da:	2809      	cmp	r0, #9
 80031dc:	d83e      	bhi.n	800325c <_vsnprintf+0x154>
    unsigned int i = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	930c      	str	r3, [sp, #48]	; 0x30
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80031e2:	330a      	adds	r3, #10
 80031e4:	469c      	mov	ip, r3
 80031e6:	e015      	b.n	8003214 <_vsnprintf+0x10c>
        width = 0U;
 80031e8:	2000      	movs	r0, #0
 80031ea:	900b      	str	r0, [sp, #44]	; 0x2c
        } else if (*format == '*') {
 80031ec:	2b2a      	cmp	r3, #42	; 0x2a
 80031ee:	d1e7      	bne.n	80031c0 <_vsnprintf+0xb8>
            const int w = va_arg(va, int);
 80031f0:	cf08      	ldmia	r7!, {r3}
 80031f2:	930b      	str	r3, [sp, #44]	; 0x2c
            if (w < 0) {
 80031f4:	4283      	cmp	r3, r0
 80031f6:	da04      	bge.n	8003202 <_vsnprintf+0xfa>
                flags |= FLAGS_LEFT; // reverse padding
 80031f8:	2302      	movs	r3, #2
 80031fa:	431a      	orrs	r2, r3
                width = (unsigned int)-w;
 80031fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031fe:	425b      	negs	r3, r3
 8003200:	930b      	str	r3, [sp, #44]	; 0x2c
            const int w = va_arg(va, int);
 8003202:	910f      	str	r1, [sp, #60]	; 0x3c
 8003204:	e7dc      	b.n	80031c0 <_vsnprintf+0xb8>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003206:	4660      	mov	r0, ip
 8003208:	990c      	ldr	r1, [sp, #48]	; 0x30
 800320a:	4341      	muls	r1, r0
 800320c:	3930      	subs	r1, #48	; 0x30
 800320e:	185b      	adds	r3, r3, r1
 8003210:	0021      	movs	r1, r4
 8003212:	930c      	str	r3, [sp, #48]	; 0x30
    while (_is_digit(**str)) {
 8003214:	780b      	ldrb	r3, [r1, #0]
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
 8003216:	1c4c      	adds	r4, r1, #1
    while (_is_digit(**str)) {
 8003218:	0018      	movs	r0, r3
 800321a:	3830      	subs	r0, #48	; 0x30
 800321c:	2809      	cmp	r0, #9
 800321e:	d9f2      	bls.n	8003206 <_vsnprintf+0xfe>
        switch (*format) {
 8003220:	7808      	ldrb	r0, [r1, #0]
 8003222:	1c4b      	adds	r3, r1, #1
 8003224:	286c      	cmp	r0, #108	; 0x6c
 8003226:	d032      	beq.n	800328e <_vsnprintf+0x186>
 8003228:	d82a      	bhi.n	8003280 <_vsnprintf+0x178>
 800322a:	2868      	cmp	r0, #104	; 0x68
 800322c:	d037      	beq.n	800329e <_vsnprintf+0x196>
 800322e:	286a      	cmp	r0, #106	; 0x6a
 8003230:	d03d      	beq.n	80032ae <_vsnprintf+0x1a6>
 8003232:	000b      	movs	r3, r1
        switch (*format) {
 8003234:	781c      	ldrb	r4, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	930f      	str	r3, [sp, #60]	; 0x3c
 800323a:	2c78      	cmp	r4, #120	; 0x78
 800323c:	d804      	bhi.n	8003248 <_vsnprintf+0x140>
 800323e:	2c57      	cmp	r4, #87	; 0x57
 8003240:	d838      	bhi.n	80032b4 <_vsnprintf+0x1ac>
 8003242:	2c45      	cmp	r4, #69	; 0x45
 8003244:	d062      	beq.n	800330c <_vsnprintf+0x204>
 8003246:	d85c      	bhi.n	8003302 <_vsnprintf+0x1fa>
            out(*format, buffer, idx++, maxlen);
 8003248:	1c73      	adds	r3, r6, #1
 800324a:	0032      	movs	r2, r6
 800324c:	0020      	movs	r0, r4
 800324e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003250:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003252:	002b      	movs	r3, r5
 8003254:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003256:	47a0      	blx	r4
 8003258:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
            break;
 800325a:	e76e      	b.n	800313a <_vsnprintf+0x32>
        precision = 0U;
 800325c:	2000      	movs	r0, #0
 800325e:	900c      	str	r0, [sp, #48]	; 0x30
            } else if (*format == '*') {
 8003260:	2b2a      	cmp	r3, #42	; 0x2a
 8003262:	d1dd      	bne.n	8003220 <_vsnprintf+0x118>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8003264:	cf08      	ldmia	r7!, {r3}
 8003266:	930c      	str	r3, [sp, #48]	; 0x30
 8003268:	43db      	mvns	r3, r3
 800326a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800326c:	17db      	asrs	r3, r3, #31
 800326e:	4019      	ands	r1, r3
 8003270:	910c      	str	r1, [sp, #48]	; 0x30
                format++;
 8003272:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003274:	3102      	adds	r1, #2
 8003276:	e7d3      	b.n	8003220 <_vsnprintf+0x118>
        precision = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800327c:	930c      	str	r3, [sp, #48]	; 0x30
 800327e:	e7cf      	b.n	8003220 <_vsnprintf+0x118>
        switch (*format) {
 8003280:	2874      	cmp	r0, #116	; 0x74
 8003282:	d001      	beq.n	8003288 <_vsnprintf+0x180>
 8003284:	287a      	cmp	r0, #122	; 0x7a
 8003286:	d1d4      	bne.n	8003232 <_vsnprintf+0x12a>
            flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0049      	lsls	r1, r1, #1
 800328c:	e00b      	b.n	80032a6 <_vsnprintf+0x19e>
            if (*format == 'l') {
 800328e:	7848      	ldrb	r0, [r1, #1]
 8003290:	286c      	cmp	r0, #108	; 0x6c
 8003292:	d1f9      	bne.n	8003288 <_vsnprintf+0x180>
                flags |= FLAGS_LONG_LONG;
 8003294:	23c0      	movs	r3, #192	; 0xc0
 8003296:	009b      	lsls	r3, r3, #2
                flags |= FLAGS_CHAR;
 8003298:	431a      	orrs	r2, r3
                format++;
 800329a:	1c8b      	adds	r3, r1, #2
 800329c:	e7ca      	b.n	8003234 <_vsnprintf+0x12c>
            if (*format == 'h') {
 800329e:	7848      	ldrb	r0, [r1, #1]
 80032a0:	2868      	cmp	r0, #104	; 0x68
 80032a2:	d002      	beq.n	80032aa <_vsnprintf+0x1a2>
            flags |= FLAGS_SHORT;
 80032a4:	2180      	movs	r1, #128	; 0x80
            flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032a6:	430a      	orrs	r2, r1
            break;
 80032a8:	e7c4      	b.n	8003234 <_vsnprintf+0x12c>
                flags |= FLAGS_CHAR;
 80032aa:	23c0      	movs	r3, #192	; 0xc0
 80032ac:	e7f4      	b.n	8003298 <_vsnprintf+0x190>
            flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0089      	lsls	r1, r1, #2
 80032b2:	e7f8      	b.n	80032a6 <_vsnprintf+0x19e>
 80032b4:	0020      	movs	r0, r4
 80032b6:	3858      	subs	r0, #88	; 0x58
 80032b8:	2820      	cmp	r0, #32
 80032ba:	d8c5      	bhi.n	8003248 <_vsnprintf+0x140>
 80032bc:	f7fc ff2e 	bl	800011c <__gnu_thumb1_case_shi>
 80032c0:	ffc40048 	.word	0xffc40048
 80032c4:	ffc4ffc4 	.word	0xffc4ffc4
 80032c8:	ffc4ffc4 	.word	0xffc4ffc4
 80032cc:	ffc4ffc4 	.word	0xffc4ffc4
 80032d0:	ffc4ffc4 	.word	0xffc4ffc4
 80032d4:	00f80048 	.word	0x00f80048
 80032d8:	00260048 	.word	0x00260048
 80032dc:	002600e5 	.word	0x002600e5
 80032e0:	0048ffc4 	.word	0x0048ffc4
 80032e4:	ffc4ffc4 	.word	0xffc4ffc4
 80032e8:	ffc4ffc4 	.word	0xffc4ffc4
 80032ec:	0048ffc4 	.word	0x0048ffc4
 80032f0:	ffc401b3 	.word	0xffc401b3
 80032f4:	0140ffc4 	.word	0x0140ffc4
 80032f8:	0048ffc4 	.word	0x0048ffc4
 80032fc:	ffc4ffc4 	.word	0xffc4ffc4
 8003300:	0048      	.short	0x0048
        switch (*format) {
 8003302:	2c46      	cmp	r4, #70	; 0x46
 8003304:	d100      	bne.n	8003308 <_vsnprintf+0x200>
 8003306:	e0be      	b.n	8003486 <_vsnprintf+0x37e>
 8003308:	2c47      	cmp	r4, #71	; 0x47
 800330a:	d19d      	bne.n	8003248 <_vsnprintf+0x140>
            if ((*format == 'g') || (*format == 'G'))
 800330c:	2320      	movs	r3, #32
 800330e:	0021      	movs	r1, r4
 8003310:	4399      	bics	r1, r3
 8003312:	2947      	cmp	r1, #71	; 0x47
 8003314:	d104      	bne.n	8003320 <_vsnprintf+0x218>
                flags |= FLAGS_ADAPT_EXP;
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	431a      	orrs	r2, r3
            if ((*format == 'E') || (*format == 'G'))
 800331c:	2302      	movs	r3, #2
 800331e:	439c      	bics	r4, r3
 8003320:	2c45      	cmp	r4, #69	; 0x45
 8003322:	d101      	bne.n	8003328 <_vsnprintf+0x220>
                flags |= FLAGS_UPPERCASE;
 8003324:	2320      	movs	r3, #32
 8003326:	431a      	orrs	r2, r3
            idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003328:	2307      	movs	r3, #7
 800332a:	3707      	adds	r7, #7
 800332c:	439f      	bics	r7, r3
 800332e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003330:	9204      	str	r2, [sp, #16]
 8003332:	9303      	str	r3, [sp, #12]
 8003334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003336:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003338:	9302      	str	r3, [sp, #8]
 800333a:	cf0c      	ldmia	r7!, {r2, r3}
 800333c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800333e:	9200      	str	r2, [sp, #0]
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	002b      	movs	r3, r5
 8003344:	0032      	movs	r2, r6
 8003346:	f7ff fcef 	bl	8002d28 <_etoa>
 800334a:	e0af      	b.n	80034ac <_vsnprintf+0x3a4>
 800334c:	08002731 	.word	0x08002731
            if (*format == 'x' || *format == 'X') {
 8003350:	2c78      	cmp	r4, #120	; 0x78
 8003352:	d047      	beq.n	80033e4 <_vsnprintf+0x2dc>
 8003354:	2c58      	cmp	r4, #88	; 0x58
 8003356:	d100      	bne.n	800335a <_vsnprintf+0x252>
 8003358:	e179      	b.n	800364e <_vsnprintf+0x546>
            } else if (*format == 'o') {
 800335a:	2c6f      	cmp	r4, #111	; 0x6f
 800335c:	d100      	bne.n	8003360 <_vsnprintf+0x258>
 800335e:	e17a      	b.n	8003656 <_vsnprintf+0x54e>
            } else if (*format == 'b') {
 8003360:	2c62      	cmp	r4, #98	; 0x62
 8003362:	d100      	bne.n	8003366 <_vsnprintf+0x25e>
 8003364:	e179      	b.n	800365a <_vsnprintf+0x552>
                flags &= ~FLAGS_HASH; // no hash for dec format
 8003366:	2310      	movs	r3, #16
 8003368:	439a      	bics	r2, r3
                base = 10U;
 800336a:	3b06      	subs	r3, #6
            if ((*format != 'i') && (*format != 'd')) {
 800336c:	2c69      	cmp	r4, #105	; 0x69
 800336e:	d003      	beq.n	8003378 <_vsnprintf+0x270>
 8003370:	2c64      	cmp	r4, #100	; 0x64
 8003372:	d001      	beq.n	8003378 <_vsnprintf+0x270>
                flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003374:	210c      	movs	r1, #12
 8003376:	438a      	bics	r2, r1
            if (flags & FLAGS_PRECISION) {
 8003378:	0551      	lsls	r1, r2, #21
 800337a:	d501      	bpl.n	8003380 <_vsnprintf+0x278>
                flags &= ~FLAGS_ZEROPAD;
 800337c:	2101      	movs	r1, #1
 800337e:	438a      	bics	r2, r1
            if ((*format == 'i') || (*format == 'd')) {
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	0089      	lsls	r1, r1, #2
 8003384:	4011      	ands	r1, r2
 8003386:	2c69      	cmp	r4, #105	; 0x69
 8003388:	d001      	beq.n	800338e <_vsnprintf+0x286>
 800338a:	2c64      	cmp	r4, #100	; 0x64
 800338c:	d146      	bne.n	800341c <_vsnprintf+0x314>
                if (flags & FLAGS_LONG_LONG) {
 800338e:	2900      	cmp	r1, #0
 8003390:	d02a      	beq.n	80033e8 <_vsnprintf+0x2e0>
                    const long long value = va_arg(va, long long);
 8003392:	2107      	movs	r1, #7
 8003394:	3707      	adds	r7, #7
 8003396:	438f      	bics	r7, r1
 8003398:	003c      	movs	r4, r7
 800339a:	cf03      	ldmia	r7!, {r0, r1}
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 800339c:	9304      	str	r3, [sp, #16]
 800339e:	2300      	movs	r3, #0
 80033a0:	9305      	str	r3, [sp, #20]
 80033a2:	0fcb      	lsrs	r3, r1, #31
 80033a4:	9302      	str	r3, [sp, #8]
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 80033a6:	17cb      	asrs	r3, r1, #31
 80033a8:	9311      	str	r3, [sp, #68]	; 0x44
 80033aa:	9310      	str	r3, [sp, #64]	; 0x40
 80033ac:	4043      	eors	r3, r0
 80033ae:	9314      	str	r3, [sp, #80]	; 0x50
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 80033b0:	9208      	str	r2, [sp, #32]
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 80033b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 80033b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 80033b6:	404b      	eors	r3, r1
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 80033b8:	9207      	str	r2, [sp, #28]
 80033ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 80033bc:	9315      	str	r3, [sp, #84]	; 0x54
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 80033be:	9206      	str	r2, [sp, #24]
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 80033c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80033c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80033c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80033c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80033c8:	1a12      	subs	r2, r2, r0
 80033ca:	418b      	sbcs	r3, r1
                    const long long value = va_arg(va, long long);
 80033cc:	3408      	adds	r4, #8
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80033d4:	002b      	movs	r3, r5
 80033d6:	0032      	movs	r2, r6
 80033d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80033da:	f7ff faba 	bl	8002952 <_ntoa_long_long>
                    idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80033de:	0006      	movs	r6, r0
            break;
 80033e0:	0027      	movs	r7, r4
 80033e2:	e6aa      	b.n	800313a <_vsnprintf+0x32>
                base = 16U;
 80033e4:	2310      	movs	r3, #16
 80033e6:	e7c5      	b.n	8003374 <_vsnprintf+0x26c>
                } else if (flags & FLAGS_LONG) {
 80033e8:	1d3c      	adds	r4, r7, #4
 80033ea:	05d1      	lsls	r1, r2, #23
 80033ec:	d50d      	bpl.n	800340a <_vsnprintf+0x302>
                    const long value = va_arg(va, long);
 80033ee:	6839      	ldr	r1, [r7, #0]
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value),
 80033f0:	9205      	str	r2, [sp, #20]
 80033f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033f4:	9302      	str	r3, [sp, #8]
 80033f6:	0fcb      	lsrs	r3, r1, #31
 80033f8:	9204      	str	r2, [sp, #16]
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033fe:	17cb      	asrs	r3, r1, #31
 8003400:	18c9      	adds	r1, r1, r3
 8003402:	9203      	str	r2, [sp, #12]
 8003404:	4059      	eors	r1, r3
                    idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003406:	9100      	str	r1, [sp, #0]
 8003408:	e025      	b.n	8003456 <_vsnprintf+0x34e>
                    const int value = (flags & FLAGS_CHAR)
 800340a:	6839      	ldr	r1, [r7, #0]
                                          : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800340c:	0650      	lsls	r0, r2, #25
 800340e:	d501      	bpl.n	8003414 <_vsnprintf+0x30c>
 8003410:	b2c9      	uxtb	r1, r1
 8003412:	e7ed      	b.n	80033f0 <_vsnprintf+0x2e8>
 8003414:	0610      	lsls	r0, r2, #24
 8003416:	d5eb      	bpl.n	80033f0 <_vsnprintf+0x2e8>
 8003418:	b209      	sxth	r1, r1
 800341a:	e7e9      	b.n	80033f0 <_vsnprintf+0x2e8>
                if (flags & FLAGS_LONG_LONG) {
 800341c:	2900      	cmp	r1, #0
 800341e:	d00e      	beq.n	800343e <_vsnprintf+0x336>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
 8003420:	3707      	adds	r7, #7
 8003422:	9304      	str	r3, [sp, #16]
 8003424:	2107      	movs	r1, #7
 8003426:	2300      	movs	r3, #0
 8003428:	003c      	movs	r4, r7
 800342a:	9208      	str	r2, [sp, #32]
 800342c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800342e:	438c      	bics	r4, r1
 8003430:	9207      	str	r2, [sp, #28]
 8003432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003434:	9305      	str	r3, [sp, #20]
 8003436:	9206      	str	r2, [sp, #24]
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	cc0c      	ldmia	r4!, {r2, r3}
 800343c:	e7c7      	b.n	80033ce <_vsnprintf+0x2c6>
                } else if (flags & FLAGS_LONG) {
 800343e:	1d3c      	adds	r4, r7, #4
 8003440:	05d0      	lsls	r0, r2, #23
 8003442:	d50f      	bpl.n	8003464 <_vsnprintf+0x35c>
                    idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
 8003444:	9205      	str	r2, [sp, #20]
 8003446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003448:	9302      	str	r3, [sp, #8]
 800344a:	9204      	str	r2, [sp, #16]
 800344c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800344e:	9101      	str	r1, [sp, #4]
 8003450:	9203      	str	r2, [sp, #12]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
                    idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003456:	002b      	movs	r3, r5
 8003458:	0032      	movs	r2, r6
 800345a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800345c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800345e:	f7ff fa2e 	bl	80028be <_ntoa_long>
 8003462:	e7bc      	b.n	80033de <_vsnprintf+0x2d6>
                    const unsigned int value =
 8003464:	6839      	ldr	r1, [r7, #0]
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8003466:	0650      	lsls	r0, r2, #25
 8003468:	d509      	bpl.n	800347e <_vsnprintf+0x376>
 800346a:	b2c9      	uxtb	r1, r1
                    idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800346c:	9302      	str	r3, [sp, #8]
 800346e:	2300      	movs	r3, #0
 8003470:	9205      	str	r2, [sp, #20]
 8003472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	9204      	str	r2, [sp, #16]
 8003478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	e7c3      	b.n	8003406 <_vsnprintf+0x2fe>
                                                                     : va_arg(va, unsigned int);
 800347e:	0610      	lsls	r0, r2, #24
 8003480:	d5f4      	bpl.n	800346c <_vsnprintf+0x364>
 8003482:	b289      	uxth	r1, r1
 8003484:	e7f2      	b.n	800346c <_vsnprintf+0x364>
                flags |= FLAGS_UPPERCASE;
 8003486:	2320      	movs	r3, #32
 8003488:	431a      	orrs	r2, r3
            idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800348a:	2307      	movs	r3, #7
 800348c:	3707      	adds	r7, #7
 800348e:	439f      	bics	r7, r3
 8003490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003492:	9204      	str	r2, [sp, #16]
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003498:	990e      	ldr	r1, [sp, #56]	; 0x38
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	cf0c      	ldmia	r7!, {r2, r3}
 800349e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034a0:	9200      	str	r2, [sp, #0]
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	002b      	movs	r3, r5
 80034a6:	0032      	movs	r2, r6
 80034a8:	f7ff fab2 	bl	8002a10 <_ftoa>
                idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false,
 80034ac:	0006      	movs	r6, r0
            break;
 80034ae:	e644      	b.n	800313a <_vsnprintf+0x32>
            if (!(flags & FLAGS_LEFT)) {
 80034b0:	2302      	movs	r3, #2
 80034b2:	4013      	ands	r3, r2
 80034b4:	9312      	str	r3, [sp, #72]	; 0x48
 80034b6:	2302      	movs	r3, #2
            unsigned int l = 1U;
 80034b8:	2401      	movs	r4, #1
            if (!(flags & FLAGS_LEFT)) {
 80034ba:	421a      	tst	r2, r3
 80034bc:	d118      	bne.n	80034f0 <_vsnprintf+0x3e8>
 80034be:	0032      	movs	r2, r6
 80034c0:	e005      	b.n	80034ce <_vsnprintf+0x3c6>
                    out(' ', buffer, idx++, maxlen);
 80034c2:	002b      	movs	r3, r5
 80034c4:	2020      	movs	r0, #32
 80034c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80034ca:	47a0      	blx	r4
 80034cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                while (l++ < width) {
 80034ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034d0:	1c53      	adds	r3, r2, #1
 80034d2:	930c      	str	r3, [sp, #48]	; 0x30
 80034d4:	1b9b      	subs	r3, r3, r6
 80034d6:	428b      	cmp	r3, r1
 80034d8:	d3f3      	bcc.n	80034c2 <_vsnprintf+0x3ba>
 80034da:	2300      	movs	r3, #0
 80034dc:	4299      	cmp	r1, r3
 80034de:	d001      	beq.n	80034e4 <_vsnprintf+0x3dc>
 80034e0:	000b      	movs	r3, r1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	18f6      	adds	r6, r6, r3
 80034e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034e8:	2402      	movs	r4, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d000      	beq.n	80034f0 <_vsnprintf+0x3e8>
 80034ee:	1c5c      	adds	r4, r3, #1
            out((char)va_arg(va, int), buffer, idx++, maxlen);
 80034f0:	cf01      	ldmia	r7!, {r0}
 80034f2:	1c73      	adds	r3, r6, #1
 80034f4:	0032      	movs	r2, r6
 80034f6:	930c      	str	r3, [sp, #48]	; 0x30
 80034f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034fa:	002b      	movs	r3, r5
 80034fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80034fe:	b2c0      	uxtb	r0, r0
 8003500:	47b0      	blx	r6
            if (flags & FLAGS_LEFT) {
 8003502:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003504:	2b00      	cmp	r3, #0
 8003506:	d019      	beq.n	800353c <_vsnprintf+0x434>
            out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800350a:	9412      	str	r4, [sp, #72]	; 0x48
 800350c:	e00a      	b.n	8003524 <_vsnprintf+0x41c>
                    out(' ', buffer, idx++, maxlen);
 800350e:	1c53      	adds	r3, r2, #1
 8003510:	9313      	str	r3, [sp, #76]	; 0x4c
 8003512:	2020      	movs	r0, #32
 8003514:	002b      	movs	r3, r5
 8003516:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003518:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800351a:	47b0      	blx	r6
 800351c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800351e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003520:	3301      	adds	r3, #1
 8003522:	9312      	str	r3, [sp, #72]	; 0x48
                while (l++ < width) {
 8003524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003526:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003528:	4299      	cmp	r1, r3
 800352a:	d3f0      	bcc.n	800350e <_vsnprintf+0x406>
 800352c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800352e:	2300      	movs	r3, #0
 8003530:	42a2      	cmp	r2, r4
 8003532:	d300      	bcc.n	8003536 <_vsnprintf+0x42e>
 8003534:	1b13      	subs	r3, r2, r4
 8003536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003538:	18d3      	adds	r3, r2, r3
 800353a:	930c      	str	r3, [sp, #48]	; 0x30
            break;
 800353c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800353e:	e5fc      	b.n	800313a <_vsnprintf+0x32>
            const char *p = va_arg(va, char *);
 8003540:	0039      	movs	r1, r7
 8003542:	c908      	ldmia	r1!, {r3}
 8003544:	9313      	str	r3, [sp, #76]	; 0x4c
            unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const char *p = va_arg(va, char *);
 8003548:	9116      	str	r1, [sp, #88]	; 0x58
            unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <_vsnprintf+0x44a>
 800354e:	2301      	movs	r3, #1
 8003550:	425b      	negs	r3, r3
 8003552:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003554:	000c      	movs	r4, r1
 8003556:	18cb      	adds	r3, r1, r3
    for (s = str; *s && maxsize--; ++s)
 8003558:	7821      	ldrb	r1, [r4, #0]
 800355a:	2900      	cmp	r1, #0
 800355c:	d001      	beq.n	8003562 <_vsnprintf+0x45a>
 800355e:	429c      	cmp	r4, r3
 8003560:	d114      	bne.n	800358c <_vsnprintf+0x484>
    return (unsigned int)(s - str);
 8003562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            if (flags & FLAGS_PRECISION) {
 8003564:	0011      	movs	r1, r2
    return (unsigned int)(s - str);
 8003566:	1ae4      	subs	r4, r4, r3
            if (flags & FLAGS_PRECISION) {
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4019      	ands	r1, r3
 800356e:	9117      	str	r1, [sp, #92]	; 0x5c
 8003570:	421a      	tst	r2, r3
 8003572:	d003      	beq.n	800357c <_vsnprintf+0x474>
                l = (l < precision ? l : precision);
 8003574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003576:	429c      	cmp	r4, r3
 8003578:	d900      	bls.n	800357c <_vsnprintf+0x474>
 800357a:	001c      	movs	r4, r3
            if (!(flags & FLAGS_LEFT)) {
 800357c:	2302      	movs	r3, #2
 800357e:	4013      	ands	r3, r2
 8003580:	9318      	str	r3, [sp, #96]	; 0x60
 8003582:	2302      	movs	r3, #2
 8003584:	421a      	tst	r2, r3
 8003586:	d117      	bne.n	80035b8 <_vsnprintf+0x4b0>
 8003588:	0032      	movs	r2, r6
 800358a:	e009      	b.n	80035a0 <_vsnprintf+0x498>
    for (s = str; *s && maxsize--; ++s)
 800358c:	3401      	adds	r4, #1
 800358e:	e7e3      	b.n	8003558 <_vsnprintf+0x450>
                    out(' ', buffer, idx++, maxlen);
 8003590:	1c53      	adds	r3, r2, #1
 8003592:	9312      	str	r3, [sp, #72]	; 0x48
 8003594:	2020      	movs	r0, #32
 8003596:	002b      	movs	r3, r5
 8003598:	990e      	ldr	r1, [sp, #56]	; 0x38
 800359a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800359c:	47b8      	blx	r7
 800359e:	9a12      	ldr	r2, [sp, #72]	; 0x48
                while (l++ < width) {
 80035a0:	1ba3      	subs	r3, r4, r6
 80035a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035a4:	189b      	adds	r3, r3, r2
 80035a6:	4299      	cmp	r1, r3
 80035a8:	d8f2      	bhi.n	8003590 <_vsnprintf+0x488>
 80035aa:	2300      	movs	r3, #0
 80035ac:	42a1      	cmp	r1, r4
 80035ae:	d300      	bcc.n	80035b2 <_vsnprintf+0x4aa>
 80035b0:	1b0b      	subs	r3, r1, r4
 80035b2:	3401      	adds	r4, #1
 80035b4:	18f6      	adds	r6, r6, r3
 80035b6:	191c      	adds	r4, r3, r4
 80035b8:	9612      	str	r6, [sp, #72]	; 0x48
 80035ba:	e00a      	b.n	80035d2 <_vsnprintf+0x4ca>
 80035bc:	930c      	str	r3, [sp, #48]	; 0x30
                out(*(p++), buffer, idx++, maxlen);
 80035be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035c2:	3301      	adds	r3, #1
 80035c4:	9319      	str	r3, [sp, #100]	; 0x64
 80035c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035c8:	002b      	movs	r3, r5
 80035ca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80035cc:	47b8      	blx	r7
 80035ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035d0:	9312      	str	r3, [sp, #72]	; 0x48
            while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80035d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035d6:	1b9b      	subs	r3, r3, r6
 80035d8:	5c98      	ldrb	r0, [r3, r2]
 80035da:	2800      	cmp	r0, #0
 80035dc:	d007      	beq.n	80035ee <_vsnprintf+0x4e6>
 80035de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ec      	beq.n	80035be <_vsnprintf+0x4b6>
 80035e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035e8:	3b01      	subs	r3, #1
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	d1e6      	bne.n	80035bc <_vsnprintf+0x4b4>
            if (flags & FLAGS_LEFT) {
 80035ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d015      	beq.n	8003620 <_vsnprintf+0x518>
 80035f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035f6:	e006      	b.n	8003606 <_vsnprintf+0x4fe>
                    out(' ', buffer, idx++, maxlen);
 80035f8:	1c56      	adds	r6, r2, #1
 80035fa:	002b      	movs	r3, r5
 80035fc:	2020      	movs	r0, #32
 80035fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003600:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003602:	47b8      	blx	r7
 8003604:	0032      	movs	r2, r6
                while (l++ < width) {
 8003606:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800360a:	1ae3      	subs	r3, r4, r3
 800360c:	189b      	adds	r3, r3, r2
 800360e:	4299      	cmp	r1, r3
 8003610:	d8f2      	bhi.n	80035f8 <_vsnprintf+0x4f0>
 8003612:	2300      	movs	r3, #0
 8003614:	42a1      	cmp	r1, r4
 8003616:	d300      	bcc.n	800361a <_vsnprintf+0x512>
 8003618:	1b0b      	subs	r3, r1, r4
 800361a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800361c:	18d3      	adds	r3, r2, r3
 800361e:	9312      	str	r3, [sp, #72]	; 0x48
            const char *p = va_arg(va, char *);
 8003620:	9f16      	ldr	r7, [sp, #88]	; 0x58
            break;
 8003622:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003624:	e589      	b.n	800313a <_vsnprintf+0x32>
            flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003626:	2321      	movs	r3, #33	; 0x21
 8003628:	431a      	orrs	r2, r3
                idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false,
 800362a:	3b19      	subs	r3, #25
 800362c:	9304      	str	r3, [sp, #16]
 800362e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003630:	9205      	str	r2, [sp, #20]
 8003632:	9303      	str	r3, [sp, #12]
 8003634:	2310      	movs	r3, #16
 8003636:	9302      	str	r3, [sp, #8]
 8003638:	2300      	movs	r3, #0
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	cf08      	ldmia	r7!, {r3}
 800363e:	0032      	movs	r2, r6
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003644:	002b      	movs	r3, r5
 8003646:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003648:	f7ff f939 	bl	80028be <_ntoa_long>
 800364c:	e72e      	b.n	80034ac <_vsnprintf+0x3a4>
                flags |= FLAGS_UPPERCASE;
 800364e:	2320      	movs	r3, #32
 8003650:	431a      	orrs	r2, r3
                base = 16U;
 8003652:	3b10      	subs	r3, #16
 8003654:	e68e      	b.n	8003374 <_vsnprintf+0x26c>
                base = 8U;
 8003656:	2308      	movs	r3, #8
 8003658:	e68c      	b.n	8003374 <_vsnprintf+0x26c>
                base = 2U;
 800365a:	2302      	movs	r3, #2
            if ((*format != 'i') && (*format != 'd')) {
 800365c:	e68a      	b.n	8003374 <_vsnprintf+0x26c>
 800365e:	46c0      	nop			; (mov r8, r8)

08003660 <__putchar>:
void __putchar(char character) {
 8003660:	b510      	push	{r4, lr}
	outchar=character;
 8003662:	4904      	ldr	r1, [pc, #16]	; (8003674 <__putchar+0x14>)
	HAL_UART_Transmit(&huart1, &outchar, 1, 0xFFFF);
 8003664:	2201      	movs	r2, #1
	outchar=character;
 8003666:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&huart1, &outchar, 1, 0xFFFF);
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <__putchar+0x18>)
 800366a:	4804      	ldr	r0, [pc, #16]	; (800367c <__putchar+0x1c>)
 800366c:	f001 fc84 	bl	8004f78 <HAL_UART_Transmit>
}
 8003670:	bd10      	pop	{r4, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20000028 	.word	0x20000028
 8003678:	0000ffff 	.word	0x0000ffff
 800367c:	2000011c 	.word	0x2000011c

08003680 <_out_char>:
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
 8003680:	b510      	push	{r4, lr}
    if (character) {
 8003682:	2800      	cmp	r0, #0
 8003684:	d001      	beq.n	800368a <_out_char+0xa>
        __putchar(character);
 8003686:	f7ff ffeb 	bl	8003660 <__putchar>
}
 800368a:	bd10      	pop	{r4, pc}

0800368c <printf_>:

///////////////////////////////////////////////////////////////////////////////

int printf_(const char *format, ...) {
 800368c:	b40f      	push	{r0, r1, r2, r3}
 800368e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    va_list va;
    va_start(va, format);
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003690:	2201      	movs	r2, #1
int printf_(const char *format, ...) {
 8003692:	a906      	add	r1, sp, #24
 8003694:	c908      	ldmia	r1!, {r3}
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003696:	4252      	negs	r2, r2
    va_start(va, format);
 8003698:	9103      	str	r1, [sp, #12]
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800369a:	9100      	str	r1, [sp, #0]
 800369c:	4803      	ldr	r0, [pc, #12]	; (80036ac <printf_+0x20>)
 800369e:	a902      	add	r1, sp, #8
 80036a0:	f7ff fd32 	bl	8003108 <_vsnprintf>
    va_end(va);
    return ret;
}
 80036a4:	b005      	add	sp, #20
 80036a6:	bc08      	pop	{r3}
 80036a8:	b004      	add	sp, #16
 80036aa:	4718      	bx	r3
 80036ac:	08003681 	.word	0x08003681

080036b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b0:	2201      	movs	r2, #1
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_MspInit+0x18>)
 80036b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036b6:	430a      	orrs	r2, r1
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036be:	0552      	lsls	r2, r2, #21
 80036c0:	430a      	orrs	r2, r1
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036c4:	4770      	bx	lr
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	0004      	movs	r4, r0
 80036d0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d2:	2214      	movs	r2, #20
 80036d4:	2100      	movs	r1, #0
 80036d6:	a803      	add	r0, sp, #12
 80036d8:	f001 fd4c 	bl	8005174 <memset>
  if(hi2c->Instance==I2C1)
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	4a26      	ldr	r2, [pc, #152]	; (8003778 <HAL_I2C_MspInit+0xac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d11e      	bne.n	8003722 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e4:	2102      	movs	r1, #2
 80036e6:	4c25      	ldr	r4, [pc, #148]	; (800377c <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e8:	4825      	ldr	r0, [pc, #148]	; (8003780 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036ec:	430a      	orrs	r2, r1
 80036ee:	62e2      	str	r2, [r4, #44]	; 0x2c
 80036f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036f2:	400b      	ands	r3, r1
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 80036f8:	23c0      	movs	r3, #192	; 0xc0
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036fe:	2312      	movs	r3, #18
 8003700:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003702:	3b11      	subs	r3, #17
 8003704:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	185b      	adds	r3, r3, r1
 8003708:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800370c:	3301      	adds	r3, #1
 800370e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003710:	f000 f9ae 	bl	8003a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003718:	039b      	lsls	r3, r3, #14
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800371a:	4313      	orrs	r3, r2
 800371c:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800371e:	b009      	add	sp, #36	; 0x24
 8003720:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C2)
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_I2C_MspInit+0xb8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d1fa      	bne.n	800371e <HAL_I2C_MspInit+0x52>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003728:	2102      	movs	r1, #2
 800372a:	4c14      	ldr	r4, [pc, #80]	; (800377c <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800372c:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003732:	430a      	orrs	r2, r1
 8003734:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	400b      	ands	r3, r1
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003746:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003748:	480d      	ldr	r0, [pc, #52]	; (8003780 <HAL_I2C_MspInit+0xb4>)
 800374a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800374c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800374e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003752:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	f000 f98c 	bl	8003a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	019b      	lsls	r3, r3, #6
 800375c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800375e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003760:	4807      	ldr	r0, [pc, #28]	; (8003780 <HAL_I2C_MspInit+0xb4>)
 8003762:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8003764:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003766:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376c:	f000 f980 	bl	8003a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003774:	03db      	lsls	r3, r3, #15
 8003776:	e7d0      	b.n	800371a <HAL_I2C_MspInit+0x4e>
 8003778:	40005400 	.word	0x40005400
 800377c:	40021000 	.word	0x40021000
 8003780:	50000400 	.word	0x50000400
 8003784:	40005800 	.word	0x40005800

08003788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	0004      	movs	r4, r0
 800378c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378e:	2214      	movs	r2, #20
 8003790:	2100      	movs	r1, #0
 8003792:	a803      	add	r0, sp, #12
 8003794:	f001 fcee 	bl	8005174 <memset>
  if(hspi->Instance==SPI1)
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	4a28      	ldr	r2, [pc, #160]	; (800383c <HAL_SPI_MspInit+0xb4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d125      	bne.n	80037ec <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037a0:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037a4:	4b26      	ldr	r3, [pc, #152]	; (8003840 <HAL_SPI_MspInit+0xb8>)
 80037a6:	0152      	lsls	r2, r2, #5
 80037a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037ac:	430a      	orrs	r2, r1
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b2:	4824      	ldr	r0, [pc, #144]	; (8003844 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b4:	432a      	orrs	r2, r5
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ba:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037bc:	402b      	ands	r3, r5
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 80037c2:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 80037c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80037cc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ce:	f000 f94f 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037d2:	2310      	movs	r3, #16
 80037d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d6:	3b0d      	subs	r3, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80037de:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|NFC_MISO_Pin|NFC_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e0:	4818      	ldr	r0, [pc, #96]	; (8003844 <HAL_SPI_MspInit+0xbc>)
 80037e2:	a903      	add	r1, sp, #12
 80037e4:	f000 f944 	bl	8003a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80037e8:	b008      	add	sp, #32
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
  else if(hspi->Instance==SPI2)
 80037ec:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_SPI_MspInit+0xc0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d1fa      	bne.n	80037e8 <HAL_SPI_MspInit+0x60>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037f2:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f4:	2402      	movs	r4, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_SPI_MspInit+0xb8>)
 80037f8:	01d2      	lsls	r2, r2, #7
 80037fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2500      	movs	r5, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037fe:	430a      	orrs	r2, r1
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2603      	movs	r6, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003806:	4322      	orrs	r2, r4
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(NFC_SCK_GPIO_Port, &GPIO_InitStruct);
 800380c:	480d      	ldr	r0, [pc, #52]	; (8003844 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	4023      	ands	r3, r4
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NFC_SCK_Pin;
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800381a:	2305      	movs	r3, #5
    HAL_GPIO_Init(NFC_SCK_GPIO_Port, &GPIO_InitStruct);
 800381c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800381e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003824:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(NFC_SCK_GPIO_Port, &GPIO_InitStruct);
 8003826:	f000 f923 	bl	8003a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|NFC_MISO_Pin|NFC_MOSI_Pin;
 800382a:	23d0      	movs	r3, #208	; 0xd0
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003834:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003836:	9507      	str	r5, [sp, #28]
 8003838:	e7d2      	b.n	80037e0 <HAL_SPI_MspInit+0x58>
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	40013000 	.word	0x40013000
 8003840:	40021000 	.word	0x40021000
 8003844:	50000400 	.word	0x50000400
 8003848:	40003800 	.word	0x40003800

0800384c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800384c:	b530      	push	{r4, r5, lr}
 800384e:	0004      	movs	r4, r0
 8003850:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003852:	2214      	movs	r2, #20
 8003854:	2100      	movs	r1, #0
 8003856:	a801      	add	r0, sp, #4
 8003858:	f001 fc8c 	bl	8005174 <memset>
  if(huart->Instance==USART1)
 800385c:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <HAL_UART_MspInit+0x74>)
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d12b      	bne.n	80038bc <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <HAL_UART_MspInit+0x78>)
 8003868:	01d2      	lsls	r2, r2, #7
 800386a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800386e:	430a      	orrs	r2, r1
 8003870:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003872:	2201      	movs	r2, #1
 8003874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003876:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003878:	4311      	orrs	r1, r2
 800387a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800387e:	2404      	movs	r4, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003880:	4013      	ands	r3, r2
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388c:	3bef      	subs	r3, #239	; 0xef
 800388e:	3bff      	subs	r3, #255	; 0xff
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003890:	a901      	add	r1, sp, #4
 8003892:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003894:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003896:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003898:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800389a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389c:	f000 f8e8 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ae:	a901      	add	r1, sp, #4
 80038b0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80038b6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	f000 f8da 	bl	8003a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80038bc:	b007      	add	sp, #28
 80038be:	bd30      	pop	{r4, r5, pc}
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40021000 	.word	0x40021000

080038c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <NMI_Handler>

080038ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ca:	e7fe      	b.n	80038ca <HardFault_Handler>

080038cc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038cc:	4770      	bx	lr

080038ce <PendSV_Handler>:
 80038ce:	4770      	bx	lr

080038d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d2:	f000 f865 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038d6:	bd10      	pop	{r4, pc}

080038d8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038d8:	4770      	bx	lr
	...

080038dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80038dc:	480d      	ldr	r0, [pc, #52]	; (8003914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038e0:	480d      	ldr	r0, [pc, #52]	; (8003918 <LoopForever+0x6>)
  ldr r1, =_edata
 80038e2:	490e      	ldr	r1, [pc, #56]	; (800391c <LoopForever+0xa>)
  ldr r2, =_sidata
 80038e4:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <LoopForever+0xe>)
  movs r3, #0
 80038e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e8:	e002      	b.n	80038f0 <LoopCopyDataInit>

080038ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ee:	3304      	adds	r3, #4

080038f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f4:	d3f9      	bcc.n	80038ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038f6:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038f8:	4c0b      	ldr	r4, [pc, #44]	; (8003928 <LoopForever+0x16>)
  movs r3, #0
 80038fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038fc:	e001      	b.n	8003902 <LoopFillZerobss>

080038fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003900:	3204      	adds	r2, #4

08003902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003904:	d3fb      	bcc.n	80038fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003906:	f7ff ffe7 	bl	80038d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800390a:	f001 fc0f 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800390e:	f7fe fdbb 	bl	8002488 <main>

08003912 <LoopForever>:

LoopForever:
    b LoopForever
 8003912:	e7fe      	b.n	8003912 <LoopForever>
  ldr   r0, =_estack
 8003914:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800391c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003920:	080053ac 	.word	0x080053ac
  ldr r2, =_sbss
 8003924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003928:	200001fc 	.word	0x200001fc

0800392c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800392c:	e7fe      	b.n	800392c <ADC1_COMP_IRQHandler>
	...

08003930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003934:	20fa      	movs	r0, #250	; 0xfa
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_InitTick+0x3c>)
 8003938:	0080      	lsls	r0, r0, #2
 800393a:	7819      	ldrb	r1, [r3, #0]
 800393c:	f7fc fbf8 	bl	8000130 <__udivsi3>
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_InitTick+0x40>)
 8003942:	0001      	movs	r1, r0
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	f7fc fbf3 	bl	8000130 <__udivsi3>
 800394a:	f000 f877 	bl	8003a3c <HAL_SYSTICK_Config>
 800394e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8003950:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003952:	2c00      	cmp	r4, #0
 8003954:	d109      	bne.n	800396a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003956:	2d03      	cmp	r5, #3
 8003958:	d807      	bhi.n	800396a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800395a:	3802      	subs	r0, #2
 800395c:	0022      	movs	r2, r4
 800395e:	0029      	movs	r1, r5
 8003960:	f000 f842 	bl	80039e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003964:	0020      	movs	r0, r4
 8003966:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_InitTick+0x44>)
 8003968:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	20000004 	.word	0x20000004
 8003970:	20000000 	.word	0x20000000
 8003974:	20000008 	.word	0x20000008

08003978 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003978:	2340      	movs	r3, #64	; 0x40
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_Init+0x24>)
{
 800397c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800397e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003980:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003982:	430b      	orrs	r3, r1
 8003984:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003986:	f7ff ffd3 	bl	8003930 <HAL_InitTick>
 800398a:	1e04      	subs	r4, r0, #0
 800398c:	d103      	bne.n	8003996 <HAL_Init+0x1e>
    HAL_MspInit();
 800398e:	f7ff fe8f 	bl	80036b0 <HAL_MspInit>
}
 8003992:	0020      	movs	r0, r4
 8003994:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003996:	2401      	movs	r4, #1
 8003998:	e7fb      	b.n	8003992 <HAL_Init+0x1a>
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	40022000 	.word	0x40022000

080039a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80039a0:	4a03      	ldr	r2, [pc, #12]	; (80039b0 <HAL_IncTick+0x10>)
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_IncTick+0x14>)
 80039a4:	6811      	ldr	r1, [r2, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	185b      	adds	r3, r3, r1
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	4770      	bx	lr
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	200001f8 	.word	0x200001f8
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80039b8:	4b01      	ldr	r3, [pc, #4]	; (80039c0 <HAL_GetTick+0x8>)
 80039ba:	6818      	ldr	r0, [r3, #0]
}
 80039bc:	4770      	bx	lr
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	200001f8 	.word	0x200001f8

080039c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f7ff fff6 	bl	80039b8 <HAL_GetTick>
 80039cc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ce:	1c63      	adds	r3, r4, #1
 80039d0:	d002      	beq.n	80039d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_Delay+0x20>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039d8:	f7ff ffee 	bl	80039b8 <HAL_GetTick>
 80039dc:	1b40      	subs	r0, r0, r5
 80039de:	42a0      	cmp	r0, r4
 80039e0:	d3fa      	bcc.n	80039d8 <HAL_Delay+0x14>
  {
  }
}
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	20000004 	.word	0x20000004

080039e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e8:	b530      	push	{r4, r5, lr}
 80039ea:	25ff      	movs	r5, #255	; 0xff
 80039ec:	2403      	movs	r4, #3
 80039ee:	002a      	movs	r2, r5
 80039f0:	4004      	ands	r4, r0
 80039f2:	00e4      	lsls	r4, r4, #3
 80039f4:	40a2      	lsls	r2, r4
 80039f6:	0189      	lsls	r1, r1, #6
 80039f8:	4029      	ands	r1, r5
 80039fa:	43d2      	mvns	r2, r2
 80039fc:	40a1      	lsls	r1, r4
 80039fe:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003a00:	2800      	cmp	r0, #0
 8003a02:	db0a      	blt.n	8003a1a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a04:	24c0      	movs	r4, #192	; 0xc0
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_NVIC_SetPriority+0x4c>)
 8003a08:	0880      	lsrs	r0, r0, #2
 8003a0a:	0080      	lsls	r0, r0, #2
 8003a0c:	18c0      	adds	r0, r0, r3
 8003a0e:	00a4      	lsls	r4, r4, #2
 8003a10:	5903      	ldr	r3, [r0, r4]
 8003a12:	401a      	ands	r2, r3
 8003a14:	4311      	orrs	r1, r2
 8003a16:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003a18:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a1a:	200f      	movs	r0, #15
 8003a1c:	4003      	ands	r3, r0
 8003a1e:	3b08      	subs	r3, #8
 8003a20:	4805      	ldr	r0, [pc, #20]	; (8003a38 <HAL_NVIC_SetPriority+0x50>)
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	181b      	adds	r3, r3, r0
 8003a28:	69d8      	ldr	r0, [r3, #28]
 8003a2a:	4002      	ands	r2, r0
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	61d9      	str	r1, [r3, #28]
 8003a30:	e7f2      	b.n	8003a18 <HAL_NVIC_SetPriority+0x30>
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	e000e100 	.word	0xe000e100
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	1e43      	subs	r3, r0, #1
 8003a40:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a42:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d20d      	bcs.n	8003a64 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a48:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a4a:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a4c:	4807      	ldr	r0, [pc, #28]	; (8003a6c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a4e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a50:	6a03      	ldr	r3, [r0, #32]
 8003a52:	0609      	lsls	r1, r1, #24
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a5c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a60:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a62:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003a64:	4770      	bx	lr
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	e000e010 	.word	0xe000e010
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003a70:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_GPIO_Init+0x15c>)
{
 8003a72:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003a74:	1882      	adds	r2, r0, r2
 8003a76:	1e54      	subs	r4, r2, #1
 8003a78:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003a7a:	2300      	movs	r3, #0
{
 8003a7c:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003a7e:	3205      	adds	r2, #5
 8003a80:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a82:	680a      	ldr	r2, [r1, #0]
 8003a84:	0014      	movs	r4, r2
 8003a86:	40dc      	lsrs	r4, r3
 8003a88:	d101      	bne.n	8003a8e <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003a8a:	b007      	add	sp, #28
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a8e:	2401      	movs	r4, #1
 8003a90:	0025      	movs	r5, r4
 8003a92:	46a4      	mov	ip, r4
 8003a94:	409d      	lsls	r5, r3
 8003a96:	0014      	movs	r4, r2
 8003a98:	402c      	ands	r4, r5
 8003a9a:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8003a9c:	422a      	tst	r2, r5
 8003a9e:	d100      	bne.n	8003aa2 <HAL_GPIO_Init+0x32>
 8003aa0:	e092      	b.n	8003bc8 <HAL_GPIO_Init+0x158>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003aa2:	2403      	movs	r4, #3
 8003aa4:	684a      	ldr	r2, [r1, #4]
 8003aa6:	005e      	lsls	r6, r3, #1
 8003aa8:	9201      	str	r2, [sp, #4]
 8003aaa:	4022      	ands	r2, r4
 8003aac:	40b4      	lsls	r4, r6
 8003aae:	43e4      	mvns	r4, r4
 8003ab0:	9403      	str	r4, [sp, #12]
 8003ab2:	1e54      	subs	r4, r2, #1
 8003ab4:	4564      	cmp	r4, ip
 8003ab6:	d82a      	bhi.n	8003b0e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8003ab8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003aba:	9c03      	ldr	r4, [sp, #12]
 8003abc:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003abe:	68cc      	ldr	r4, [r1, #12]
 8003ac0:	40b4      	lsls	r4, r6
 8003ac2:	433c      	orrs	r4, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac4:	4667      	mov	r7, ip
        GPIOx->OSPEEDR = temp;
 8003ac6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ac8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aca:	43ac      	bics	r4, r5
 8003acc:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ace:	9c01      	ldr	r4, [sp, #4]
 8003ad0:	0924      	lsrs	r4, r4, #4
 8003ad2:	403c      	ands	r4, r7
 8003ad4:	409c      	lsls	r4, r3
 8003ad6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003ad8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003ada:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003adc:	9c03      	ldr	r4, [sp, #12]
 8003ade:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae0:	688c      	ldr	r4, [r1, #8]
 8003ae2:	40b4      	lsls	r4, r6
 8003ae4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003ae6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae8:	2a02      	cmp	r2, #2
 8003aea:	d112      	bne.n	8003b12 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3U];
 8003aec:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003aee:	2507      	movs	r5, #7
 8003af0:	00a4      	lsls	r4, r4, #2
 8003af2:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3U];
 8003af4:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003af6:	9404      	str	r4, [sp, #16]
 8003af8:	240f      	movs	r4, #15
 8003afa:	401d      	ands	r5, r3
 8003afc:	00ad      	lsls	r5, r5, #2
 8003afe:	40ac      	lsls	r4, r5
 8003b00:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b02:	690c      	ldr	r4, [r1, #16]
 8003b04:	40ac      	lsls	r4, r5
 8003b06:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8003b08:	9c04      	ldr	r4, [sp, #16]
 8003b0a:	6227      	str	r7, [r4, #32]
 8003b0c:	e001      	b.n	8003b12 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0e:	2a03      	cmp	r2, #3
 8003b10:	d1e3      	bne.n	8003ada <HAL_GPIO_Init+0x6a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b12:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8003b14:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b16:	9d03      	ldr	r5, [sp, #12]
 8003b18:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b1a:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8003b1c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b1e:	22c0      	movs	r2, #192	; 0xc0
 8003b20:	9c01      	ldr	r4, [sp, #4]
 8003b22:	0292      	lsls	r2, r2, #10
 8003b24:	4214      	tst	r4, r2
 8003b26:	d04f      	beq.n	8003bc8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	2501      	movs	r5, #1
 8003b2a:	4c29      	ldr	r4, [pc, #164]	; (8003bd0 <HAL_GPIO_Init+0x160>)
 8003b2c:	46ac      	mov	ip, r5
 8003b2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b30:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b32:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b34:	001d      	movs	r5, r3
 8003b36:	260f      	movs	r6, #15
 8003b38:	403d      	ands	r5, r7
 8003b3a:	00ad      	lsls	r5, r5, #2
 8003b3c:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3e:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b40:	4a24      	ldr	r2, [pc, #144]	; (8003bd4 <HAL_GPIO_Init+0x164>)
 8003b42:	089c      	lsrs	r4, r3, #2
 8003b44:	00a4      	lsls	r4, r4, #2
 8003b46:	18a4      	adds	r4, r4, r2
 8003b48:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b4a:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b4c:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b4e:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b50:	05f6      	lsls	r6, r6, #23
 8003b52:	2200      	movs	r2, #0
 8003b54:	42b0      	cmp	r0, r6
 8003b56:	d00c      	beq.n	8003b72 <HAL_GPIO_Init+0x102>
 8003b58:	4e1f      	ldr	r6, [pc, #124]	; (8003bd8 <HAL_GPIO_Init+0x168>)
 8003b5a:	4662      	mov	r2, ip
 8003b5c:	42b0      	cmp	r0, r6
 8003b5e:	d008      	beq.n	8003b72 <HAL_GPIO_Init+0x102>
 8003b60:	4e1e      	ldr	r6, [pc, #120]	; (8003bdc <HAL_GPIO_Init+0x16c>)
 8003b62:	1892      	adds	r2, r2, r2
 8003b64:	42b0      	cmp	r0, r6
 8003b66:	d004      	beq.n	8003b72 <HAL_GPIO_Init+0x102>
 8003b68:	4e1d      	ldr	r6, [pc, #116]	; (8003be0 <HAL_GPIO_Init+0x170>)
 8003b6a:	003a      	movs	r2, r7
 8003b6c:	42b0      	cmp	r0, r6
 8003b6e:	d000      	beq.n	8003b72 <HAL_GPIO_Init+0x102>
 8003b70:	9a05      	ldr	r2, [sp, #20]
 8003b72:	40aa      	lsls	r2, r5
 8003b74:	9d03      	ldr	r5, [sp, #12]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b76:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b78:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b7a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8003b80:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003b82:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003b86:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b88:	03ff      	lsls	r7, r7, #15
 8003b8a:	d401      	bmi.n	8003b90 <HAL_GPIO_Init+0x120>
        temp &= ~((uint32_t)iocurrent);
 8003b8c:	0035      	movs	r5, r6
 8003b8e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003b90:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003b92:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003b94:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b96:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003b98:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9a:	03bf      	lsls	r7, r7, #14
 8003b9c:	d401      	bmi.n	8003ba2 <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 8003b9e:	0035      	movs	r5, r6
 8003ba0:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003ba2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003ba4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003ba6:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ba8:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003baa:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bac:	02ff      	lsls	r7, r7, #11
 8003bae:	d401      	bmi.n	8003bb4 <HAL_GPIO_Init+0x144>
        temp &= ~((uint32_t)iocurrent);
 8003bb0:	0035      	movs	r5, r6
 8003bb2:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003bb4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003bb6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003bb8:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bba:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003bbc:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bbe:	02bf      	lsls	r7, r7, #10
 8003bc0:	d401      	bmi.n	8003bc6 <HAL_GPIO_Init+0x156>
        temp &= ~((uint32_t)iocurrent);
 8003bc2:	4025      	ands	r5, r4
 8003bc4:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003bc6:	60d6      	str	r6, [r2, #12]
    position++;
 8003bc8:	3301      	adds	r3, #1
 8003bca:	e75a      	b.n	8003a82 <HAL_GPIO_Init+0x12>
 8003bcc:	afffe400 	.word	0xafffe400
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	50000400 	.word	0x50000400
 8003bdc:	50000800 	.word	0x50000800
 8003be0:	50000c00 	.word	0x50000c00
 8003be4:	40010400 	.word	0x40010400

08003be8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003be8:	2a00      	cmp	r2, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bec:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003bee:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003bf0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003bf2:	e7fc      	b.n	8003bee <HAL_GPIO_WritePin+0x6>

08003bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	0004      	movs	r4, r0
 8003bf8:	000e      	movs	r6, r1
 8003bfa:	0017      	movs	r7, r2
 8003bfc:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	6993      	ldr	r3, [r2, #24]
 8003c02:	4033      	ands	r3, r6
 8003c04:	1b9b      	subs	r3, r3, r6
 8003c06:	4259      	negs	r1, r3
 8003c08:	414b      	adcs	r3, r1
 8003c0a:	42bb      	cmp	r3, r7
 8003c0c:	d001      	beq.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(hi2c);
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003c0e:	2000      	movs	r0, #0
 8003c10:	e017      	b.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003c12:	1c6b      	adds	r3, r5, #1
 8003c14:	d0f4      	beq.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7ff fecf 	bl	80039b8 <HAL_GetTick>
 8003c1a:	9b06      	ldr	r3, [sp, #24]
 8003c1c:	1ac0      	subs	r0, r0, r3
 8003c1e:	42a8      	cmp	r0, r5
 8003c20:	d801      	bhi.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	d1eb      	bne.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0xa>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c26:	2220      	movs	r2, #32
 8003c28:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	0023      	movs	r3, r4
 8003c32:	3341      	adds	r3, #65	; 0x41
 8003c34:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	0022      	movs	r2, r4
 8003c38:	2300      	movs	r3, #0
 8003c3a:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003c3c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003c40:	7023      	strb	r3, [r4, #0]
}
 8003c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c44 <HAL_I2C_Init>:
{
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003c48:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003c4a:	2c00      	cmp	r4, #0
 8003c4c:	d03f      	beq.n	8003cce <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4e:	0025      	movs	r5, r4
 8003c50:	3541      	adds	r5, #65	; 0x41
 8003c52:	782b      	ldrb	r3, [r5, #0]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003c5a:	0023      	movs	r3, r4
 8003c5c:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003c5e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003c60:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003c62:	f7ff fd33 	bl	80036cc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c66:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003c68:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003c6c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c6e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68a6      	ldr	r6, [r4, #8]
 8003c74:	438a      	bics	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c78:	6861      	ldr	r1, [r4, #4]
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ce4 <HAL_I2C_Init+0xa0>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_I2C_Init+0xa4>)
 8003c84:	4011      	ands	r1, r2
 8003c86:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c88:	2801      	cmp	r0, #1
 8003c8a:	d121      	bne.n	8003cd0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	0209      	lsls	r1, r1, #8
 8003c90:	4331      	orrs	r1, r6
 8003c92:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c94:	6858      	ldr	r0, [r3, #4]
 8003c96:	4915      	ldr	r1, [pc, #84]	; (8003cec <HAL_I2C_Init+0xa8>)
 8003c98:	4301      	orrs	r1, r0
 8003c9a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c9c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ca4:	6961      	ldr	r1, [r4, #20]
 8003ca6:	6922      	ldr	r2, [r4, #16]
 8003ca8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003caa:	69a1      	ldr	r1, [r4, #24]
 8003cac:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cb2:	6a21      	ldr	r1, [r4, #32]
 8003cb4:	69e2      	ldr	r2, [r4, #28]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003cba:	2201      	movs	r2, #1
 8003cbc:	6819      	ldr	r1, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cca:	3442      	adds	r4, #66	; 0x42
 8003ccc:	7020      	strb	r0, [r4, #0]
}
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cd0:	2184      	movs	r1, #132	; 0x84
 8003cd2:	0209      	lsls	r1, r1, #8
 8003cd4:	4331      	orrs	r1, r6
 8003cd6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd8:	2802      	cmp	r0, #2
 8003cda:	d1db      	bne.n	8003c94 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0109      	lsls	r1, r1, #4
 8003ce0:	6059      	str	r1, [r3, #4]
 8003ce2:	e7d7      	b.n	8003c94 <HAL_I2C_Init+0x50>
 8003ce4:	f0ffffff 	.word	0xf0ffffff
 8003ce8:	ffff7fff 	.word	0xffff7fff
 8003cec:	02008000 	.word	0x02008000

08003cf0 <HAL_I2C_IsDeviceReady>:
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	9205      	str	r2, [sp, #20]
 8003cf6:	001e      	movs	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf8:	0002      	movs	r2, r0
  __IO uint32_t I2C_Trials = 0UL;
 8003cfa:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	3241      	adds	r2, #65	; 0x41
  __IO uint32_t I2C_Trials = 0UL;
 8003cfe:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d00:	7813      	ldrb	r3, [r2, #0]
{
 8003d02:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003d04:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d15c      	bne.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d0a:	6803      	ldr	r3, [r0, #0]
 8003d0c:	6998      	ldr	r0, [r3, #24]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	0007      	movs	r7, r0
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	401f      	ands	r7, r3
 8003d16:	4218      	tst	r0, r3
 8003d18:	d154      	bne.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
    __HAL_LOCK(hi2c);
 8003d1a:	0020      	movs	r0, r4
 8003d1c:	3040      	adds	r0, #64	; 0x40
 8003d1e:	7803      	ldrb	r3, [r0, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d04f      	beq.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
 8003d24:	2301      	movs	r3, #1
 8003d26:	7003      	strb	r3, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d28:	2024      	movs	r0, #36	; 0x24
 8003d2a:	0589      	lsls	r1, r1, #22
 8003d2c:	7010      	strb	r0, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2e:	0d8a      	lsrs	r2, r1, #22
 8003d30:	6467      	str	r7, [r4, #68]	; 0x44
 8003d32:	9204      	str	r2, [sp, #16]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d34:	9303      	str	r3, [sp, #12]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003d36:	68e3      	ldr	r3, [r4, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d12b      	bne.n	8003d94 <HAL_I2C_IsDeviceReady+0xa4>
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_I2C_IsDeviceReady+0x144>)
 8003d3e:	9a04      	ldr	r2, [sp, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003d46:	f7ff fe37 	bl	80039b8 <HAL_GetTick>
 8003d4a:	9002      	str	r0, [sp, #8]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	9a03      	ldr	r2, [sp, #12]
 8003d50:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d52:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d54:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d56:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d58:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d5a:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d5c:	431d      	orrs	r5, r3
 8003d5e:	d01c      	beq.n	8003d9a <HAL_I2C_IsDeviceReady+0xaa>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	2710      	movs	r7, #16
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	001a      	movs	r2, r3
 8003d68:	403a      	ands	r2, r7
 8003d6a:	423b      	tst	r3, r7
 8003d6c:	d12d      	bne.n	8003dca <HAL_I2C_IsDeviceReady+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	2120      	movs	r1, #32
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	0020      	movs	r0, r4
 8003d76:	0033      	movs	r3, r6
 8003d78:	f7ff ff3c 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d121      	bne.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d80:	2320      	movs	r3, #32
 8003d82:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8003d84:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d86:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d88:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8003d8a:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	3241      	adds	r2, #65	; 0x41
 8003d8e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003d90:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8003d92:	e017      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003d94:	23a0      	movs	r3, #160	; 0xa0
 8003d96:	019b      	lsls	r3, r3, #6
 8003d98:	e7d1      	b.n	8003d3e <HAL_I2C_IsDeviceReady+0x4e>
        if (Timeout != HAL_MAX_DELAY)
 8003d9a:	1c73      	adds	r3, r6, #1
 8003d9c:	d0d6      	beq.n	8003d4c <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7ff fe0b 	bl	80039b8 <HAL_GetTick>
 8003da2:	9b02      	ldr	r3, [sp, #8]
 8003da4:	1ac0      	subs	r0, r0, r3
 8003da6:	42b0      	cmp	r0, r6
 8003da8:	d801      	bhi.n	8003dae <HAL_I2C_IsDeviceReady+0xbe>
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d1ce      	bne.n	8003d4c <HAL_I2C_IsDeviceReady+0x5c>
            hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	0022      	movs	r2, r4
 8003db0:	2320      	movs	r3, #32
 8003db2:	3241      	adds	r2, #65	; 0x41
 8003db4:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003db6:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 8003db8:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	3440      	adds	r4, #64	; 0x40
 8003dc2:	7023      	strb	r3, [r4, #0]
}
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	b009      	add	sp, #36	; 0x24
 8003dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003dca:	9b02      	ldr	r3, [sp, #8]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	0033      	movs	r3, r6
 8003dd4:	0020      	movs	r0, r4
 8003dd6:	f7ff ff0d 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003dda:	1e02      	subs	r2, r0, #0
 8003ddc:	d1f2      	bne.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dde:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8003de0:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de2:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de4:	2720      	movs	r7, #32
 8003de6:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8003de8:	9907      	ldr	r1, [sp, #28]
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d10f      	bne.n	8003e0e <HAL_I2C_IsDeviceReady+0x11e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	6858      	ldr	r0, [r3, #4]
 8003df2:	01c9      	lsls	r1, r1, #7
 8003df4:	4301      	orrs	r1, r0
 8003df6:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003df8:	9b02      	ldr	r3, [sp, #8]
 8003dfa:	0039      	movs	r1, r7
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	0020      	movs	r0, r4
 8003e00:	0033      	movs	r3, r6
 8003e02:	f7ff fef7 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d1dc      	bne.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8003e0e:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003e10:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8003e12:	3301      	adds	r3, #1
 8003e14:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8003e16:	9b07      	ldr	r3, [sp, #28]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d200      	bcs.n	8003e1e <HAL_I2C_IsDeviceReady+0x12e>
 8003e1c:	e78b      	b.n	8003d36 <HAL_I2C_IsDeviceReady+0x46>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	0022      	movs	r2, r4
 8003e20:	2320      	movs	r3, #32
 8003e22:	3241      	adds	r2, #65	; 0x41
 8003e24:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e26:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003e28:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003e32:	e7c7      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0xd4>
 8003e34:	02002000 	.word	0x02002000

08003e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3a:	0004      	movs	r4, r0
 8003e3c:	3441      	adds	r4, #65	; 0x41
 8003e3e:	7822      	ldrb	r2, [r4, #0]
{
 8003e40:	0003      	movs	r3, r0
 8003e42:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e46:	b2d6      	uxtb	r6, r2
 8003e48:	2a20      	cmp	r2, #32
 8003e4a:	d118      	bne.n	8003e7e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003e4c:	001d      	movs	r5, r3
 8003e4e:	3540      	adds	r5, #64	; 0x40
 8003e50:	782a      	ldrb	r2, [r5, #0]
 8003e52:	2a01      	cmp	r2, #1
 8003e54:	d013      	beq.n	8003e7e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3a23      	subs	r2, #35	; 0x23
 8003e5e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e60:	4807      	ldr	r0, [pc, #28]	; (8003e80 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003e62:	4391      	bics	r1, r2
 8003e64:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e66:	6819      	ldr	r1, [r3, #0]
 8003e68:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8003e6a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e6c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	4339      	orrs	r1, r7
 8003e72:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003e7c:	7028      	strb	r0, [r5, #0]
  }
}
 8003e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e80:	ffffefff 	.word	0xffffefff

08003e84 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e84:	0002      	movs	r2, r0
{
 8003e86:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e88:	3241      	adds	r2, #65	; 0x41
 8003e8a:	7814      	ldrb	r4, [r2, #0]
{
 8003e8c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e92:	2c20      	cmp	r4, #32
 8003e94:	d117      	bne.n	8003ec6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003e96:	001c      	movs	r4, r3
 8003e98:	3440      	adds	r4, #64	; 0x40
 8003e9a:	7826      	ldrb	r6, [r4, #0]
 8003e9c:	2e01      	cmp	r6, #1
 8003e9e:	d012      	beq.n	8003ec6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea0:	3022      	adds	r0, #34	; 0x22
 8003ea2:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3823      	subs	r0, #35	; 0x23
 8003ea8:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003eaa:	4f07      	ldr	r7, [pc, #28]	; (8003ec8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003eac:	4386      	bics	r6, r0
 8003eae:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003eb0:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003eb2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003eb4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003eb6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003eb8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	4308      	orrs	r0, r1
 8003ebe:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003ec0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003ec4:	7020      	strb	r0, [r4, #0]
  }
}
 8003ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec8:	fffff0ff 	.word	0xfffff0ff

08003ecc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ecc:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003ed0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003ed2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003ed4:	4022      	ands	r2, r4
 8003ed6:	2a08      	cmp	r2, #8
 8003ed8:	d031      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x72>
 8003eda:	2a0c      	cmp	r2, #12
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x26>
 8003ede:	2a04      	cmp	r2, #4
 8003ee0:	d125      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ee2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ee6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003ee8:	17c0      	asrs	r0, r0, #31
 8003eea:	4018      	ands	r0, r3
 8003eec:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x80>)
 8003eee:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ef2:	02a2      	lsls	r2, r4, #10
 8003ef4:	4816      	ldr	r0, [pc, #88]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x84>)
 8003ef6:	0f12      	lsrs	r2, r2, #28
 8003ef8:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efa:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003efc:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f00:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f02:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f04:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f06:	4211      	tst	r1, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f0a:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x88>)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f7fc fae2 	bl	80004d8 <__aeabi_lmul>
 8003f14:	0022      	movs	r2, r4
 8003f16:	2300      	movs	r3, #0
 8003f18:	f7fc fabe 	bl	8000498 <__aeabi_uldivmod>
 8003f1c:	e7e8      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2310      	movs	r3, #16
 8003f22:	421a      	tst	r2, r3
 8003f24:	d001      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003f26:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003f28:	e7f0      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x80>)
 8003f2c:	e7ee      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f2e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f30:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f32:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f38:	3301      	adds	r3, #1
 8003f3a:	4098      	lsls	r0, r3
  return sysclockfreq;
 8003f3c:	e7d8      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003f3e:	4805      	ldr	r0, [pc, #20]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x88>)
 8003f40:	e7d6      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x24>
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	40021000 	.word	0x40021000
 8003f48:	ff48e500 	.word	0xff48e500
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	08005380 	.word	0x08005380
 8003f54:	007a1200 	.word	0x007a1200
 8003f58:	003d0900 	.word	0x003d0900

08003f5c <HAL_RCC_OscConfig>:
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	0005      	movs	r5, r0
 8003f60:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d059      	beq.n	800401a <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	230c      	movs	r3, #12
 8003f68:	4cbf      	ldr	r4, [pc, #764]	; (8004268 <HAL_RCC_OscConfig+0x30c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f6e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f70:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	025b      	lsls	r3, r3, #9
 8003f76:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f78:	07d2      	lsls	r2, r2, #31
 8003f7a:	d442      	bmi.n	8004002 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	079b      	lsls	r3, r3, #30
 8003f80:	d500      	bpl.n	8003f84 <HAL_RCC_OscConfig+0x28>
 8003f82:	e08b      	b.n	800409c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	06db      	lsls	r3, r3, #27
 8003f88:	d529      	bpl.n	8003fde <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f8a:	2e00      	cmp	r6, #0
 8003f8c:	d000      	beq.n	8003f90 <HAL_RCC_OscConfig+0x34>
 8003f8e:	e0dc      	b.n	800414a <HAL_RCC_OscConfig+0x1ee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	059b      	lsls	r3, r3, #22
 8003f94:	d502      	bpl.n	8003f9c <HAL_RCC_OscConfig+0x40>
 8003f96:	69eb      	ldr	r3, [r5, #28]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d03e      	beq.n	800401a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9c:	6862      	ldr	r2, [r4, #4]
 8003f9e:	49b3      	ldr	r1, [pc, #716]	; (800426c <HAL_RCC_OscConfig+0x310>)
 8003fa0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa8:	6861      	ldr	r1, [r4, #4]
 8003faa:	6a2a      	ldr	r2, [r5, #32]
 8003fac:	0209      	lsls	r1, r1, #8
 8003fae:	0a09      	lsrs	r1, r1, #8
 8003fb0:	0612      	lsls	r2, r2, #24
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	0b5b      	lsrs	r3, r3, #13
 8003fba:	3301      	adds	r3, #1
 8003fbc:	0212      	lsls	r2, r2, #8
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003fc2:	68e1      	ldr	r1, [r4, #12]
 8003fc4:	060a      	lsls	r2, r1, #24
 8003fc6:	49aa      	ldr	r1, [pc, #680]	; (8004270 <HAL_RCC_OscConfig+0x314>)
 8003fc8:	0f12      	lsrs	r2, r2, #28
 8003fca:	5c8a      	ldrb	r2, [r1, r2]
 8003fcc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003fce:	4aa9      	ldr	r2, [pc, #676]	; (8004274 <HAL_RCC_OscConfig+0x318>)
 8003fd0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003fd2:	4ba9      	ldr	r3, [pc, #676]	; (8004278 <HAL_RCC_OscConfig+0x31c>)
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	f7ff fcab 	bl	8003930 <HAL_InitTick>
        if(status != HAL_OK)
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d134      	bne.n	8004048 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fde:	682b      	ldr	r3, [r5, #0]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	d500      	bpl.n	8003fe6 <HAL_RCC_OscConfig+0x8a>
 8003fe4:	e0e8      	b.n	80041b8 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe6:	682b      	ldr	r3, [r5, #0]
 8003fe8:	075b      	lsls	r3, r3, #29
 8003fea:	d500      	bpl.n	8003fee <HAL_RCC_OscConfig+0x92>
 8003fec:	e10a      	b.n	8004204 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fee:	682b      	ldr	r3, [r5, #0]
 8003ff0:	069b      	lsls	r3, r3, #26
 8003ff2:	d500      	bpl.n	8003ff6 <HAL_RCC_OscConfig+0x9a>
 8003ff4:	e191      	b.n	800431a <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d000      	beq.n	8003ffe <HAL_RCC_OscConfig+0xa2>
 8003ffc:	e1c0      	b.n	8004380 <HAL_RCC_OscConfig+0x424>
  return HAL_OK;
 8003ffe:	2000      	movs	r0, #0
 8004000:	e022      	b.n	8004048 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004002:	2e08      	cmp	r6, #8
 8004004:	d003      	beq.n	800400e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004006:	2e0c      	cmp	r6, #12
 8004008:	d109      	bne.n	800401e <HAL_RCC_OscConfig+0xc2>
 800400a:	2f00      	cmp	r7, #0
 800400c:	d007      	beq.n	800401e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	039b      	lsls	r3, r3, #14
 8004012:	d5b3      	bpl.n	8003f7c <HAL_RCC_OscConfig+0x20>
 8004014:	686b      	ldr	r3, [r5, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1b0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 800401a:	2001      	movs	r0, #1
 800401c:	e014      	b.n	8004048 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401e:	686a      	ldr	r2, [r5, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d113      	bne.n	800404c <HAL_RCC_OscConfig+0xf0>
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800402a:	f7ff fcc5 	bl	80039b8 <HAL_GetTick>
 800402e:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	0292      	lsls	r2, r2, #10
 8004036:	4213      	tst	r3, r2
 8004038:	d1a0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403a:	f7ff fcbd 	bl	80039b8 <HAL_GetTick>
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	1ac0      	subs	r0, r0, r3
 8004042:	2864      	cmp	r0, #100	; 0x64
 8004044:	d9f4      	bls.n	8004030 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8004046:	2003      	movs	r0, #3
}
 8004048:	b007      	add	sp, #28
 800404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	21a0      	movs	r1, #160	; 0xa0
 800404e:	02c9      	lsls	r1, r1, #11
 8004050:	428a      	cmp	r2, r1
 8004052:	d105      	bne.n	8004060 <HAL_RCC_OscConfig+0x104>
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	6821      	ldr	r1, [r4, #0]
 8004058:	02d2      	lsls	r2, r2, #11
 800405a:	430a      	orrs	r2, r1
 800405c:	6022      	str	r2, [r4, #0]
 800405e:	e7e1      	b.n	8004024 <HAL_RCC_OscConfig+0xc8>
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	4886      	ldr	r0, [pc, #536]	; (800427c <HAL_RCC_OscConfig+0x320>)
 8004064:	4001      	ands	r1, r0
 8004066:	6021      	str	r1, [r4, #0]
 8004068:	6821      	ldr	r1, [r4, #0]
 800406a:	400b      	ands	r3, r1
 800406c:	9305      	str	r3, [sp, #20]
 800406e:	9b05      	ldr	r3, [sp, #20]
 8004070:	4983      	ldr	r1, [pc, #524]	; (8004280 <HAL_RCC_OscConfig+0x324>)
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	400b      	ands	r3, r1
 8004076:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004078:	2a00      	cmp	r2, #0
 800407a:	d1d6      	bne.n	800402a <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 800407c:	f7ff fc9c 	bl	80039b8 <HAL_GetTick>
 8004080:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004082:	2280      	movs	r2, #128	; 0x80
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	0292      	lsls	r2, r2, #10
 8004088:	4213      	tst	r3, r2
 800408a:	d100      	bne.n	800408e <HAL_RCC_OscConfig+0x132>
 800408c:	e776      	b.n	8003f7c <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408e:	f7ff fc93 	bl	80039b8 <HAL_GetTick>
 8004092:	9b01      	ldr	r3, [sp, #4]
 8004094:	1ac0      	subs	r0, r0, r3
 8004096:	2864      	cmp	r0, #100	; 0x64
 8004098:	d9f3      	bls.n	8004082 <HAL_RCC_OscConfig+0x126>
 800409a:	e7d4      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
    hsi_state = RCC_OscInitStruct->HSIState;
 800409c:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800409e:	2e04      	cmp	r6, #4
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_OscConfig+0x14e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040a2:	2e0c      	cmp	r6, #12
 80040a4:	d124      	bne.n	80040f0 <HAL_RCC_OscConfig+0x194>
 80040a6:	2f00      	cmp	r7, #0
 80040a8:	d122      	bne.n	80040f0 <HAL_RCC_OscConfig+0x194>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	075b      	lsls	r3, r3, #29
 80040ae:	d501      	bpl.n	80040b4 <HAL_RCC_OscConfig+0x158>
 80040b0:	2a00      	cmp	r2, #0
 80040b2:	d0b2      	beq.n	800401a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b4:	6861      	ldr	r1, [r4, #4]
 80040b6:	692b      	ldr	r3, [r5, #16]
 80040b8:	4872      	ldr	r0, [pc, #456]	; (8004284 <HAL_RCC_OscConfig+0x328>)
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	4001      	ands	r1, r0
 80040be:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040c0:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	438b      	bics	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040cc:	f7ff fefe 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 80040d0:	68e3      	ldr	r3, [r4, #12]
 80040d2:	4a67      	ldr	r2, [pc, #412]	; (8004270 <HAL_RCC_OscConfig+0x314>)
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	0f1b      	lsrs	r3, r3, #28
 80040d8:	5cd3      	ldrb	r3, [r2, r3]
 80040da:	40d8      	lsrs	r0, r3
 80040dc:	4b65      	ldr	r3, [pc, #404]	; (8004274 <HAL_RCC_OscConfig+0x318>)
 80040de:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80040e0:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x31c>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	f7ff fc24 	bl	8003930 <HAL_InitTick>
      if(status != HAL_OK)
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d100      	bne.n	80040ee <HAL_RCC_OscConfig+0x192>
 80040ec:	e74a      	b.n	8003f84 <HAL_RCC_OscConfig+0x28>
 80040ee:	e7ab      	b.n	8004048 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040f0:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80040f2:	2a00      	cmp	r2, #0
 80040f4:	d018      	beq.n	8004128 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040f6:	2109      	movs	r1, #9
 80040f8:	438b      	bics	r3, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040fe:	f7ff fc5b 	bl	80039b8 <HAL_GetTick>
 8004102:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004104:	2204      	movs	r2, #4
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	4213      	tst	r3, r2
 800410a:	d007      	beq.n	800411c <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410c:	6862      	ldr	r2, [r4, #4]
 800410e:	692b      	ldr	r3, [r5, #16]
 8004110:	495c      	ldr	r1, [pc, #368]	; (8004284 <HAL_RCC_OscConfig+0x328>)
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	400a      	ands	r2, r1
 8004116:	4313      	orrs	r3, r2
 8004118:	6063      	str	r3, [r4, #4]
 800411a:	e733      	b.n	8003f84 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411c:	f7ff fc4c 	bl	80039b8 <HAL_GetTick>
 8004120:	1bc0      	subs	r0, r0, r7
 8004122:	2802      	cmp	r0, #2
 8004124:	d9ee      	bls.n	8004104 <HAL_RCC_OscConfig+0x1a8>
 8004126:	e78e      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8004128:	2201      	movs	r2, #1
 800412a:	4393      	bics	r3, r2
 800412c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800412e:	f7ff fc43 	bl	80039b8 <HAL_GetTick>
 8004132:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004134:	2204      	movs	r2, #4
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	4213      	tst	r3, r2
 800413a:	d100      	bne.n	800413e <HAL_RCC_OscConfig+0x1e2>
 800413c:	e722      	b.n	8003f84 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413e:	f7ff fc3b 	bl	80039b8 <HAL_GetTick>
 8004142:	1bc0      	subs	r0, r0, r7
 8004144:	2802      	cmp	r0, #2
 8004146:	d9f5      	bls.n	8004134 <HAL_RCC_OscConfig+0x1d8>
 8004148:	e77d      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800414a:	69eb      	ldr	r3, [r5, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_ENABLE();
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4313      	orrs	r3, r2
 8004158:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800415a:	f7ff fc2d 	bl	80039b8 <HAL_GetTick>
 800415e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	4213      	tst	r3, r2
 8004168:	d00d      	beq.n	8004186 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800416a:	6863      	ldr	r3, [r4, #4]
 800416c:	4a3f      	ldr	r2, [pc, #252]	; (800426c <HAL_RCC_OscConfig+0x310>)
 800416e:	4013      	ands	r3, r2
 8004170:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004172:	4313      	orrs	r3, r2
 8004174:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004176:	6862      	ldr	r2, [r4, #4]
 8004178:	6a2b      	ldr	r3, [r5, #32]
 800417a:	0212      	lsls	r2, r2, #8
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	0a12      	lsrs	r2, r2, #8
 8004180:	4313      	orrs	r3, r2
 8004182:	6063      	str	r3, [r4, #4]
 8004184:	e72b      	b.n	8003fde <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004186:	f7ff fc17 	bl	80039b8 <HAL_GetTick>
 800418a:	1bc0      	subs	r0, r0, r7
 800418c:	2802      	cmp	r0, #2
 800418e:	d9e7      	bls.n	8004160 <HAL_RCC_OscConfig+0x204>
 8004190:	e759      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <HAL_RCC_OscConfig+0x32c>)
 8004196:	4013      	ands	r3, r2
 8004198:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800419a:	f7ff fc0d 	bl	80039b8 <HAL_GetTick>
 800419e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80041a0:	2280      	movs	r2, #128	; 0x80
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	0092      	lsls	r2, r2, #2
 80041a6:	4213      	tst	r3, r2
 80041a8:	d100      	bne.n	80041ac <HAL_RCC_OscConfig+0x250>
 80041aa:	e718      	b.n	8003fde <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041ac:	f7ff fc04 	bl	80039b8 <HAL_GetTick>
 80041b0:	1bc0      	subs	r0, r0, r7
 80041b2:	2802      	cmp	r0, #2
 80041b4:	d9f4      	bls.n	80041a0 <HAL_RCC_OscConfig+0x244>
 80041b6:	e746      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b8:	696a      	ldr	r2, [r5, #20]
 80041ba:	2301      	movs	r3, #1
 80041bc:	2a00      	cmp	r2, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80041c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041c2:	4313      	orrs	r3, r2
 80041c4:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80041c6:	f7ff fbf7 	bl	80039b8 <HAL_GetTick>
 80041ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041cc:	2202      	movs	r2, #2
 80041ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041d0:	4213      	tst	r3, r2
 80041d2:	d000      	beq.n	80041d6 <HAL_RCC_OscConfig+0x27a>
 80041d4:	e707      	b.n	8003fe6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d6:	f7ff fbef 	bl	80039b8 <HAL_GetTick>
 80041da:	1bc0      	subs	r0, r0, r7
 80041dc:	2802      	cmp	r0, #2
 80041de:	d9f5      	bls.n	80041cc <HAL_RCC_OscConfig+0x270>
 80041e0:	e731      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80041e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041e4:	439a      	bics	r2, r3
 80041e6:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80041e8:	f7ff fbe6 	bl	80039b8 <HAL_GetTick>
 80041ec:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ee:	2202      	movs	r2, #2
 80041f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041f2:	4213      	tst	r3, r2
 80041f4:	d100      	bne.n	80041f8 <HAL_RCC_OscConfig+0x29c>
 80041f6:	e6f6      	b.n	8003fe6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f8:	f7ff fbde 	bl	80039b8 <HAL_GetTick>
 80041fc:	1bc0      	subs	r0, r0, r7
 80041fe:	2802      	cmp	r0, #2
 8004200:	d9f5      	bls.n	80041ee <HAL_RCC_OscConfig+0x292>
 8004202:	e720      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004204:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004206:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004208:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800420a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800420c:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420e:	421a      	tst	r2, r3
 8004210:	d104      	bne.n	800421c <HAL_RCC_OscConfig+0x2c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004214:	4313      	orrs	r3, r2
 8004216:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004218:	2301      	movs	r3, #1
 800421a:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	2280      	movs	r2, #128	; 0x80
 800421e:	4f1b      	ldr	r7, [pc, #108]	; (800428c <HAL_RCC_OscConfig+0x330>)
 8004220:	0052      	lsls	r2, r2, #1
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	4213      	tst	r3, r2
 8004226:	d008      	beq.n	800423a <HAL_RCC_OscConfig+0x2de>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	68ab      	ldr	r3, [r5, #8]
 800422c:	0052      	lsls	r2, r2, #1
 800422e:	4293      	cmp	r3, r2
 8004230:	d12e      	bne.n	8004290 <HAL_RCC_OscConfig+0x334>
 8004232:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004234:	4313      	orrs	r3, r2
 8004236:	6523      	str	r3, [r4, #80]	; 0x50
 8004238:	e04f      	b.n	80042da <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423a:	2280      	movs	r2, #128	; 0x80
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	0052      	lsls	r2, r2, #1
 8004240:	4313      	orrs	r3, r2
 8004242:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004244:	f7ff fbb8 	bl	80039b8 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800424c:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	9a03      	ldr	r2, [sp, #12]
 8004254:	4213      	tst	r3, r2
 8004256:	d1e7      	bne.n	8004228 <HAL_RCC_OscConfig+0x2cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004258:	f7ff fbae 	bl	80039b8 <HAL_GetTick>
 800425c:	9b02      	ldr	r3, [sp, #8]
 800425e:	1ac0      	subs	r0, r0, r3
 8004260:	2864      	cmp	r0, #100	; 0x64
 8004262:	d9f5      	bls.n	8004250 <HAL_RCC_OscConfig+0x2f4>
 8004264:	e6ef      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	40021000 	.word	0x40021000
 800426c:	ffff1fff 	.word	0xffff1fff
 8004270:	08005368 	.word	0x08005368
 8004274:	20000000 	.word	0x20000000
 8004278:	20000008 	.word	0x20000008
 800427c:	fffeffff 	.word	0xfffeffff
 8004280:	fffbffff 	.word	0xfffbffff
 8004284:	ffffe0ff 	.word	0xffffe0ff
 8004288:	fffffeff 	.word	0xfffffeff
 800428c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <HAL_RCC_OscConfig+0x366>
 8004294:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004296:	4a6b      	ldr	r2, [pc, #428]	; (8004444 <HAL_RCC_OscConfig+0x4e8>)
 8004298:	4013      	ands	r3, r2
 800429a:	6523      	str	r3, [r4, #80]	; 0x50
 800429c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800429e:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_RCC_OscConfig+0x4ec>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80042a4:	f7ff fb88 	bl	80039b8 <HAL_GetTick>
 80042a8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042aa:	2280      	movs	r2, #128	; 0x80
 80042ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042ae:	0092      	lsls	r2, r2, #2
 80042b0:	4213      	tst	r3, r2
 80042b2:	d01a      	beq.n	80042ea <HAL_RCC_OscConfig+0x38e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7ff fb80 	bl	80039b8 <HAL_GetTick>
 80042b8:	4b64      	ldr	r3, [pc, #400]	; (800444c <HAL_RCC_OscConfig+0x4f0>)
 80042ba:	1bc0      	subs	r0, r0, r7
 80042bc:	4298      	cmp	r0, r3
 80042be:	d9f4      	bls.n	80042aa <HAL_RCC_OscConfig+0x34e>
 80042c0:	e6c1      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c2:	21a0      	movs	r1, #160	; 0xa0
 80042c4:	00c9      	lsls	r1, r1, #3
 80042c6:	428b      	cmp	r3, r1
 80042c8:	d118      	bne.n	80042fc <HAL_RCC_OscConfig+0x3a0>
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6523      	str	r3, [r4, #80]	; 0x50
 80042d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042d6:	431a      	orrs	r2, r3
 80042d8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80042da:	f7ff fb6d 	bl	80039b8 <HAL_GetTick>
 80042de:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e0:	2280      	movs	r2, #128	; 0x80
 80042e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042e4:	0092      	lsls	r2, r2, #2
 80042e6:	4213      	tst	r3, r2
 80042e8:	d010      	beq.n	800430c <HAL_RCC_OscConfig+0x3b0>
    if(pwrclkchanged == SET)
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d000      	beq.n	80042f2 <HAL_RCC_OscConfig+0x396>
 80042f0:	e67d      	b.n	8003fee <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042f4:	4a56      	ldr	r2, [pc, #344]	; (8004450 <HAL_RCC_OscConfig+0x4f4>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80042fa:	e678      	b.n	8003fee <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042fe:	4a51      	ldr	r2, [pc, #324]	; (8004444 <HAL_RCC_OscConfig+0x4e8>)
 8004300:	4013      	ands	r3, r2
 8004302:	6523      	str	r3, [r4, #80]	; 0x50
 8004304:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004306:	4a50      	ldr	r2, [pc, #320]	; (8004448 <HAL_RCC_OscConfig+0x4ec>)
 8004308:	4013      	ands	r3, r2
 800430a:	e794      	b.n	8004236 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7ff fb54 	bl	80039b8 <HAL_GetTick>
 8004310:	4b4e      	ldr	r3, [pc, #312]	; (800444c <HAL_RCC_OscConfig+0x4f0>)
 8004312:	1bc0      	subs	r0, r0, r7
 8004314:	4298      	cmp	r0, r3
 8004316:	d9e3      	bls.n	80042e0 <HAL_RCC_OscConfig+0x384>
 8004318:	e695      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800431a:	69a9      	ldr	r1, [r5, #24]
 800431c:	2301      	movs	r3, #1
 800431e:	4a4d      	ldr	r2, [pc, #308]	; (8004454 <HAL_RCC_OscConfig+0x4f8>)
 8004320:	2900      	cmp	r1, #0
 8004322:	d018      	beq.n	8004356 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI48_ENABLE();
 8004324:	68a1      	ldr	r1, [r4, #8]
 8004326:	4319      	orrs	r1, r3
 8004328:	60a1      	str	r1, [r4, #8]
 800432a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800432c:	430b      	orrs	r3, r1
 800432e:	6363      	str	r3, [r4, #52]	; 0x34
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	6a11      	ldr	r1, [r2, #32]
 8004334:	019b      	lsls	r3, r3, #6
 8004336:	430b      	orrs	r3, r1
 8004338:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800433a:	f7ff fb3d 	bl	80039b8 <HAL_GetTick>
 800433e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004340:	2202      	movs	r2, #2
 8004342:	68a3      	ldr	r3, [r4, #8]
 8004344:	4213      	tst	r3, r2
 8004346:	d000      	beq.n	800434a <HAL_RCC_OscConfig+0x3ee>
 8004348:	e655      	b.n	8003ff6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434a:	f7ff fb35 	bl	80039b8 <HAL_GetTick>
 800434e:	1bc0      	subs	r0, r0, r7
 8004350:	2802      	cmp	r0, #2
 8004352:	d9f5      	bls.n	8004340 <HAL_RCC_OscConfig+0x3e4>
 8004354:	e677      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8004356:	68a1      	ldr	r1, [r4, #8]
 8004358:	4399      	bics	r1, r3
 800435a:	60a1      	str	r1, [r4, #8]
 800435c:	6a13      	ldr	r3, [r2, #32]
 800435e:	493e      	ldr	r1, [pc, #248]	; (8004458 <HAL_RCC_OscConfig+0x4fc>)
 8004360:	400b      	ands	r3, r1
 8004362:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004364:	f7ff fb28 	bl	80039b8 <HAL_GetTick>
 8004368:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800436a:	2202      	movs	r2, #2
 800436c:	68a3      	ldr	r3, [r4, #8]
 800436e:	4213      	tst	r3, r2
 8004370:	d100      	bne.n	8004374 <HAL_RCC_OscConfig+0x418>
 8004372:	e640      	b.n	8003ff6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004374:	f7ff fb20 	bl	80039b8 <HAL_GetTick>
 8004378:	1bc0      	subs	r0, r0, r7
 800437a:	2802      	cmp	r0, #2
 800437c:	d9f5      	bls.n	800436a <HAL_RCC_OscConfig+0x40e>
 800437e:	e662      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004380:	2e0c      	cmp	r6, #12
 8004382:	d043      	beq.n	800440c <HAL_RCC_OscConfig+0x4b0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	4a35      	ldr	r2, [pc, #212]	; (800445c <HAL_RCC_OscConfig+0x500>)
 8004386:	2b02      	cmp	r3, #2
 8004388:	d12e      	bne.n	80043e8 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_DISABLE();
 800438a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800438c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800438e:	4013      	ands	r3, r2
 8004390:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004392:	f7ff fb11 	bl	80039b8 <HAL_GetTick>
 8004396:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004398:	04bf      	lsls	r7, r7, #18
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	423b      	tst	r3, r7
 800439e:	d11d      	bne.n	80043dc <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80043a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80043a4:	68e2      	ldr	r2, [r4, #12]
 80043a6:	430b      	orrs	r3, r1
 80043a8:	492d      	ldr	r1, [pc, #180]	; (8004460 <HAL_RCC_OscConfig+0x504>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043aa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ac:	400a      	ands	r2, r1
 80043ae:	4313      	orrs	r3, r2
 80043b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043b2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	045b      	lsls	r3, r3, #17
 80043be:	4313      	orrs	r3, r2
 80043c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043c2:	f7ff faf9 	bl	80039b8 <HAL_GetTick>
 80043c6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	4233      	tst	r3, r6
 80043cc:	d000      	beq.n	80043d0 <HAL_RCC_OscConfig+0x474>
 80043ce:	e616      	b.n	8003ffe <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7ff faf2 	bl	80039b8 <HAL_GetTick>
 80043d4:	1b40      	subs	r0, r0, r5
 80043d6:	2802      	cmp	r0, #2
 80043d8:	d9f6      	bls.n	80043c8 <HAL_RCC_OscConfig+0x46c>
 80043da:	e634      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043dc:	f7ff faec 	bl	80039b8 <HAL_GetTick>
 80043e0:	1b80      	subs	r0, r0, r6
 80043e2:	2802      	cmp	r0, #2
 80043e4:	d9d9      	bls.n	800439a <HAL_RCC_OscConfig+0x43e>
 80043e6:	e62e      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 80043e8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ea:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80043ec:	4013      	ands	r3, r2
 80043ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043f0:	f7ff fae2 	bl	80039b8 <HAL_GetTick>
 80043f4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043f6:	04b6      	lsls	r6, r6, #18
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	4233      	tst	r3, r6
 80043fc:	d100      	bne.n	8004400 <HAL_RCC_OscConfig+0x4a4>
 80043fe:	e5fe      	b.n	8003ffe <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004400:	f7ff fada 	bl	80039b8 <HAL_GetTick>
 8004404:	1b40      	subs	r0, r0, r5
 8004406:	2802      	cmp	r0, #2
 8004408:	d9f6      	bls.n	80043f8 <HAL_RCC_OscConfig+0x49c>
 800440a:	e61c      	b.n	8004046 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 800440c:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440e:	2b01      	cmp	r3, #1
 8004410:	d100      	bne.n	8004414 <HAL_RCC_OscConfig+0x4b8>
 8004412:	e619      	b.n	8004048 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004414:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004416:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004418:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800441a:	0252      	lsls	r2, r2, #9
 800441c:	401a      	ands	r2, r3
 800441e:	428a      	cmp	r2, r1
 8004420:	d000      	beq.n	8004424 <HAL_RCC_OscConfig+0x4c8>
 8004422:	e5fa      	b.n	800401a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004424:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004428:	0392      	lsls	r2, r2, #14
 800442a:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442c:	428a      	cmp	r2, r1
 800442e:	d000      	beq.n	8004432 <HAL_RCC_OscConfig+0x4d6>
 8004430:	e5f3      	b.n	800401a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004432:	22c0      	movs	r2, #192	; 0xc0
 8004434:	0412      	lsls	r2, r2, #16
 8004436:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004438:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800443a:	4293      	cmp	r3, r2
 800443c:	d100      	bne.n	8004440 <HAL_RCC_OscConfig+0x4e4>
 800443e:	e5de      	b.n	8003ffe <HAL_RCC_OscConfig+0xa2>
 8004440:	e5eb      	b.n	800401a <HAL_RCC_OscConfig+0xbe>
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	fffffeff 	.word	0xfffffeff
 8004448:	fffffbff 	.word	0xfffffbff
 800444c:	00001388 	.word	0x00001388
 8004450:	efffffff 	.word	0xefffffff
 8004454:	40010000 	.word	0x40010000
 8004458:	ffffdfff 	.word	0xffffdfff
 800445c:	feffffff 	.word	0xfeffffff
 8004460:	ff02ffff 	.word	0xff02ffff

08004464 <HAL_RCC_ClockConfig>:
{
 8004464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004466:	1e04      	subs	r4, r0, #0
 8004468:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800446c:	2001      	movs	r0, #1
}
 800446e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	2601      	movs	r6, #1
 8004472:	4d5b      	ldr	r5, [pc, #364]	; (80045e0 <HAL_RCC_ClockConfig+0x17c>)
 8004474:	9a01      	ldr	r2, [sp, #4]
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	4033      	ands	r3, r6
 800447a:	4293      	cmp	r3, r2
 800447c:	d331      	bcc.n	80044e2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	0793      	lsls	r3, r2, #30
 8004482:	d443      	bmi.n	800450c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004484:	07d3      	lsls	r3, r2, #31
 8004486:	d449      	bmi.n	800451c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	2601      	movs	r6, #1
 800448a:	682b      	ldr	r3, [r5, #0]
 800448c:	9a01      	ldr	r2, [sp, #4]
 800448e:	4033      	ands	r3, r6
 8004490:	4293      	cmp	r3, r2
 8004492:	d909      	bls.n	80044a8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	43b3      	bics	r3, r6
 8004498:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800449a:	f7ff fa8d 	bl	80039b8 <HAL_GetTick>
 800449e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	4233      	tst	r3, r6
 80044a4:	d000      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x44>
 80044a6:	e08c      	b.n	80045c2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	4d4e      	ldr	r5, [pc, #312]	; (80045e4 <HAL_RCC_ClockConfig+0x180>)
 80044ac:	0753      	lsls	r3, r2, #29
 80044ae:	d500      	bpl.n	80044b2 <HAL_RCC_ClockConfig+0x4e>
 80044b0:	e08f      	b.n	80045d2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b2:	0713      	lsls	r3, r2, #28
 80044b4:	d506      	bpl.n	80044c4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044b6:	68ea      	ldr	r2, [r5, #12]
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	494b      	ldr	r1, [pc, #300]	; (80045e8 <HAL_RCC_ClockConfig+0x184>)
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	400a      	ands	r2, r1
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c4:	f7ff fd02 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 80044c8:	68eb      	ldr	r3, [r5, #12]
 80044ca:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_RCC_ClockConfig+0x188>)
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	0f1b      	lsrs	r3, r3, #28
 80044d0:	5cd3      	ldrb	r3, [r2, r3]
 80044d2:	40d8      	lsrs	r0, r3
 80044d4:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <HAL_RCC_ClockConfig+0x18c>)
 80044d6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80044d8:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <HAL_RCC_ClockConfig+0x190>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	f7ff fa28 	bl	8003930 <HAL_InitTick>
  if(status != HAL_OK)
 80044e0:	e7c5      	b.n	800446e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	682b      	ldr	r3, [r5, #0]
 80044e4:	9a01      	ldr	r2, [sp, #4]
 80044e6:	43b3      	bics	r3, r6
 80044e8:	4313      	orrs	r3, r2
 80044ea:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80044ec:	f7ff fa64 	bl	80039b8 <HAL_GetTick>
 80044f0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	9a01      	ldr	r2, [sp, #4]
 80044f6:	4033      	ands	r3, r6
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d0c0      	beq.n	800447e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fc:	f7ff fa5c 	bl	80039b8 <HAL_GetTick>
 8004500:	4b3d      	ldr	r3, [pc, #244]	; (80045f8 <HAL_RCC_ClockConfig+0x194>)
 8004502:	1bc0      	subs	r0, r0, r7
 8004504:	4298      	cmp	r0, r3
 8004506:	d9f4      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004508:	2003      	movs	r0, #3
 800450a:	e7b0      	b.n	800446e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800450c:	20f0      	movs	r0, #240	; 0xf0
 800450e:	4935      	ldr	r1, [pc, #212]	; (80045e4 <HAL_RCC_ClockConfig+0x180>)
 8004510:	68cb      	ldr	r3, [r1, #12]
 8004512:	4383      	bics	r3, r0
 8004514:	68a0      	ldr	r0, [r4, #8]
 8004516:	4303      	orrs	r3, r0
 8004518:	60cb      	str	r3, [r1, #12]
 800451a:	e7b3      	b.n	8004484 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451c:	4e31      	ldr	r6, [pc, #196]	; (80045e4 <HAL_RCC_ClockConfig+0x180>)
 800451e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004520:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	2a02      	cmp	r2, #2
 8004524:	d118      	bne.n	8004558 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004526:	039b      	lsls	r3, r3, #14
 8004528:	d5a0      	bpl.n	800446c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452a:	2103      	movs	r1, #3
 800452c:	68f3      	ldr	r3, [r6, #12]
 800452e:	438b      	bics	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004534:	f7ff fa40 	bl	80039b8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004538:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800453a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453c:	2b02      	cmp	r3, #2
 800453e:	d118      	bne.n	8004572 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004540:	220c      	movs	r2, #12
 8004542:	68f3      	ldr	r3, [r6, #12]
 8004544:	4013      	ands	r3, r2
 8004546:	2b08      	cmp	r3, #8
 8004548:	d09e      	beq.n	8004488 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454a:	f7ff fa35 	bl	80039b8 <HAL_GetTick>
 800454e:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <HAL_RCC_ClockConfig+0x194>)
 8004550:	1bc0      	subs	r0, r0, r7
 8004552:	4298      	cmp	r0, r3
 8004554:	d9f4      	bls.n	8004540 <HAL_RCC_ClockConfig+0xdc>
 8004556:	e7d7      	b.n	8004508 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004558:	2a03      	cmp	r2, #3
 800455a:	d102      	bne.n	8004562 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	d4e4      	bmi.n	800452a <HAL_RCC_ClockConfig+0xc6>
 8004560:	e784      	b.n	800446c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004562:	2a01      	cmp	r2, #1
 8004564:	d102      	bne.n	800456c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004566:	075b      	lsls	r3, r3, #29
 8004568:	d4df      	bmi.n	800452a <HAL_RCC_ClockConfig+0xc6>
 800456a:	e77f      	b.n	800446c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	d4dc      	bmi.n	800452a <HAL_RCC_ClockConfig+0xc6>
 8004570:	e77c      	b.n	800446c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004572:	2b03      	cmp	r3, #3
 8004574:	d10b      	bne.n	800458e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004576:	220c      	movs	r2, #12
 8004578:	68f3      	ldr	r3, [r6, #12]
 800457a:	4013      	ands	r3, r2
 800457c:	4293      	cmp	r3, r2
 800457e:	d083      	beq.n	8004488 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004580:	f7ff fa1a 	bl	80039b8 <HAL_GetTick>
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <HAL_RCC_ClockConfig+0x194>)
 8004586:	1bc0      	subs	r0, r0, r7
 8004588:	4298      	cmp	r0, r3
 800458a:	d9f4      	bls.n	8004576 <HAL_RCC_ClockConfig+0x112>
 800458c:	e7bc      	b.n	8004508 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800458e:	2b01      	cmp	r3, #1
 8004590:	d011      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004592:	220c      	movs	r2, #12
 8004594:	68f3      	ldr	r3, [r6, #12]
 8004596:	4213      	tst	r3, r2
 8004598:	d100      	bne.n	800459c <HAL_RCC_ClockConfig+0x138>
 800459a:	e775      	b.n	8004488 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7ff fa0c 	bl	80039b8 <HAL_GetTick>
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <HAL_RCC_ClockConfig+0x194>)
 80045a2:	1bc0      	subs	r0, r0, r7
 80045a4:	4298      	cmp	r0, r3
 80045a6:	d9f4      	bls.n	8004592 <HAL_RCC_ClockConfig+0x12e>
 80045a8:	e7ae      	b.n	8004508 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045aa:	f7ff fa05 	bl	80039b8 <HAL_GetTick>
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x194>)
 80045b0:	1bc0      	subs	r0, r0, r7
 80045b2:	4298      	cmp	r0, r3
 80045b4:	d8a8      	bhi.n	8004508 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b6:	220c      	movs	r2, #12
 80045b8:	68f3      	ldr	r3, [r6, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d1f4      	bne.n	80045aa <HAL_RCC_ClockConfig+0x146>
 80045c0:	e762      	b.n	8004488 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c2:	f7ff f9f9 	bl	80039b8 <HAL_GetTick>
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_RCC_ClockConfig+0x194>)
 80045c8:	1bc0      	subs	r0, r0, r7
 80045ca:	4298      	cmp	r0, r3
 80045cc:	d800      	bhi.n	80045d0 <HAL_RCC_ClockConfig+0x16c>
 80045ce:	e767      	b.n	80044a0 <HAL_RCC_ClockConfig+0x3c>
 80045d0:	e79a      	b.n	8004508 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d2:	68eb      	ldr	r3, [r5, #12]
 80045d4:	4909      	ldr	r1, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x198>)
 80045d6:	400b      	ands	r3, r1
 80045d8:	68e1      	ldr	r1, [r4, #12]
 80045da:	430b      	orrs	r3, r1
 80045dc:	60eb      	str	r3, [r5, #12]
 80045de:	e768      	b.n	80044b2 <HAL_RCC_ClockConfig+0x4e>
 80045e0:	40022000 	.word	0x40022000
 80045e4:	40021000 	.word	0x40021000
 80045e8:	ffffc7ff 	.word	0xffffc7ff
 80045ec:	08005368 	.word	0x08005368
 80045f0:	20000000 	.word	0x20000000
 80045f4:	20000008 	.word	0x20000008
 80045f8:	00001388 	.word	0x00001388
 80045fc:	fffff8ff 	.word	0xfffff8ff

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004602:	4a05      	ldr	r2, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	055b      	lsls	r3, r3, #21
 8004608:	0f5b      	lsrs	r3, r3, #29
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	4a03      	ldr	r2, [pc, #12]	; (800461c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800460e:	6810      	ldr	r0, [r2, #0]
 8004610:	40d8      	lsrs	r0, r3
}
 8004612:	4770      	bx	lr
 8004614:	40021000 	.word	0x40021000
 8004618:	08005378 	.word	0x08005378
 800461c:	20000000 	.word	0x20000000

08004620 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	049b      	lsls	r3, r3, #18
 8004628:	0f5b      	lsrs	r3, r3, #29
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800462e:	6810      	ldr	r0, [r2, #0]
 8004630:	40d8      	lsrs	r0, r3
}
 8004632:	4770      	bx	lr
 8004634:	40021000 	.word	0x40021000
 8004638:	08005378 	.word	0x08005378
 800463c:	20000000 	.word	0x20000000

08004640 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004640:	2382      	movs	r3, #130	; 0x82
{
 8004642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004644:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004646:	011b      	lsls	r3, r3, #4
{
 8004648:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800464a:	421a      	tst	r2, r3
 800464c:	d047      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x9e>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004650:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4c60      	ldr	r4, [pc, #384]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004654:	055b      	lsls	r3, r3, #21
 8004656:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004658:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	421a      	tst	r2, r3
 800465c:	d104      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004660:	4313      	orrs	r3, r2
 8004662:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004664:	2301      	movs	r3, #1
 8004666:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004668:	2780      	movs	r7, #128	; 0x80
 800466a:	4e5b      	ldr	r6, [pc, #364]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800466c:	007f      	lsls	r7, r7, #1
 800466e:	6833      	ldr	r3, [r6, #0]
 8004670:	423b      	tst	r3, r7
 8004672:	d06d      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004674:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004676:	21c0      	movs	r1, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004678:	001e      	movs	r6, r3
 800467a:	22c0      	movs	r2, #192	; 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800467c:	6820      	ldr	r0, [r4, #0]
 800467e:	0389      	lsls	r1, r1, #14
 8004680:	4008      	ands	r0, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004682:	400e      	ands	r6, r1
 8004684:	0292      	lsls	r2, r2, #10
 8004686:	4286      	cmp	r6, r0
 8004688:	d103      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x52>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800468a:	68a8      	ldr	r0, [r5, #8]
 800468c:	4001      	ands	r1, r0
 800468e:	42b1      	cmp	r1, r6
 8004690:	d007      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004692:	0019      	movs	r1, r3
 8004694:	4011      	ands	r1, r2
 8004696:	4291      	cmp	r1, r2
 8004698:	d103      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800469a:	6821      	ldr	r1, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800469c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800469e:	0389      	lsls	r1, r1, #14
 80046a0:	d466      	bmi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80046a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80046a4:	0008      	movs	r0, r1
 80046a6:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046a8:	4211      	tst	r1, r2
 80046aa:	d162      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ac:	6869      	ldr	r1, [r5, #4]
 80046ae:	23c0      	movs	r3, #192	; 0xc0
 80046b0:	000a      	movs	r2, r1
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	401a      	ands	r2, r3
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d107      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	4847      	ldr	r0, [pc, #284]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80046be:	4003      	ands	r3, r0
 80046c0:	20c0      	movs	r0, #192	; 0xc0
 80046c2:	0380      	lsls	r0, r0, #14
 80046c4:	4001      	ands	r1, r0
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80046cc:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046ce:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d0:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d103      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046d8:	4a41      	ldr	r2, [pc, #260]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80046da:	4013      	ands	r3, r2
 80046dc:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046de:	682b      	ldr	r3, [r5, #0]
 80046e0:	07da      	lsls	r2, r3, #31
 80046e2:	d506      	bpl.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e4:	2003      	movs	r0, #3
 80046e6:	493b      	ldr	r1, [pc, #236]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80046e8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80046ea:	4382      	bics	r2, r0
 80046ec:	68e8      	ldr	r0, [r5, #12]
 80046ee:	4302      	orrs	r2, r0
 80046f0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f2:	079a      	lsls	r2, r3, #30
 80046f4:	d506      	bpl.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f6:	200c      	movs	r0, #12
 80046f8:	4936      	ldr	r1, [pc, #216]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80046fa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80046fc:	4382      	bics	r2, r0
 80046fe:	6928      	ldr	r0, [r5, #16]
 8004700:	4302      	orrs	r2, r0
 8004702:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004704:	075a      	lsls	r2, r3, #29
 8004706:	d506      	bpl.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004708:	4932      	ldr	r1, [pc, #200]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800470a:	4836      	ldr	r0, [pc, #216]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800470c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800470e:	4002      	ands	r2, r0
 8004710:	6968      	ldr	r0, [r5, #20]
 8004712:	4302      	orrs	r2, r0
 8004714:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004716:	071a      	lsls	r2, r3, #28
 8004718:	d506      	bpl.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800471a:	492e      	ldr	r1, [pc, #184]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800471c:	4832      	ldr	r0, [pc, #200]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800471e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004720:	4002      	ands	r2, r0
 8004722:	69a8      	ldr	r0, [r5, #24]
 8004724:	4302      	orrs	r2, r0
 8004726:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004728:	065a      	lsls	r2, r3, #25
 800472a:	d506      	bpl.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800472c:	4929      	ldr	r1, [pc, #164]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800472e:	482f      	ldr	r0, [pc, #188]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004730:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004732:	4002      	ands	r2, r0
 8004734:	6a28      	ldr	r0, [r5, #32]
 8004736:	4302      	orrs	r2, r0
 8004738:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800473a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	d517      	bpl.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004740:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004742:	492b      	ldr	r1, [pc, #172]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004744:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004746:	400b      	ands	r3, r1
 8004748:	69e9      	ldr	r1, [r5, #28]
 800474a:	430b      	orrs	r3, r1
 800474c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800474e:	e00f      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	433b      	orrs	r3, r7
 8004754:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004756:	f7ff f92f 	bl	80039b8 <HAL_GetTick>
 800475a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	423b      	tst	r3, r7
 8004760:	d188      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004762:	f7ff f929 	bl	80039b8 <HAL_GetTick>
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	1ac0      	subs	r0, r0, r3
 800476a:	2864      	cmp	r0, #100	; 0x64
 800476c:	d9f6      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 800476e:	2003      	movs	r0, #3
}
 8004770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004772:	6829      	ldr	r1, [r5, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004774:	4013      	ands	r3, r2
 8004776:	4298      	cmp	r0, r3
 8004778:	d001      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800477a:	068b      	lsls	r3, r1, #26
 800477c:	d409      	bmi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x152>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800477e:	23c0      	movs	r3, #192	; 0xc0
 8004780:	68aa      	ldr	r2, [r5, #8]
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	4013      	ands	r3, r2
 8004786:	4283      	cmp	r3, r0
 8004788:	d100      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800478a:	e78f      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800478c:	050b      	lsls	r3, r1, #20
 800478e:	d400      	bmi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004790:	e78c      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004792:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004794:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004796:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004798:	0312      	lsls	r2, r2, #12
 800479a:	4302      	orrs	r2, r0
 800479c:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800479e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a2:	4815      	ldr	r0, [pc, #84]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80047a4:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a6:	4002      	ands	r2, r0
 80047a8:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80047aa:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80047ac:	05cb      	lsls	r3, r1, #23
 80047ae:	d400      	bmi.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80047b0:	e77c      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 80047b2:	f7ff f901 	bl	80039b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047b6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80047b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ba:	00bf      	lsls	r7, r7, #2
 80047bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047be:	423b      	tst	r3, r7
 80047c0:	d000      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x184>
 80047c2:	e773      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7ff f8f8 	bl	80039b8 <HAL_GetTick>
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ca:	1b80      	subs	r0, r0, r6
 80047cc:	4298      	cmp	r0, r3
 80047ce:	d9f5      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047d0:	e7cd      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40007000 	.word	0x40007000
 80047dc:	ffcfffff 	.word	0xffcfffff
 80047e0:	efffffff 	.word	0xefffffff
 80047e4:	fffff3ff 	.word	0xfffff3ff
 80047e8:	ffffcfff 	.word	0xffffcfff
 80047ec:	fbffffff 	.word	0xfbffffff
 80047f0:	fff3ffff 	.word	0xfff3ffff
 80047f4:	fffcffff 	.word	0xfffcffff
 80047f8:	fff7ffff 	.word	0xfff7ffff
 80047fc:	00001388 	.word	0x00001388

08004800 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	001d      	movs	r5, r3
 8004804:	0017      	movs	r7, r2
 8004806:	b085      	sub	sp, #20
 8004808:	000e      	movs	r6, r1
 800480a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800480c:	f7ff f8d4 	bl	80039b8 <HAL_GetTick>
 8004810:	19ed      	adds	r5, r5, r7
 8004812:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004814:	f7ff f8d0 	bl	80039b8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800481a:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	015b      	lsls	r3, r3, #5
 8004820:	0d1b      	lsrs	r3, r3, #20
 8004822:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004824:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004826:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004828:	6893      	ldr	r3, [r2, #8]
 800482a:	4033      	ands	r3, r6
 800482c:	429e      	cmp	r6, r3
 800482e:	d001      	beq.n	8004834 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004830:	2000      	movs	r0, #0
 8004832:	e032      	b.n	800489a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8004834:	1c7b      	adds	r3, r7, #1
 8004836:	d0f7      	beq.n	8004828 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004838:	f7ff f8be 	bl	80039b8 <HAL_GetTick>
 800483c:	9b01      	ldr	r3, [sp, #4]
 800483e:	1ac0      	subs	r0, r0, r3
 8004840:	42a8      	cmp	r0, r5
 8004842:	d32c      	bcc.n	800489e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004844:	21e0      	movs	r1, #224	; 0xe0
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	438a      	bics	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484e:	2282      	movs	r2, #130	; 0x82
 8004850:	6861      	ldr	r1, [r4, #4]
 8004852:	0052      	lsls	r2, r2, #1
 8004854:	4291      	cmp	r1, r2
 8004856:	d10c      	bne.n	8004872 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	68a2      	ldr	r2, [r4, #8]
 800485c:	0209      	lsls	r1, r1, #8
 800485e:	428a      	cmp	r2, r1
 8004860:	d003      	beq.n	800486a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	00c9      	lsls	r1, r1, #3
 8004866:	428a      	cmp	r2, r1
 8004868:	d103      	bne.n	8004872 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 800486a:	2140      	movs	r1, #64	; 0x40
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	438a      	bics	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004876:	0189      	lsls	r1, r1, #6
 8004878:	428a      	cmp	r2, r1
 800487a:	d106      	bne.n	800488a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	480d      	ldr	r0, [pc, #52]	; (80048b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004880:	4001      	ands	r1, r0
 8004882:	6019      	str	r1, [r3, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800488a:	0023      	movs	r3, r4
 800488c:	2201      	movs	r2, #1
 800488e:	3351      	adds	r3, #81	; 0x51
 8004890:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004892:	2300      	movs	r3, #0
 8004894:	2003      	movs	r0, #3
 8004896:	3450      	adds	r4, #80	; 0x50
 8004898:	7023      	strb	r3, [r4, #0]
}
 800489a:	b005      	add	sp, #20
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800489e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80048a0:	1e5a      	subs	r2, r3, #1
 80048a2:	4193      	sbcs	r3, r2
 80048a4:	425b      	negs	r3, r3
 80048a6:	401d      	ands	r5, r3
      count--;
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	e7ba      	b.n	8004824 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	20000000 	.word	0x20000000
 80048b4:	ffffdfff 	.word	0xffffdfff

080048b8 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048b8:	4b16      	ldr	r3, [pc, #88]	; (8004914 <SPI_EndRxTxTransaction+0x5c>)
{
 80048ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048bc:	0004      	movs	r4, r0
 80048be:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	4915      	ldr	r1, [pc, #84]	; (8004918 <SPI_EndRxTxTransaction+0x60>)
{
 80048c4:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048c6:	f7fb fc33 	bl	8000130 <__udivsi3>
 80048ca:	23fa      	movs	r3, #250	; 0xfa
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4343      	muls	r3, r0
 80048d0:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d2:	2382      	movs	r3, #130	; 0x82
 80048d4:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048d6:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4299      	cmp	r1, r3
 80048dc:	d10d      	bne.n	80048fa <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048de:	0033      	movs	r3, r6
 80048e0:	002a      	movs	r2, r5
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	0020      	movs	r0, r4
 80048e6:	f7ff ff8b 	bl	8004800 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d00f      	beq.n	800490e <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ee:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80048f0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80048f4:	4313      	orrs	r3, r2
 80048f6:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 80048f8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 80048fa:	9b01      	ldr	r3, [sp, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <SPI_EndRxTxTransaction+0x56>
      count--;
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	3b01      	subs	r3, #1
 8004904:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4213      	tst	r3, r2
 800490c:	d1f5      	bne.n	80048fa <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 800490e:	2000      	movs	r0, #0
 8004910:	e7f2      	b.n	80048f8 <SPI_EndRxTxTransaction+0x40>
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	20000000 	.word	0x20000000
 8004918:	016e3600 	.word	0x016e3600

0800491c <HAL_SPI_Init>:
{
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004922:	2c00      	cmp	r4, #0
 8004924:	d054      	beq.n	80049d0 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d152      	bne.n	80049d2 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492c:	2282      	movs	r2, #130	; 0x82
 800492e:	6861      	ldr	r1, [r4, #4]
 8004930:	0052      	lsls	r2, r2, #1
 8004932:	4291      	cmp	r1, r2
 8004934:	d000      	beq.n	8004938 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004936:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004938:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800493a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800493c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800493e:	3551      	adds	r5, #81	; 0x51
 8004940:	782b      	ldrb	r3, [r5, #0]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8004948:	0023      	movs	r3, r4
 800494a:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 800494c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800494e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004950:	f7fe ff1a 	bl	8003788 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004954:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8004956:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004958:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800495a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800495c:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800495e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004960:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004962:	4393      	bics	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004966:	2382      	movs	r3, #130	; 0x82
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4033      	ands	r3, r6
 800496c:	2684      	movs	r6, #132	; 0x84
 800496e:	0236      	lsls	r6, r6, #8
 8004970:	403e      	ands	r6, r7
 8004972:	4333      	orrs	r3, r6
 8004974:	2680      	movs	r6, #128	; 0x80
 8004976:	68e7      	ldr	r7, [r4, #12]
 8004978:	0136      	lsls	r6, r6, #4
 800497a:	403e      	ands	r6, r7
 800497c:	4333      	orrs	r3, r6
 800497e:	6926      	ldr	r6, [r4, #16]
 8004980:	69a2      	ldr	r2, [r4, #24]
 8004982:	4030      	ands	r0, r6
 8004984:	2601      	movs	r6, #1
 8004986:	4303      	orrs	r3, r0
 8004988:	6960      	ldr	r0, [r4, #20]
 800498a:	69e7      	ldr	r7, [r4, #28]
 800498c:	4030      	ands	r0, r6
 800498e:	4303      	orrs	r3, r0
 8004990:	2080      	movs	r0, #128	; 0x80
 8004992:	0080      	lsls	r0, r0, #2
 8004994:	4010      	ands	r0, r2
 8004996:	4303      	orrs	r3, r0
 8004998:	2038      	movs	r0, #56	; 0x38
 800499a:	4038      	ands	r0, r7
 800499c:	4303      	orrs	r3, r0
 800499e:	2080      	movs	r0, #128	; 0x80
 80049a0:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049a2:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a4:	4038      	ands	r0, r7
 80049a6:	4303      	orrs	r3, r0
 80049a8:	2080      	movs	r0, #128	; 0x80
 80049aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80049ac:	0180      	lsls	r0, r0, #6
 80049ae:	4038      	ands	r0, r7
 80049b0:	4303      	orrs	r3, r0
 80049b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049b4:	2304      	movs	r3, #4
 80049b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049b8:	401a      	ands	r2, r3
 80049ba:	330c      	adds	r3, #12
 80049bc:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049be:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049c0:	431a      	orrs	r2, r3
 80049c2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049c4:	69cb      	ldr	r3, [r1, #28]
 80049c6:	4a05      	ldr	r2, [pc, #20]	; (80049dc <HAL_SPI_Init+0xc0>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049cc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049ce:	702e      	strb	r6, [r5, #0]
}
 80049d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d2:	2300      	movs	r3, #0
 80049d4:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049d6:	6163      	str	r3, [r4, #20]
 80049d8:	e7ae      	b.n	8004938 <HAL_SPI_Init+0x1c>
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	fffff7ff 	.word	0xfffff7ff

080049e0 <HAL_SPI_TransmitReceive>:
{
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80049e4:	0003      	movs	r3, r0
 80049e6:	3350      	adds	r3, #80	; 0x50
{
 80049e8:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80049ea:	781a      	ldrb	r2, [r3, #0]
{
 80049ec:	0004      	movs	r4, r0
 80049ee:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80049f0:	2002      	movs	r0, #2
{
 80049f2:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80049f4:	2a01      	cmp	r2, #1
 80049f6:	d100      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x1a>
 80049f8:	e092      	b.n	8004b20 <HAL_SPI_TransmitReceive+0x140>
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80049fe:	f7fe ffdb 	bl	80039b8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004a02:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004a04:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8004a06:	3351      	adds	r3, #81	; 0x51
 8004a08:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004a0a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004a0c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d00a      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x48>
 8004a12:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8004a14:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	d000      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x3e>
 8004a1c:	e079      	b.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d176      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
 8004a24:	2a04      	cmp	r2, #4
 8004a26:	d174      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8004a28:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	d071      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
 8004a2e:	2f00      	cmp	r7, #0
 8004a30:	d06f      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d06d      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a36:	0023      	movs	r3, r4
 8004a38:	3351      	adds	r3, #81	; 0x51
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	2a04      	cmp	r2, #4
 8004a3e:	d001      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a40:	2205      	movs	r2, #5
 8004a42:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a44:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a46:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a48:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004a4a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a4c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a4e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8004a50:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004a52:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a54:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a56:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a58:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a5a:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a5c:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a5e:	4210      	tst	r0, r2
 8004a60:	d102      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	4302      	orrs	r2, r0
 8004a66:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a68:	2280      	movs	r2, #128	; 0x80
 8004a6a:	68e0      	ldr	r0, [r4, #12]
 8004a6c:	0112      	lsls	r2, r2, #4
 8004a6e:	4290      	cmp	r0, r2
 8004a70:	d158      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a72:	2900      	cmp	r1, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x9a>
 8004a76:	2e01      	cmp	r6, #1
 8004a78:	d107      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004a80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a82:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004a8a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a8c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a8e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10e      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0xd4>
 8004a96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a9c:	0020      	movs	r0, r4
 8004a9e:	9a01      	ldr	r2, [sp, #4]
 8004aa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004aa2:	f7ff ff09 	bl	80048b8 <SPI_EndRxTxTransaction>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d100      	bne.n	8004aac <HAL_SPI_TransmitReceive+0xcc>
 8004aaa:	e083      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aac:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8004aae:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab0:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8004ab2:	e02e      	b.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab4:	6821      	ldr	r1, [r4, #0]
 8004ab6:	688b      	ldr	r3, [r1, #8]
 8004ab8:	423b      	tst	r3, r7
 8004aba:	d00e      	beq.n	8004ada <HAL_SPI_TransmitReceive+0xfa>
 8004abc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_SPI_TransmitReceive+0xfa>
 8004ac2:	2d01      	cmp	r5, #1
 8004ac4:	d109      	bne.n	8004ada <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8004ac6:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aca:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ace:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ad2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ada:	688b      	ldr	r3, [r1, #8]
 8004adc:	001a      	movs	r2, r3
 8004ade:	4032      	ands	r2, r6
 8004ae0:	4233      	tst	r3, r6
 8004ae2:	d00c      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x11e>
 8004ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8004aea:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aec:	68c9      	ldr	r1, [r1, #12]
 8004aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004af0:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af2:	3302      	adds	r3, #2
 8004af4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004af6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004afe:	f7fe ff5b 	bl	80039b8 <HAL_GetTick>
 8004b02:	9b01      	ldr	r3, [sp, #4]
 8004b04:	1ac0      	subs	r0, r0, r3
 8004b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b08:	4298      	cmp	r0, r3
 8004b0a:	d3c1      	bcc.n	8004a90 <HAL_SPI_TransmitReceive+0xb0>
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	d0bf      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8004b10:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004b12:	0023      	movs	r3, r4
 8004b14:	2201      	movs	r2, #1
 8004b16:	3351      	adds	r3, #81	; 0x51
 8004b18:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	3450      	adds	r4, #80	; 0x50
 8004b1e:	7023      	strb	r3, [r4, #0]
}
 8004b20:	b005      	add	sp, #20
 8004b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b24:	2900      	cmp	r1, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x14c>
 8004b28:	2e01      	cmp	r6, #1
 8004b2a:	d108      	bne.n	8004b3e <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b2c:	782a      	ldrb	r2, [r5, #0]
 8004b2e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b32:	3301      	adds	r3, #1
 8004b34:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004b3e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b40:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b42:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x170>
 8004b4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0a5      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	423a      	tst	r2, r7
 8004b56:	d00f      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x198>
 8004b58:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x198>
 8004b5e:	2d01      	cmp	r5, #1
 8004b60:	d10a      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8004b62:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004b6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	6899      	ldr	r1, [r3, #8]
 8004b7c:	000a      	movs	r2, r1
 8004b7e:	4032      	ands	r2, r6
 8004b80:	4231      	tst	r1, r6
 8004b82:	d00d      	beq.n	8004ba0 <HAL_SPI_TransmitReceive+0x1c0>
 8004b84:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8004b8a:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b90:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8004b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b94:	3301      	adds	r3, #1
 8004b96:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004b98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ba0:	f7fe ff0a 	bl	80039b8 <HAL_GetTick>
 8004ba4:	9b01      	ldr	r3, [sp, #4]
 8004ba6:	1ac0      	subs	r0, r0, r3
 8004ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004baa:	4298      	cmp	r0, r3
 8004bac:	d3ca      	bcc.n	8004b44 <HAL_SPI_TransmitReceive+0x164>
 8004bae:	3301      	adds	r3, #1
 8004bb0:	d0c8      	beq.n	8004b44 <HAL_SPI_TransmitReceive+0x164>
 8004bb2:	e7ad      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bb4:	68a3      	ldr	r3, [r4, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ab      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	9003      	str	r0, [sp, #12]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	9203      	str	r2, [sp, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	9303      	str	r3, [sp, #12]
 8004bc6:	9b03      	ldr	r3, [sp, #12]
 8004bc8:	e7a3      	b.n	8004b12 <HAL_SPI_TransmitReceive+0x132>
	...

08004bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd0:	6925      	ldr	r5, [r4, #16]
 8004bd2:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bd4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd6:	4329      	orrs	r1, r5
 8004bd8:	6965      	ldr	r5, [r4, #20]
 8004bda:	69c3      	ldr	r3, [r0, #28]
 8004bdc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bde:	6810      	ldr	r0, [r2, #0]
 8004be0:	4d72      	ldr	r5, [pc, #456]	; (8004dac <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be4:	4028      	ands	r0, r5
 8004be6:	4301      	orrs	r1, r0
 8004be8:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bea:	6851      	ldr	r1, [r2, #4]
 8004bec:	4870      	ldr	r0, [pc, #448]	; (8004db0 <UART_SetConfig+0x1e4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bee:	4d71      	ldr	r5, [pc, #452]	; (8004db4 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf0:	4001      	ands	r1, r0
 8004bf2:	68e0      	ldr	r0, [r4, #12]
 8004bf4:	4301      	orrs	r1, r0
 8004bf6:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bf8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bfa:	42aa      	cmp	r2, r5
 8004bfc:	d001      	beq.n	8004c02 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bfe:	6a21      	ldr	r1, [r4, #32]
 8004c00:	4308      	orrs	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c02:	6891      	ldr	r1, [r2, #8]
 8004c04:	4e6c      	ldr	r6, [pc, #432]	; (8004db8 <UART_SetConfig+0x1ec>)
 8004c06:	4031      	ands	r1, r6
 8004c08:	4301      	orrs	r1, r0
 8004c0a:	6091      	str	r1, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0c:	496b      	ldr	r1, [pc, #428]	; (8004dbc <UART_SetConfig+0x1f0>)
 8004c0e:	428a      	cmp	r2, r1
 8004c10:	d10f      	bne.n	8004c32 <UART_SetConfig+0x66>
 8004c12:	2103      	movs	r1, #3
 8004c14:	4a6a      	ldr	r2, [pc, #424]	; (8004dc0 <UART_SetConfig+0x1f4>)
 8004c16:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c18:	400a      	ands	r2, r1
 8004c1a:	3a01      	subs	r2, #1
 8004c1c:	4969      	ldr	r1, [pc, #420]	; (8004dc4 <UART_SetConfig+0x1f8>)
 8004c1e:	2a02      	cmp	r2, #2
 8004c20:	d90f      	bls.n	8004c42 <UART_SetConfig+0x76>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	0212      	lsls	r2, r2, #8
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d100      	bne.n	8004c2c <UART_SetConfig+0x60>
 8004c2a:	e069      	b.n	8004d00 <UART_SetConfig+0x134>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7ff fcf8 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
        break;
 8004c30:	e09c      	b.n	8004d6c <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c32:	4965      	ldr	r1, [pc, #404]	; (8004dc8 <UART_SetConfig+0x1fc>)
 8004c34:	428a      	cmp	r2, r1
 8004c36:	d113      	bne.n	8004c60 <UART_SetConfig+0x94>
 8004c38:	210c      	movs	r1, #12
 8004c3a:	4a61      	ldr	r2, [pc, #388]	; (8004dc0 <UART_SetConfig+0x1f4>)
 8004c3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c3e:	400a      	ands	r2, r1
 8004c40:	4962      	ldr	r1, [pc, #392]	; (8004dcc <UART_SetConfig+0x200>)
 8004c42:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c44:	2280      	movs	r2, #128	; 0x80
 8004c46:	0212      	lsls	r2, r2, #8
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d000      	beq.n	8004c4e <UART_SetConfig+0x82>
 8004c4c:	e07f      	b.n	8004d4e <UART_SetConfig+0x182>
    switch (clocksource)
 8004c4e:	2808      	cmp	r0, #8
 8004c50:	d818      	bhi.n	8004c84 <UART_SetConfig+0xb8>
 8004c52:	f7fb fa59 	bl	8000108 <__gnu_thumb1_case_uqi>
 8004c56:	5550      	.short	0x5550
 8004c58:	17791758 	.word	0x17791758
 8004c5c:	1717      	.short	0x1717
 8004c5e:	63          	.byte	0x63
 8004c5f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c60:	42aa      	cmp	r2, r5
 8004c62:	d10f      	bne.n	8004c84 <UART_SetConfig+0xb8>
 8004c64:	21c0      	movs	r1, #192	; 0xc0
 8004c66:	2080      	movs	r0, #128	; 0x80
 8004c68:	4a55      	ldr	r2, [pc, #340]	; (8004dc0 <UART_SetConfig+0x1f4>)
 8004c6a:	0109      	lsls	r1, r1, #4
 8004c6c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004c6e:	0100      	lsls	r0, r0, #4
 8004c70:	400b      	ands	r3, r1
 8004c72:	4283      	cmp	r3, r0
 8004c74:	d016      	beq.n	8004ca4 <UART_SetConfig+0xd8>
 8004c76:	d807      	bhi.n	8004c88 <UART_SetConfig+0xbc>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_SetConfig+0xc6>
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	00d2      	lsls	r2, r2, #3
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d035      	beq.n	8004cf0 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c84:	2001      	movs	r0, #1
 8004c86:	e009      	b.n	8004c9c <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c88:	428b      	cmp	r3, r1
 8004c8a:	d1fb      	bne.n	8004c84 <UART_SetConfig+0xb8>
 8004c8c:	2080      	movs	r0, #128	; 0x80
 8004c8e:	0200      	lsls	r0, r0, #8
 8004c90:	e012      	b.n	8004cb8 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c92:	f7ff fcb5 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d10e      	bne.n	8004cb8 <UART_SetConfig+0xec>
 8004c9a:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8004ca0:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8004ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	6810      	ldr	r0, [r2, #0]
 8004ca8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004caa:	4243      	negs	r3, r0
 8004cac:	4158      	adcs	r0, r3
 8004cae:	4b48      	ldr	r3, [pc, #288]	; (8004dd0 <UART_SetConfig+0x204>)
 8004cb0:	4240      	negs	r0, r0
 8004cb2:	4018      	ands	r0, r3
 8004cb4:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <UART_SetConfig+0x208>)
 8004cb6:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb8:	2203      	movs	r2, #3
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	435a      	muls	r2, r3
 8004cbe:	4282      	cmp	r2, r0
 8004cc0:	d8e0      	bhi.n	8004c84 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cc2:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cc4:	4282      	cmp	r2, r0
 8004cc6:	d3dd      	bcc.n	8004c84 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cc8:	2700      	movs	r7, #0
 8004cca:	0e02      	lsrs	r2, r0, #24
 8004ccc:	0201      	lsls	r1, r0, #8
 8004cce:	085e      	lsrs	r6, r3, #1
 8004cd0:	1989      	adds	r1, r1, r6
 8004cd2:	417a      	adcs	r2, r7
 8004cd4:	0008      	movs	r0, r1
 8004cd6:	0011      	movs	r1, r2
 8004cd8:	001a      	movs	r2, r3
 8004cda:	003b      	movs	r3, r7
 8004cdc:	f7fb fbdc 	bl	8000498 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ce0:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <UART_SetConfig+0x20c>)
 8004ce2:	18c2      	adds	r2, r0, r3
 8004ce4:	4b3d      	ldr	r3, [pc, #244]	; (8004ddc <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d8cc      	bhi.n	8004c84 <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	60d8      	str	r0, [r3, #12]
 8004cee:	e7d4      	b.n	8004c9a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf0:	f7ff f8ec 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
        break;
 8004cf4:	e7cf      	b.n	8004c96 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf6:	f7ff fc83 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfa:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8004cfc:	d0cd      	beq.n	8004c9a <UART_SetConfig+0xce>
 8004cfe:	e00d      	b.n	8004d1c <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7ff fc8e 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8004d04:	e7f9      	b.n	8004cfa <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d08:	4a32      	ldr	r2, [pc, #200]	; (8004dd4 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d10:	4243      	negs	r3, r0
 8004d12:	4158      	adcs	r0, r3
 8004d14:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <UART_SetConfig+0x204>)
 8004d16:	4240      	negs	r0, r0
 8004d18:	4003      	ands	r3, r0
 8004d1a:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1c:	0058      	lsls	r0, r3, #1
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	6861      	ldr	r1, [r4, #4]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	18c0      	adds	r0, r0, r3
 8004d26:	f7fb fa03 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2a:	492d      	ldr	r1, [pc, #180]	; (8004de0 <UART_SetConfig+0x214>)
 8004d2c:	b282      	uxth	r2, r0
 8004d2e:	3a10      	subs	r2, #16
 8004d30:	0403      	lsls	r3, r0, #16
 8004d32:	428a      	cmp	r2, r1
 8004d34:	d8a6      	bhi.n	8004c84 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d36:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d38:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d3a:	4390      	bics	r0, r2
 8004d3c:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8004d3e:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d40:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8004d42:	4318      	orrs	r0, r3
 8004d44:	60d0      	str	r0, [r2, #12]
 8004d46:	e7a8      	b.n	8004c9a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d48:	f7ff f8c0 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8004d4c:	e7d5      	b.n	8004cfa <UART_SetConfig+0x12e>
    switch (clocksource)
 8004d4e:	2808      	cmp	r0, #8
 8004d50:	d898      	bhi.n	8004c84 <UART_SetConfig+0xb8>
 8004d52:	f7fb f9e3 	bl	800011c <__gnu_thumb1_case_shi>
 8004d56:	0009      	.short	0x0009
 8004d58:	000fff6b 	.word	0x000fff6b
 8004d5c:	0025ff97 	.word	0x0025ff97
 8004d60:	ff97ff97 	.word	0xff97ff97
 8004d64:	0028ff97 	.word	0x0028ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d68:	f7ff fc4a 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d100      	bne.n	8004d72 <UART_SetConfig+0x1a6>
 8004d70:	e793      	b.n	8004c9a <UART_SetConfig+0xce>
 8004d72:	e00a      	b.n	8004d8a <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <UART_SetConfig+0x1f4>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	2310      	movs	r3, #16
 8004d7a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d7c:	4243      	negs	r3, r0
 8004d7e:	4158      	adcs	r0, r3
 8004d80:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <UART_SetConfig+0x204>)
 8004d82:	4240      	negs	r0, r0
 8004d84:	4018      	ands	r0, r3
 8004d86:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <UART_SetConfig+0x208>)
 8004d88:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d8a:	6863      	ldr	r3, [r4, #4]
 8004d8c:	6861      	ldr	r1, [r4, #4]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	1818      	adds	r0, r3, r0
 8004d92:	f7fb f9cd 	bl	8000130 <__udivsi3>
 8004d96:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d98:	0002      	movs	r2, r0
 8004d9a:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <UART_SetConfig+0x214>)
 8004d9c:	3a10      	subs	r2, #16
 8004d9e:	e7a2      	b.n	8004ce6 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8004da0:	f7ff f894 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
        break;
 8004da4:	e7e2      	b.n	8004d6c <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da6:	2080      	movs	r0, #128	; 0x80
 8004da8:	0200      	lsls	r0, r0, #8
 8004daa:	e7ee      	b.n	8004d8a <UART_SetConfig+0x1be>
 8004dac:	efff69f3 	.word	0xefff69f3
 8004db0:	ffffcfff 	.word	0xffffcfff
 8004db4:	40004800 	.word	0x40004800
 8004db8:	fffff4ff 	.word	0xfffff4ff
 8004dbc:	40013800 	.word	0x40013800
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	08005389 	.word	0x08005389
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	0800538c 	.word	0x0800538c
 8004dd0:	00b71b00 	.word	0x00b71b00
 8004dd4:	003d0900 	.word	0x003d0900
 8004dd8:	fffffd00 	.word	0xfffffd00
 8004ddc:	000ffcff 	.word	0x000ffcff
 8004de0:	0000ffef 	.word	0x0000ffef

08004de4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004de4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004de6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004de8:	07da      	lsls	r2, r3, #31
 8004dea:	d506      	bpl.n	8004dfa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dec:	6801      	ldr	r1, [r0, #0]
 8004dee:	4c28      	ldr	r4, [pc, #160]	; (8004e90 <UART_AdvFeatureConfig+0xac>)
 8004df0:	684a      	ldr	r2, [r1, #4]
 8004df2:	4022      	ands	r2, r4
 8004df4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004df6:	4322      	orrs	r2, r4
 8004df8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dfa:	079a      	lsls	r2, r3, #30
 8004dfc:	d506      	bpl.n	8004e0c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dfe:	6801      	ldr	r1, [r0, #0]
 8004e00:	4c24      	ldr	r4, [pc, #144]	; (8004e94 <UART_AdvFeatureConfig+0xb0>)
 8004e02:	684a      	ldr	r2, [r1, #4]
 8004e04:	4022      	ands	r2, r4
 8004e06:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004e08:	4322      	orrs	r2, r4
 8004e0a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e0c:	075a      	lsls	r2, r3, #29
 8004e0e:	d506      	bpl.n	8004e1e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e10:	6801      	ldr	r1, [r0, #0]
 8004e12:	4c21      	ldr	r4, [pc, #132]	; (8004e98 <UART_AdvFeatureConfig+0xb4>)
 8004e14:	684a      	ldr	r2, [r1, #4]
 8004e16:	4022      	ands	r2, r4
 8004e18:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004e1a:	4322      	orrs	r2, r4
 8004e1c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e1e:	071a      	lsls	r2, r3, #28
 8004e20:	d506      	bpl.n	8004e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e22:	6801      	ldr	r1, [r0, #0]
 8004e24:	4c1d      	ldr	r4, [pc, #116]	; (8004e9c <UART_AdvFeatureConfig+0xb8>)
 8004e26:	684a      	ldr	r2, [r1, #4]
 8004e28:	4022      	ands	r2, r4
 8004e2a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004e2c:	4322      	orrs	r2, r4
 8004e2e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e30:	06da      	lsls	r2, r3, #27
 8004e32:	d506      	bpl.n	8004e42 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e34:	6801      	ldr	r1, [r0, #0]
 8004e36:	4c1a      	ldr	r4, [pc, #104]	; (8004ea0 <UART_AdvFeatureConfig+0xbc>)
 8004e38:	688a      	ldr	r2, [r1, #8]
 8004e3a:	4022      	ands	r2, r4
 8004e3c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004e3e:	4322      	orrs	r2, r4
 8004e40:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e42:	069a      	lsls	r2, r3, #26
 8004e44:	d506      	bpl.n	8004e54 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e46:	6801      	ldr	r1, [r0, #0]
 8004e48:	4c16      	ldr	r4, [pc, #88]	; (8004ea4 <UART_AdvFeatureConfig+0xc0>)
 8004e4a:	688a      	ldr	r2, [r1, #8]
 8004e4c:	4022      	ands	r2, r4
 8004e4e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004e50:	4322      	orrs	r2, r4
 8004e52:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e54:	065a      	lsls	r2, r3, #25
 8004e56:	d510      	bpl.n	8004e7a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e58:	6801      	ldr	r1, [r0, #0]
 8004e5a:	4d13      	ldr	r5, [pc, #76]	; (8004ea8 <UART_AdvFeatureConfig+0xc4>)
 8004e5c:	684a      	ldr	r2, [r1, #4]
 8004e5e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004e60:	402a      	ands	r2, r5
 8004e62:	4322      	orrs	r2, r4
 8004e64:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	0352      	lsls	r2, r2, #13
 8004e6a:	4294      	cmp	r4, r2
 8004e6c:	d105      	bne.n	8004e7a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e6e:	684a      	ldr	r2, [r1, #4]
 8004e70:	4c0e      	ldr	r4, [pc, #56]	; (8004eac <UART_AdvFeatureConfig+0xc8>)
 8004e72:	4022      	ands	r2, r4
 8004e74:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004e76:	4322      	orrs	r2, r4
 8004e78:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	d506      	bpl.n	8004e8c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e7e:	6802      	ldr	r2, [r0, #0]
 8004e80:	490b      	ldr	r1, [pc, #44]	; (8004eb0 <UART_AdvFeatureConfig+0xcc>)
 8004e82:	6853      	ldr	r3, [r2, #4]
 8004e84:	400b      	ands	r3, r1
 8004e86:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6053      	str	r3, [r2, #4]
  }
}
 8004e8c:	bd30      	pop	{r4, r5, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	fffdffff 	.word	0xfffdffff
 8004e94:	fffeffff 	.word	0xfffeffff
 8004e98:	fffbffff 	.word	0xfffbffff
 8004e9c:	ffff7fff 	.word	0xffff7fff
 8004ea0:	ffffefff 	.word	0xffffefff
 8004ea4:	ffffdfff 	.word	0xffffdfff
 8004ea8:	ffefffff 	.word	0xffefffff
 8004eac:	ff9fffff 	.word	0xff9fffff
 8004eb0:	fff7ffff 	.word	0xfff7ffff

08004eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eb6:	2780      	movs	r7, #128	; 0x80
{
 8004eb8:	0004      	movs	r4, r0
 8004eba:	000d      	movs	r5, r1
 8004ebc:	0016      	movs	r6, r2
 8004ebe:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ec0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	69d3      	ldr	r3, [r2, #28]
 8004ec6:	402b      	ands	r3, r5
 8004ec8:	1b5b      	subs	r3, r3, r5
 8004eca:	4259      	negs	r1, r3
 8004ecc:	414b      	adcs	r3, r1
 8004ece:	42b3      	cmp	r3, r6
 8004ed0:	d001      	beq.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e028      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	9b08      	ldr	r3, [sp, #32]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	d0f3      	beq.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	f7fe fd6c 	bl	80039b8 <HAL_GetTick>
 8004ee0:	9b01      	ldr	r3, [sp, #4]
 8004ee2:	1ac0      	subs	r0, r0, r3
 8004ee4:	9b08      	ldr	r3, [sp, #32]
 8004ee6:	4298      	cmp	r0, r3
 8004ee8:	d801      	bhi.n	8004eee <UART_WaitOnFlagUntilTimeout+0x3a>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d11d      	bne.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eee:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef8:	6821      	ldr	r1, [r4, #0]
 8004efa:	4d1e      	ldr	r5, [pc, #120]	; (8004f74 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8004efc:	680b      	ldr	r3, [r1, #0]
 8004efe:	402b      	ands	r3, r5
 8004f00:	600b      	str	r3, [r1, #0]
 8004f02:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f06:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	6821      	ldr	r1, [r4, #0]
 8004f10:	688b      	ldr	r3, [r1, #8]
 8004f12:	4393      	bics	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
 8004f16:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004f20:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004f22:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004f24:	3474      	adds	r4, #116	; 0x74
 8004f26:	7023      	strb	r3, [r4, #0]
}
 8004f28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	420a      	tst	r2, r1
 8004f32:	d0c6      	beq.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	423a      	tst	r2, r7
 8004f38:	d0c3      	beq.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3a:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	2201      	movs	r2, #1
 8004f42:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f46:	6821      	ldr	r1, [r4, #0]
 8004f48:	4d0a      	ldr	r5, [pc, #40]	; (8004f74 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8004f4a:	680b      	ldr	r3, [r1, #0]
 8004f4c:	402b      	ands	r3, r5
 8004f4e:	600b      	str	r3, [r1, #0]
 8004f50:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f58:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	6821      	ldr	r1, [r4, #0]
 8004f5e:	688b      	ldr	r3, [r1, #8]
 8004f60:	4393      	bics	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]
 8004f64:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8004f68:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f6a:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8004f6c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f70:	67d3      	str	r3, [r2, #124]	; 0x7c
 8004f72:	e7d5      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004f74:	fffffe5f 	.word	0xfffffe5f

08004f78 <HAL_UART_Transmit>:
{
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8004f7e:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004f80:	0004      	movs	r4, r0
 8004f82:	000d      	movs	r5, r1
 8004f84:	0016      	movs	r6, r2
    return HAL_BUSY;
 8004f86:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d151      	bne.n	8005030 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8004f8c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004f8e:	2900      	cmp	r1, #0
 8004f90:	d04e      	beq.n	8005030 <HAL_UART_Transmit+0xb8>
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	d04c      	beq.n	8005030 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	68a2      	ldr	r2, [r4, #8]
 8004f9a:	015b      	lsls	r3, r3, #5
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d104      	bne.n	8004faa <HAL_UART_Transmit+0x32>
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004fa6:	4201      	tst	r1, r0
 8004fa8:	d142      	bne.n	8005030 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 8004faa:	0023      	movs	r3, r4
 8004fac:	3374      	adds	r3, #116	; 0x74
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8004fb2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d03b      	beq.n	8005030 <HAL_UART_Transmit+0xb8>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	9a03      	ldr	r2, [sp, #12]
 8004fbc:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	1d23      	adds	r3, r4, #4
 8004fc2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fc4:	2321      	movs	r3, #33	; 0x21
 8004fc6:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004fc8:	f7fe fcf6 	bl	80039b8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004fcc:	0023      	movs	r3, r4
 8004fce:	3350      	adds	r3, #80	; 0x50
 8004fd0:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	801e      	strh	r6, [r3, #0]
 8004fd6:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8004fdc:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8004fde:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe0:	015b      	lsls	r3, r3, #5
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d104      	bne.n	8004ff0 <HAL_UART_Transmit+0x78>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	42b3      	cmp	r3, r6
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Transmit+0x78>
 8004fec:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8004fee:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9a03      	ldr	r2, [sp, #12]
 8004ff4:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 8004ff6:	0023      	movs	r3, r4
 8004ff8:	3352      	adds	r3, #82	; 0x52
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005002:	9b05      	ldr	r3, [sp, #20]
 8005004:	2140      	movs	r1, #64	; 0x40
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	0020      	movs	r0, r4
 800500a:	003b      	movs	r3, r7
 800500c:	f7ff ff52 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8005010:	2800      	cmp	r0, #0
 8005012:	d10c      	bne.n	800502e <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8005014:	2320      	movs	r3, #32
 8005016:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005018:	e00a      	b.n	8005030 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800501a:	9b05      	ldr	r3, [sp, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2180      	movs	r1, #128	; 0x80
 8005022:	003b      	movs	r3, r7
 8005024:	0020      	movs	r0, r4
 8005026:	f7ff ff45 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 800502a:	2800      	cmp	r0, #0
 800502c:	d002      	beq.n	8005034 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 800502e:	2003      	movs	r0, #3
}
 8005030:	b007      	add	sp, #28
 8005032:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	2d00      	cmp	r5, #0
 8005038:	d10b      	bne.n	8005052 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800503a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800503c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800503e:	05db      	lsls	r3, r3, #23
 8005040:	0ddb      	lsrs	r3, r3, #23
 8005042:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	9a04      	ldr	r2, [sp, #16]
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	3b01      	subs	r3, #1
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]
 8005050:	e7d1      	b.n	8004ff6 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005052:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8005054:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005056:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8005058:	e7f4      	b.n	8005044 <HAL_UART_Transmit+0xcc>
	...

0800505c <UART_CheckIdleState>:
{
 800505c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505e:	2600      	movs	r6, #0
{
 8005060:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005062:	1d03      	adds	r3, r0, #4
 8005064:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005066:	f7fe fca7 	bl	80039b8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800506a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800506c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	d416      	bmi.n	80050a2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	075b      	lsls	r3, r3, #29
 800507a:	d50a      	bpl.n	8005092 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <UART_CheckIdleState+0x60>)
 8005080:	2200      	movs	r2, #0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	0020      	movs	r0, r4
 8005086:	002b      	movs	r3, r5
 8005088:	03c9      	lsls	r1, r1, #15
 800508a:	f7ff ff13 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 800508e:	2800      	cmp	r0, #0
 8005090:	d112      	bne.n	80050b8 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8005092:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005094:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005096:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800509c:	3474      	adds	r4, #116	; 0x74
 800509e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80050a0:	e00b      	b.n	80050ba <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a2:	2180      	movs	r1, #128	; 0x80
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <UART_CheckIdleState+0x60>)
 80050a6:	0032      	movs	r2, r6
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	0389      	lsls	r1, r1, #14
 80050ac:	0003      	movs	r3, r0
 80050ae:	0020      	movs	r0, r4
 80050b0:	f7ff ff00 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d0dd      	beq.n	8005074 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80050b8:	2003      	movs	r0, #3
}
 80050ba:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80050bc:	01ffffff 	.word	0x01ffffff

080050c0 <HAL_HalfDuplex_Init>:
{
 80050c0:	b510      	push	{r4, lr}
 80050c2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80050c4:	d101      	bne.n	80050ca <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 80050c6:	2001      	movs	r0, #1
}
 80050c8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80050ca:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <HAL_HalfDuplex_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80050d0:	0002      	movs	r2, r0
 80050d2:	3274      	adds	r2, #116	; 0x74
 80050d4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80050d6:	f7fe fbb9 	bl	800384c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80050da:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80050dc:	2101      	movs	r1, #1
 80050de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80050e2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80050e6:	438b      	bics	r3, r1
 80050e8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ea:	f7ff fd6f 	bl	8004bcc <UART_SetConfig>
 80050ee:	2801      	cmp	r0, #1
 80050f0:	d0e9      	beq.n	80050c6 <HAL_HalfDuplex_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_HalfDuplex_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80050f8:	0020      	movs	r0, r4
 80050fa:	f7ff fe73 	bl	8004de4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	4909      	ldr	r1, [pc, #36]	; (8005128 <HAL_HalfDuplex_Init+0x68>)
 8005102:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005104:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005106:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005108:	2122      	movs	r1, #34	; 0x22
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800510a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	438a      	bics	r2, r1
 8005110:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005112:	2208      	movs	r2, #8
 8005114:	6899      	ldr	r1, [r3, #8]
 8005116:	430a      	orrs	r2, r1
 8005118:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800511a:	2201      	movs	r2, #1
 800511c:	6819      	ldr	r1, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005122:	f7ff ff9b 	bl	800505c <UART_CheckIdleState>
 8005126:	e7cf      	b.n	80050c8 <HAL_HalfDuplex_Init+0x8>
 8005128:	ffffb7ff 	.word	0xffffb7ff

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	2600      	movs	r6, #0
 8005130:	4d0c      	ldr	r5, [pc, #48]	; (8005164 <__libc_init_array+0x38>)
 8005132:	4c0d      	ldr	r4, [pc, #52]	; (8005168 <__libc_init_array+0x3c>)
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	2600      	movs	r6, #0
 800513e:	f000 f821 	bl	8005184 <_init>
 8005142:	4d0a      	ldr	r5, [pc, #40]	; (800516c <__libc_init_array+0x40>)
 8005144:	4c0a      	ldr	r4, [pc, #40]	; (8005170 <__libc_init_array+0x44>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	00b3      	lsls	r3, r6, #2
 8005152:	58eb      	ldr	r3, [r5, r3]
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	00b3      	lsls	r3, r6, #2
 800515c:	58eb      	ldr	r3, [r5, r3]
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	080053a4 	.word	0x080053a4
 8005168:	080053a4 	.word	0x080053a4
 800516c:	080053a4 	.word	0x080053a4
 8005170:	080053a8 	.word	0x080053a8

08005174 <memset>:
 8005174:	0003      	movs	r3, r0
 8005176:	1882      	adds	r2, r0, r2
 8005178:	4293      	cmp	r3, r2
 800517a:	d100      	bne.n	800517e <memset+0xa>
 800517c:	4770      	bx	lr
 800517e:	7019      	strb	r1, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	e7f9      	b.n	8005178 <memset+0x4>

08005184 <_init>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

08005190 <_fini>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr
