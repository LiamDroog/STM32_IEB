
SPI_bare_bones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002630  08002630  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002638  08002638  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000070  080026b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080026b0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000707b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001629  00000000  00000000  00027113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  00028740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00028db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bb0  00000000  00000000  00029368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007508  00000000  00000000  0003cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075d1e  00000000  00000000  00044420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba13e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c90  00000000  00000000  000ba194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800258c 	.word	0x0800258c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800258c 	.word	0x0800258c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fa33 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f80f 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f89f 	bl	80005ec <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ae:	f000 f865 	bl	800057c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t data = 0x05;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2205      	movs	r2, #5
 80004b6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  printf("Working...\r\n");
 80004b8:	4b02      	ldr	r3, [pc, #8]	; (80004c4 <main+0x28>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 fbc8 	bl	8001c50 <puts>
  {
 80004c0:	e7fa      	b.n	80004b8 <main+0x1c>
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	080025a4 	.word	0x080025a4

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b095      	sub	sp, #84	; 0x54
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	2418      	movs	r4, #24
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2338      	movs	r3, #56	; 0x38
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f001 fb3f 	bl	8001b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	2314      	movs	r3, #20
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f001 fb38 	bl	8001b5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <SystemClock_Config+0xac>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <SystemClock_Config+0xb0>)
 80004f2:	401a      	ands	r2, r3
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <SystemClock_Config+0xac>)
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0109      	lsls	r1, r1, #4
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fe:	0021      	movs	r1, r4
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	0252      	lsls	r2, r2, #9
 800050c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2202      	movs	r2, #2
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	0252      	lsls	r2, r2, #9
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	22c0      	movs	r2, #192	; 0xc0
 8000520:	0312      	lsls	r2, r2, #12
 8000522:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	03d2      	lsls	r2, r2, #15
 800052a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052c:	187b      	adds	r3, r7, r1
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fca4 	bl	8000e7c <HAL_RCC_OscConfig>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000538:	f000 f8a8 	bl	800068c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	220f      	movs	r2, #15
 8000540:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2203      	movs	r2, #3
 8000546:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2101      	movs	r1, #1
 800055e:	0018      	movs	r0, r3
 8000560:	f001 f850 	bl	8001604 <HAL_RCC_ClockConfig>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000568:	f000 f890 	bl	800068c <Error_Handler>
  }
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b015      	add	sp, #84	; 0x54
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	40007000 	.word	0x40007000
 8000578:	ffffe7ff 	.word	0xffffe7ff

0800057c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_SPI1_Init+0x68>)
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <MX_SPI1_Init+0x6c>)
 8000584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_SPI1_Init+0x68>)
 8000588:	2282      	movs	r2, #130	; 0x82
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_SPI1_Init+0x68>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_SPI1_Init+0x68>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <MX_SPI1_Init+0x68>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005b0:	2218      	movs	r2, #24
 80005b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005bc:	2200      	movs	r2, #0
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <MX_SPI1_Init+0x68>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fa06 	bl	80019e0 <HAL_SPI_Init>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005d8:	f000 f858 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	20000098 	.word	0x20000098
 80005e8:	40013000 	.word	0x40013000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b089      	sub	sp, #36	; 0x24
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	240c      	movs	r4, #12
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f001 faad 	bl	8001b5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_GPIO_Init+0x98>)
 8000604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0x98>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	430a      	orrs	r2, r1
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_GPIO_Init+0x98>)
 8000610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_GPIO_Init+0x98>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0x98>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_GPIO_Init+0x98>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_GPIO_Init+0x98>)
 8000634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_GPIO_Init+0x98>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_GPIO_Init+0x98>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_GPIO_Init+0x9c>)
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fbf5 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000656:	0021      	movs	r1, r4
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000670:	187b      	adds	r3, r7, r1
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <MX_GPIO_Init+0x9c>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f000 fa6c 	bl	8000b54 <HAL_GPIO_Init>

}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b009      	add	sp, #36	; 0x24
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	50000400 	.word	0x50000400

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <HAL_MspInit+0x24>)
 800069e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x24>)
 80006a2:	2101      	movs	r1, #1
 80006a4:	430a      	orrs	r2, r1
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <HAL_MspInit+0x24>)
 80006aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <HAL_MspInit+0x24>)
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	0549      	lsls	r1, r1, #21
 80006b2:	430a      	orrs	r2, r1
 80006b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	240c      	movs	r4, #12
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f001 fa42 	bl	8001b5c <memset>
  if(hspi->Instance==SPI1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_SPI_MspInit+0x80>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d129      	bne.n	8000736 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_SPI_MspInit+0x84>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_SPI_MspInit+0x84>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0149      	lsls	r1, r1, #5
 80006ec:	430a      	orrs	r2, r1
 80006ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_SPI_MspInit+0x84>)
 80006f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <HAL_SPI_MspInit+0x84>)
 80006f6:	2101      	movs	r1, #1
 80006f8:	430a      	orrs	r2, r1
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_SPI_MspInit+0x84>)
 80006fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000700:	2201      	movs	r2, #1
 8000702:	4013      	ands	r3, r2
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	22e0      	movs	r2, #224	; 0xe0
 800070e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2202      	movs	r2, #2
 8000714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2203      	movs	r2, #3
 8000720:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	187a      	adds	r2, r7, r1
 800072a:	23a0      	movs	r3, #160	; 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fa0f 	bl	8000b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b009      	add	sp, #36	; 0x24
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40013000 	.word	0x40013000
 8000744:	40021000 	.word	0x40021000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f922 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	e00a      	b.n	800079e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000788:	e000      	b.n	800078c <_read+0x16>
 800078a:	bf00      	nop
 800078c:	0001      	movs	r1, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	60ba      	str	r2, [r7, #8]
 8000794:	b2ca      	uxtb	r2, r1
 8000796:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3301      	adds	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	dbf0      	blt.n	8000788 <_read+0x12>
	}

return len;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b006      	add	sp, #24
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e009      	b.n	80007d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	60ba      	str	r2, [r7, #8]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0018      	movs	r0, r3
 80007cc:	e000      	b.n	80007d0 <_write+0x20>
 80007ce:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbf1      	blt.n	80007c2 <_write+0x12>
	}
	return len;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b006      	add	sp, #24
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_close>:

int _close(int file)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	return -1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	425b      	negs	r3, r3
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	0192      	lsls	r2, r2, #6
 800080c:	605a      	str	r2, [r3, #4]
	return 0;
 800080e:	2300      	movs	r3, #0
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	b002      	add	sp, #8
 8000816:	bd80      	pop	{r7, pc}

08000818 <_isatty>:

int _isatty(int file)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}

0800082a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
	return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b004      	add	sp, #16
 800083e:	bd80      	pop	{r7, pc}

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f001 f94a 	bl	8001b08 <__errno>
 8000874:	0003      	movs	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	2301      	movs	r3, #1
 800087c:	425b      	negs	r3, r3
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	18d2      	adds	r2, r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <_sbrk+0x64>)
 8000890:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b006      	add	sp, #24
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20002000 	.word	0x20002000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	20000108 	.word	0x20000108

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490e      	ldr	r1, [pc, #56]	; (80008f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0b      	ldr	r4, [pc, #44]	; (8000904 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008e2:	f7ff ffe3 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e6:	f001 f915 	bl	8001b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ea:	f7ff fdd7 	bl	800049c <main>

080008ee <LoopForever>:

LoopForever:
    b LoopForever
 80008ee:	e7fe      	b.n	80008ee <LoopForever>
  ldr   r0, =_estack
 80008f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008fc:	08002640 	.word	0x08002640
  ldr r2, =_sbss
 8000900:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000904:	20000104 	.word	0x20000104

08000908 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC1_COMP_IRQHandler>
	...

0800090c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_Init+0x3c>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_Init+0x3c>)
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	430a      	orrs	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f811 	bl	800094c <HAL_InitTick>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d003      	beq.n	8000936 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e001      	b.n	800093a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000936:	f7ff feaf 	bl	8000698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_InitTick+0x5c>)
 8000956:	681c      	ldr	r4, [r3, #0]
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_InitTick+0x60>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	0019      	movs	r1, r3
 800095e:	23fa      	movs	r3, #250	; 0xfa
 8000960:	0098      	lsls	r0, r3, #2
 8000962:	f7ff fbd1 	bl	8000108 <__udivsi3>
 8000966:	0003      	movs	r3, r0
 8000968:	0019      	movs	r1, r3
 800096a:	0020      	movs	r0, r4
 800096c:	f7ff fbcc 	bl	8000108 <__udivsi3>
 8000970:	0003      	movs	r3, r0
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f8e1 	bl	8000b3a <HAL_SYSTICK_Config>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e00f      	b.n	80009a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d80b      	bhi.n	800099e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	2301      	movs	r3, #1
 800098a:	425b      	negs	r3, r3
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f8be 	bl	8000b10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_InitTick+0x64>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b003      	add	sp, #12
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	18d2      	adds	r2, r2, r3
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_IncTick+0x20>)
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	20000008 	.word	0x20000008
 80009d4:	200000f0 	.word	0x200000f0

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	200000f0 	.word	0x200000f0

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	0002      	movs	r2, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000a00:	d828      	bhi.n	8000a54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a02:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <__NVIC_SetPriority+0xd4>)
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	33c0      	adds	r3, #192	; 0xc0
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	589b      	ldr	r3, [r3, r2]
 8000a12:	1dfa      	adds	r2, r7, #7
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	0011      	movs	r1, r2
 8000a18:	2203      	movs	r2, #3
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	00d2      	lsls	r2, r2, #3
 8000a1e:	21ff      	movs	r1, #255	; 0xff
 8000a20:	4091      	lsls	r1, r2
 8000a22:	000a      	movs	r2, r1
 8000a24:	43d2      	mvns	r2, r2
 8000a26:	401a      	ands	r2, r3
 8000a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	019b      	lsls	r3, r3, #6
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	401a      	ands	r2, r3
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0018      	movs	r0, r3
 8000a38:	2303      	movs	r3, #3
 8000a3a:	4003      	ands	r3, r0
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <__NVIC_SetPriority+0xd4>)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	33c0      	adds	r3, #192	; 0xc0
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a52:	e031      	b.n	8000ab8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <__NVIC_SetPriority+0xd8>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	400b      	ands	r3, r1
 8000a60:	3b08      	subs	r3, #8
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3306      	adds	r3, #6
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1dfa      	adds	r2, r7, #7
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	0011      	movs	r1, r2
 8000a74:	2203      	movs	r2, #3
 8000a76:	400a      	ands	r2, r1
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	21ff      	movs	r1, #255	; 0xff
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	000a      	movs	r2, r1
 8000a80:	43d2      	mvns	r2, r2
 8000a82:	401a      	ands	r2, r3
 8000a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	019b      	lsls	r3, r3, #6
 8000a8a:	22ff      	movs	r2, #255	; 0xff
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0018      	movs	r0, r3
 8000a94:	2303      	movs	r3, #3
 8000a96:	4003      	ands	r3, r0
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <__NVIC_SetPriority+0xd8>)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	001c      	movs	r4, r3
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	4023      	ands	r3, r4
 8000aa8:	3b08      	subs	r3, #8
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	430a      	orrs	r2, r1
 8000aae:	3306      	adds	r3, #6
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	18c3      	adds	r3, r0, r3
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	601a      	str	r2, [r3, #0]
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b003      	add	sp, #12
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	045b      	lsls	r3, r3, #17
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d301      	bcc.n	8000ae0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000adc:	2301      	movs	r3, #1
 8000ade:	e010      	b.n	8000b02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <SysTick_Config+0x44>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	3a01      	subs	r2, #1
 8000ae6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	2103      	movs	r1, #3
 8000aee:	0018      	movs	r0, r3
 8000af0:	f7ff ff7c 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x44>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	1c02      	adds	r2, r0, #0
 8000b20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ff5d 	bl	80009ec <__NVIC_SetPriority>
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ffbf 	bl	8000ac8 <SysTick_Config>
 8000b4a:	0003      	movs	r3, r0
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b6a:	e14f      	b.n	8000e0c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2101      	movs	r1, #1
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4091      	lsls	r1, r2
 8000b76:	000a      	movs	r2, r1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <HAL_GPIO_Init+0x30>
 8000b82:	e140      	b.n	8000e06 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d005      	beq.n	8000b9c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d130      	bne.n	8000bfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	43da      	mvns	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	2201      	movs	r2, #1
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2203      	movs	r2, #3
 8000c04:	4013      	ands	r3, r2
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d017      	beq.n	8000c3a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	409a      	lsls	r2, r3
 8000c18:	0013      	movs	r3, r2
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d123      	bne.n	8000c8e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	58d3      	ldr	r3, [r2, r3]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2207      	movs	r2, #7
 8000c58:	4013      	ands	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	43da      	mvns	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	691a      	ldr	r2, [r3, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2107      	movs	r1, #7
 8000c72:	400b      	ands	r3, r1
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	6939      	ldr	r1, [r7, #16]
 8000c8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	401a      	ands	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	23c0      	movs	r3, #192	; 0xc0
 8000cc8:	029b      	lsls	r3, r3, #10
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d100      	bne.n	8000cd0 <HAL_GPIO_Init+0x17c>
 8000cce:	e09a      	b.n	8000e06 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd0:	4b54      	ldr	r3, [pc, #336]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd4:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cdc:	4a52      	ldr	r2, [pc, #328]	; (8000e28 <HAL_GPIO_Init+0x2d4>)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	589b      	ldr	r3, [r3, r2]
 8000ce8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4013      	ands	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x1ea>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a47      	ldr	r2, [pc, #284]	; (8000e2c <HAL_GPIO_Init+0x2d8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x1e6>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a46      	ldr	r2, [pc, #280]	; (8000e30 <HAL_GPIO_Init+0x2dc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x1e2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <HAL_GPIO_Init+0x2e0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x1de>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a44      	ldr	r2, [pc, #272]	; (8000e38 <HAL_GPIO_Init+0x2e4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x1da>
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	e008      	b.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d2e:	2306      	movs	r3, #6
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e004      	b.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	2103      	movs	r1, #3
 8000d44:	400a      	ands	r2, r1
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	4093      	lsls	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d50:	4935      	ldr	r1, [pc, #212]	; (8000e28 <HAL_GPIO_Init+0x2d4>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	025b      	lsls	r3, r3, #9
 8000d76:	4013      	ands	r3, r2
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	029b      	lsls	r3, r3, #10
 8000da0:	4013      	ands	r3, r2
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db2:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	035b      	lsls	r3, r3, #13
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43da      	mvns	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	039b      	lsls	r3, r3, #14
 8000df4:	4013      	ands	r3, r2
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	40da      	lsrs	r2, r3
 8000e14:	1e13      	subs	r3, r2, #0
 8000e16:	d000      	beq.n	8000e1a <HAL_GPIO_Init+0x2c6>
 8000e18:	e6a8      	b.n	8000b6c <HAL_GPIO_Init+0x18>
  }
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b006      	add	sp, #24
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	50000400 	.word	0x50000400
 8000e30:	50000800 	.word	0x50000800
 8000e34:	50000c00 	.word	0x50000c00
 8000e38:	50001c00 	.word	0x50001c00
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	0008      	movs	r0, r1
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	1cbb      	adds	r3, r7, #2
 8000e4e:	1c02      	adds	r2, r0, #0
 8000e50:	801a      	strh	r2, [r3, #0]
 8000e52:	1c7b      	adds	r3, r7, #1
 8000e54:	1c0a      	adds	r2, r1, #0
 8000e56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e58:	1c7b      	adds	r3, r7, #1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e60:	1cbb      	adds	r3, r7, #2
 8000e62:	881a      	ldrh	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e68:	e003      	b.n	8000e72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e6a:	1cbb      	adds	r3, r7, #2
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f000 fbaf 	bl	80015ee <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e90:	4bcf      	ldr	r3, [pc, #828]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	220c      	movs	r2, #12
 8000e96:	4013      	ands	r3, r2
 8000e98:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e9a:	4bcd      	ldr	r3, [pc, #820]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	025b      	lsls	r3, r3, #9
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	d100      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x36>
 8000eb0:	e07e      	b.n	8000fb0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d007      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	2b0c      	cmp	r3, #12
 8000ebc:	d112      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x68>
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d10d      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	4bc1      	ldr	r3, [pc, #772]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	029b      	lsls	r3, r3, #10
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5a>
 8000ed4:	e06b      	b.n	8000fae <HAL_RCC_OscConfig+0x132>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d167      	bne.n	8000fae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f000 fb85 	bl	80015ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d107      	bne.n	8000f00 <HAL_RCC_OscConfig+0x84>
 8000ef0:	4bb7      	ldr	r3, [pc, #732]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4bb6      	ldr	r3, [pc, #728]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0249      	lsls	r1, r1, #9
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e027      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	02db      	lsls	r3, r3, #11
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d10e      	bne.n	8000f2a <HAL_RCC_OscConfig+0xae>
 8000f0c:	4bb0      	ldr	r3, [pc, #704]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4baf      	ldr	r3, [pc, #700]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	02c9      	lsls	r1, r1, #11
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	4bad      	ldr	r3, [pc, #692]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4bac      	ldr	r3, [pc, #688]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0249      	lsls	r1, r1, #9
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e012      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f2a:	4ba9      	ldr	r3, [pc, #676]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4ba8      	ldr	r3, [pc, #672]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f30:	49a8      	ldr	r1, [pc, #672]	; (80011d4 <HAL_RCC_OscConfig+0x358>)
 8000f32:	400a      	ands	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	4ba6      	ldr	r3, [pc, #664]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4ba2      	ldr	r3, [pc, #648]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4ba1      	ldr	r3, [pc, #644]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f4a:	49a3      	ldr	r1, [pc, #652]	; (80011d8 <HAL_RCC_OscConfig+0x35c>)
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d015      	beq.n	8000f84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fd3e 	bl	80009d8 <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f60:	e009      	b.n	8000f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f62:	f7ff fd39 	bl	80009d8 <HAL_GetTick>
 8000f66:	0002      	movs	r2, r0
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b64      	cmp	r3, #100	; 0x64
 8000f6e:	d902      	bls.n	8000f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f000 fb3c 	bl	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f76:	4b96      	ldr	r3, [pc, #600]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	029b      	lsls	r3, r3, #10
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d0ef      	beq.n	8000f62 <HAL_RCC_OscConfig+0xe6>
 8000f82:	e015      	b.n	8000fb0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fd28 	bl	80009d8 <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fd23 	bl	80009d8 <HAL_GetTick>
 8000f92:	0002      	movs	r2, r0
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b64      	cmp	r3, #100	; 0x64
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e326      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fa0:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	029b      	lsls	r3, r3, #10
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x112>
 8000fac:	e000      	b.n	8000fb0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d100      	bne.n	8000fbc <HAL_RCC_OscConfig+0x140>
 8000fba:	e08b      	b.n	80010d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d13e      	bne.n	800104c <HAL_RCC_OscConfig+0x1d0>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d13b      	bne.n	800104c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000fd4:	4b7e      	ldr	r3, [pc, #504]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2204      	movs	r2, #4
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d004      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x16c>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e302      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe8:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4a7b      	ldr	r2, [pc, #492]	; (80011dc <HAL_RCC_OscConfig+0x360>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	021a      	lsls	r2, r3, #8
 8000ff8:	4b75      	ldr	r3, [pc, #468]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ffe:	4b74      	ldr	r3, [pc, #464]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2209      	movs	r2, #9
 8001004:	4393      	bics	r3, r2
 8001006:	0019      	movs	r1, r3
 8001008:	4b71      	ldr	r3, [pc, #452]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001010:	f000 fc40 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001014:	0001      	movs	r1, r0
 8001016:	4b6e      	ldr	r3, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	220f      	movs	r2, #15
 800101e:	4013      	ands	r3, r2
 8001020:	4a6f      	ldr	r2, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x364>)
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	000a      	movs	r2, r1
 8001026:	40da      	lsrs	r2, r3
 8001028:	4b6e      	ldr	r3, [pc, #440]	; (80011e4 <HAL_RCC_OscConfig+0x368>)
 800102a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800102c:	4b6e      	ldr	r3, [pc, #440]	; (80011e8 <HAL_RCC_OscConfig+0x36c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2513      	movs	r5, #19
 8001032:	197c      	adds	r4, r7, r5
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff fc89 	bl	800094c <HAL_InitTick>
 800103a:	0003      	movs	r3, r0
 800103c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800103e:	197b      	adds	r3, r7, r5
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d046      	beq.n	80010d4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001046:	197b      	adds	r3, r7, r5
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	e2d0      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d027      	beq.n	80010a2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2209      	movs	r2, #9
 8001058:	4393      	bics	r3, r2
 800105a:	0019      	movs	r1, r3
 800105c:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fcb8 	bl	80009d8 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fcb3 	bl	80009d8 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e2b6      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001080:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2204      	movs	r2, #4
 8001086:	4013      	ands	r3, r2
 8001088:	d0f1      	beq.n	800106e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b51      	ldr	r3, [pc, #324]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a53      	ldr	r2, [pc, #332]	; (80011dc <HAL_RCC_OscConfig+0x360>)
 8001090:	4013      	ands	r3, r2
 8001092:	0019      	movs	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	021a      	lsls	r2, r3, #8
 800109a:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 800109c:	430a      	orrs	r2, r1
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	e018      	b.n	80010d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	438a      	bics	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc93 	bl	80009d8 <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc8e 	bl	80009d8 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e291      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2204      	movs	r2, #4
 80010d0:	4013      	ands	r3, r2
 80010d2:	d1f1      	bne.n	80010b8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2210      	movs	r2, #16
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_RCC_OscConfig+0x264>
 80010de:	e0a1      	b.n	8001224 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d140      	bne.n	8001168 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4013      	ands	r3, r2
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x282>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e277      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a3a      	ldr	r2, [pc, #232]	; (80011ec <HAL_RCC_OscConfig+0x370>)
 8001104:	4013      	ands	r3, r2
 8001106:	0019      	movs	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 800110e:	430a      	orrs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	0a19      	lsrs	r1, r3, #8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	061a      	lsls	r2, r3, #24
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001122:	430a      	orrs	r2, r1
 8001124:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	0b5b      	lsrs	r3, r3, #13
 800112c:	3301      	adds	r3, #1
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	0212      	lsls	r2, r2, #8
 8001132:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	210f      	movs	r1, #15
 800113c:	400b      	ands	r3, r1
 800113e:	4928      	ldr	r1, [pc, #160]	; (80011e0 <HAL_RCC_OscConfig+0x364>)
 8001140:	5ccb      	ldrb	r3, [r1, r3]
 8001142:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_RCC_OscConfig+0x368>)
 8001146:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <HAL_RCC_OscConfig+0x36c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2513      	movs	r5, #19
 800114e:	197c      	adds	r4, r7, r5
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fbfb 	bl	800094c <HAL_InitTick>
 8001156:	0003      	movs	r3, r0
 8001158:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800115a:	197b      	adds	r3, r7, r5
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d060      	beq.n	8001224 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001162:	197b      	adds	r3, r7, r5
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	e242      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d03f      	beq.n	80011f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	0049      	lsls	r1, r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fc2b 	bl	80009d8 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001188:	f7ff fc26 	bl	80009d8 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e229      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4013      	ands	r3, r2
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_RCC_OscConfig+0x370>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80011b6:	430a      	orrs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	0a19      	lsrs	r1, r3, #8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	061a      	lsls	r2, r3, #24
 80011c8:	4b01      	ldr	r3, [pc, #4]	; (80011d0 <HAL_RCC_OscConfig+0x354>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	e029      	b.n	8001224 <HAL_RCC_OscConfig+0x3a8>
 80011d0:	40021000 	.word	0x40021000
 80011d4:	fffeffff 	.word	0xfffeffff
 80011d8:	fffbffff 	.word	0xfffbffff
 80011dc:	ffffe0ff 	.word	0xffffe0ff
 80011e0:	080025b0 	.word	0x080025b0
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000004 	.word	0x20000004
 80011ec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011f0:	4bbd      	ldr	r3, [pc, #756]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4bbc      	ldr	r3, [pc, #752]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80011f6:	49bd      	ldr	r1, [pc, #756]	; (80014ec <HAL_RCC_OscConfig+0x670>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fbec 	bl	80009d8 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001206:	f7ff fbe7 	bl	80009d8 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e1ea      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001218:	4bb3      	ldr	r3, [pc, #716]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d1f0      	bne.n	8001206 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2208      	movs	r2, #8
 800122a:	4013      	ands	r3, r2
 800122c:	d036      	beq.n	800129c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d019      	beq.n	800126a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	4bac      	ldr	r3, [pc, #688]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800123a:	4bab      	ldr	r3, [pc, #684]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fbc9 	bl	80009d8 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fbc4 	bl	80009d8 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1c7      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800125e:	4ba2      	ldr	r3, [pc, #648]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001262:	2202      	movs	r2, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d0f1      	beq.n	800124c <HAL_RCC_OscConfig+0x3d0>
 8001268:	e018      	b.n	800129c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126a:	4b9f      	ldr	r3, [pc, #636]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800126c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800126e:	4b9e      	ldr	r3, [pc, #632]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001270:	2101      	movs	r1, #1
 8001272:	438a      	bics	r2, r1
 8001274:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fbaf 	bl	80009d8 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fbaa 	bl	80009d8 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1ad      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001292:	4b95      	ldr	r3, [pc, #596]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001296:	2202      	movs	r2, #2
 8001298:	4013      	ands	r3, r2
 800129a:	d1f1      	bne.n	8001280 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2204      	movs	r2, #4
 80012a2:	4013      	ands	r3, r2
 80012a4:	d100      	bne.n	80012a8 <HAL_RCC_OscConfig+0x42c>
 80012a6:	e0ae      	b.n	8001406 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a8:	2027      	movs	r0, #39	; 0x27
 80012aa:	183b      	adds	r3, r7, r0
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b0:	4b8d      	ldr	r3, [pc, #564]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80012b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	055b      	lsls	r3, r3, #21
 80012b8:	4013      	ands	r3, r2
 80012ba:	d109      	bne.n	80012d0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	4b8a      	ldr	r3, [pc, #552]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80012be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012c0:	4b89      	ldr	r3, [pc, #548]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0549      	lsls	r1, r1, #21
 80012c6:	430a      	orrs	r2, r1
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012ca:	183b      	adds	r3, r7, r0
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b87      	ldr	r3, [pc, #540]	; (80014f0 <HAL_RCC_OscConfig+0x674>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4013      	ands	r3, r2
 80012da:	d11a      	bne.n	8001312 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x674>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b83      	ldr	r3, [pc, #524]	; (80014f0 <HAL_RCC_OscConfig+0x674>)
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	0049      	lsls	r1, r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb75 	bl	80009d8 <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f4:	f7ff fb70 	bl	80009d8 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e173      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <HAL_RCC_OscConfig+0x674>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4013      	ands	r3, r2
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	429a      	cmp	r2, r3
 800131c:	d107      	bne.n	800132e <HAL_RCC_OscConfig+0x4b2>
 800131e:	4b72      	ldr	r3, [pc, #456]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001322:	4b71      	ldr	r3, [pc, #452]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	0049      	lsls	r1, r1, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	651a      	str	r2, [r3, #80]	; 0x50
 800132c:	e031      	b.n	8001392 <HAL_RCC_OscConfig+0x516>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x4d4>
 8001336:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133a:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800133c:	496b      	ldr	r1, [pc, #428]	; (80014ec <HAL_RCC_OscConfig+0x670>)
 800133e:	400a      	ands	r2, r1
 8001340:	651a      	str	r2, [r3, #80]	; 0x50
 8001342:	4b69      	ldr	r3, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001346:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001348:	496a      	ldr	r1, [pc, #424]	; (80014f4 <HAL_RCC_OscConfig+0x678>)
 800134a:	400a      	ands	r2, r1
 800134c:	651a      	str	r2, [r3, #80]	; 0x50
 800134e:	e020      	b.n	8001392 <HAL_RCC_OscConfig+0x516>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	429a      	cmp	r2, r3
 800135a:	d10e      	bne.n	800137a <HAL_RCC_OscConfig+0x4fe>
 800135c:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800135e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001360:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	00c9      	lsls	r1, r1, #3
 8001366:	430a      	orrs	r2, r1
 8001368:	651a      	str	r2, [r3, #80]	; 0x50
 800136a:	4b5f      	ldr	r3, [pc, #380]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800136c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800136e:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0049      	lsls	r1, r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	651a      	str	r2, [r3, #80]	; 0x50
 8001378:	e00b      	b.n	8001392 <HAL_RCC_OscConfig+0x516>
 800137a:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800137c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001380:	495a      	ldr	r1, [pc, #360]	; (80014ec <HAL_RCC_OscConfig+0x670>)
 8001382:	400a      	ands	r2, r1
 8001384:	651a      	str	r2, [r3, #80]	; 0x50
 8001386:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800138a:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800138c:	4959      	ldr	r1, [pc, #356]	; (80014f4 <HAL_RCC_OscConfig+0x678>)
 800138e:	400a      	ands	r2, r1
 8001390:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d015      	beq.n	80013c6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fb1d 	bl	80009d8 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013a2:	e009      	b.n	80013b8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fb18 	bl	80009d8 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e11a      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80013ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0ef      	beq.n	80013a4 <HAL_RCC_OscConfig+0x528>
 80013c4:	e014      	b.n	80013f0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb07 	bl	80009d8 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013ce:	e009      	b.n	80013e4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fb02 	bl	80009d8 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <HAL_RCC_OscConfig+0x67c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e104      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80013e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d1ef      	bne.n	80013d0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013f0:	2327      	movs	r3, #39	; 0x27
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d105      	bne.n	8001406 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80013fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001400:	493e      	ldr	r1, [pc, #248]	; (80014fc <HAL_RCC_OscConfig+0x680>)
 8001402:	400a      	ands	r2, r1
 8001404:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2220      	movs	r2, #32
 800140c:	4013      	ands	r3, r2
 800140e:	d049      	beq.n	80014a4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d026      	beq.n	8001466 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800142a:	2101      	movs	r1, #1
 800142c:	430a      	orrs	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_RCC_OscConfig+0x684>)
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_RCC_OscConfig+0x684>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0189      	lsls	r1, r1, #6
 800143a:	430a      	orrs	r2, r1
 800143c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff facb 	bl	80009d8 <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001448:	f7ff fac6 	bl	80009d8 <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0c9      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2202      	movs	r2, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d0f1      	beq.n	8001448 <HAL_RCC_OscConfig+0x5cc>
 8001464:	e01e      	b.n	80014a4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800146c:	2101      	movs	r1, #1
 800146e:	438a      	bics	r2, r1
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_RCC_OscConfig+0x684>)
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_RCC_OscConfig+0x684>)
 8001478:	4922      	ldr	r1, [pc, #136]	; (8001504 <HAL_RCC_OscConfig+0x688>)
 800147a:	400a      	ands	r2, r1
 800147c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff faab 	bl	80009d8 <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001488:	f7ff faa6 	bl	80009d8 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0a9      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d1f1      	bne.n	8001488 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x632>
 80014ac:	e09e      	b.n	80015ec <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	2b0c      	cmp	r3, #12
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x63a>
 80014b4:	e077      	b.n	80015a6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d158      	bne.n	8001570 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_OscConfig+0x66c>)
 80014c4:	4910      	ldr	r1, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x68c>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fa85 	bl	80009d8 <HAL_GetTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fa80 	bl	80009d8 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d914      	bls.n	800150c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e083      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40021000 	.word	0x40021000
 80014ec:	fffffeff 	.word	0xfffffeff
 80014f0:	40007000 	.word	0x40007000
 80014f4:	fffffbff 	.word	0xfffffbff
 80014f8:	00001388 	.word	0x00001388
 80014fc:	efffffff 	.word	0xefffffff
 8001500:	40010000 	.word	0x40010000
 8001504:	ffffdfff 	.word	0xffffdfff
 8001508:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	049b      	lsls	r3, r3, #18
 8001514:	4013      	ands	r3, r2
 8001516:	d1dd      	bne.n	80014d4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4a37      	ldr	r2, [pc, #220]	; (80015fc <HAL_RCC_OscConfig+0x780>)
 800151e:	4013      	ands	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	431a      	orrs	r2, r3
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	0449      	lsls	r1, r1, #17
 8001542:	430a      	orrs	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fa47 	bl	80009d8 <HAL_GetTick>
 800154a:	0003      	movs	r3, r0
 800154c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fa42 	bl	80009d8 <HAL_GetTick>
 8001554:	0002      	movs	r2, r0
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e045      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	049b      	lsls	r3, r3, #18
 800156a:	4013      	ands	r3, r2
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x6d4>
 800156e:	e03d      	b.n	80015ec <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 8001576:	4922      	ldr	r1, [pc, #136]	; (8001600 <HAL_RCC_OscConfig+0x784>)
 8001578:	400a      	ands	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fa2c 	bl	80009d8 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fa27 	bl	80009d8 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e02a      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	049b      	lsls	r3, r3, #18
 80015a0:	4013      	ands	r3, r2
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x70a>
 80015a4:	e022      	b.n	80015ec <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e01d      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x77c>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10f      	bne.n	80015e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	23f0      	movs	r3, #240	; 0xf0
 80015cc:	039b      	lsls	r3, r3, #14
 80015ce:	401a      	ands	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	041b      	lsls	r3, r3, #16
 80015de:	401a      	ands	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b00a      	add	sp, #40	; 0x28
 80015f4:	bdb0      	pop	{r4, r5, r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40021000 	.word	0x40021000
 80015fc:	ff02ffff 	.word	0xff02ffff
 8001600:	feffffff 	.word	0xfeffffff

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e128      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b96      	ldr	r3, [pc, #600]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	4013      	ands	r3, r2
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d91e      	bls.n	8001664 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b93      	ldr	r3, [pc, #588]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	4393      	bics	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	4b90      	ldr	r3, [pc, #576]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001638:	f7ff f9ce 	bl	80009d8 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001640:	e009      	b.n	8001656 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001642:	f7ff f9c9 	bl	80009d8 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4a8a      	ldr	r2, [pc, #552]	; (8001878 <HAL_RCC_ClockConfig+0x274>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e109      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b87      	ldr	r3, [pc, #540]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2202      	movs	r2, #2
 800166a:	4013      	ands	r3, r2
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166e:	4b83      	ldr	r3, [pc, #524]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	22f0      	movs	r2, #240	; 0xf0
 8001674:	4393      	bics	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4b7f      	ldr	r3, [pc, #508]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 800167e:	430a      	orrs	r2, r1
 8001680:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2201      	movs	r2, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_ClockConfig+0x8a>
 800168c:	e089      	b.n	80017a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001696:	4b79      	ldr	r3, [pc, #484]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	4013      	ands	r3, r2
 80016a0:	d120      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0e1      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016ae:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	049b      	lsls	r3, r3, #18
 80016b6:	4013      	ands	r3, r2
 80016b8:	d114      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0d5      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c6:	4b6d      	ldr	r3, [pc, #436]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2204      	movs	r2, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	d109      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0ca      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016d4:	4b69      	ldr	r3, [pc, #420]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0c2      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e4:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2203      	movs	r2, #3
 80016ea:	4393      	bics	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff f96e 	bl	80009d8 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d111      	bne.n	800172c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001708:	e009      	b.n	800171e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170a:	f7ff f965 	bl	80009d8 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_ClockConfig+0x274>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e0a5      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800171e:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	220c      	movs	r2, #12
 8001724:	4013      	ands	r3, r2
 8001726:	2b08      	cmp	r3, #8
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_ClockConfig+0x106>
 800172a:	e03a      	b.n	80017a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d111      	bne.n	8001758 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001734:	e009      	b.n	800174a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff f94f 	bl	80009d8 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a4d      	ldr	r2, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x274>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e08f      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	220c      	movs	r2, #12
 8001750:	4013      	ands	r3, r2
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_ClockConfig+0x132>
 8001756:	e024      	b.n	80017a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d11b      	bne.n	8001798 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001760:	e009      	b.n	8001776 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7ff f939 	bl	80009d8 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a42      	ldr	r2, [pc, #264]	; (8001878 <HAL_RCC_ClockConfig+0x274>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e079      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	2b04      	cmp	r3, #4
 8001780:	d1ef      	bne.n	8001762 <HAL_RCC_ClockConfig+0x15e>
 8001782:	e00e      	b.n	80017a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff f928 	bl	80009d8 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	4a3a      	ldr	r2, [pc, #232]	; (8001878 <HAL_RCC_ClockConfig+0x274>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e068      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001798:	4b38      	ldr	r3, [pc, #224]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	220c      	movs	r2, #12
 800179e:	4013      	ands	r3, r2
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d21e      	bcs.n	80017ee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4393      	bics	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017c2:	f7ff f909 	bl	80009d8 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	e009      	b.n	80017e0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017cc:	f7ff f904 	bl	80009d8 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_RCC_ClockConfig+0x274>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e044      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_ClockConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d1ee      	bne.n	80017cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	d009      	beq.n	800180c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a20      	ldr	r2, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x27c>)
 80017fe:	4013      	ands	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2208      	movs	r2, #8
 8001812:	4013      	ands	r3, r2
 8001814:	d00a      	beq.n	800182c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <HAL_RCC_ClockConfig+0x280>)
 800181c:	4013      	ands	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	00da      	lsls	r2, r3, #3
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182c:	f000 f832 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001830:	0001      	movs	r1, r0
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x278>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	220f      	movs	r2, #15
 800183a:	4013      	ands	r3, r2
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x284>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	000a      	movs	r2, r1
 8001842:	40da      	lsrs	r2, r3
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_ClockConfig+0x288>)
 8001846:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_RCC_ClockConfig+0x28c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	250b      	movs	r5, #11
 800184e:	197c      	adds	r4, r7, r5
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff f87b 	bl	800094c <HAL_InitTick>
 8001856:	0003      	movs	r3, r0
 8001858:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800185a:	197b      	adds	r3, r7, r5
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001862:	197b      	adds	r3, r7, r5
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	e000      	b.n	800186a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b004      	add	sp, #16
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	40022000 	.word	0x40022000
 8001878:	00001388 	.word	0x00001388
 800187c:	40021000 	.word	0x40021000
 8001880:	fffff8ff 	.word	0xfffff8ff
 8001884:	ffffc7ff 	.word	0xffffc7ff
 8001888:	080025b0 	.word	0x080025b0
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800189a:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <HAL_RCC_GetSysClockFreq+0x138>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a2:	230c      	movs	r3, #12
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d014      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x40>
 80018aa:	d900      	bls.n	80018ae <HAL_RCC_GetSysClockFreq+0x1a>
 80018ac:	e07b      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x112>
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x24>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d00b      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3a>
 80018b6:	e076      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_RCC_GetSysClockFreq+0x138>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2210      	movs	r2, #16
 80018be:	4013      	ands	r3, r2
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018c2:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018c6:	e07c      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x140>)
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018cc:	e079      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x144>)
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018d2:	e076      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	0c9a      	lsrs	r2, r3, #18
 80018d8:	230f      	movs	r3, #15
 80018da:	401a      	ands	r2, r3
 80018dc:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_RCC_GetSysClockFreq+0x148>)
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	0d9a      	lsrs	r2, r3, #22
 80018e6:	2303      	movs	r3, #3
 80018e8:	4013      	ands	r3, r2
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <HAL_RCC_GetSysClockFreq+0x138>)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	4013      	ands	r3, r2
 80018f8:	d01a      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001904:	2300      	movs	r3, #0
 8001906:	69b8      	ldr	r0, [r7, #24]
 8001908:	69f9      	ldr	r1, [r7, #28]
 800190a:	f7fe fca9 	bl	8000260 <__aeabi_lmul>
 800190e:	0002      	movs	r2, r0
 8001910:	000b      	movs	r3, r1
 8001912:	0010      	movs	r0, r2
 8001914:	0019      	movs	r1, r3
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f7fe fc7d 	bl	8000220 <__aeabi_uldivmod>
 8001926:	0002      	movs	r2, r0
 8001928:	000b      	movs	r3, r1
 800192a:	0013      	movs	r3, r2
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
 800192e:	e037      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_RCC_GetSysClockFreq+0x138>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2210      	movs	r2, #16
 8001936:	4013      	ands	r3, r2
 8001938:	d01a      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001944:	2300      	movs	r3, #0
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	68f9      	ldr	r1, [r7, #12]
 800194a:	f7fe fc89 	bl	8000260 <__aeabi_lmul>
 800194e:	0002      	movs	r2, r0
 8001950:	000b      	movs	r3, r1
 8001952:	0010      	movs	r0, r2
 8001954:	0019      	movs	r1, r3
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f7fe fc5d 	bl	8000220 <__aeabi_uldivmod>
 8001966:	0002      	movs	r2, r0
 8001968:	000b      	movs	r3, r1
 800196a:	0013      	movs	r3, r2
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
 800196e:	e017      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001972:	0018      	movs	r0, r3
 8001974:	2300      	movs	r3, #0
 8001976:	0019      	movs	r1, r3
 8001978:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x140>)
 800197a:	2300      	movs	r3, #0
 800197c:	f7fe fc70 	bl	8000260 <__aeabi_lmul>
 8001980:	0002      	movs	r2, r0
 8001982:	000b      	movs	r3, r1
 8001984:	0010      	movs	r0, r2
 8001986:	0019      	movs	r1, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	001c      	movs	r4, r3
 800198c:	2300      	movs	r3, #0
 800198e:	001d      	movs	r5, r3
 8001990:	0022      	movs	r2, r4
 8001992:	002b      	movs	r3, r5
 8001994:	f7fe fc44 	bl	8000220 <__aeabi_uldivmod>
 8001998:	0002      	movs	r2, r0
 800199a:	000b      	movs	r3, r1
 800199c:	0013      	movs	r3, r2
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019a4:	e00d      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_GetSysClockFreq+0x138>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	2207      	movs	r2, #7
 80019ae:	4013      	ands	r3, r2
 80019b0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	3301      	adds	r3, #1
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0212      	lsls	r2, r2, #8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b00e      	add	sp, #56	; 0x38
 80019ca:	bdb0      	pop	{r4, r5, r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	003d0900 	.word	0x003d0900
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200
 80019dc:	080025c0 	.word	0x080025c0

080019e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e083      	b.n	8001afa <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	2382      	movs	r3, #130	; 0x82
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d009      	beq.n	8001a1a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	e005      	b.n	8001a1a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2251      	movs	r2, #81	; 0x51
 8001a24:	5c9b      	ldrb	r3, [r3, r2]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2250      	movs	r2, #80	; 0x50
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7fe fe42 	bl	80006c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2251      	movs	r2, #81	; 0x51
 8001a40:	2102      	movs	r1, #2
 8001a42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	438a      	bics	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	2382      	movs	r3, #130	; 0x82
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	2384      	movs	r3, #132	; 0x84
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	400b      	ands	r3, r1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68d9      	ldr	r1, [r3, #12]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	400b      	ands	r3, r1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	2101      	movs	r1, #1
 8001a86:	400b      	ands	r3, r1
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6999      	ldr	r1, [r3, #24]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	400b      	ands	r3, r1
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2138      	movs	r1, #56	; 0x38
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	0011      	movs	r1, r2
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	019b      	lsls	r3, r3, #6
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	2210      	movs	r2, #16
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <HAL_SPI_Init+0x124>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2251      	movs	r2, #81	; 0x51
 8001af4:	2101      	movs	r1, #1
 8001af6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	fffff7ff 	.word	0xfffff7ff

08001b08 <__errno>:
 8001b08:	4b01      	ldr	r3, [pc, #4]	; (8001b10 <__errno+0x8>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	4770      	bx	lr
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	2000000c 	.word	0x2000000c

08001b14 <__libc_init_array>:
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	2600      	movs	r6, #0
 8001b18:	4d0c      	ldr	r5, [pc, #48]	; (8001b4c <__libc_init_array+0x38>)
 8001b1a:	4c0d      	ldr	r4, [pc, #52]	; (8001b50 <__libc_init_array+0x3c>)
 8001b1c:	1b64      	subs	r4, r4, r5
 8001b1e:	10a4      	asrs	r4, r4, #2
 8001b20:	42a6      	cmp	r6, r4
 8001b22:	d109      	bne.n	8001b38 <__libc_init_array+0x24>
 8001b24:	2600      	movs	r6, #0
 8001b26:	f000 fd31 	bl	800258c <_init>
 8001b2a:	4d0a      	ldr	r5, [pc, #40]	; (8001b54 <__libc_init_array+0x40>)
 8001b2c:	4c0a      	ldr	r4, [pc, #40]	; (8001b58 <__libc_init_array+0x44>)
 8001b2e:	1b64      	subs	r4, r4, r5
 8001b30:	10a4      	asrs	r4, r4, #2
 8001b32:	42a6      	cmp	r6, r4
 8001b34:	d105      	bne.n	8001b42 <__libc_init_array+0x2e>
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
 8001b38:	00b3      	lsls	r3, r6, #2
 8001b3a:	58eb      	ldr	r3, [r5, r3]
 8001b3c:	4798      	blx	r3
 8001b3e:	3601      	adds	r6, #1
 8001b40:	e7ee      	b.n	8001b20 <__libc_init_array+0xc>
 8001b42:	00b3      	lsls	r3, r6, #2
 8001b44:	58eb      	ldr	r3, [r5, r3]
 8001b46:	4798      	blx	r3
 8001b48:	3601      	adds	r6, #1
 8001b4a:	e7f2      	b.n	8001b32 <__libc_init_array+0x1e>
 8001b4c:	08002638 	.word	0x08002638
 8001b50:	08002638 	.word	0x08002638
 8001b54:	08002638 	.word	0x08002638
 8001b58:	0800263c 	.word	0x0800263c

08001b5c <memset>:
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	1882      	adds	r2, r0, r2
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d100      	bne.n	8001b66 <memset+0xa>
 8001b64:	4770      	bx	lr
 8001b66:	7019      	strb	r1, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	e7f9      	b.n	8001b60 <memset+0x4>

08001b6c <_puts_r>:
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	0005      	movs	r5, r0
 8001b70:	000e      	movs	r6, r1
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d004      	beq.n	8001b80 <_puts_r+0x14>
 8001b76:	6983      	ldr	r3, [r0, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <_puts_r+0x14>
 8001b7c:	f000 fa6e 	bl	800205c <__sinit>
 8001b80:	69ab      	ldr	r3, [r5, #24]
 8001b82:	68ac      	ldr	r4, [r5, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_puts_r+0x22>
 8001b88:	0028      	movs	r0, r5
 8001b8a:	f000 fa67 	bl	800205c <__sinit>
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <_puts_r+0xd8>)
 8001b90:	429c      	cmp	r4, r3
 8001b92:	d122      	bne.n	8001bda <_puts_r+0x6e>
 8001b94:	686c      	ldr	r4, [r5, #4]
 8001b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b98:	07db      	lsls	r3, r3, #31
 8001b9a:	d405      	bmi.n	8001ba8 <_puts_r+0x3c>
 8001b9c:	89a3      	ldrh	r3, [r4, #12]
 8001b9e:	059b      	lsls	r3, r3, #22
 8001ba0:	d402      	bmi.n	8001ba8 <_puts_r+0x3c>
 8001ba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ba4:	f000 fafb 	bl	800219e <__retarget_lock_acquire_recursive>
 8001ba8:	89a3      	ldrh	r3, [r4, #12]
 8001baa:	071b      	lsls	r3, r3, #28
 8001bac:	d502      	bpl.n	8001bb4 <_puts_r+0x48>
 8001bae:	6923      	ldr	r3, [r4, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d129      	bne.n	8001c08 <_puts_r+0x9c>
 8001bb4:	0021      	movs	r1, r4
 8001bb6:	0028      	movs	r0, r5
 8001bb8:	f000 f8aa 	bl	8001d10 <__swsetup_r>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d023      	beq.n	8001c08 <_puts_r+0x9c>
 8001bc0:	2501      	movs	r5, #1
 8001bc2:	426d      	negs	r5, r5
 8001bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bc6:	07db      	lsls	r3, r3, #31
 8001bc8:	d405      	bmi.n	8001bd6 <_puts_r+0x6a>
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	059b      	lsls	r3, r3, #22
 8001bce:	d402      	bmi.n	8001bd6 <_puts_r+0x6a>
 8001bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bd2:	f000 fae5 	bl	80021a0 <__retarget_lock_release_recursive>
 8001bd6:	0028      	movs	r0, r5
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <_puts_r+0xdc>)
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	d101      	bne.n	8001be4 <_puts_r+0x78>
 8001be0:	68ac      	ldr	r4, [r5, #8]
 8001be2:	e7d8      	b.n	8001b96 <_puts_r+0x2a>
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <_puts_r+0xe0>)
 8001be6:	429c      	cmp	r4, r3
 8001be8:	d1d5      	bne.n	8001b96 <_puts_r+0x2a>
 8001bea:	68ec      	ldr	r4, [r5, #12]
 8001bec:	e7d3      	b.n	8001b96 <_puts_r+0x2a>
 8001bee:	3601      	adds	r6, #1
 8001bf0:	60a3      	str	r3, [r4, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da04      	bge.n	8001c00 <_puts_r+0x94>
 8001bf6:	69a2      	ldr	r2, [r4, #24]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dc16      	bgt.n	8001c2a <_puts_r+0xbe>
 8001bfc:	290a      	cmp	r1, #10
 8001bfe:	d014      	beq.n	8001c2a <_puts_r+0xbe>
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	6022      	str	r2, [r4, #0]
 8001c06:	7019      	strb	r1, [r3, #0]
 8001c08:	68a3      	ldr	r3, [r4, #8]
 8001c0a:	7831      	ldrb	r1, [r6, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	2900      	cmp	r1, #0
 8001c10:	d1ed      	bne.n	8001bee <_puts_r+0x82>
 8001c12:	60a3      	str	r3, [r4, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da0f      	bge.n	8001c38 <_puts_r+0xcc>
 8001c18:	0028      	movs	r0, r5
 8001c1a:	0022      	movs	r2, r4
 8001c1c:	310a      	adds	r1, #10
 8001c1e:	f000 f821 	bl	8001c64 <__swbuf_r>
 8001c22:	250a      	movs	r5, #10
 8001c24:	1c43      	adds	r3, r0, #1
 8001c26:	d1cd      	bne.n	8001bc4 <_puts_r+0x58>
 8001c28:	e7ca      	b.n	8001bc0 <_puts_r+0x54>
 8001c2a:	0022      	movs	r2, r4
 8001c2c:	0028      	movs	r0, r5
 8001c2e:	f000 f819 	bl	8001c64 <__swbuf_r>
 8001c32:	1c43      	adds	r3, r0, #1
 8001c34:	d1e8      	bne.n	8001c08 <_puts_r+0x9c>
 8001c36:	e7c3      	b.n	8001bc0 <_puts_r+0x54>
 8001c38:	250a      	movs	r5, #10
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	6022      	str	r2, [r4, #0]
 8001c40:	701d      	strb	r5, [r3, #0]
 8001c42:	e7bf      	b.n	8001bc4 <_puts_r+0x58>
 8001c44:	080025f0 	.word	0x080025f0
 8001c48:	08002610 	.word	0x08002610
 8001c4c:	080025d0 	.word	0x080025d0

08001c50 <puts>:
 8001c50:	b510      	push	{r4, lr}
 8001c52:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <puts+0x10>)
 8001c54:	0001      	movs	r1, r0
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f7ff ff88 	bl	8001b6c <_puts_r>
 8001c5c:	bd10      	pop	{r4, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	2000000c 	.word	0x2000000c

08001c64 <__swbuf_r>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	0005      	movs	r5, r0
 8001c68:	000e      	movs	r6, r1
 8001c6a:	0014      	movs	r4, r2
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d004      	beq.n	8001c7a <__swbuf_r+0x16>
 8001c70:	6983      	ldr	r3, [r0, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <__swbuf_r+0x16>
 8001c76:	f000 f9f1 	bl	800205c <__sinit>
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <__swbuf_r+0xa0>)
 8001c7c:	429c      	cmp	r4, r3
 8001c7e:	d12e      	bne.n	8001cde <__swbuf_r+0x7a>
 8001c80:	686c      	ldr	r4, [r5, #4]
 8001c82:	69a3      	ldr	r3, [r4, #24]
 8001c84:	60a3      	str	r3, [r4, #8]
 8001c86:	89a3      	ldrh	r3, [r4, #12]
 8001c88:	071b      	lsls	r3, r3, #28
 8001c8a:	d532      	bpl.n	8001cf2 <__swbuf_r+0x8e>
 8001c8c:	6923      	ldr	r3, [r4, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d02f      	beq.n	8001cf2 <__swbuf_r+0x8e>
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	6922      	ldr	r2, [r4, #16]
 8001c96:	b2f7      	uxtb	r7, r6
 8001c98:	1a98      	subs	r0, r3, r2
 8001c9a:	6963      	ldr	r3, [r4, #20]
 8001c9c:	b2f6      	uxtb	r6, r6
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	dc05      	bgt.n	8001cae <__swbuf_r+0x4a>
 8001ca2:	0021      	movs	r1, r4
 8001ca4:	0028      	movs	r0, r5
 8001ca6:	f000 f937 	bl	8001f18 <_fflush_r>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d127      	bne.n	8001cfe <__swbuf_r+0x9a>
 8001cae:	68a3      	ldr	r3, [r4, #8]
 8001cb0:	3001      	adds	r0, #1
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	60a3      	str	r3, [r4, #8]
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	6022      	str	r2, [r4, #0]
 8001cbc:	701f      	strb	r7, [r3, #0]
 8001cbe:	6963      	ldr	r3, [r4, #20]
 8001cc0:	4283      	cmp	r3, r0
 8001cc2:	d004      	beq.n	8001cce <__swbuf_r+0x6a>
 8001cc4:	89a3      	ldrh	r3, [r4, #12]
 8001cc6:	07db      	lsls	r3, r3, #31
 8001cc8:	d507      	bpl.n	8001cda <__swbuf_r+0x76>
 8001cca:	2e0a      	cmp	r6, #10
 8001ccc:	d105      	bne.n	8001cda <__swbuf_r+0x76>
 8001cce:	0021      	movs	r1, r4
 8001cd0:	0028      	movs	r0, r5
 8001cd2:	f000 f921 	bl	8001f18 <_fflush_r>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d111      	bne.n	8001cfe <__swbuf_r+0x9a>
 8001cda:	0030      	movs	r0, r6
 8001cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <__swbuf_r+0xa4>)
 8001ce0:	429c      	cmp	r4, r3
 8001ce2:	d101      	bne.n	8001ce8 <__swbuf_r+0x84>
 8001ce4:	68ac      	ldr	r4, [r5, #8]
 8001ce6:	e7cc      	b.n	8001c82 <__swbuf_r+0x1e>
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <__swbuf_r+0xa8>)
 8001cea:	429c      	cmp	r4, r3
 8001cec:	d1c9      	bne.n	8001c82 <__swbuf_r+0x1e>
 8001cee:	68ec      	ldr	r4, [r5, #12]
 8001cf0:	e7c7      	b.n	8001c82 <__swbuf_r+0x1e>
 8001cf2:	0021      	movs	r1, r4
 8001cf4:	0028      	movs	r0, r5
 8001cf6:	f000 f80b 	bl	8001d10 <__swsetup_r>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d0c9      	beq.n	8001c92 <__swbuf_r+0x2e>
 8001cfe:	2601      	movs	r6, #1
 8001d00:	4276      	negs	r6, r6
 8001d02:	e7ea      	b.n	8001cda <__swbuf_r+0x76>
 8001d04:	080025f0 	.word	0x080025f0
 8001d08:	08002610 	.word	0x08002610
 8001d0c:	080025d0 	.word	0x080025d0

08001d10 <__swsetup_r>:
 8001d10:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <__swsetup_r+0xe0>)
 8001d12:	b570      	push	{r4, r5, r6, lr}
 8001d14:	681d      	ldr	r5, [r3, #0]
 8001d16:	0006      	movs	r6, r0
 8001d18:	000c      	movs	r4, r1
 8001d1a:	2d00      	cmp	r5, #0
 8001d1c:	d005      	beq.n	8001d2a <__swsetup_r+0x1a>
 8001d1e:	69ab      	ldr	r3, [r5, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <__swsetup_r+0x1a>
 8001d24:	0028      	movs	r0, r5
 8001d26:	f000 f999 	bl	800205c <__sinit>
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <__swsetup_r+0xe4>)
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	d10f      	bne.n	8001d50 <__swsetup_r+0x40>
 8001d30:	686c      	ldr	r4, [r5, #4]
 8001d32:	230c      	movs	r3, #12
 8001d34:	5ee2      	ldrsh	r2, [r4, r3]
 8001d36:	b293      	uxth	r3, r2
 8001d38:	0711      	lsls	r1, r2, #28
 8001d3a:	d42d      	bmi.n	8001d98 <__swsetup_r+0x88>
 8001d3c:	06d9      	lsls	r1, r3, #27
 8001d3e:	d411      	bmi.n	8001d64 <__swsetup_r+0x54>
 8001d40:	2309      	movs	r3, #9
 8001d42:	2001      	movs	r0, #1
 8001d44:	6033      	str	r3, [r6, #0]
 8001d46:	3337      	adds	r3, #55	; 0x37
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	81a3      	strh	r3, [r4, #12]
 8001d4c:	4240      	negs	r0, r0
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <__swsetup_r+0xe8>)
 8001d52:	429c      	cmp	r4, r3
 8001d54:	d101      	bne.n	8001d5a <__swsetup_r+0x4a>
 8001d56:	68ac      	ldr	r4, [r5, #8]
 8001d58:	e7eb      	b.n	8001d32 <__swsetup_r+0x22>
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <__swsetup_r+0xec>)
 8001d5c:	429c      	cmp	r4, r3
 8001d5e:	d1e8      	bne.n	8001d32 <__swsetup_r+0x22>
 8001d60:	68ec      	ldr	r4, [r5, #12]
 8001d62:	e7e6      	b.n	8001d32 <__swsetup_r+0x22>
 8001d64:	075b      	lsls	r3, r3, #29
 8001d66:	d513      	bpl.n	8001d90 <__swsetup_r+0x80>
 8001d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d6a:	2900      	cmp	r1, #0
 8001d6c:	d008      	beq.n	8001d80 <__swsetup_r+0x70>
 8001d6e:	0023      	movs	r3, r4
 8001d70:	3344      	adds	r3, #68	; 0x44
 8001d72:	4299      	cmp	r1, r3
 8001d74:	d002      	beq.n	8001d7c <__swsetup_r+0x6c>
 8001d76:	0030      	movs	r0, r6
 8001d78:	f000 fa80 	bl	800227c <_free_r>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6363      	str	r3, [r4, #52]	; 0x34
 8001d80:	2224      	movs	r2, #36	; 0x24
 8001d82:	89a3      	ldrh	r3, [r4, #12]
 8001d84:	4393      	bics	r3, r2
 8001d86:	81a3      	strh	r3, [r4, #12]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6063      	str	r3, [r4, #4]
 8001d8c:	6923      	ldr	r3, [r4, #16]
 8001d8e:	6023      	str	r3, [r4, #0]
 8001d90:	2308      	movs	r3, #8
 8001d92:	89a2      	ldrh	r2, [r4, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	81a3      	strh	r3, [r4, #12]
 8001d98:	6923      	ldr	r3, [r4, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <__swsetup_r+0xa6>
 8001d9e:	21a0      	movs	r1, #160	; 0xa0
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	89a3      	ldrh	r3, [r4, #12]
 8001da4:	0089      	lsls	r1, r1, #2
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	400b      	ands	r3, r1
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d003      	beq.n	8001db6 <__swsetup_r+0xa6>
 8001dae:	0021      	movs	r1, r4
 8001db0:	0030      	movs	r0, r6
 8001db2:	f000 fa1f 	bl	80021f4 <__smakebuf_r>
 8001db6:	220c      	movs	r2, #12
 8001db8:	5ea3      	ldrsh	r3, [r4, r2]
 8001dba:	2001      	movs	r0, #1
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	b299      	uxth	r1, r3
 8001dc0:	4002      	ands	r2, r0
 8001dc2:	4203      	tst	r3, r0
 8001dc4:	d00f      	beq.n	8001de6 <__swsetup_r+0xd6>
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60a2      	str	r2, [r4, #8]
 8001dca:	6962      	ldr	r2, [r4, #20]
 8001dcc:	4252      	negs	r2, r2
 8001dce:	61a2      	str	r2, [r4, #24]
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	6922      	ldr	r2, [r4, #16]
 8001dd4:	4282      	cmp	r2, r0
 8001dd6:	d1ba      	bne.n	8001d4e <__swsetup_r+0x3e>
 8001dd8:	060a      	lsls	r2, r1, #24
 8001dda:	d5b8      	bpl.n	8001d4e <__swsetup_r+0x3e>
 8001ddc:	2240      	movs	r2, #64	; 0x40
 8001dde:	4313      	orrs	r3, r2
 8001de0:	81a3      	strh	r3, [r4, #12]
 8001de2:	3801      	subs	r0, #1
 8001de4:	e7b3      	b.n	8001d4e <__swsetup_r+0x3e>
 8001de6:	0788      	lsls	r0, r1, #30
 8001de8:	d400      	bmi.n	8001dec <__swsetup_r+0xdc>
 8001dea:	6962      	ldr	r2, [r4, #20]
 8001dec:	60a2      	str	r2, [r4, #8]
 8001dee:	e7ef      	b.n	8001dd0 <__swsetup_r+0xc0>
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	080025f0 	.word	0x080025f0
 8001df8:	08002610 	.word	0x08002610
 8001dfc:	080025d0 	.word	0x080025d0

08001e00 <__sflush_r>:
 8001e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e02:	898b      	ldrh	r3, [r1, #12]
 8001e04:	0005      	movs	r5, r0
 8001e06:	000c      	movs	r4, r1
 8001e08:	071a      	lsls	r2, r3, #28
 8001e0a:	d45f      	bmi.n	8001ecc <__sflush_r+0xcc>
 8001e0c:	684a      	ldr	r2, [r1, #4]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	dc04      	bgt.n	8001e1c <__sflush_r+0x1c>
 8001e12:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	dc01      	bgt.n	8001e1c <__sflush_r+0x1c>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e1c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001e1e:	2f00      	cmp	r7, #0
 8001e20:	d0fa      	beq.n	8001e18 <__sflush_r+0x18>
 8001e22:	2200      	movs	r2, #0
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	682e      	ldr	r6, [r5, #0]
 8001e28:	602a      	str	r2, [r5, #0]
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	0149      	lsls	r1, r1, #5
 8001e2e:	400a      	ands	r2, r1
 8001e30:	420b      	tst	r3, r1
 8001e32:	d034      	beq.n	8001e9e <__sflush_r+0x9e>
 8001e34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e36:	89a3      	ldrh	r3, [r4, #12]
 8001e38:	075b      	lsls	r3, r3, #29
 8001e3a:	d506      	bpl.n	8001e4a <__sflush_r+0x4a>
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	1ac0      	subs	r0, r0, r3
 8001e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <__sflush_r+0x4a>
 8001e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e48:	1ac0      	subs	r0, r0, r3
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	6a21      	ldr	r1, [r4, #32]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	0028      	movs	r0, r5
 8001e52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001e54:	47b8      	blx	r7
 8001e56:	89a1      	ldrh	r1, [r4, #12]
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d106      	bne.n	8001e6a <__sflush_r+0x6a>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	2b1d      	cmp	r3, #29
 8001e60:	d831      	bhi.n	8001ec6 <__sflush_r+0xc6>
 8001e62:	4a2c      	ldr	r2, [pc, #176]	; (8001f14 <__sflush_r+0x114>)
 8001e64:	40da      	lsrs	r2, r3
 8001e66:	07d3      	lsls	r3, r2, #31
 8001e68:	d52d      	bpl.n	8001ec6 <__sflush_r+0xc6>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6063      	str	r3, [r4, #4]
 8001e6e:	6923      	ldr	r3, [r4, #16]
 8001e70:	6023      	str	r3, [r4, #0]
 8001e72:	04cb      	lsls	r3, r1, #19
 8001e74:	d505      	bpl.n	8001e82 <__sflush_r+0x82>
 8001e76:	1c43      	adds	r3, r0, #1
 8001e78:	d102      	bne.n	8001e80 <__sflush_r+0x80>
 8001e7a:	682b      	ldr	r3, [r5, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d100      	bne.n	8001e82 <__sflush_r+0x82>
 8001e80:	6560      	str	r0, [r4, #84]	; 0x54
 8001e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e84:	602e      	str	r6, [r5, #0]
 8001e86:	2900      	cmp	r1, #0
 8001e88:	d0c6      	beq.n	8001e18 <__sflush_r+0x18>
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	3344      	adds	r3, #68	; 0x44
 8001e8e:	4299      	cmp	r1, r3
 8001e90:	d002      	beq.n	8001e98 <__sflush_r+0x98>
 8001e92:	0028      	movs	r0, r5
 8001e94:	f000 f9f2 	bl	800227c <_free_r>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	6360      	str	r0, [r4, #52]	; 0x34
 8001e9c:	e7bd      	b.n	8001e1a <__sflush_r+0x1a>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	0028      	movs	r0, r5
 8001ea2:	6a21      	ldr	r1, [r4, #32]
 8001ea4:	47b8      	blx	r7
 8001ea6:	1c43      	adds	r3, r0, #1
 8001ea8:	d1c5      	bne.n	8001e36 <__sflush_r+0x36>
 8001eaa:	682b      	ldr	r3, [r5, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0c2      	beq.n	8001e36 <__sflush_r+0x36>
 8001eb0:	2b1d      	cmp	r3, #29
 8001eb2:	d001      	beq.n	8001eb8 <__sflush_r+0xb8>
 8001eb4:	2b16      	cmp	r3, #22
 8001eb6:	d101      	bne.n	8001ebc <__sflush_r+0xbc>
 8001eb8:	602e      	str	r6, [r5, #0]
 8001eba:	e7ad      	b.n	8001e18 <__sflush_r+0x18>
 8001ebc:	2340      	movs	r3, #64	; 0x40
 8001ebe:	89a2      	ldrh	r2, [r4, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	e7a9      	b.n	8001e1a <__sflush_r+0x1a>
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	e7fa      	b.n	8001ec2 <__sflush_r+0xc2>
 8001ecc:	690f      	ldr	r7, [r1, #16]
 8001ece:	2f00      	cmp	r7, #0
 8001ed0:	d0a2      	beq.n	8001e18 <__sflush_r+0x18>
 8001ed2:	680a      	ldr	r2, [r1, #0]
 8001ed4:	600f      	str	r7, [r1, #0]
 8001ed6:	1bd2      	subs	r2, r2, r7
 8001ed8:	9201      	str	r2, [sp, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	079b      	lsls	r3, r3, #30
 8001ede:	d100      	bne.n	8001ee2 <__sflush_r+0xe2>
 8001ee0:	694a      	ldr	r2, [r1, #20]
 8001ee2:	60a2      	str	r2, [r4, #8]
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	dc00      	bgt.n	8001eec <__sflush_r+0xec>
 8001eea:	e795      	b.n	8001e18 <__sflush_r+0x18>
 8001eec:	003a      	movs	r2, r7
 8001eee:	0028      	movs	r0, r5
 8001ef0:	9b01      	ldr	r3, [sp, #4]
 8001ef2:	6a21      	ldr	r1, [r4, #32]
 8001ef4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ef6:	47b0      	blx	r6
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	dc06      	bgt.n	8001f0a <__sflush_r+0x10a>
 8001efc:	2340      	movs	r3, #64	; 0x40
 8001efe:	2001      	movs	r0, #1
 8001f00:	89a2      	ldrh	r2, [r4, #12]
 8001f02:	4240      	negs	r0, r0
 8001f04:	4313      	orrs	r3, r2
 8001f06:	81a3      	strh	r3, [r4, #12]
 8001f08:	e787      	b.n	8001e1a <__sflush_r+0x1a>
 8001f0a:	9b01      	ldr	r3, [sp, #4]
 8001f0c:	183f      	adds	r7, r7, r0
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	e7e7      	b.n	8001ee4 <__sflush_r+0xe4>
 8001f14:	20400001 	.word	0x20400001

08001f18 <_fflush_r>:
 8001f18:	690b      	ldr	r3, [r1, #16]
 8001f1a:	b570      	push	{r4, r5, r6, lr}
 8001f1c:	0005      	movs	r5, r0
 8001f1e:	000c      	movs	r4, r1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_fflush_r+0x12>
 8001f24:	2500      	movs	r5, #0
 8001f26:	0028      	movs	r0, r5
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d004      	beq.n	8001f38 <_fflush_r+0x20>
 8001f2e:	6983      	ldr	r3, [r0, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <_fflush_r+0x20>
 8001f34:	f000 f892 	bl	800205c <__sinit>
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <_fflush_r+0x74>)
 8001f3a:	429c      	cmp	r4, r3
 8001f3c:	d11b      	bne.n	8001f76 <_fflush_r+0x5e>
 8001f3e:	686c      	ldr	r4, [r5, #4]
 8001f40:	220c      	movs	r2, #12
 8001f42:	5ea3      	ldrsh	r3, [r4, r2]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ed      	beq.n	8001f24 <_fflush_r+0xc>
 8001f48:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f4a:	07d2      	lsls	r2, r2, #31
 8001f4c:	d404      	bmi.n	8001f58 <_fflush_r+0x40>
 8001f4e:	059b      	lsls	r3, r3, #22
 8001f50:	d402      	bmi.n	8001f58 <_fflush_r+0x40>
 8001f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f54:	f000 f923 	bl	800219e <__retarget_lock_acquire_recursive>
 8001f58:	0028      	movs	r0, r5
 8001f5a:	0021      	movs	r1, r4
 8001f5c:	f7ff ff50 	bl	8001e00 <__sflush_r>
 8001f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f62:	0005      	movs	r5, r0
 8001f64:	07db      	lsls	r3, r3, #31
 8001f66:	d4de      	bmi.n	8001f26 <_fflush_r+0xe>
 8001f68:	89a3      	ldrh	r3, [r4, #12]
 8001f6a:	059b      	lsls	r3, r3, #22
 8001f6c:	d4db      	bmi.n	8001f26 <_fflush_r+0xe>
 8001f6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f70:	f000 f916 	bl	80021a0 <__retarget_lock_release_recursive>
 8001f74:	e7d7      	b.n	8001f26 <_fflush_r+0xe>
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <_fflush_r+0x78>)
 8001f78:	429c      	cmp	r4, r3
 8001f7a:	d101      	bne.n	8001f80 <_fflush_r+0x68>
 8001f7c:	68ac      	ldr	r4, [r5, #8]
 8001f7e:	e7df      	b.n	8001f40 <_fflush_r+0x28>
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <_fflush_r+0x7c>)
 8001f82:	429c      	cmp	r4, r3
 8001f84:	d1dc      	bne.n	8001f40 <_fflush_r+0x28>
 8001f86:	68ec      	ldr	r4, [r5, #12]
 8001f88:	e7da      	b.n	8001f40 <_fflush_r+0x28>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	080025f0 	.word	0x080025f0
 8001f90:	08002610 	.word	0x08002610
 8001f94:	080025d0 	.word	0x080025d0

08001f98 <std>:
 8001f98:	2300      	movs	r3, #0
 8001f9a:	b510      	push	{r4, lr}
 8001f9c:	0004      	movs	r4, r0
 8001f9e:	6003      	str	r3, [r0, #0]
 8001fa0:	6043      	str	r3, [r0, #4]
 8001fa2:	6083      	str	r3, [r0, #8]
 8001fa4:	8181      	strh	r1, [r0, #12]
 8001fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8001fa8:	0019      	movs	r1, r3
 8001faa:	81c2      	strh	r2, [r0, #14]
 8001fac:	6103      	str	r3, [r0, #16]
 8001fae:	6143      	str	r3, [r0, #20]
 8001fb0:	6183      	str	r3, [r0, #24]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	305c      	adds	r0, #92	; 0x5c
 8001fb6:	f7ff fdd1 	bl	8001b5c <memset>
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <std+0x38>)
 8001fbc:	6263      	str	r3, [r4, #36]	; 0x24
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <std+0x3c>)
 8001fc0:	6224      	str	r4, [r4, #32]
 8001fc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <std+0x40>)
 8001fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <std+0x44>)
 8001fca:	6323      	str	r3, [r4, #48]	; 0x30
 8001fcc:	bd10      	pop	{r4, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	080023f1 	.word	0x080023f1
 8001fd4:	08002419 	.word	0x08002419
 8001fd8:	08002451 	.word	0x08002451
 8001fdc:	0800247d 	.word	0x0800247d

08001fe0 <_cleanup_r>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	4902      	ldr	r1, [pc, #8]	; (8001fec <_cleanup_r+0xc>)
 8001fe4:	f000 f8ba 	bl	800215c <_fwalk_reent>
 8001fe8:	bd10      	pop	{r4, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	08001f19 	.word	0x08001f19

08001ff0 <__sfmoreglue>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	2568      	movs	r5, #104	; 0x68
 8001ff4:	1e4a      	subs	r2, r1, #1
 8001ff6:	4355      	muls	r5, r2
 8001ff8:	000e      	movs	r6, r1
 8001ffa:	0029      	movs	r1, r5
 8001ffc:	3174      	adds	r1, #116	; 0x74
 8001ffe:	f000 f987 	bl	8002310 <_malloc_r>
 8002002:	1e04      	subs	r4, r0, #0
 8002004:	d008      	beq.n	8002018 <__sfmoreglue+0x28>
 8002006:	2100      	movs	r1, #0
 8002008:	002a      	movs	r2, r5
 800200a:	6001      	str	r1, [r0, #0]
 800200c:	6046      	str	r6, [r0, #4]
 800200e:	300c      	adds	r0, #12
 8002010:	60a0      	str	r0, [r4, #8]
 8002012:	3268      	adds	r2, #104	; 0x68
 8002014:	f7ff fda2 	bl	8001b5c <memset>
 8002018:	0020      	movs	r0, r4
 800201a:	bd70      	pop	{r4, r5, r6, pc}

0800201c <__sfp_lock_acquire>:
 800201c:	b510      	push	{r4, lr}
 800201e:	4802      	ldr	r0, [pc, #8]	; (8002028 <__sfp_lock_acquire+0xc>)
 8002020:	f000 f8bd 	bl	800219e <__retarget_lock_acquire_recursive>
 8002024:	bd10      	pop	{r4, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	200000fc 	.word	0x200000fc

0800202c <__sfp_lock_release>:
 800202c:	b510      	push	{r4, lr}
 800202e:	4802      	ldr	r0, [pc, #8]	; (8002038 <__sfp_lock_release+0xc>)
 8002030:	f000 f8b6 	bl	80021a0 <__retarget_lock_release_recursive>
 8002034:	bd10      	pop	{r4, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	200000fc 	.word	0x200000fc

0800203c <__sinit_lock_acquire>:
 800203c:	b510      	push	{r4, lr}
 800203e:	4802      	ldr	r0, [pc, #8]	; (8002048 <__sinit_lock_acquire+0xc>)
 8002040:	f000 f8ad 	bl	800219e <__retarget_lock_acquire_recursive>
 8002044:	bd10      	pop	{r4, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	200000f7 	.word	0x200000f7

0800204c <__sinit_lock_release>:
 800204c:	b510      	push	{r4, lr}
 800204e:	4802      	ldr	r0, [pc, #8]	; (8002058 <__sinit_lock_release+0xc>)
 8002050:	f000 f8a6 	bl	80021a0 <__retarget_lock_release_recursive>
 8002054:	bd10      	pop	{r4, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	200000f7 	.word	0x200000f7

0800205c <__sinit>:
 800205c:	b513      	push	{r0, r1, r4, lr}
 800205e:	0004      	movs	r4, r0
 8002060:	f7ff ffec 	bl	800203c <__sinit_lock_acquire>
 8002064:	69a3      	ldr	r3, [r4, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <__sinit+0x14>
 800206a:	f7ff ffef 	bl	800204c <__sinit_lock_release>
 800206e:	bd13      	pop	{r0, r1, r4, pc}
 8002070:	64a3      	str	r3, [r4, #72]	; 0x48
 8002072:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002074:	6523      	str	r3, [r4, #80]	; 0x50
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <__sinit+0x68>)
 8002078:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <__sinit+0x6c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	62a2      	str	r2, [r4, #40]	; 0x28
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	42a3      	cmp	r3, r4
 8002082:	d101      	bne.n	8002088 <__sinit+0x2c>
 8002084:	2301      	movs	r3, #1
 8002086:	61a3      	str	r3, [r4, #24]
 8002088:	0020      	movs	r0, r4
 800208a:	f000 f81f 	bl	80020cc <__sfp>
 800208e:	6060      	str	r0, [r4, #4]
 8002090:	0020      	movs	r0, r4
 8002092:	f000 f81b 	bl	80020cc <__sfp>
 8002096:	60a0      	str	r0, [r4, #8]
 8002098:	0020      	movs	r0, r4
 800209a:	f000 f817 	bl	80020cc <__sfp>
 800209e:	2200      	movs	r2, #0
 80020a0:	2104      	movs	r1, #4
 80020a2:	60e0      	str	r0, [r4, #12]
 80020a4:	6860      	ldr	r0, [r4, #4]
 80020a6:	f7ff ff77 	bl	8001f98 <std>
 80020aa:	2201      	movs	r2, #1
 80020ac:	2109      	movs	r1, #9
 80020ae:	68a0      	ldr	r0, [r4, #8]
 80020b0:	f7ff ff72 	bl	8001f98 <std>
 80020b4:	2202      	movs	r2, #2
 80020b6:	2112      	movs	r1, #18
 80020b8:	68e0      	ldr	r0, [r4, #12]
 80020ba:	f7ff ff6d 	bl	8001f98 <std>
 80020be:	2301      	movs	r3, #1
 80020c0:	61a3      	str	r3, [r4, #24]
 80020c2:	e7d2      	b.n	800206a <__sinit+0xe>
 80020c4:	080025cc 	.word	0x080025cc
 80020c8:	08001fe1 	.word	0x08001fe1

080020cc <__sfp>:
 80020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ce:	0007      	movs	r7, r0
 80020d0:	f7ff ffa4 	bl	800201c <__sfp_lock_acquire>
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <__sfp+0x88>)
 80020d6:	681e      	ldr	r6, [r3, #0]
 80020d8:	69b3      	ldr	r3, [r6, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <__sfp+0x18>
 80020de:	0030      	movs	r0, r6
 80020e0:	f7ff ffbc 	bl	800205c <__sinit>
 80020e4:	3648      	adds	r6, #72	; 0x48
 80020e6:	68b4      	ldr	r4, [r6, #8]
 80020e8:	6873      	ldr	r3, [r6, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	d504      	bpl.n	80020f8 <__sfp+0x2c>
 80020ee:	6833      	ldr	r3, [r6, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d022      	beq.n	800213a <__sfp+0x6e>
 80020f4:	6836      	ldr	r6, [r6, #0]
 80020f6:	e7f6      	b.n	80020e6 <__sfp+0x1a>
 80020f8:	220c      	movs	r2, #12
 80020fa:	5ea5      	ldrsh	r5, [r4, r2]
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	d11a      	bne.n	8002136 <__sfp+0x6a>
 8002100:	0020      	movs	r0, r4
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <__sfp+0x8c>)
 8002104:	3058      	adds	r0, #88	; 0x58
 8002106:	60e3      	str	r3, [r4, #12]
 8002108:	6665      	str	r5, [r4, #100]	; 0x64
 800210a:	f000 f847 	bl	800219c <__retarget_lock_init_recursive>
 800210e:	f7ff ff8d 	bl	800202c <__sfp_lock_release>
 8002112:	0020      	movs	r0, r4
 8002114:	2208      	movs	r2, #8
 8002116:	0029      	movs	r1, r5
 8002118:	6025      	str	r5, [r4, #0]
 800211a:	60a5      	str	r5, [r4, #8]
 800211c:	6065      	str	r5, [r4, #4]
 800211e:	6125      	str	r5, [r4, #16]
 8002120:	6165      	str	r5, [r4, #20]
 8002122:	61a5      	str	r5, [r4, #24]
 8002124:	305c      	adds	r0, #92	; 0x5c
 8002126:	f7ff fd19 	bl	8001b5c <memset>
 800212a:	6365      	str	r5, [r4, #52]	; 0x34
 800212c:	63a5      	str	r5, [r4, #56]	; 0x38
 800212e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002130:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002132:	0020      	movs	r0, r4
 8002134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002136:	3468      	adds	r4, #104	; 0x68
 8002138:	e7d7      	b.n	80020ea <__sfp+0x1e>
 800213a:	2104      	movs	r1, #4
 800213c:	0038      	movs	r0, r7
 800213e:	f7ff ff57 	bl	8001ff0 <__sfmoreglue>
 8002142:	1e04      	subs	r4, r0, #0
 8002144:	6030      	str	r0, [r6, #0]
 8002146:	d1d5      	bne.n	80020f4 <__sfp+0x28>
 8002148:	f7ff ff70 	bl	800202c <__sfp_lock_release>
 800214c:	230c      	movs	r3, #12
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	e7ef      	b.n	8002132 <__sfp+0x66>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	080025cc 	.word	0x080025cc
 8002158:	ffff0001 	.word	0xffff0001

0800215c <_fwalk_reent>:
 800215c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800215e:	0004      	movs	r4, r0
 8002160:	0006      	movs	r6, r0
 8002162:	2700      	movs	r7, #0
 8002164:	9101      	str	r1, [sp, #4]
 8002166:	3448      	adds	r4, #72	; 0x48
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	68a5      	ldr	r5, [r4, #8]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	9b00      	ldr	r3, [sp, #0]
 8002170:	3b01      	subs	r3, #1
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	d504      	bpl.n	8002180 <_fwalk_reent+0x24>
 8002176:	6824      	ldr	r4, [r4, #0]
 8002178:	2c00      	cmp	r4, #0
 800217a:	d1f5      	bne.n	8002168 <_fwalk_reent+0xc>
 800217c:	0038      	movs	r0, r7
 800217e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002180:	89ab      	ldrh	r3, [r5, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d908      	bls.n	8002198 <_fwalk_reent+0x3c>
 8002186:	220e      	movs	r2, #14
 8002188:	5eab      	ldrsh	r3, [r5, r2]
 800218a:	3301      	adds	r3, #1
 800218c:	d004      	beq.n	8002198 <_fwalk_reent+0x3c>
 800218e:	0029      	movs	r1, r5
 8002190:	0030      	movs	r0, r6
 8002192:	9b01      	ldr	r3, [sp, #4]
 8002194:	4798      	blx	r3
 8002196:	4307      	orrs	r7, r0
 8002198:	3568      	adds	r5, #104	; 0x68
 800219a:	e7e8      	b.n	800216e <_fwalk_reent+0x12>

0800219c <__retarget_lock_init_recursive>:
 800219c:	4770      	bx	lr

0800219e <__retarget_lock_acquire_recursive>:
 800219e:	4770      	bx	lr

080021a0 <__retarget_lock_release_recursive>:
 80021a0:	4770      	bx	lr
	...

080021a4 <__swhatbuf_r>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	000e      	movs	r6, r1
 80021a8:	001d      	movs	r5, r3
 80021aa:	230e      	movs	r3, #14
 80021ac:	5ec9      	ldrsh	r1, [r1, r3]
 80021ae:	0014      	movs	r4, r2
 80021b0:	b096      	sub	sp, #88	; 0x58
 80021b2:	2900      	cmp	r1, #0
 80021b4:	da07      	bge.n	80021c6 <__swhatbuf_r+0x22>
 80021b6:	2300      	movs	r3, #0
 80021b8:	602b      	str	r3, [r5, #0]
 80021ba:	89b3      	ldrh	r3, [r6, #12]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	d411      	bmi.n	80021e4 <__swhatbuf_r+0x40>
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	e00f      	b.n	80021e6 <__swhatbuf_r+0x42>
 80021c6:	466a      	mov	r2, sp
 80021c8:	f000 f984 	bl	80024d4 <_fstat_r>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	dbf2      	blt.n	80021b6 <__swhatbuf_r+0x12>
 80021d0:	23f0      	movs	r3, #240	; 0xf0
 80021d2:	9901      	ldr	r1, [sp, #4]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	4019      	ands	r1, r3
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <__swhatbuf_r+0x4c>)
 80021da:	18c9      	adds	r1, r1, r3
 80021dc:	424b      	negs	r3, r1
 80021de:	4159      	adcs	r1, r3
 80021e0:	6029      	str	r1, [r5, #0]
 80021e2:	e7ed      	b.n	80021c0 <__swhatbuf_r+0x1c>
 80021e4:	2340      	movs	r3, #64	; 0x40
 80021e6:	2000      	movs	r0, #0
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	b016      	add	sp, #88	; 0x58
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	ffffe000 	.word	0xffffe000

080021f4 <__smakebuf_r>:
 80021f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021f6:	2602      	movs	r6, #2
 80021f8:	898b      	ldrh	r3, [r1, #12]
 80021fa:	0005      	movs	r5, r0
 80021fc:	000c      	movs	r4, r1
 80021fe:	4233      	tst	r3, r6
 8002200:	d006      	beq.n	8002210 <__smakebuf_r+0x1c>
 8002202:	0023      	movs	r3, r4
 8002204:	3347      	adds	r3, #71	; 0x47
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	6123      	str	r3, [r4, #16]
 800220a:	2301      	movs	r3, #1
 800220c:	6163      	str	r3, [r4, #20]
 800220e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002210:	466a      	mov	r2, sp
 8002212:	ab01      	add	r3, sp, #4
 8002214:	f7ff ffc6 	bl	80021a4 <__swhatbuf_r>
 8002218:	9900      	ldr	r1, [sp, #0]
 800221a:	0007      	movs	r7, r0
 800221c:	0028      	movs	r0, r5
 800221e:	f000 f877 	bl	8002310 <_malloc_r>
 8002222:	2800      	cmp	r0, #0
 8002224:	d108      	bne.n	8002238 <__smakebuf_r+0x44>
 8002226:	220c      	movs	r2, #12
 8002228:	5ea3      	ldrsh	r3, [r4, r2]
 800222a:	059a      	lsls	r2, r3, #22
 800222c:	d4ef      	bmi.n	800220e <__smakebuf_r+0x1a>
 800222e:	2203      	movs	r2, #3
 8002230:	4393      	bics	r3, r2
 8002232:	431e      	orrs	r6, r3
 8002234:	81a6      	strh	r6, [r4, #12]
 8002236:	e7e4      	b.n	8002202 <__smakebuf_r+0xe>
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <__smakebuf_r+0x84>)
 800223a:	62ab      	str	r3, [r5, #40]	; 0x28
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	89a2      	ldrh	r2, [r4, #12]
 8002240:	6020      	str	r0, [r4, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	81a3      	strh	r3, [r4, #12]
 8002246:	9b00      	ldr	r3, [sp, #0]
 8002248:	6120      	str	r0, [r4, #16]
 800224a:	6163      	str	r3, [r4, #20]
 800224c:	9b01      	ldr	r3, [sp, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <__smakebuf_r+0x7a>
 8002252:	0028      	movs	r0, r5
 8002254:	230e      	movs	r3, #14
 8002256:	5ee1      	ldrsh	r1, [r4, r3]
 8002258:	f000 f94e 	bl	80024f8 <_isatty_r>
 800225c:	2800      	cmp	r0, #0
 800225e:	d006      	beq.n	800226e <__smakebuf_r+0x7a>
 8002260:	2203      	movs	r2, #3
 8002262:	89a3      	ldrh	r3, [r4, #12]
 8002264:	4393      	bics	r3, r2
 8002266:	001a      	movs	r2, r3
 8002268:	2301      	movs	r3, #1
 800226a:	4313      	orrs	r3, r2
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	89a0      	ldrh	r0, [r4, #12]
 8002270:	4307      	orrs	r7, r0
 8002272:	81a7      	strh	r7, [r4, #12]
 8002274:	e7cb      	b.n	800220e <__smakebuf_r+0x1a>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	08001fe1 	.word	0x08001fe1

0800227c <_free_r>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	0005      	movs	r5, r0
 8002280:	2900      	cmp	r1, #0
 8002282:	d010      	beq.n	80022a6 <_free_r+0x2a>
 8002284:	1f0c      	subs	r4, r1, #4
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da00      	bge.n	800228e <_free_r+0x12>
 800228c:	18e4      	adds	r4, r4, r3
 800228e:	0028      	movs	r0, r5
 8002290:	f000 f958 	bl	8002544 <__malloc_lock>
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <_free_r+0x90>)
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <_free_r+0x2c>
 800229c:	6063      	str	r3, [r4, #4]
 800229e:	6014      	str	r4, [r2, #0]
 80022a0:	0028      	movs	r0, r5
 80022a2:	f000 f957 	bl	8002554 <__malloc_unlock>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	42a3      	cmp	r3, r4
 80022aa:	d908      	bls.n	80022be <_free_r+0x42>
 80022ac:	6821      	ldr	r1, [r4, #0]
 80022ae:	1860      	adds	r0, r4, r1
 80022b0:	4283      	cmp	r3, r0
 80022b2:	d1f3      	bne.n	800229c <_free_r+0x20>
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	1841      	adds	r1, r0, r1
 80022ba:	6021      	str	r1, [r4, #0]
 80022bc:	e7ee      	b.n	800229c <_free_r+0x20>
 80022be:	001a      	movs	r2, r3
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <_free_r+0x4e>
 80022c6:	42a3      	cmp	r3, r4
 80022c8:	d9f9      	bls.n	80022be <_free_r+0x42>
 80022ca:	6811      	ldr	r1, [r2, #0]
 80022cc:	1850      	adds	r0, r2, r1
 80022ce:	42a0      	cmp	r0, r4
 80022d0:	d10b      	bne.n	80022ea <_free_r+0x6e>
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	1809      	adds	r1, r1, r0
 80022d6:	1850      	adds	r0, r2, r1
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	4283      	cmp	r3, r0
 80022dc:	d1e0      	bne.n	80022a0 <_free_r+0x24>
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	1841      	adds	r1, r0, r1
 80022e4:	6011      	str	r1, [r2, #0]
 80022e6:	6053      	str	r3, [r2, #4]
 80022e8:	e7da      	b.n	80022a0 <_free_r+0x24>
 80022ea:	42a0      	cmp	r0, r4
 80022ec:	d902      	bls.n	80022f4 <_free_r+0x78>
 80022ee:	230c      	movs	r3, #12
 80022f0:	602b      	str	r3, [r5, #0]
 80022f2:	e7d5      	b.n	80022a0 <_free_r+0x24>
 80022f4:	6821      	ldr	r1, [r4, #0]
 80022f6:	1860      	adds	r0, r4, r1
 80022f8:	4283      	cmp	r3, r0
 80022fa:	d103      	bne.n	8002304 <_free_r+0x88>
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	1841      	adds	r1, r0, r1
 8002302:	6021      	str	r1, [r4, #0]
 8002304:	6063      	str	r3, [r4, #4]
 8002306:	6054      	str	r4, [r2, #4]
 8002308:	e7ca      	b.n	80022a0 <_free_r+0x24>
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	20000090 	.word	0x20000090

08002310 <_malloc_r>:
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002312:	2303      	movs	r3, #3
 8002314:	1ccd      	adds	r5, r1, #3
 8002316:	439d      	bics	r5, r3
 8002318:	3508      	adds	r5, #8
 800231a:	0006      	movs	r6, r0
 800231c:	2d0c      	cmp	r5, #12
 800231e:	d21f      	bcs.n	8002360 <_malloc_r+0x50>
 8002320:	250c      	movs	r5, #12
 8002322:	42a9      	cmp	r1, r5
 8002324:	d81e      	bhi.n	8002364 <_malloc_r+0x54>
 8002326:	0030      	movs	r0, r6
 8002328:	f000 f90c 	bl	8002544 <__malloc_lock>
 800232c:	4925      	ldr	r1, [pc, #148]	; (80023c4 <_malloc_r+0xb4>)
 800232e:	680a      	ldr	r2, [r1, #0]
 8002330:	0014      	movs	r4, r2
 8002332:	2c00      	cmp	r4, #0
 8002334:	d11a      	bne.n	800236c <_malloc_r+0x5c>
 8002336:	4f24      	ldr	r7, [pc, #144]	; (80023c8 <_malloc_r+0xb8>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <_malloc_r+0x38>
 800233e:	0021      	movs	r1, r4
 8002340:	0030      	movs	r0, r6
 8002342:	f000 f843 	bl	80023cc <_sbrk_r>
 8002346:	6038      	str	r0, [r7, #0]
 8002348:	0029      	movs	r1, r5
 800234a:	0030      	movs	r0, r6
 800234c:	f000 f83e 	bl	80023cc <_sbrk_r>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	d12b      	bne.n	80023ac <_malloc_r+0x9c>
 8002354:	230c      	movs	r3, #12
 8002356:	0030      	movs	r0, r6
 8002358:	6033      	str	r3, [r6, #0]
 800235a:	f000 f8fb 	bl	8002554 <__malloc_unlock>
 800235e:	e003      	b.n	8002368 <_malloc_r+0x58>
 8002360:	2d00      	cmp	r5, #0
 8002362:	dade      	bge.n	8002322 <_malloc_r+0x12>
 8002364:	230c      	movs	r3, #12
 8002366:	6033      	str	r3, [r6, #0]
 8002368:	2000      	movs	r0, #0
 800236a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	1b5b      	subs	r3, r3, r5
 8002370:	d419      	bmi.n	80023a6 <_malloc_r+0x96>
 8002372:	2b0b      	cmp	r3, #11
 8002374:	d903      	bls.n	800237e <_malloc_r+0x6e>
 8002376:	6023      	str	r3, [r4, #0]
 8002378:	18e4      	adds	r4, r4, r3
 800237a:	6025      	str	r5, [r4, #0]
 800237c:	e003      	b.n	8002386 <_malloc_r+0x76>
 800237e:	6863      	ldr	r3, [r4, #4]
 8002380:	42a2      	cmp	r2, r4
 8002382:	d10e      	bne.n	80023a2 <_malloc_r+0x92>
 8002384:	600b      	str	r3, [r1, #0]
 8002386:	0030      	movs	r0, r6
 8002388:	f000 f8e4 	bl	8002554 <__malloc_unlock>
 800238c:	0020      	movs	r0, r4
 800238e:	2207      	movs	r2, #7
 8002390:	300b      	adds	r0, #11
 8002392:	1d23      	adds	r3, r4, #4
 8002394:	4390      	bics	r0, r2
 8002396:	1ac2      	subs	r2, r0, r3
 8002398:	4298      	cmp	r0, r3
 800239a:	d0e6      	beq.n	800236a <_malloc_r+0x5a>
 800239c:	1a1b      	subs	r3, r3, r0
 800239e:	50a3      	str	r3, [r4, r2]
 80023a0:	e7e3      	b.n	800236a <_malloc_r+0x5a>
 80023a2:	6053      	str	r3, [r2, #4]
 80023a4:	e7ef      	b.n	8002386 <_malloc_r+0x76>
 80023a6:	0022      	movs	r2, r4
 80023a8:	6864      	ldr	r4, [r4, #4]
 80023aa:	e7c2      	b.n	8002332 <_malloc_r+0x22>
 80023ac:	2303      	movs	r3, #3
 80023ae:	1cc4      	adds	r4, r0, #3
 80023b0:	439c      	bics	r4, r3
 80023b2:	42a0      	cmp	r0, r4
 80023b4:	d0e1      	beq.n	800237a <_malloc_r+0x6a>
 80023b6:	1a21      	subs	r1, r4, r0
 80023b8:	0030      	movs	r0, r6
 80023ba:	f000 f807 	bl	80023cc <_sbrk_r>
 80023be:	1c43      	adds	r3, r0, #1
 80023c0:	d1db      	bne.n	800237a <_malloc_r+0x6a>
 80023c2:	e7c7      	b.n	8002354 <_malloc_r+0x44>
 80023c4:	20000090 	.word	0x20000090
 80023c8:	20000094 	.word	0x20000094

080023cc <_sbrk_r>:
 80023cc:	2300      	movs	r3, #0
 80023ce:	b570      	push	{r4, r5, r6, lr}
 80023d0:	4d06      	ldr	r5, [pc, #24]	; (80023ec <_sbrk_r+0x20>)
 80023d2:	0004      	movs	r4, r0
 80023d4:	0008      	movs	r0, r1
 80023d6:	602b      	str	r3, [r5, #0]
 80023d8:	f7fe fa32 	bl	8000840 <_sbrk>
 80023dc:	1c43      	adds	r3, r0, #1
 80023de:	d103      	bne.n	80023e8 <_sbrk_r+0x1c>
 80023e0:	682b      	ldr	r3, [r5, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d000      	beq.n	80023e8 <_sbrk_r+0x1c>
 80023e6:	6023      	str	r3, [r4, #0]
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	20000100 	.word	0x20000100

080023f0 <__sread>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	000c      	movs	r4, r1
 80023f4:	250e      	movs	r5, #14
 80023f6:	5f49      	ldrsh	r1, [r1, r5]
 80023f8:	f000 f8b4 	bl	8002564 <_read_r>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	db03      	blt.n	8002408 <__sread+0x18>
 8002400:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002402:	181b      	adds	r3, r3, r0
 8002404:	6563      	str	r3, [r4, #84]	; 0x54
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	89a3      	ldrh	r3, [r4, #12]
 800240a:	4a02      	ldr	r2, [pc, #8]	; (8002414 <__sread+0x24>)
 800240c:	4013      	ands	r3, r2
 800240e:	81a3      	strh	r3, [r4, #12]
 8002410:	e7f9      	b.n	8002406 <__sread+0x16>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	ffffefff 	.word	0xffffefff

08002418 <__swrite>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	001f      	movs	r7, r3
 800241c:	898b      	ldrh	r3, [r1, #12]
 800241e:	0005      	movs	r5, r0
 8002420:	000c      	movs	r4, r1
 8002422:	0016      	movs	r6, r2
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	d505      	bpl.n	8002434 <__swrite+0x1c>
 8002428:	230e      	movs	r3, #14
 800242a:	5ec9      	ldrsh	r1, [r1, r3]
 800242c:	2200      	movs	r2, #0
 800242e:	2302      	movs	r3, #2
 8002430:	f000 f874 	bl	800251c <_lseek_r>
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <__swrite+0x34>)
 8002438:	0028      	movs	r0, r5
 800243a:	4013      	ands	r3, r2
 800243c:	81a3      	strh	r3, [r4, #12]
 800243e:	0032      	movs	r2, r6
 8002440:	230e      	movs	r3, #14
 8002442:	5ee1      	ldrsh	r1, [r4, r3]
 8002444:	003b      	movs	r3, r7
 8002446:	f000 f81f 	bl	8002488 <_write_r>
 800244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800244c:	ffffefff 	.word	0xffffefff

08002450 <__sseek>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	000c      	movs	r4, r1
 8002454:	250e      	movs	r5, #14
 8002456:	5f49      	ldrsh	r1, [r1, r5]
 8002458:	f000 f860 	bl	800251c <_lseek_r>
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	1c42      	adds	r2, r0, #1
 8002460:	d103      	bne.n	800246a <__sseek+0x1a>
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <__sseek+0x28>)
 8002464:	4013      	ands	r3, r2
 8002466:	81a3      	strh	r3, [r4, #12]
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	0152      	lsls	r2, r2, #5
 800246e:	4313      	orrs	r3, r2
 8002470:	81a3      	strh	r3, [r4, #12]
 8002472:	6560      	str	r0, [r4, #84]	; 0x54
 8002474:	e7f8      	b.n	8002468 <__sseek+0x18>
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	ffffefff 	.word	0xffffefff

0800247c <__sclose>:
 800247c:	b510      	push	{r4, lr}
 800247e:	230e      	movs	r3, #14
 8002480:	5ec9      	ldrsh	r1, [r1, r3]
 8002482:	f000 f815 	bl	80024b0 <_close_r>
 8002486:	bd10      	pop	{r4, pc}

08002488 <_write_r>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	0004      	movs	r4, r0
 800248c:	0008      	movs	r0, r1
 800248e:	0011      	movs	r1, r2
 8002490:	001a      	movs	r2, r3
 8002492:	2300      	movs	r3, #0
 8002494:	4d05      	ldr	r5, [pc, #20]	; (80024ac <_write_r+0x24>)
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	f7fe f98a 	bl	80007b0 <_write>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d103      	bne.n	80024a8 <_write_r+0x20>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d000      	beq.n	80024a8 <_write_r+0x20>
 80024a6:	6023      	str	r3, [r4, #0]
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	20000100 	.word	0x20000100

080024b0 <_close_r>:
 80024b0:	2300      	movs	r3, #0
 80024b2:	b570      	push	{r4, r5, r6, lr}
 80024b4:	4d06      	ldr	r5, [pc, #24]	; (80024d0 <_close_r+0x20>)
 80024b6:	0004      	movs	r4, r0
 80024b8:	0008      	movs	r0, r1
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	f7fe f994 	bl	80007e8 <_close>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d103      	bne.n	80024cc <_close_r+0x1c>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d000      	beq.n	80024cc <_close_r+0x1c>
 80024ca:	6023      	str	r3, [r4, #0]
 80024cc:	bd70      	pop	{r4, r5, r6, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	20000100 	.word	0x20000100

080024d4 <_fstat_r>:
 80024d4:	2300      	movs	r3, #0
 80024d6:	b570      	push	{r4, r5, r6, lr}
 80024d8:	4d06      	ldr	r5, [pc, #24]	; (80024f4 <_fstat_r+0x20>)
 80024da:	0004      	movs	r4, r0
 80024dc:	0008      	movs	r0, r1
 80024de:	0011      	movs	r1, r2
 80024e0:	602b      	str	r3, [r5, #0]
 80024e2:	f7fe f98b 	bl	80007fc <_fstat>
 80024e6:	1c43      	adds	r3, r0, #1
 80024e8:	d103      	bne.n	80024f2 <_fstat_r+0x1e>
 80024ea:	682b      	ldr	r3, [r5, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d000      	beq.n	80024f2 <_fstat_r+0x1e>
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	20000100 	.word	0x20000100

080024f8 <_isatty_r>:
 80024f8:	2300      	movs	r3, #0
 80024fa:	b570      	push	{r4, r5, r6, lr}
 80024fc:	4d06      	ldr	r5, [pc, #24]	; (8002518 <_isatty_r+0x20>)
 80024fe:	0004      	movs	r4, r0
 8002500:	0008      	movs	r0, r1
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	f7fe f988 	bl	8000818 <_isatty>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d103      	bne.n	8002514 <_isatty_r+0x1c>
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d000      	beq.n	8002514 <_isatty_r+0x1c>
 8002512:	6023      	str	r3, [r4, #0]
 8002514:	bd70      	pop	{r4, r5, r6, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	20000100 	.word	0x20000100

0800251c <_lseek_r>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	0004      	movs	r4, r0
 8002520:	0008      	movs	r0, r1
 8002522:	0011      	movs	r1, r2
 8002524:	001a      	movs	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	4d05      	ldr	r5, [pc, #20]	; (8002540 <_lseek_r+0x24>)
 800252a:	602b      	str	r3, [r5, #0]
 800252c:	f7fe f97d 	bl	800082a <_lseek>
 8002530:	1c43      	adds	r3, r0, #1
 8002532:	d103      	bne.n	800253c <_lseek_r+0x20>
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d000      	beq.n	800253c <_lseek_r+0x20>
 800253a:	6023      	str	r3, [r4, #0]
 800253c:	bd70      	pop	{r4, r5, r6, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	20000100 	.word	0x20000100

08002544 <__malloc_lock>:
 8002544:	b510      	push	{r4, lr}
 8002546:	4802      	ldr	r0, [pc, #8]	; (8002550 <__malloc_lock+0xc>)
 8002548:	f7ff fe29 	bl	800219e <__retarget_lock_acquire_recursive>
 800254c:	bd10      	pop	{r4, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	200000f8 	.word	0x200000f8

08002554 <__malloc_unlock>:
 8002554:	b510      	push	{r4, lr}
 8002556:	4802      	ldr	r0, [pc, #8]	; (8002560 <__malloc_unlock+0xc>)
 8002558:	f7ff fe22 	bl	80021a0 <__retarget_lock_release_recursive>
 800255c:	bd10      	pop	{r4, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	200000f8 	.word	0x200000f8

08002564 <_read_r>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	0004      	movs	r4, r0
 8002568:	0008      	movs	r0, r1
 800256a:	0011      	movs	r1, r2
 800256c:	001a      	movs	r2, r3
 800256e:	2300      	movs	r3, #0
 8002570:	4d05      	ldr	r5, [pc, #20]	; (8002588 <_read_r+0x24>)
 8002572:	602b      	str	r3, [r5, #0]
 8002574:	f7fe f8ff 	bl	8000776 <_read>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d103      	bne.n	8002584 <_read_r+0x20>
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d000      	beq.n	8002584 <_read_r+0x20>
 8002582:	6023      	str	r3, [r4, #0]
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000100 	.word	0x20000100

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
