
STM32l071xx_IEB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08006bf0  08006bf0  00016bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d4  080071d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071dc  080071dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071dc  080071dc  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080071e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080071f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080071f0  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9b2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5f  00000000  00000000  0002c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011de3  00000000  00000000  0002f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3fd  00000000  00000000  00041693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e126  00000000  00000000  0004ea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bcbb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002668  00000000  00000000  000bcc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006bd8 	.word	0x08006bd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006bd8 	.word	0x08006bd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f865 	bl	80014d4 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ffaf 	bl	8001378 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f857 	bl	80014d4 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f84d 	bl	80014d4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd1 	bl	80013f0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffc7 	bl	80013f0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f84c 	bl	800053c <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_lmul>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	0415      	lsls	r5, r2, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	000f      	movs	r7, r1
 80004b8:	0001      	movs	r1, r0
 80004ba:	002e      	movs	r6, r5
 80004bc:	46c6      	mov	lr, r8
 80004be:	4684      	mov	ip, r0
 80004c0:	0400      	lsls	r0, r0, #16
 80004c2:	0c14      	lsrs	r4, r2, #16
 80004c4:	0c00      	lsrs	r0, r0, #16
 80004c6:	0c09      	lsrs	r1, r1, #16
 80004c8:	4346      	muls	r6, r0
 80004ca:	434d      	muls	r5, r1
 80004cc:	4360      	muls	r0, r4
 80004ce:	4361      	muls	r1, r4
 80004d0:	1940      	adds	r0, r0, r5
 80004d2:	0c34      	lsrs	r4, r6, #16
 80004d4:	1824      	adds	r4, r4, r0
 80004d6:	b500      	push	{lr}
 80004d8:	42a5      	cmp	r5, r4
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x34>
 80004dc:	2080      	movs	r0, #128	; 0x80
 80004de:	0240      	lsls	r0, r0, #9
 80004e0:	4680      	mov	r8, r0
 80004e2:	4441      	add	r1, r8
 80004e4:	0c25      	lsrs	r5, r4, #16
 80004e6:	186d      	adds	r5, r5, r1
 80004e8:	4661      	mov	r1, ip
 80004ea:	4359      	muls	r1, r3
 80004ec:	437a      	muls	r2, r7
 80004ee:	0430      	lsls	r0, r6, #16
 80004f0:	1949      	adds	r1, r1, r5
 80004f2:	0424      	lsls	r4, r4, #16
 80004f4:	0c00      	lsrs	r0, r0, #16
 80004f6:	1820      	adds	r0, r4, r0
 80004f8:	1889      	adds	r1, r1, r2
 80004fa:	bc80      	pop	{r7}
 80004fc:	46b8      	mov	r8, r7
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000500 <__aeabi_d2uiz>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	2200      	movs	r2, #0
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <__aeabi_d2uiz+0x38>)
 8000506:	0004      	movs	r4, r0
 8000508:	000d      	movs	r5, r1
 800050a:	f7ff ffa7 	bl	800045c <__aeabi_dcmpge>
 800050e:	2800      	cmp	r0, #0
 8000510:	d104      	bne.n	800051c <__aeabi_d2uiz+0x1c>
 8000512:	0020      	movs	r0, r4
 8000514:	0029      	movs	r1, r5
 8000516:	f001 fe4b 	bl	80021b0 <__aeabi_d2iz>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <__aeabi_d2uiz+0x38>)
 800051e:	2200      	movs	r2, #0
 8000520:	0020      	movs	r0, r4
 8000522:	0029      	movs	r1, r5
 8000524:	f001 fab2 	bl	8001a8c <__aeabi_dsub>
 8000528:	f001 fe42 	bl	80021b0 <__aeabi_d2iz>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	061b      	lsls	r3, r3, #24
 8000530:	469c      	mov	ip, r3
 8000532:	4460      	add	r0, ip
 8000534:	e7f1      	b.n	800051a <__aeabi_d2uiz+0x1a>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	41e00000 	.word	0x41e00000

0800053c <__udivmoddi4>:
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	4657      	mov	r7, sl
 8000540:	464e      	mov	r6, r9
 8000542:	4645      	mov	r5, r8
 8000544:	46de      	mov	lr, fp
 8000546:	b5e0      	push	{r5, r6, r7, lr}
 8000548:	0004      	movs	r4, r0
 800054a:	000d      	movs	r5, r1
 800054c:	4692      	mov	sl, r2
 800054e:	4699      	mov	r9, r3
 8000550:	b083      	sub	sp, #12
 8000552:	428b      	cmp	r3, r1
 8000554:	d830      	bhi.n	80005b8 <__udivmoddi4+0x7c>
 8000556:	d02d      	beq.n	80005b4 <__udivmoddi4+0x78>
 8000558:	4649      	mov	r1, r9
 800055a:	4650      	mov	r0, sl
 800055c:	f001 fed2 	bl	8002304 <__clzdi2>
 8000560:	0029      	movs	r1, r5
 8000562:	0006      	movs	r6, r0
 8000564:	0020      	movs	r0, r4
 8000566:	f001 fecd 	bl	8002304 <__clzdi2>
 800056a:	1a33      	subs	r3, r6, r0
 800056c:	4698      	mov	r8, r3
 800056e:	3b20      	subs	r3, #32
 8000570:	469b      	mov	fp, r3
 8000572:	d433      	bmi.n	80005dc <__udivmoddi4+0xa0>
 8000574:	465a      	mov	r2, fp
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	4642      	mov	r2, r8
 800057c:	001f      	movs	r7, r3
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	001e      	movs	r6, r3
 8000584:	42af      	cmp	r7, r5
 8000586:	d83a      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000588:	42af      	cmp	r7, r5
 800058a:	d100      	bne.n	800058e <__udivmoddi4+0x52>
 800058c:	e078      	b.n	8000680 <__udivmoddi4+0x144>
 800058e:	465b      	mov	r3, fp
 8000590:	1ba4      	subs	r4, r4, r6
 8000592:	41bd      	sbcs	r5, r7
 8000594:	2b00      	cmp	r3, #0
 8000596:	da00      	bge.n	800059a <__udivmoddi4+0x5e>
 8000598:	e075      	b.n	8000686 <__udivmoddi4+0x14a>
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	465a      	mov	r2, fp
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	4642      	mov	r2, r8
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	e028      	b.n	8000606 <__udivmoddi4+0xca>
 80005b4:	4282      	cmp	r2, r0
 80005b6:	d9cf      	bls.n	8000558 <__udivmoddi4+0x1c>
 80005b8:	2200      	movs	r2, #0
 80005ba:	2300      	movs	r3, #0
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <__udivmoddi4+0x8e>
 80005c6:	601c      	str	r4, [r3, #0]
 80005c8:	605d      	str	r5, [r3, #4]
 80005ca:	9800      	ldr	r0, [sp, #0]
 80005cc:	9901      	ldr	r1, [sp, #4]
 80005ce:	b003      	add	sp, #12
 80005d0:	bcf0      	pop	{r4, r5, r6, r7}
 80005d2:	46bb      	mov	fp, r7
 80005d4:	46b2      	mov	sl, r6
 80005d6:	46a9      	mov	r9, r5
 80005d8:	46a0      	mov	r8, r4
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	4652      	mov	r2, sl
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	4641      	mov	r1, r8
 80005e8:	0013      	movs	r3, r2
 80005ea:	464a      	mov	r2, r9
 80005ec:	408a      	lsls	r2, r1
 80005ee:	0017      	movs	r7, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	431f      	orrs	r7, r3
 80005f4:	4653      	mov	r3, sl
 80005f6:	4093      	lsls	r3, r2
 80005f8:	001e      	movs	r6, r3
 80005fa:	42af      	cmp	r7, r5
 80005fc:	d9c4      	bls.n	8000588 <__udivmoddi4+0x4c>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	4643      	mov	r3, r8
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0d9      	beq.n	80005c0 <__udivmoddi4+0x84>
 800060c:	07fb      	lsls	r3, r7, #31
 800060e:	0872      	lsrs	r2, r6, #1
 8000610:	431a      	orrs	r2, r3
 8000612:	4646      	mov	r6, r8
 8000614:	087b      	lsrs	r3, r7, #1
 8000616:	e00e      	b.n	8000636 <__udivmoddi4+0xfa>
 8000618:	42ab      	cmp	r3, r5
 800061a:	d101      	bne.n	8000620 <__udivmoddi4+0xe4>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d80c      	bhi.n	800063a <__udivmoddi4+0xfe>
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	419d      	sbcs	r5, r3
 8000624:	2001      	movs	r0, #1
 8000626:	1924      	adds	r4, r4, r4
 8000628:	416d      	adcs	r5, r5
 800062a:	2100      	movs	r1, #0
 800062c:	3e01      	subs	r6, #1
 800062e:	1824      	adds	r4, r4, r0
 8000630:	414d      	adcs	r5, r1
 8000632:	2e00      	cmp	r6, #0
 8000634:	d006      	beq.n	8000644 <__udivmoddi4+0x108>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d9ee      	bls.n	8000618 <__udivmoddi4+0xdc>
 800063a:	3e01      	subs	r6, #1
 800063c:	1924      	adds	r4, r4, r4
 800063e:	416d      	adcs	r5, r5
 8000640:	2e00      	cmp	r6, #0
 8000642:	d1f8      	bne.n	8000636 <__udivmoddi4+0xfa>
 8000644:	9800      	ldr	r0, [sp, #0]
 8000646:	9901      	ldr	r1, [sp, #4]
 8000648:	465b      	mov	r3, fp
 800064a:	1900      	adds	r0, r0, r4
 800064c:	4169      	adcs	r1, r5
 800064e:	2b00      	cmp	r3, #0
 8000650:	db24      	blt.n	800069c <__udivmoddi4+0x160>
 8000652:	002b      	movs	r3, r5
 8000654:	465a      	mov	r2, fp
 8000656:	4644      	mov	r4, r8
 8000658:	40d3      	lsrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	db2a      	blt.n	80006be <__udivmoddi4+0x182>
 8000668:	0026      	movs	r6, r4
 800066a:	409e      	lsls	r6, r3
 800066c:	0033      	movs	r3, r6
 800066e:	0026      	movs	r6, r4
 8000670:	4647      	mov	r7, r8
 8000672:	40be      	lsls	r6, r7
 8000674:	0032      	movs	r2, r6
 8000676:	1a80      	subs	r0, r0, r2
 8000678:	4199      	sbcs	r1, r3
 800067a:	9000      	str	r0, [sp, #0]
 800067c:	9101      	str	r1, [sp, #4]
 800067e:	e79f      	b.n	80005c0 <__udivmoddi4+0x84>
 8000680:	42a3      	cmp	r3, r4
 8000682:	d8bc      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000684:	e783      	b.n	800058e <__udivmoddi4+0x52>
 8000686:	4642      	mov	r2, r8
 8000688:	2320      	movs	r3, #32
 800068a:	2100      	movs	r1, #0
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	9100      	str	r1, [sp, #0]
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	40da      	lsrs	r2, r3
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	e786      	b.n	80005aa <__udivmoddi4+0x6e>
 800069c:	4642      	mov	r2, r8
 800069e:	2320      	movs	r3, #32
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	002a      	movs	r2, r5
 80006a4:	4646      	mov	r6, r8
 80006a6:	409a      	lsls	r2, r3
 80006a8:	0023      	movs	r3, r4
 80006aa:	40f3      	lsrs	r3, r6
 80006ac:	4644      	mov	r4, r8
 80006ae:	4313      	orrs	r3, r2
 80006b0:	002a      	movs	r2, r5
 80006b2:	40e2      	lsrs	r2, r4
 80006b4:	001c      	movs	r4, r3
 80006b6:	465b      	mov	r3, fp
 80006b8:	0015      	movs	r5, r2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dad4      	bge.n	8000668 <__udivmoddi4+0x12c>
 80006be:	4642      	mov	r2, r8
 80006c0:	002f      	movs	r7, r5
 80006c2:	2320      	movs	r3, #32
 80006c4:	0026      	movs	r6, r4
 80006c6:	4097      	lsls	r7, r2
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	40de      	lsrs	r6, r3
 80006cc:	003b      	movs	r3, r7
 80006ce:	4333      	orrs	r3, r6
 80006d0:	e7cd      	b.n	800066e <__udivmoddi4+0x132>
 80006d2:	46c0      	nop			; (mov r8, r8)

080006d4 <__aeabi_dadd>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	464f      	mov	r7, r9
 80006d8:	46d6      	mov	lr, sl
 80006da:	4646      	mov	r6, r8
 80006dc:	000d      	movs	r5, r1
 80006de:	0001      	movs	r1, r0
 80006e0:	0018      	movs	r0, r3
 80006e2:	b5c0      	push	{r6, r7, lr}
 80006e4:	0017      	movs	r7, r2
 80006e6:	032b      	lsls	r3, r5, #12
 80006e8:	0a5a      	lsrs	r2, r3, #9
 80006ea:	0f4b      	lsrs	r3, r1, #29
 80006ec:	4313      	orrs	r3, r2
 80006ee:	00ca      	lsls	r2, r1, #3
 80006f0:	4691      	mov	r9, r2
 80006f2:	0302      	lsls	r2, r0, #12
 80006f4:	006e      	lsls	r6, r5, #1
 80006f6:	0041      	lsls	r1, r0, #1
 80006f8:	0a52      	lsrs	r2, r2, #9
 80006fa:	0fec      	lsrs	r4, r5, #31
 80006fc:	0f7d      	lsrs	r5, r7, #29
 80006fe:	4315      	orrs	r5, r2
 8000700:	0d76      	lsrs	r6, r6, #21
 8000702:	0d49      	lsrs	r1, r1, #21
 8000704:	0fc0      	lsrs	r0, r0, #31
 8000706:	4682      	mov	sl, r0
 8000708:	46ac      	mov	ip, r5
 800070a:	00ff      	lsls	r7, r7, #3
 800070c:	1a72      	subs	r2, r6, r1
 800070e:	4284      	cmp	r4, r0
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x40>
 8000712:	e098      	b.n	8000846 <__aeabi_dadd+0x172>
 8000714:	2a00      	cmp	r2, #0
 8000716:	dc00      	bgt.n	800071a <__aeabi_dadd+0x46>
 8000718:	e081      	b.n	800081e <__aeabi_dadd+0x14a>
 800071a:	2900      	cmp	r1, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x4c>
 800071e:	e0b6      	b.n	800088e <__aeabi_dadd+0x1ba>
 8000720:	49c9      	ldr	r1, [pc, #804]	; (8000a48 <__aeabi_dadd+0x374>)
 8000722:	428e      	cmp	r6, r1
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x54>
 8000726:	e172      	b.n	8000a0e <__aeabi_dadd+0x33a>
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0028      	movs	r0, r5
 800072c:	0409      	lsls	r1, r1, #16
 800072e:	4308      	orrs	r0, r1
 8000730:	4684      	mov	ip, r0
 8000732:	2a38      	cmp	r2, #56	; 0x38
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0x64>
 8000736:	e15e      	b.n	80009f6 <__aeabi_dadd+0x322>
 8000738:	2a1f      	cmp	r2, #31
 800073a:	dd00      	ble.n	800073e <__aeabi_dadd+0x6a>
 800073c:	e1ee      	b.n	8000b1c <__aeabi_dadd+0x448>
 800073e:	2020      	movs	r0, #32
 8000740:	0039      	movs	r1, r7
 8000742:	4665      	mov	r5, ip
 8000744:	1a80      	subs	r0, r0, r2
 8000746:	4087      	lsls	r7, r0
 8000748:	40d1      	lsrs	r1, r2
 800074a:	4085      	lsls	r5, r0
 800074c:	430d      	orrs	r5, r1
 800074e:	0039      	movs	r1, r7
 8000750:	1e4f      	subs	r7, r1, #1
 8000752:	41b9      	sbcs	r1, r7
 8000754:	4667      	mov	r7, ip
 8000756:	40d7      	lsrs	r7, r2
 8000758:	4329      	orrs	r1, r5
 800075a:	1bdb      	subs	r3, r3, r7
 800075c:	464a      	mov	r2, r9
 800075e:	1a55      	subs	r5, r2, r1
 8000760:	45a9      	cmp	r9, r5
 8000762:	4189      	sbcs	r1, r1
 8000764:	4249      	negs	r1, r1
 8000766:	1a5b      	subs	r3, r3, r1
 8000768:	4698      	mov	r8, r3
 800076a:	4643      	mov	r3, r8
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	d400      	bmi.n	8000772 <__aeabi_dadd+0x9e>
 8000770:	e0cc      	b.n	800090c <__aeabi_dadd+0x238>
 8000772:	4643      	mov	r3, r8
 8000774:	025b      	lsls	r3, r3, #9
 8000776:	0a5b      	lsrs	r3, r3, #9
 8000778:	4698      	mov	r8, r3
 800077a:	4643      	mov	r3, r8
 800077c:	2b00      	cmp	r3, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0xae>
 8000780:	e12c      	b.n	80009dc <__aeabi_dadd+0x308>
 8000782:	4640      	mov	r0, r8
 8000784:	f001 fda0 	bl	80022c8 <__clzsi2>
 8000788:	0001      	movs	r1, r0
 800078a:	3908      	subs	r1, #8
 800078c:	2220      	movs	r2, #32
 800078e:	0028      	movs	r0, r5
 8000790:	4643      	mov	r3, r8
 8000792:	1a52      	subs	r2, r2, r1
 8000794:	408b      	lsls	r3, r1
 8000796:	40d0      	lsrs	r0, r2
 8000798:	408d      	lsls	r5, r1
 800079a:	4303      	orrs	r3, r0
 800079c:	428e      	cmp	r6, r1
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dadd+0xce>
 80007a0:	e117      	b.n	80009d2 <__aeabi_dadd+0x2fe>
 80007a2:	1b8e      	subs	r6, r1, r6
 80007a4:	1c72      	adds	r2, r6, #1
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0xd8>
 80007aa:	e1a7      	b.n	8000afc <__aeabi_dadd+0x428>
 80007ac:	2120      	movs	r1, #32
 80007ae:	0018      	movs	r0, r3
 80007b0:	002e      	movs	r6, r5
 80007b2:	1a89      	subs	r1, r1, r2
 80007b4:	408d      	lsls	r5, r1
 80007b6:	4088      	lsls	r0, r1
 80007b8:	40d6      	lsrs	r6, r2
 80007ba:	40d3      	lsrs	r3, r2
 80007bc:	1e69      	subs	r1, r5, #1
 80007be:	418d      	sbcs	r5, r1
 80007c0:	4330      	orrs	r0, r6
 80007c2:	4698      	mov	r8, r3
 80007c4:	2600      	movs	r6, #0
 80007c6:	4305      	orrs	r5, r0
 80007c8:	076b      	lsls	r3, r5, #29
 80007ca:	d009      	beq.n	80007e0 <__aeabi_dadd+0x10c>
 80007cc:	230f      	movs	r3, #15
 80007ce:	402b      	ands	r3, r5
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d005      	beq.n	80007e0 <__aeabi_dadd+0x10c>
 80007d4:	1d2b      	adds	r3, r5, #4
 80007d6:	42ab      	cmp	r3, r5
 80007d8:	41ad      	sbcs	r5, r5
 80007da:	426d      	negs	r5, r5
 80007dc:	44a8      	add	r8, r5
 80007de:	001d      	movs	r5, r3
 80007e0:	4643      	mov	r3, r8
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_dadd+0x114>
 80007e6:	e094      	b.n	8000912 <__aeabi_dadd+0x23e>
 80007e8:	4b97      	ldr	r3, [pc, #604]	; (8000a48 <__aeabi_dadd+0x374>)
 80007ea:	1c72      	adds	r2, r6, #1
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x11e>
 80007f0:	e09d      	b.n	800092e <__aeabi_dadd+0x25a>
 80007f2:	4641      	mov	r1, r8
 80007f4:	4b95      	ldr	r3, [pc, #596]	; (8000a4c <__aeabi_dadd+0x378>)
 80007f6:	08ed      	lsrs	r5, r5, #3
 80007f8:	4019      	ands	r1, r3
 80007fa:	000b      	movs	r3, r1
 80007fc:	0552      	lsls	r2, r2, #21
 80007fe:	0749      	lsls	r1, r1, #29
 8000800:	025b      	lsls	r3, r3, #9
 8000802:	4329      	orrs	r1, r5
 8000804:	0b1b      	lsrs	r3, r3, #12
 8000806:	0d52      	lsrs	r2, r2, #21
 8000808:	0512      	lsls	r2, r2, #20
 800080a:	4313      	orrs	r3, r2
 800080c:	07e4      	lsls	r4, r4, #31
 800080e:	4323      	orrs	r3, r4
 8000810:	0008      	movs	r0, r1
 8000812:	0019      	movs	r1, r3
 8000814:	bce0      	pop	{r5, r6, r7}
 8000816:	46ba      	mov	sl, r7
 8000818:	46b1      	mov	r9, r6
 800081a:	46a8      	mov	r8, r5
 800081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081e:	2a00      	cmp	r2, #0
 8000820:	d043      	beq.n	80008aa <__aeabi_dadd+0x1d6>
 8000822:	1b8a      	subs	r2, r1, r6
 8000824:	2e00      	cmp	r6, #0
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x156>
 8000828:	e12a      	b.n	8000a80 <__aeabi_dadd+0x3ac>
 800082a:	464c      	mov	r4, r9
 800082c:	431c      	orrs	r4, r3
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x15e>
 8000830:	e1d1      	b.n	8000bd6 <__aeabi_dadd+0x502>
 8000832:	1e54      	subs	r4, r2, #1
 8000834:	2a01      	cmp	r2, #1
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x166>
 8000838:	e21f      	b.n	8000c7a <__aeabi_dadd+0x5a6>
 800083a:	4d83      	ldr	r5, [pc, #524]	; (8000a48 <__aeabi_dadd+0x374>)
 800083c:	42aa      	cmp	r2, r5
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x16e>
 8000840:	e272      	b.n	8000d28 <__aeabi_dadd+0x654>
 8000842:	0022      	movs	r2, r4
 8000844:	e123      	b.n	8000a8e <__aeabi_dadd+0x3ba>
 8000846:	2a00      	cmp	r2, #0
 8000848:	dc00      	bgt.n	800084c <__aeabi_dadd+0x178>
 800084a:	e098      	b.n	800097e <__aeabi_dadd+0x2aa>
 800084c:	2900      	cmp	r1, #0
 800084e:	d042      	beq.n	80008d6 <__aeabi_dadd+0x202>
 8000850:	497d      	ldr	r1, [pc, #500]	; (8000a48 <__aeabi_dadd+0x374>)
 8000852:	428e      	cmp	r6, r1
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x184>
 8000856:	e0da      	b.n	8000a0e <__aeabi_dadd+0x33a>
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0028      	movs	r0, r5
 800085c:	0409      	lsls	r1, r1, #16
 800085e:	4308      	orrs	r0, r1
 8000860:	4684      	mov	ip, r0
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x194>
 8000866:	e129      	b.n	8000abc <__aeabi_dadd+0x3e8>
 8000868:	2a1f      	cmp	r2, #31
 800086a:	dc00      	bgt.n	800086e <__aeabi_dadd+0x19a>
 800086c:	e187      	b.n	8000b7e <__aeabi_dadd+0x4aa>
 800086e:	0011      	movs	r1, r2
 8000870:	4665      	mov	r5, ip
 8000872:	3920      	subs	r1, #32
 8000874:	40cd      	lsrs	r5, r1
 8000876:	2a20      	cmp	r2, #32
 8000878:	d004      	beq.n	8000884 <__aeabi_dadd+0x1b0>
 800087a:	2040      	movs	r0, #64	; 0x40
 800087c:	4661      	mov	r1, ip
 800087e:	1a82      	subs	r2, r0, r2
 8000880:	4091      	lsls	r1, r2
 8000882:	430f      	orrs	r7, r1
 8000884:	0039      	movs	r1, r7
 8000886:	1e4f      	subs	r7, r1, #1
 8000888:	41b9      	sbcs	r1, r7
 800088a:	430d      	orrs	r5, r1
 800088c:	e11b      	b.n	8000ac6 <__aeabi_dadd+0x3f2>
 800088e:	0029      	movs	r1, r5
 8000890:	4339      	orrs	r1, r7
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x1c2>
 8000894:	e0b5      	b.n	8000a02 <__aeabi_dadd+0x32e>
 8000896:	1e51      	subs	r1, r2, #1
 8000898:	2a01      	cmp	r2, #1
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x1ca>
 800089c:	e1ab      	b.n	8000bf6 <__aeabi_dadd+0x522>
 800089e:	486a      	ldr	r0, [pc, #424]	; (8000a48 <__aeabi_dadd+0x374>)
 80008a0:	4282      	cmp	r2, r0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x1d2>
 80008a4:	e1b2      	b.n	8000c0c <__aeabi_dadd+0x538>
 80008a6:	000a      	movs	r2, r1
 80008a8:	e743      	b.n	8000732 <__aeabi_dadd+0x5e>
 80008aa:	4969      	ldr	r1, [pc, #420]	; (8000a50 <__aeabi_dadd+0x37c>)
 80008ac:	1c75      	adds	r5, r6, #1
 80008ae:	420d      	tst	r5, r1
 80008b0:	d000      	beq.n	80008b4 <__aeabi_dadd+0x1e0>
 80008b2:	e0cf      	b.n	8000a54 <__aeabi_dadd+0x380>
 80008b4:	2e00      	cmp	r6, #0
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x1e6>
 80008b8:	e193      	b.n	8000be2 <__aeabi_dadd+0x50e>
 80008ba:	4649      	mov	r1, r9
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ee>
 80008c0:	e1d1      	b.n	8000c66 <__aeabi_dadd+0x592>
 80008c2:	4661      	mov	r1, ip
 80008c4:	4339      	orrs	r1, r7
 80008c6:	d000      	beq.n	80008ca <__aeabi_dadd+0x1f6>
 80008c8:	e1e3      	b.n	8000c92 <__aeabi_dadd+0x5be>
 80008ca:	4649      	mov	r1, r9
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	08c9      	lsrs	r1, r1, #3
 80008d0:	4301      	orrs	r1, r0
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	e026      	b.n	8000924 <__aeabi_dadd+0x250>
 80008d6:	0029      	movs	r1, r5
 80008d8:	4339      	orrs	r1, r7
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x20a>
 80008dc:	e091      	b.n	8000a02 <__aeabi_dadd+0x32e>
 80008de:	1e51      	subs	r1, r2, #1
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	d005      	beq.n	80008f0 <__aeabi_dadd+0x21c>
 80008e4:	4858      	ldr	r0, [pc, #352]	; (8000a48 <__aeabi_dadd+0x374>)
 80008e6:	4282      	cmp	r2, r0
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x218>
 80008ea:	e18f      	b.n	8000c0c <__aeabi_dadd+0x538>
 80008ec:	000a      	movs	r2, r1
 80008ee:	e7b8      	b.n	8000862 <__aeabi_dadd+0x18e>
 80008f0:	003d      	movs	r5, r7
 80008f2:	444d      	add	r5, r9
 80008f4:	454d      	cmp	r5, r9
 80008f6:	4189      	sbcs	r1, r1
 80008f8:	4463      	add	r3, ip
 80008fa:	4698      	mov	r8, r3
 80008fc:	4249      	negs	r1, r1
 80008fe:	4488      	add	r8, r1
 8000900:	4643      	mov	r3, r8
 8000902:	2602      	movs	r6, #2
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	d500      	bpl.n	800090a <__aeabi_dadd+0x236>
 8000908:	e0eb      	b.n	8000ae2 <__aeabi_dadd+0x40e>
 800090a:	3e01      	subs	r6, #1
 800090c:	076b      	lsls	r3, r5, #29
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x23e>
 8000910:	e75c      	b.n	80007cc <__aeabi_dadd+0xf8>
 8000912:	4643      	mov	r3, r8
 8000914:	08e9      	lsrs	r1, r5, #3
 8000916:	075a      	lsls	r2, r3, #29
 8000918:	4311      	orrs	r1, r2
 800091a:	0032      	movs	r2, r6
 800091c:	08db      	lsrs	r3, r3, #3
 800091e:	484a      	ldr	r0, [pc, #296]	; (8000a48 <__aeabi_dadd+0x374>)
 8000920:	4282      	cmp	r2, r0
 8000922:	d021      	beq.n	8000968 <__aeabi_dadd+0x294>
 8000924:	031b      	lsls	r3, r3, #12
 8000926:	0552      	lsls	r2, r2, #21
 8000928:	0b1b      	lsrs	r3, r3, #12
 800092a:	0d52      	lsrs	r2, r2, #21
 800092c:	e76c      	b.n	8000808 <__aeabi_dadd+0x134>
 800092e:	2300      	movs	r3, #0
 8000930:	2100      	movs	r1, #0
 8000932:	e769      	b.n	8000808 <__aeabi_dadd+0x134>
 8000934:	002a      	movs	r2, r5
 8000936:	433a      	orrs	r2, r7
 8000938:	d069      	beq.n	8000a0e <__aeabi_dadd+0x33a>
 800093a:	464a      	mov	r2, r9
 800093c:	0758      	lsls	r0, r3, #29
 800093e:	08d1      	lsrs	r1, r2, #3
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	031b      	lsls	r3, r3, #12
 8000946:	4308      	orrs	r0, r1
 8000948:	421a      	tst	r2, r3
 800094a:	d007      	beq.n	800095c <__aeabi_dadd+0x288>
 800094c:	0029      	movs	r1, r5
 800094e:	08ed      	lsrs	r5, r5, #3
 8000950:	421d      	tst	r5, r3
 8000952:	d103      	bne.n	800095c <__aeabi_dadd+0x288>
 8000954:	002a      	movs	r2, r5
 8000956:	08ff      	lsrs	r7, r7, #3
 8000958:	0748      	lsls	r0, r1, #29
 800095a:	4338      	orrs	r0, r7
 800095c:	0f43      	lsrs	r3, r0, #29
 800095e:	00c1      	lsls	r1, r0, #3
 8000960:	075b      	lsls	r3, r3, #29
 8000962:	08c9      	lsrs	r1, r1, #3
 8000964:	4319      	orrs	r1, r3
 8000966:	0013      	movs	r3, r2
 8000968:	000a      	movs	r2, r1
 800096a:	431a      	orrs	r2, r3
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x29c>
 800096e:	e213      	b.n	8000d98 <__aeabi_dadd+0x6c4>
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0312      	lsls	r2, r2, #12
 8000974:	4313      	orrs	r3, r2
 8000976:	031b      	lsls	r3, r3, #12
 8000978:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <__aeabi_dadd+0x374>)
 800097a:	0b1b      	lsrs	r3, r3, #12
 800097c:	e744      	b.n	8000808 <__aeabi_dadd+0x134>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d04b      	beq.n	8000a1a <__aeabi_dadd+0x346>
 8000982:	1b8a      	subs	r2, r1, r6
 8000984:	2e00      	cmp	r6, #0
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x2b6>
 8000988:	e0e7      	b.n	8000b5a <__aeabi_dadd+0x486>
 800098a:	482f      	ldr	r0, [pc, #188]	; (8000a48 <__aeabi_dadd+0x374>)
 800098c:	4281      	cmp	r1, r0
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0x2be>
 8000990:	e195      	b.n	8000cbe <__aeabi_dadd+0x5ea>
 8000992:	2080      	movs	r0, #128	; 0x80
 8000994:	0400      	lsls	r0, r0, #16
 8000996:	4303      	orrs	r3, r0
 8000998:	2a38      	cmp	r2, #56	; 0x38
 800099a:	dd00      	ble.n	800099e <__aeabi_dadd+0x2ca>
 800099c:	e143      	b.n	8000c26 <__aeabi_dadd+0x552>
 800099e:	2a1f      	cmp	r2, #31
 80009a0:	dd00      	ble.n	80009a4 <__aeabi_dadd+0x2d0>
 80009a2:	e1db      	b.n	8000d5c <__aeabi_dadd+0x688>
 80009a4:	2020      	movs	r0, #32
 80009a6:	001d      	movs	r5, r3
 80009a8:	464e      	mov	r6, r9
 80009aa:	1a80      	subs	r0, r0, r2
 80009ac:	4085      	lsls	r5, r0
 80009ae:	40d6      	lsrs	r6, r2
 80009b0:	4335      	orrs	r5, r6
 80009b2:	464e      	mov	r6, r9
 80009b4:	4086      	lsls	r6, r0
 80009b6:	0030      	movs	r0, r6
 80009b8:	40d3      	lsrs	r3, r2
 80009ba:	1e46      	subs	r6, r0, #1
 80009bc:	41b0      	sbcs	r0, r6
 80009be:	449c      	add	ip, r3
 80009c0:	4305      	orrs	r5, r0
 80009c2:	19ed      	adds	r5, r5, r7
 80009c4:	42bd      	cmp	r5, r7
 80009c6:	419b      	sbcs	r3, r3
 80009c8:	425b      	negs	r3, r3
 80009ca:	4463      	add	r3, ip
 80009cc:	4698      	mov	r8, r3
 80009ce:	000e      	movs	r6, r1
 80009d0:	e07f      	b.n	8000ad2 <__aeabi_dadd+0x3fe>
 80009d2:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <__aeabi_dadd+0x378>)
 80009d4:	1a76      	subs	r6, r6, r1
 80009d6:	4013      	ands	r3, r2
 80009d8:	4698      	mov	r8, r3
 80009da:	e6f5      	b.n	80007c8 <__aeabi_dadd+0xf4>
 80009dc:	0028      	movs	r0, r5
 80009de:	f001 fc73 	bl	80022c8 <__clzsi2>
 80009e2:	0001      	movs	r1, r0
 80009e4:	3118      	adds	r1, #24
 80009e6:	291f      	cmp	r1, #31
 80009e8:	dc00      	bgt.n	80009ec <__aeabi_dadd+0x318>
 80009ea:	e6cf      	b.n	800078c <__aeabi_dadd+0xb8>
 80009ec:	002b      	movs	r3, r5
 80009ee:	3808      	subs	r0, #8
 80009f0:	4083      	lsls	r3, r0
 80009f2:	2500      	movs	r5, #0
 80009f4:	e6d2      	b.n	800079c <__aeabi_dadd+0xc8>
 80009f6:	4662      	mov	r2, ip
 80009f8:	433a      	orrs	r2, r7
 80009fa:	0011      	movs	r1, r2
 80009fc:	1e4f      	subs	r7, r1, #1
 80009fe:	41b9      	sbcs	r1, r7
 8000a00:	e6ac      	b.n	800075c <__aeabi_dadd+0x88>
 8000a02:	4649      	mov	r1, r9
 8000a04:	0758      	lsls	r0, r3, #29
 8000a06:	08c9      	lsrs	r1, r1, #3
 8000a08:	4301      	orrs	r1, r0
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	e787      	b.n	800091e <__aeabi_dadd+0x24a>
 8000a0e:	4649      	mov	r1, r9
 8000a10:	075a      	lsls	r2, r3, #29
 8000a12:	08c9      	lsrs	r1, r1, #3
 8000a14:	4311      	orrs	r1, r2
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	e7a6      	b.n	8000968 <__aeabi_dadd+0x294>
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <__aeabi_dadd+0x37c>)
 8000a1c:	1c70      	adds	r0, r6, #1
 8000a1e:	4208      	tst	r0, r1
 8000a20:	d000      	beq.n	8000a24 <__aeabi_dadd+0x350>
 8000a22:	e0bb      	b.n	8000b9c <__aeabi_dadd+0x4c8>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x356>
 8000a28:	e114      	b.n	8000c54 <__aeabi_dadd+0x580>
 8000a2a:	4649      	mov	r1, r9
 8000a2c:	4319      	orrs	r1, r3
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x35e>
 8000a30:	e175      	b.n	8000d1e <__aeabi_dadd+0x64a>
 8000a32:	0029      	movs	r1, r5
 8000a34:	4339      	orrs	r1, r7
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x366>
 8000a38:	e17e      	b.n	8000d38 <__aeabi_dadd+0x664>
 8000a3a:	4649      	mov	r1, r9
 8000a3c:	0758      	lsls	r0, r3, #29
 8000a3e:	08c9      	lsrs	r1, r1, #3
 8000a40:	4301      	orrs	r1, r0
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	e76e      	b.n	8000924 <__aeabi_dadd+0x250>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	000007ff 	.word	0x000007ff
 8000a4c:	ff7fffff 	.word	0xff7fffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	4649      	mov	r1, r9
 8000a56:	1bcd      	subs	r5, r1, r7
 8000a58:	4661      	mov	r1, ip
 8000a5a:	1a58      	subs	r0, r3, r1
 8000a5c:	45a9      	cmp	r9, r5
 8000a5e:	4189      	sbcs	r1, r1
 8000a60:	4249      	negs	r1, r1
 8000a62:	4688      	mov	r8, r1
 8000a64:	0001      	movs	r1, r0
 8000a66:	4640      	mov	r0, r8
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	0209      	lsls	r1, r1, #8
 8000a6e:	d500      	bpl.n	8000a72 <__aeabi_dadd+0x39e>
 8000a70:	e0a6      	b.n	8000bc0 <__aeabi_dadd+0x4ec>
 8000a72:	4641      	mov	r1, r8
 8000a74:	4329      	orrs	r1, r5
 8000a76:	d000      	beq.n	8000a7a <__aeabi_dadd+0x3a6>
 8000a78:	e67f      	b.n	800077a <__aeabi_dadd+0xa6>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	e751      	b.n	8000924 <__aeabi_dadd+0x250>
 8000a80:	4cc7      	ldr	r4, [pc, #796]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000a82:	42a1      	cmp	r1, r4
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x3b4>
 8000a86:	e0c7      	b.n	8000c18 <__aeabi_dadd+0x544>
 8000a88:	2480      	movs	r4, #128	; 0x80
 8000a8a:	0424      	lsls	r4, r4, #16
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	2a38      	cmp	r2, #56	; 0x38
 8000a90:	dc54      	bgt.n	8000b3c <__aeabi_dadd+0x468>
 8000a92:	2a1f      	cmp	r2, #31
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_dadd+0x3c4>
 8000a96:	e0cc      	b.n	8000c32 <__aeabi_dadd+0x55e>
 8000a98:	2420      	movs	r4, #32
 8000a9a:	4648      	mov	r0, r9
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	001d      	movs	r5, r3
 8000aa0:	464e      	mov	r6, r9
 8000aa2:	40a0      	lsls	r0, r4
 8000aa4:	40d6      	lsrs	r6, r2
 8000aa6:	40a5      	lsls	r5, r4
 8000aa8:	0004      	movs	r4, r0
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	4335      	orrs	r5, r6
 8000ab0:	1e66      	subs	r6, r4, #1
 8000ab2:	41b4      	sbcs	r4, r6
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	469c      	mov	ip, r3
 8000ab8:	4325      	orrs	r5, r4
 8000aba:	e044      	b.n	8000b46 <__aeabi_dadd+0x472>
 8000abc:	4662      	mov	r2, ip
 8000abe:	433a      	orrs	r2, r7
 8000ac0:	0015      	movs	r5, r2
 8000ac2:	1e6f      	subs	r7, r5, #1
 8000ac4:	41bd      	sbcs	r5, r7
 8000ac6:	444d      	add	r5, r9
 8000ac8:	454d      	cmp	r5, r9
 8000aca:	4189      	sbcs	r1, r1
 8000acc:	4249      	negs	r1, r1
 8000ace:	4688      	mov	r8, r1
 8000ad0:	4498      	add	r8, r3
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	d400      	bmi.n	8000ada <__aeabi_dadd+0x406>
 8000ad8:	e718      	b.n	800090c <__aeabi_dadd+0x238>
 8000ada:	4bb1      	ldr	r3, [pc, #708]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000adc:	3601      	adds	r6, #1
 8000ade:	429e      	cmp	r6, r3
 8000ae0:	d049      	beq.n	8000b76 <__aeabi_dadd+0x4a2>
 8000ae2:	4642      	mov	r2, r8
 8000ae4:	4baf      	ldr	r3, [pc, #700]	; (8000da4 <__aeabi_dadd+0x6d0>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	401a      	ands	r2, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	086a      	lsrs	r2, r5, #1
 8000aee:	400d      	ands	r5, r1
 8000af0:	4315      	orrs	r5, r2
 8000af2:	07d9      	lsls	r1, r3, #31
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	4698      	mov	r8, r3
 8000af8:	430d      	orrs	r5, r1
 8000afa:	e665      	b.n	80007c8 <__aeabi_dadd+0xf4>
 8000afc:	0018      	movs	r0, r3
 8000afe:	3e1f      	subs	r6, #31
 8000b00:	40f0      	lsrs	r0, r6
 8000b02:	2a20      	cmp	r2, #32
 8000b04:	d003      	beq.n	8000b0e <__aeabi_dadd+0x43a>
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	1a8a      	subs	r2, r1, r2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	431d      	orrs	r5, r3
 8000b0e:	1e69      	subs	r1, r5, #1
 8000b10:	418d      	sbcs	r5, r1
 8000b12:	2300      	movs	r3, #0
 8000b14:	2600      	movs	r6, #0
 8000b16:	4698      	mov	r8, r3
 8000b18:	4305      	orrs	r5, r0
 8000b1a:	e6f7      	b.n	800090c <__aeabi_dadd+0x238>
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	4665      	mov	r5, ip
 8000b20:	3920      	subs	r1, #32
 8000b22:	40cd      	lsrs	r5, r1
 8000b24:	2a20      	cmp	r2, #32
 8000b26:	d004      	beq.n	8000b32 <__aeabi_dadd+0x45e>
 8000b28:	2040      	movs	r0, #64	; 0x40
 8000b2a:	4661      	mov	r1, ip
 8000b2c:	1a82      	subs	r2, r0, r2
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	430f      	orrs	r7, r1
 8000b32:	0039      	movs	r1, r7
 8000b34:	1e4f      	subs	r7, r1, #1
 8000b36:	41b9      	sbcs	r1, r7
 8000b38:	4329      	orrs	r1, r5
 8000b3a:	e60f      	b.n	800075c <__aeabi_dadd+0x88>
 8000b3c:	464a      	mov	r2, r9
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	001d      	movs	r5, r3
 8000b42:	1e6b      	subs	r3, r5, #1
 8000b44:	419d      	sbcs	r5, r3
 8000b46:	1b7d      	subs	r5, r7, r5
 8000b48:	42af      	cmp	r7, r5
 8000b4a:	419b      	sbcs	r3, r3
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	425b      	negs	r3, r3
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4698      	mov	r8, r3
 8000b54:	4654      	mov	r4, sl
 8000b56:	000e      	movs	r6, r1
 8000b58:	e607      	b.n	800076a <__aeabi_dadd+0x96>
 8000b5a:	4648      	mov	r0, r9
 8000b5c:	4318      	orrs	r0, r3
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x48e>
 8000b60:	e0b3      	b.n	8000cca <__aeabi_dadd+0x5f6>
 8000b62:	1e50      	subs	r0, r2, #1
 8000b64:	2a01      	cmp	r2, #1
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dadd+0x496>
 8000b68:	e10d      	b.n	8000d86 <__aeabi_dadd+0x6b2>
 8000b6a:	4d8d      	ldr	r5, [pc, #564]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000b6c:	42aa      	cmp	r2, r5
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x49e>
 8000b70:	e0a5      	b.n	8000cbe <__aeabi_dadd+0x5ea>
 8000b72:	0002      	movs	r2, r0
 8000b74:	e710      	b.n	8000998 <__aeabi_dadd+0x2c4>
 8000b76:	0032      	movs	r2, r6
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	e644      	b.n	8000808 <__aeabi_dadd+0x134>
 8000b7e:	2120      	movs	r1, #32
 8000b80:	0038      	movs	r0, r7
 8000b82:	1a89      	subs	r1, r1, r2
 8000b84:	4665      	mov	r5, ip
 8000b86:	408f      	lsls	r7, r1
 8000b88:	408d      	lsls	r5, r1
 8000b8a:	40d0      	lsrs	r0, r2
 8000b8c:	1e79      	subs	r1, r7, #1
 8000b8e:	418f      	sbcs	r7, r1
 8000b90:	4305      	orrs	r5, r0
 8000b92:	433d      	orrs	r5, r7
 8000b94:	4667      	mov	r7, ip
 8000b96:	40d7      	lsrs	r7, r2
 8000b98:	19db      	adds	r3, r3, r7
 8000b9a:	e794      	b.n	8000ac6 <__aeabi_dadd+0x3f2>
 8000b9c:	4a80      	ldr	r2, [pc, #512]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000b9e:	4290      	cmp	r0, r2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x4d0>
 8000ba2:	e0ec      	b.n	8000d7e <__aeabi_dadd+0x6aa>
 8000ba4:	0039      	movs	r1, r7
 8000ba6:	4449      	add	r1, r9
 8000ba8:	4549      	cmp	r1, r9
 8000baa:	4192      	sbcs	r2, r2
 8000bac:	4463      	add	r3, ip
 8000bae:	4252      	negs	r2, r2
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	07dd      	lsls	r5, r3, #31
 8000bb4:	0849      	lsrs	r1, r1, #1
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	4698      	mov	r8, r3
 8000bba:	0006      	movs	r6, r0
 8000bbc:	430d      	orrs	r5, r1
 8000bbe:	e6a5      	b.n	800090c <__aeabi_dadd+0x238>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	1abd      	subs	r5, r7, r2
 8000bc4:	42af      	cmp	r7, r5
 8000bc6:	4189      	sbcs	r1, r1
 8000bc8:	4662      	mov	r2, ip
 8000bca:	4249      	negs	r1, r1
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	4654      	mov	r4, sl
 8000bd4:	e5d1      	b.n	800077a <__aeabi_dadd+0xa6>
 8000bd6:	076c      	lsls	r4, r5, #29
 8000bd8:	08f9      	lsrs	r1, r7, #3
 8000bda:	4321      	orrs	r1, r4
 8000bdc:	08eb      	lsrs	r3, r5, #3
 8000bde:	0004      	movs	r4, r0
 8000be0:	e69d      	b.n	800091e <__aeabi_dadd+0x24a>
 8000be2:	464a      	mov	r2, r9
 8000be4:	431a      	orrs	r2, r3
 8000be6:	d175      	bne.n	8000cd4 <__aeabi_dadd+0x600>
 8000be8:	4661      	mov	r1, ip
 8000bea:	4339      	orrs	r1, r7
 8000bec:	d114      	bne.n	8000c18 <__aeabi_dadd+0x544>
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	031b      	lsls	r3, r3, #12
 8000bf4:	e6bc      	b.n	8000970 <__aeabi_dadd+0x29c>
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	1bd5      	subs	r5, r2, r7
 8000bfa:	45a9      	cmp	r9, r5
 8000bfc:	4189      	sbcs	r1, r1
 8000bfe:	4662      	mov	r2, ip
 8000c00:	4249      	negs	r1, r1
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	4698      	mov	r8, r3
 8000c08:	2601      	movs	r6, #1
 8000c0a:	e5ae      	b.n	800076a <__aeabi_dadd+0x96>
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	08d1      	lsrs	r1, r2, #3
 8000c10:	075a      	lsls	r2, r3, #29
 8000c12:	4311      	orrs	r1, r2
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	e6a7      	b.n	8000968 <__aeabi_dadd+0x294>
 8000c18:	4663      	mov	r3, ip
 8000c1a:	08f9      	lsrs	r1, r7, #3
 8000c1c:	075a      	lsls	r2, r3, #29
 8000c1e:	4654      	mov	r4, sl
 8000c20:	4311      	orrs	r1, r2
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	e6a0      	b.n	8000968 <__aeabi_dadd+0x294>
 8000c26:	464a      	mov	r2, r9
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	001d      	movs	r5, r3
 8000c2c:	1e6b      	subs	r3, r5, #1
 8000c2e:	419d      	sbcs	r5, r3
 8000c30:	e6c7      	b.n	80009c2 <__aeabi_dadd+0x2ee>
 8000c32:	0014      	movs	r4, r2
 8000c34:	001e      	movs	r6, r3
 8000c36:	3c20      	subs	r4, #32
 8000c38:	40e6      	lsrs	r6, r4
 8000c3a:	2a20      	cmp	r2, #32
 8000c3c:	d005      	beq.n	8000c4a <__aeabi_dadd+0x576>
 8000c3e:	2440      	movs	r4, #64	; 0x40
 8000c40:	1aa2      	subs	r2, r4, r2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	464a      	mov	r2, r9
 8000c46:	431a      	orrs	r2, r3
 8000c48:	4691      	mov	r9, r2
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	1e6b      	subs	r3, r5, #1
 8000c4e:	419d      	sbcs	r5, r3
 8000c50:	4335      	orrs	r5, r6
 8000c52:	e778      	b.n	8000b46 <__aeabi_dadd+0x472>
 8000c54:	464a      	mov	r2, r9
 8000c56:	431a      	orrs	r2, r3
 8000c58:	d000      	beq.n	8000c5c <__aeabi_dadd+0x588>
 8000c5a:	e66b      	b.n	8000934 <__aeabi_dadd+0x260>
 8000c5c:	076b      	lsls	r3, r5, #29
 8000c5e:	08f9      	lsrs	r1, r7, #3
 8000c60:	4319      	orrs	r1, r3
 8000c62:	08eb      	lsrs	r3, r5, #3
 8000c64:	e680      	b.n	8000968 <__aeabi_dadd+0x294>
 8000c66:	4661      	mov	r1, ip
 8000c68:	4339      	orrs	r1, r7
 8000c6a:	d054      	beq.n	8000d16 <__aeabi_dadd+0x642>
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	08f9      	lsrs	r1, r7, #3
 8000c70:	075c      	lsls	r4, r3, #29
 8000c72:	4321      	orrs	r1, r4
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	0004      	movs	r4, r0
 8000c78:	e654      	b.n	8000924 <__aeabi_dadd+0x250>
 8000c7a:	464a      	mov	r2, r9
 8000c7c:	1abd      	subs	r5, r7, r2
 8000c7e:	42af      	cmp	r7, r5
 8000c80:	4189      	sbcs	r1, r1
 8000c82:	4662      	mov	r2, ip
 8000c84:	4249      	negs	r1, r1
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	4698      	mov	r8, r3
 8000c8c:	0004      	movs	r4, r0
 8000c8e:	2601      	movs	r6, #1
 8000c90:	e56b      	b.n	800076a <__aeabi_dadd+0x96>
 8000c92:	464a      	mov	r2, r9
 8000c94:	1bd5      	subs	r5, r2, r7
 8000c96:	45a9      	cmp	r9, r5
 8000c98:	4189      	sbcs	r1, r1
 8000c9a:	4662      	mov	r2, ip
 8000c9c:	4249      	negs	r1, r1
 8000c9e:	1a9a      	subs	r2, r3, r2
 8000ca0:	1a52      	subs	r2, r2, r1
 8000ca2:	4690      	mov	r8, r2
 8000ca4:	0212      	lsls	r2, r2, #8
 8000ca6:	d532      	bpl.n	8000d0e <__aeabi_dadd+0x63a>
 8000ca8:	464a      	mov	r2, r9
 8000caa:	1abd      	subs	r5, r7, r2
 8000cac:	42af      	cmp	r7, r5
 8000cae:	4189      	sbcs	r1, r1
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	4249      	negs	r1, r1
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	1a5b      	subs	r3, r3, r1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	0004      	movs	r4, r0
 8000cbc:	e584      	b.n	80007c8 <__aeabi_dadd+0xf4>
 8000cbe:	4663      	mov	r3, ip
 8000cc0:	08f9      	lsrs	r1, r7, #3
 8000cc2:	075a      	lsls	r2, r3, #29
 8000cc4:	4311      	orrs	r1, r2
 8000cc6:	08db      	lsrs	r3, r3, #3
 8000cc8:	e64e      	b.n	8000968 <__aeabi_dadd+0x294>
 8000cca:	08f9      	lsrs	r1, r7, #3
 8000ccc:	0768      	lsls	r0, r5, #29
 8000cce:	4301      	orrs	r1, r0
 8000cd0:	08eb      	lsrs	r3, r5, #3
 8000cd2:	e624      	b.n	800091e <__aeabi_dadd+0x24a>
 8000cd4:	4662      	mov	r2, ip
 8000cd6:	433a      	orrs	r2, r7
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x608>
 8000cda:	e698      	b.n	8000a0e <__aeabi_dadd+0x33a>
 8000cdc:	464a      	mov	r2, r9
 8000cde:	08d1      	lsrs	r1, r2, #3
 8000ce0:	075a      	lsls	r2, r3, #29
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	031b      	lsls	r3, r3, #12
 8000cea:	421a      	tst	r2, r3
 8000cec:	d008      	beq.n	8000d00 <__aeabi_dadd+0x62c>
 8000cee:	4660      	mov	r0, ip
 8000cf0:	08c5      	lsrs	r5, r0, #3
 8000cf2:	421d      	tst	r5, r3
 8000cf4:	d104      	bne.n	8000d00 <__aeabi_dadd+0x62c>
 8000cf6:	4654      	mov	r4, sl
 8000cf8:	002a      	movs	r2, r5
 8000cfa:	08f9      	lsrs	r1, r7, #3
 8000cfc:	0743      	lsls	r3, r0, #29
 8000cfe:	4319      	orrs	r1, r3
 8000d00:	0f4b      	lsrs	r3, r1, #29
 8000d02:	00c9      	lsls	r1, r1, #3
 8000d04:	075b      	lsls	r3, r3, #29
 8000d06:	08c9      	lsrs	r1, r1, #3
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	e62c      	b.n	8000968 <__aeabi_dadd+0x294>
 8000d0e:	4641      	mov	r1, r8
 8000d10:	4329      	orrs	r1, r5
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x642>
 8000d14:	e5fa      	b.n	800090c <__aeabi_dadd+0x238>
 8000d16:	2300      	movs	r3, #0
 8000d18:	000a      	movs	r2, r1
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	e602      	b.n	8000924 <__aeabi_dadd+0x250>
 8000d1e:	076b      	lsls	r3, r5, #29
 8000d20:	08f9      	lsrs	r1, r7, #3
 8000d22:	4319      	orrs	r1, r3
 8000d24:	08eb      	lsrs	r3, r5, #3
 8000d26:	e5fd      	b.n	8000924 <__aeabi_dadd+0x250>
 8000d28:	4663      	mov	r3, ip
 8000d2a:	08f9      	lsrs	r1, r7, #3
 8000d2c:	075b      	lsls	r3, r3, #29
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	4663      	mov	r3, ip
 8000d32:	0004      	movs	r4, r0
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	e617      	b.n	8000968 <__aeabi_dadd+0x294>
 8000d38:	003d      	movs	r5, r7
 8000d3a:	444d      	add	r5, r9
 8000d3c:	4463      	add	r3, ip
 8000d3e:	454d      	cmp	r5, r9
 8000d40:	4189      	sbcs	r1, r1
 8000d42:	4698      	mov	r8, r3
 8000d44:	4249      	negs	r1, r1
 8000d46:	4488      	add	r8, r1
 8000d48:	4643      	mov	r3, r8
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	d400      	bmi.n	8000d50 <__aeabi_dadd+0x67c>
 8000d4e:	e5dd      	b.n	800090c <__aeabi_dadd+0x238>
 8000d50:	4642      	mov	r2, r8
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <__aeabi_dadd+0x6d0>)
 8000d54:	2601      	movs	r6, #1
 8000d56:	401a      	ands	r2, r3
 8000d58:	4690      	mov	r8, r2
 8000d5a:	e5d7      	b.n	800090c <__aeabi_dadd+0x238>
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	001e      	movs	r6, r3
 8000d60:	3820      	subs	r0, #32
 8000d62:	40c6      	lsrs	r6, r0
 8000d64:	2a20      	cmp	r2, #32
 8000d66:	d005      	beq.n	8000d74 <__aeabi_dadd+0x6a0>
 8000d68:	2040      	movs	r0, #64	; 0x40
 8000d6a:	1a82      	subs	r2, r0, r2
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	464a      	mov	r2, r9
 8000d70:	431a      	orrs	r2, r3
 8000d72:	4691      	mov	r9, r2
 8000d74:	464d      	mov	r5, r9
 8000d76:	1e6b      	subs	r3, r5, #1
 8000d78:	419d      	sbcs	r5, r3
 8000d7a:	4335      	orrs	r5, r6
 8000d7c:	e621      	b.n	80009c2 <__aeabi_dadd+0x2ee>
 8000d7e:	0002      	movs	r2, r0
 8000d80:	2300      	movs	r3, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	e540      	b.n	8000808 <__aeabi_dadd+0x134>
 8000d86:	464a      	mov	r2, r9
 8000d88:	19d5      	adds	r5, r2, r7
 8000d8a:	42bd      	cmp	r5, r7
 8000d8c:	4189      	sbcs	r1, r1
 8000d8e:	4463      	add	r3, ip
 8000d90:	4698      	mov	r8, r3
 8000d92:	4249      	negs	r1, r1
 8000d94:	4488      	add	r8, r1
 8000d96:	e5b3      	b.n	8000900 <__aeabi_dadd+0x22c>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4a01      	ldr	r2, [pc, #4]	; (8000da0 <__aeabi_dadd+0x6cc>)
 8000d9c:	000b      	movs	r3, r1
 8000d9e:	e533      	b.n	8000808 <__aeabi_dadd+0x134>
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	ff7fffff 	.word	0xff7fffff

08000da8 <__aeabi_ddiv>:
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	4657      	mov	r7, sl
 8000dac:	464e      	mov	r6, r9
 8000dae:	4645      	mov	r5, r8
 8000db0:	46de      	mov	lr, fp
 8000db2:	b5e0      	push	{r5, r6, r7, lr}
 8000db4:	4681      	mov	r9, r0
 8000db6:	0005      	movs	r5, r0
 8000db8:	030c      	lsls	r4, r1, #12
 8000dba:	0048      	lsls	r0, r1, #1
 8000dbc:	4692      	mov	sl, r2
 8000dbe:	001f      	movs	r7, r3
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	0b24      	lsrs	r4, r4, #12
 8000dc4:	0d40      	lsrs	r0, r0, #21
 8000dc6:	0fce      	lsrs	r6, r1, #31
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d059      	beq.n	8000e80 <__aeabi_ddiv+0xd8>
 8000dcc:	4b87      	ldr	r3, [pc, #540]	; (8000fec <__aeabi_ddiv+0x244>)
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_ddiv+0x2c>
 8000dd2:	e098      	b.n	8000f06 <__aeabi_ddiv+0x15e>
 8000dd4:	0f6b      	lsrs	r3, r5, #29
 8000dd6:	00e4      	lsls	r4, r4, #3
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4323      	orrs	r3, r4
 8000de0:	4698      	mov	r8, r3
 8000de2:	4b83      	ldr	r3, [pc, #524]	; (8000ff0 <__aeabi_ddiv+0x248>)
 8000de4:	00ed      	lsls	r5, r5, #3
 8000de6:	469b      	mov	fp, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	4699      	mov	r9, r3
 8000dec:	4483      	add	fp, r0
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	033c      	lsls	r4, r7, #12
 8000df2:	007b      	lsls	r3, r7, #1
 8000df4:	4650      	mov	r0, sl
 8000df6:	0b24      	lsrs	r4, r4, #12
 8000df8:	0d5b      	lsrs	r3, r3, #21
 8000dfa:	0fff      	lsrs	r7, r7, #31
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d067      	beq.n	8000ed0 <__aeabi_ddiv+0x128>
 8000e00:	4a7a      	ldr	r2, [pc, #488]	; (8000fec <__aeabi_ddiv+0x244>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d018      	beq.n	8000e38 <__aeabi_ddiv+0x90>
 8000e06:	497a      	ldr	r1, [pc, #488]	; (8000ff0 <__aeabi_ddiv+0x248>)
 8000e08:	0f42      	lsrs	r2, r0, #29
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	00e4      	lsls	r4, r4, #3
 8000e0e:	4659      	mov	r1, fp
 8000e10:	4314      	orrs	r4, r2
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	4463      	add	r3, ip
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	1acb      	subs	r3, r1, r3
 8000e1a:	4314      	orrs	r4, r2
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	00c2      	lsls	r2, r0, #3
 8000e20:	2000      	movs	r0, #0
 8000e22:	0033      	movs	r3, r6
 8000e24:	407b      	eors	r3, r7
 8000e26:	469a      	mov	sl, r3
 8000e28:	464b      	mov	r3, r9
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	d900      	bls.n	8000e30 <__aeabi_ddiv+0x88>
 8000e2e:	e0ef      	b.n	8001010 <__aeabi_ddiv+0x268>
 8000e30:	4970      	ldr	r1, [pc, #448]	; (8000ff4 <__aeabi_ddiv+0x24c>)
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	58cb      	ldr	r3, [r1, r3]
 8000e36:	469f      	mov	pc, r3
 8000e38:	4b6f      	ldr	r3, [pc, #444]	; (8000ff8 <__aeabi_ddiv+0x250>)
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	469c      	mov	ip, r3
 8000e3e:	4322      	orrs	r2, r4
 8000e40:	44e3      	add	fp, ip
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d000      	beq.n	8000e48 <__aeabi_ddiv+0xa0>
 8000e46:	e095      	b.n	8000f74 <__aeabi_ddiv+0x1cc>
 8000e48:	4649      	mov	r1, r9
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	4689      	mov	r9, r1
 8000e50:	2400      	movs	r4, #0
 8000e52:	2002      	movs	r0, #2
 8000e54:	e7e5      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000e56:	2300      	movs	r3, #0
 8000e58:	2400      	movs	r4, #0
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	051b      	lsls	r3, r3, #20
 8000e60:	4323      	orrs	r3, r4
 8000e62:	07d2      	lsls	r2, r2, #31
 8000e64:	4313      	orrs	r3, r2
 8000e66:	0028      	movs	r0, r5
 8000e68:	0019      	movs	r1, r3
 8000e6a:	b005      	add	sp, #20
 8000e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e6e:	46bb      	mov	fp, r7
 8000e70:	46b2      	mov	sl, r6
 8000e72:	46a9      	mov	r9, r5
 8000e74:	46a0      	mov	r8, r4
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <__aeabi_ddiv+0x244>)
 8000e7e:	e7ed      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000e80:	464b      	mov	r3, r9
 8000e82:	4323      	orrs	r3, r4
 8000e84:	4698      	mov	r8, r3
 8000e86:	d100      	bne.n	8000e8a <__aeabi_ddiv+0xe2>
 8000e88:	e089      	b.n	8000f9e <__aeabi_ddiv+0x1f6>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_ddiv+0xe8>
 8000e8e:	e1e0      	b.n	8001252 <__aeabi_ddiv+0x4aa>
 8000e90:	0020      	movs	r0, r4
 8000e92:	f001 fa19 	bl	80022c8 <__clzsi2>
 8000e96:	0001      	movs	r1, r0
 8000e98:	0002      	movs	r2, r0
 8000e9a:	390b      	subs	r1, #11
 8000e9c:	231d      	movs	r3, #29
 8000e9e:	1a5b      	subs	r3, r3, r1
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	0010      	movs	r0, r2
 8000ea4:	40d9      	lsrs	r1, r3
 8000ea6:	3808      	subs	r0, #8
 8000ea8:	4084      	lsls	r4, r0
 8000eaa:	000b      	movs	r3, r1
 8000eac:	464d      	mov	r5, r9
 8000eae:	4323      	orrs	r3, r4
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	4085      	lsls	r5, r0
 8000eb4:	4851      	ldr	r0, [pc, #324]	; (8000ffc <__aeabi_ddiv+0x254>)
 8000eb6:	033c      	lsls	r4, r7, #12
 8000eb8:	1a83      	subs	r3, r0, r2
 8000eba:	469b      	mov	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	007b      	lsls	r3, r7, #1
 8000ec4:	4650      	mov	r0, sl
 8000ec6:	0b24      	lsrs	r4, r4, #12
 8000ec8:	0d5b      	lsrs	r3, r3, #21
 8000eca:	0fff      	lsrs	r7, r7, #31
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d197      	bne.n	8000e00 <__aeabi_ddiv+0x58>
 8000ed0:	4652      	mov	r2, sl
 8000ed2:	4322      	orrs	r2, r4
 8000ed4:	d055      	beq.n	8000f82 <__aeabi_ddiv+0x1da>
 8000ed6:	2c00      	cmp	r4, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x134>
 8000eda:	e1ca      	b.n	8001272 <__aeabi_ddiv+0x4ca>
 8000edc:	0020      	movs	r0, r4
 8000ede:	f001 f9f3 	bl	80022c8 <__clzsi2>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	3a0b      	subs	r2, #11
 8000ee6:	231d      	movs	r3, #29
 8000ee8:	0001      	movs	r1, r0
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	4652      	mov	r2, sl
 8000eee:	3908      	subs	r1, #8
 8000ef0:	40da      	lsrs	r2, r3
 8000ef2:	408c      	lsls	r4, r1
 8000ef4:	4314      	orrs	r4, r2
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	408a      	lsls	r2, r1
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <__aeabi_ddiv+0x258>)
 8000efc:	4458      	add	r0, fp
 8000efe:	469b      	mov	fp, r3
 8000f00:	4483      	add	fp, r0
 8000f02:	2000      	movs	r0, #0
 8000f04:	e78d      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000f06:	464b      	mov	r3, r9
 8000f08:	4323      	orrs	r3, r4
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	d140      	bne.n	8000f90 <__aeabi_ddiv+0x1e8>
 8000f0e:	2308      	movs	r3, #8
 8000f10:	4699      	mov	r9, r3
 8000f12:	3b06      	subs	r3, #6
 8000f14:	2500      	movs	r5, #0
 8000f16:	4683      	mov	fp, r0
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	e769      	b.n	8000df0 <__aeabi_ddiv+0x48>
 8000f1c:	46b2      	mov	sl, r6
 8000f1e:	9b00      	ldr	r3, [sp, #0]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d0a9      	beq.n	8000e78 <__aeabi_ddiv+0xd0>
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x182>
 8000f28:	e211      	b.n	800134e <__aeabi_ddiv+0x5a6>
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d093      	beq.n	8000e56 <__aeabi_ddiv+0xae>
 8000f2e:	4a35      	ldr	r2, [pc, #212]	; (8001004 <__aeabi_ddiv+0x25c>)
 8000f30:	445a      	add	r2, fp
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	dc00      	bgt.n	8000f38 <__aeabi_ddiv+0x190>
 8000f36:	e13c      	b.n	80011b2 <__aeabi_ddiv+0x40a>
 8000f38:	076b      	lsls	r3, r5, #29
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_ddiv+0x196>
 8000f3c:	e1a7      	b.n	800128e <__aeabi_ddiv+0x4e6>
 8000f3e:	08ed      	lsrs	r5, r5, #3
 8000f40:	4643      	mov	r3, r8
 8000f42:	01db      	lsls	r3, r3, #7
 8000f44:	d506      	bpl.n	8000f54 <__aeabi_ddiv+0x1ac>
 8000f46:	4642      	mov	r2, r8
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <__aeabi_ddiv+0x260>)
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	4690      	mov	r8, r2
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	445a      	add	r2, fp
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <__aeabi_ddiv+0x264>)
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dc8e      	bgt.n	8000e78 <__aeabi_ddiv+0xd0>
 8000f5a:	4643      	mov	r3, r8
 8000f5c:	0552      	lsls	r2, r2, #21
 8000f5e:	0758      	lsls	r0, r3, #29
 8000f60:	025c      	lsls	r4, r3, #9
 8000f62:	4305      	orrs	r5, r0
 8000f64:	0b24      	lsrs	r4, r4, #12
 8000f66:	0d53      	lsrs	r3, r2, #21
 8000f68:	e778      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000f6a:	46ba      	mov	sl, r7
 8000f6c:	46a0      	mov	r8, r4
 8000f6e:	0015      	movs	r5, r2
 8000f70:	9000      	str	r0, [sp, #0]
 8000f72:	e7d4      	b.n	8000f1e <__aeabi_ddiv+0x176>
 8000f74:	464a      	mov	r2, r9
 8000f76:	2303      	movs	r3, #3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	4691      	mov	r9, r2
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	4652      	mov	r2, sl
 8000f80:	e74f      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000f82:	4649      	mov	r1, r9
 8000f84:	2301      	movs	r3, #1
 8000f86:	4319      	orrs	r1, r3
 8000f88:	4689      	mov	r9, r1
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e748      	b.n	8000e22 <__aeabi_ddiv+0x7a>
 8000f90:	230c      	movs	r3, #12
 8000f92:	4699      	mov	r9, r3
 8000f94:	3b09      	subs	r3, #9
 8000f96:	46a0      	mov	r8, r4
 8000f98:	4683      	mov	fp, r0
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	e728      	b.n	8000df0 <__aeabi_ddiv+0x48>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	469b      	mov	fp, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	2500      	movs	r5, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	e720      	b.n	8000df0 <__aeabi_ddiv+0x48>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2480      	movs	r4, #128	; 0x80
 8000fb2:	469a      	mov	sl, r3
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <__aeabi_ddiv+0x244>)
 8000fb8:	0324      	lsls	r4, r4, #12
 8000fba:	e74f      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	031b      	lsls	r3, r3, #12
 8000fc2:	4219      	tst	r1, r3
 8000fc4:	d008      	beq.n	8000fd8 <__aeabi_ddiv+0x230>
 8000fc6:	421c      	tst	r4, r3
 8000fc8:	d106      	bne.n	8000fd8 <__aeabi_ddiv+0x230>
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	0324      	lsls	r4, r4, #12
 8000fce:	46ba      	mov	sl, r7
 8000fd0:	0015      	movs	r5, r2
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <__aeabi_ddiv+0x244>)
 8000fd4:	0b24      	lsrs	r4, r4, #12
 8000fd6:	e741      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000fd8:	2480      	movs	r4, #128	; 0x80
 8000fda:	4643      	mov	r3, r8
 8000fdc:	0324      	lsls	r4, r4, #12
 8000fde:	431c      	orrs	r4, r3
 8000fe0:	0324      	lsls	r4, r4, #12
 8000fe2:	46b2      	mov	sl, r6
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <__aeabi_ddiv+0x244>)
 8000fe6:	0b24      	lsrs	r4, r4, #12
 8000fe8:	e738      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	000007ff 	.word	0x000007ff
 8000ff0:	fffffc01 	.word	0xfffffc01
 8000ff4:	08006eb4 	.word	0x08006eb4
 8000ff8:	fffff801 	.word	0xfffff801
 8000ffc:	fffffc0d 	.word	0xfffffc0d
 8001000:	000003f3 	.word	0x000003f3
 8001004:	000003ff 	.word	0x000003ff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	000007fe 	.word	0x000007fe
 8001010:	4544      	cmp	r4, r8
 8001012:	d200      	bcs.n	8001016 <__aeabi_ddiv+0x26e>
 8001014:	e116      	b.n	8001244 <__aeabi_ddiv+0x49c>
 8001016:	d100      	bne.n	800101a <__aeabi_ddiv+0x272>
 8001018:	e111      	b.n	800123e <__aeabi_ddiv+0x496>
 800101a:	2301      	movs	r3, #1
 800101c:	425b      	negs	r3, r3
 800101e:	469c      	mov	ip, r3
 8001020:	002e      	movs	r6, r5
 8001022:	4640      	mov	r0, r8
 8001024:	2500      	movs	r5, #0
 8001026:	44e3      	add	fp, ip
 8001028:	0223      	lsls	r3, r4, #8
 800102a:	0e14      	lsrs	r4, r2, #24
 800102c:	431c      	orrs	r4, r3
 800102e:	0c1b      	lsrs	r3, r3, #16
 8001030:	4699      	mov	r9, r3
 8001032:	0423      	lsls	r3, r4, #16
 8001034:	0c1f      	lsrs	r7, r3, #16
 8001036:	0212      	lsls	r2, r2, #8
 8001038:	4649      	mov	r1, r9
 800103a:	9200      	str	r2, [sp, #0]
 800103c:	9701      	str	r7, [sp, #4]
 800103e:	f7ff f8e9 	bl	8000214 <__aeabi_uidivmod>
 8001042:	0002      	movs	r2, r0
 8001044:	437a      	muls	r2, r7
 8001046:	040b      	lsls	r3, r1, #16
 8001048:	0c31      	lsrs	r1, r6, #16
 800104a:	4680      	mov	r8, r0
 800104c:	4319      	orrs	r1, r3
 800104e:	428a      	cmp	r2, r1
 8001050:	d90b      	bls.n	800106a <__aeabi_ddiv+0x2c2>
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
 8001056:	469c      	mov	ip, r3
 8001058:	1909      	adds	r1, r1, r4
 800105a:	44e0      	add	r8, ip
 800105c:	428c      	cmp	r4, r1
 800105e:	d804      	bhi.n	800106a <__aeabi_ddiv+0x2c2>
 8001060:	428a      	cmp	r2, r1
 8001062:	d902      	bls.n	800106a <__aeabi_ddiv+0x2c2>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	1a88      	subs	r0, r1, r2
 800106c:	4649      	mov	r1, r9
 800106e:	f7ff f8d1 	bl	8000214 <__aeabi_uidivmod>
 8001072:	0409      	lsls	r1, r1, #16
 8001074:	468c      	mov	ip, r1
 8001076:	0431      	lsls	r1, r6, #16
 8001078:	4666      	mov	r6, ip
 800107a:	9a01      	ldr	r2, [sp, #4]
 800107c:	0c09      	lsrs	r1, r1, #16
 800107e:	4342      	muls	r2, r0
 8001080:	0003      	movs	r3, r0
 8001082:	4331      	orrs	r1, r6
 8001084:	428a      	cmp	r2, r1
 8001086:	d904      	bls.n	8001092 <__aeabi_ddiv+0x2ea>
 8001088:	1909      	adds	r1, r1, r4
 800108a:	3b01      	subs	r3, #1
 800108c:	428c      	cmp	r4, r1
 800108e:	d800      	bhi.n	8001092 <__aeabi_ddiv+0x2ea>
 8001090:	e111      	b.n	80012b6 <__aeabi_ddiv+0x50e>
 8001092:	1a89      	subs	r1, r1, r2
 8001094:	4642      	mov	r2, r8
 8001096:	9e00      	ldr	r6, [sp, #0]
 8001098:	0412      	lsls	r2, r2, #16
 800109a:	431a      	orrs	r2, r3
 800109c:	0c33      	lsrs	r3, r6, #16
 800109e:	001f      	movs	r7, r3
 80010a0:	0c10      	lsrs	r0, r2, #16
 80010a2:	4690      	mov	r8, r2
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	0413      	lsls	r3, r2, #16
 80010a8:	0432      	lsls	r2, r6, #16
 80010aa:	0c16      	lsrs	r6, r2, #16
 80010ac:	0032      	movs	r2, r6
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	435a      	muls	r2, r3
 80010b2:	9603      	str	r6, [sp, #12]
 80010b4:	437b      	muls	r3, r7
 80010b6:	4346      	muls	r6, r0
 80010b8:	4378      	muls	r0, r7
 80010ba:	0c17      	lsrs	r7, r2, #16
 80010bc:	46bc      	mov	ip, r7
 80010be:	199b      	adds	r3, r3, r6
 80010c0:	4463      	add	r3, ip
 80010c2:	429e      	cmp	r6, r3
 80010c4:	d903      	bls.n	80010ce <__aeabi_ddiv+0x326>
 80010c6:	2680      	movs	r6, #128	; 0x80
 80010c8:	0276      	lsls	r6, r6, #9
 80010ca:	46b4      	mov	ip, r6
 80010cc:	4460      	add	r0, ip
 80010ce:	0c1e      	lsrs	r6, r3, #16
 80010d0:	1830      	adds	r0, r6, r0
 80010d2:	0416      	lsls	r6, r2, #16
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	0c36      	lsrs	r6, r6, #16
 80010d8:	199e      	adds	r6, r3, r6
 80010da:	4281      	cmp	r1, r0
 80010dc:	d200      	bcs.n	80010e0 <__aeabi_ddiv+0x338>
 80010de:	e09c      	b.n	800121a <__aeabi_ddiv+0x472>
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0x33c>
 80010e2:	e097      	b.n	8001214 <__aeabi_ddiv+0x46c>
 80010e4:	1bae      	subs	r6, r5, r6
 80010e6:	1a09      	subs	r1, r1, r0
 80010e8:	42b5      	cmp	r5, r6
 80010ea:	4180      	sbcs	r0, r0
 80010ec:	4240      	negs	r0, r0
 80010ee:	1a08      	subs	r0, r1, r0
 80010f0:	4284      	cmp	r4, r0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x34e>
 80010f4:	e111      	b.n	800131a <__aeabi_ddiv+0x572>
 80010f6:	4649      	mov	r1, r9
 80010f8:	f7ff f88c 	bl	8000214 <__aeabi_uidivmod>
 80010fc:	9a01      	ldr	r2, [sp, #4]
 80010fe:	040b      	lsls	r3, r1, #16
 8001100:	4342      	muls	r2, r0
 8001102:	0c31      	lsrs	r1, r6, #16
 8001104:	0005      	movs	r5, r0
 8001106:	4319      	orrs	r1, r3
 8001108:	428a      	cmp	r2, r1
 800110a:	d907      	bls.n	800111c <__aeabi_ddiv+0x374>
 800110c:	1909      	adds	r1, r1, r4
 800110e:	3d01      	subs	r5, #1
 8001110:	428c      	cmp	r4, r1
 8001112:	d803      	bhi.n	800111c <__aeabi_ddiv+0x374>
 8001114:	428a      	cmp	r2, r1
 8001116:	d901      	bls.n	800111c <__aeabi_ddiv+0x374>
 8001118:	1e85      	subs	r5, r0, #2
 800111a:	1909      	adds	r1, r1, r4
 800111c:	1a88      	subs	r0, r1, r2
 800111e:	4649      	mov	r1, r9
 8001120:	f7ff f878 	bl	8000214 <__aeabi_uidivmod>
 8001124:	0409      	lsls	r1, r1, #16
 8001126:	468c      	mov	ip, r1
 8001128:	0431      	lsls	r1, r6, #16
 800112a:	4666      	mov	r6, ip
 800112c:	9a01      	ldr	r2, [sp, #4]
 800112e:	0c09      	lsrs	r1, r1, #16
 8001130:	4342      	muls	r2, r0
 8001132:	0003      	movs	r3, r0
 8001134:	4331      	orrs	r1, r6
 8001136:	428a      	cmp	r2, r1
 8001138:	d907      	bls.n	800114a <__aeabi_ddiv+0x3a2>
 800113a:	1909      	adds	r1, r1, r4
 800113c:	3b01      	subs	r3, #1
 800113e:	428c      	cmp	r4, r1
 8001140:	d803      	bhi.n	800114a <__aeabi_ddiv+0x3a2>
 8001142:	428a      	cmp	r2, r1
 8001144:	d901      	bls.n	800114a <__aeabi_ddiv+0x3a2>
 8001146:	1e83      	subs	r3, r0, #2
 8001148:	1909      	adds	r1, r1, r4
 800114a:	9e03      	ldr	r6, [sp, #12]
 800114c:	1a89      	subs	r1, r1, r2
 800114e:	0032      	movs	r2, r6
 8001150:	042d      	lsls	r5, r5, #16
 8001152:	431d      	orrs	r5, r3
 8001154:	9f02      	ldr	r7, [sp, #8]
 8001156:	042b      	lsls	r3, r5, #16
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	435a      	muls	r2, r3
 800115c:	437b      	muls	r3, r7
 800115e:	469c      	mov	ip, r3
 8001160:	0c28      	lsrs	r0, r5, #16
 8001162:	4346      	muls	r6, r0
 8001164:	0c13      	lsrs	r3, r2, #16
 8001166:	44b4      	add	ip, r6
 8001168:	4463      	add	r3, ip
 800116a:	4378      	muls	r0, r7
 800116c:	429e      	cmp	r6, r3
 800116e:	d903      	bls.n	8001178 <__aeabi_ddiv+0x3d0>
 8001170:	2680      	movs	r6, #128	; 0x80
 8001172:	0276      	lsls	r6, r6, #9
 8001174:	46b4      	mov	ip, r6
 8001176:	4460      	add	r0, ip
 8001178:	0c1e      	lsrs	r6, r3, #16
 800117a:	0412      	lsls	r2, r2, #16
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	0c12      	lsrs	r2, r2, #16
 8001180:	1830      	adds	r0, r6, r0
 8001182:	189b      	adds	r3, r3, r2
 8001184:	4281      	cmp	r1, r0
 8001186:	d306      	bcc.n	8001196 <__aeabi_ddiv+0x3ee>
 8001188:	d002      	beq.n	8001190 <__aeabi_ddiv+0x3e8>
 800118a:	2301      	movs	r3, #1
 800118c:	431d      	orrs	r5, r3
 800118e:	e6ce      	b.n	8000f2e <__aeabi_ddiv+0x186>
 8001190:	2b00      	cmp	r3, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x3ee>
 8001194:	e6cb      	b.n	8000f2e <__aeabi_ddiv+0x186>
 8001196:	1861      	adds	r1, r4, r1
 8001198:	1e6e      	subs	r6, r5, #1
 800119a:	42a1      	cmp	r1, r4
 800119c:	d200      	bcs.n	80011a0 <__aeabi_ddiv+0x3f8>
 800119e:	e0a4      	b.n	80012ea <__aeabi_ddiv+0x542>
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d200      	bcs.n	80011a6 <__aeabi_ddiv+0x3fe>
 80011a4:	e0c9      	b.n	800133a <__aeabi_ddiv+0x592>
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x402>
 80011a8:	e0d9      	b.n	800135e <__aeabi_ddiv+0x5b6>
 80011aa:	0035      	movs	r5, r6
 80011ac:	e7ed      	b.n	800118a <__aeabi_ddiv+0x3e2>
 80011ae:	2501      	movs	r5, #1
 80011b0:	426d      	negs	r5, r5
 80011b2:	2101      	movs	r1, #1
 80011b4:	1a89      	subs	r1, r1, r2
 80011b6:	2938      	cmp	r1, #56	; 0x38
 80011b8:	dd00      	ble.n	80011bc <__aeabi_ddiv+0x414>
 80011ba:	e64c      	b.n	8000e56 <__aeabi_ddiv+0xae>
 80011bc:	291f      	cmp	r1, #31
 80011be:	dc00      	bgt.n	80011c2 <__aeabi_ddiv+0x41a>
 80011c0:	e07f      	b.n	80012c2 <__aeabi_ddiv+0x51a>
 80011c2:	231f      	movs	r3, #31
 80011c4:	425b      	negs	r3, r3
 80011c6:	1a9a      	subs	r2, r3, r2
 80011c8:	4643      	mov	r3, r8
 80011ca:	40d3      	lsrs	r3, r2
 80011cc:	2920      	cmp	r1, #32
 80011ce:	d004      	beq.n	80011da <__aeabi_ddiv+0x432>
 80011d0:	4644      	mov	r4, r8
 80011d2:	4a65      	ldr	r2, [pc, #404]	; (8001368 <__aeabi_ddiv+0x5c0>)
 80011d4:	445a      	add	r2, fp
 80011d6:	4094      	lsls	r4, r2
 80011d8:	4325      	orrs	r5, r4
 80011da:	1e6a      	subs	r2, r5, #1
 80011dc:	4195      	sbcs	r5, r2
 80011de:	2207      	movs	r2, #7
 80011e0:	432b      	orrs	r3, r5
 80011e2:	0015      	movs	r5, r2
 80011e4:	2400      	movs	r4, #0
 80011e6:	401d      	ands	r5, r3
 80011e8:	421a      	tst	r2, r3
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x446>
 80011ec:	e0a1      	b.n	8001332 <__aeabi_ddiv+0x58a>
 80011ee:	220f      	movs	r2, #15
 80011f0:	2400      	movs	r4, #0
 80011f2:	401a      	ands	r2, r3
 80011f4:	2a04      	cmp	r2, #4
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x452>
 80011f8:	e098      	b.n	800132c <__aeabi_ddiv+0x584>
 80011fa:	1d1a      	adds	r2, r3, #4
 80011fc:	429a      	cmp	r2, r3
 80011fe:	419b      	sbcs	r3, r3
 8001200:	425b      	negs	r3, r3
 8001202:	18e4      	adds	r4, r4, r3
 8001204:	0013      	movs	r3, r2
 8001206:	0222      	lsls	r2, r4, #8
 8001208:	d400      	bmi.n	800120c <__aeabi_ddiv+0x464>
 800120a:	e08f      	b.n	800132c <__aeabi_ddiv+0x584>
 800120c:	2301      	movs	r3, #1
 800120e:	2400      	movs	r4, #0
 8001210:	2500      	movs	r5, #0
 8001212:	e623      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 8001214:	42b5      	cmp	r5, r6
 8001216:	d300      	bcc.n	800121a <__aeabi_ddiv+0x472>
 8001218:	e764      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 800121a:	4643      	mov	r3, r8
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	9b00      	ldr	r3, [sp, #0]
 8001220:	469c      	mov	ip, r3
 8001222:	4465      	add	r5, ip
 8001224:	001f      	movs	r7, r3
 8001226:	429d      	cmp	r5, r3
 8001228:	419b      	sbcs	r3, r3
 800122a:	425b      	negs	r3, r3
 800122c:	191b      	adds	r3, r3, r4
 800122e:	18c9      	adds	r1, r1, r3
 8001230:	428c      	cmp	r4, r1
 8001232:	d23a      	bcs.n	80012aa <__aeabi_ddiv+0x502>
 8001234:	4288      	cmp	r0, r1
 8001236:	d863      	bhi.n	8001300 <__aeabi_ddiv+0x558>
 8001238:	d060      	beq.n	80012fc <__aeabi_ddiv+0x554>
 800123a:	4690      	mov	r8, r2
 800123c:	e752      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 800123e:	42aa      	cmp	r2, r5
 8001240:	d900      	bls.n	8001244 <__aeabi_ddiv+0x49c>
 8001242:	e6ea      	b.n	800101a <__aeabi_ddiv+0x272>
 8001244:	4643      	mov	r3, r8
 8001246:	07de      	lsls	r6, r3, #31
 8001248:	0858      	lsrs	r0, r3, #1
 800124a:	086b      	lsrs	r3, r5, #1
 800124c:	431e      	orrs	r6, r3
 800124e:	07ed      	lsls	r5, r5, #31
 8001250:	e6ea      	b.n	8001028 <__aeabi_ddiv+0x280>
 8001252:	4648      	mov	r0, r9
 8001254:	f001 f838 	bl	80022c8 <__clzsi2>
 8001258:	0001      	movs	r1, r0
 800125a:	0002      	movs	r2, r0
 800125c:	3115      	adds	r1, #21
 800125e:	3220      	adds	r2, #32
 8001260:	291c      	cmp	r1, #28
 8001262:	dc00      	bgt.n	8001266 <__aeabi_ddiv+0x4be>
 8001264:	e61a      	b.n	8000e9c <__aeabi_ddiv+0xf4>
 8001266:	464b      	mov	r3, r9
 8001268:	3808      	subs	r0, #8
 800126a:	4083      	lsls	r3, r0
 800126c:	2500      	movs	r5, #0
 800126e:	4698      	mov	r8, r3
 8001270:	e620      	b.n	8000eb4 <__aeabi_ddiv+0x10c>
 8001272:	f001 f829 	bl	80022c8 <__clzsi2>
 8001276:	0003      	movs	r3, r0
 8001278:	001a      	movs	r2, r3
 800127a:	3215      	adds	r2, #21
 800127c:	3020      	adds	r0, #32
 800127e:	2a1c      	cmp	r2, #28
 8001280:	dc00      	bgt.n	8001284 <__aeabi_ddiv+0x4dc>
 8001282:	e630      	b.n	8000ee6 <__aeabi_ddiv+0x13e>
 8001284:	4654      	mov	r4, sl
 8001286:	3b08      	subs	r3, #8
 8001288:	2200      	movs	r2, #0
 800128a:	409c      	lsls	r4, r3
 800128c:	e635      	b.n	8000efa <__aeabi_ddiv+0x152>
 800128e:	230f      	movs	r3, #15
 8001290:	402b      	ands	r3, r5
 8001292:	2b04      	cmp	r3, #4
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x4f0>
 8001296:	e652      	b.n	8000f3e <__aeabi_ddiv+0x196>
 8001298:	2305      	movs	r3, #5
 800129a:	425b      	negs	r3, r3
 800129c:	42ab      	cmp	r3, r5
 800129e:	419b      	sbcs	r3, r3
 80012a0:	3504      	adds	r5, #4
 80012a2:	425b      	negs	r3, r3
 80012a4:	08ed      	lsrs	r5, r5, #3
 80012a6:	4498      	add	r8, r3
 80012a8:	e64a      	b.n	8000f40 <__aeabi_ddiv+0x198>
 80012aa:	428c      	cmp	r4, r1
 80012ac:	d1c5      	bne.n	800123a <__aeabi_ddiv+0x492>
 80012ae:	42af      	cmp	r7, r5
 80012b0:	d9c0      	bls.n	8001234 <__aeabi_ddiv+0x48c>
 80012b2:	4690      	mov	r8, r2
 80012b4:	e716      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 80012b6:	428a      	cmp	r2, r1
 80012b8:	d800      	bhi.n	80012bc <__aeabi_ddiv+0x514>
 80012ba:	e6ea      	b.n	8001092 <__aeabi_ddiv+0x2ea>
 80012bc:	1e83      	subs	r3, r0, #2
 80012be:	1909      	adds	r1, r1, r4
 80012c0:	e6e7      	b.n	8001092 <__aeabi_ddiv+0x2ea>
 80012c2:	4a2a      	ldr	r2, [pc, #168]	; (800136c <__aeabi_ddiv+0x5c4>)
 80012c4:	0028      	movs	r0, r5
 80012c6:	445a      	add	r2, fp
 80012c8:	4643      	mov	r3, r8
 80012ca:	4095      	lsls	r5, r2
 80012cc:	4093      	lsls	r3, r2
 80012ce:	40c8      	lsrs	r0, r1
 80012d0:	1e6a      	subs	r2, r5, #1
 80012d2:	4195      	sbcs	r5, r2
 80012d4:	4644      	mov	r4, r8
 80012d6:	4303      	orrs	r3, r0
 80012d8:	432b      	orrs	r3, r5
 80012da:	40cc      	lsrs	r4, r1
 80012dc:	075a      	lsls	r2, r3, #29
 80012de:	d092      	beq.n	8001206 <__aeabi_ddiv+0x45e>
 80012e0:	220f      	movs	r2, #15
 80012e2:	401a      	ands	r2, r3
 80012e4:	2a04      	cmp	r2, #4
 80012e6:	d188      	bne.n	80011fa <__aeabi_ddiv+0x452>
 80012e8:	e78d      	b.n	8001206 <__aeabi_ddiv+0x45e>
 80012ea:	0035      	movs	r5, r6
 80012ec:	4281      	cmp	r1, r0
 80012ee:	d000      	beq.n	80012f2 <__aeabi_ddiv+0x54a>
 80012f0:	e74b      	b.n	800118a <__aeabi_ddiv+0x3e2>
 80012f2:	9a00      	ldr	r2, [sp, #0]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d000      	beq.n	80012fa <__aeabi_ddiv+0x552>
 80012f8:	e747      	b.n	800118a <__aeabi_ddiv+0x3e2>
 80012fa:	e618      	b.n	8000f2e <__aeabi_ddiv+0x186>
 80012fc:	42ae      	cmp	r6, r5
 80012fe:	d99c      	bls.n	800123a <__aeabi_ddiv+0x492>
 8001300:	2302      	movs	r3, #2
 8001302:	425b      	negs	r3, r3
 8001304:	469c      	mov	ip, r3
 8001306:	9b00      	ldr	r3, [sp, #0]
 8001308:	44e0      	add	r8, ip
 800130a:	469c      	mov	ip, r3
 800130c:	4465      	add	r5, ip
 800130e:	429d      	cmp	r5, r3
 8001310:	419b      	sbcs	r3, r3
 8001312:	425b      	negs	r3, r3
 8001314:	191b      	adds	r3, r3, r4
 8001316:	18c9      	adds	r1, r1, r3
 8001318:	e6e4      	b.n	80010e4 <__aeabi_ddiv+0x33c>
 800131a:	4a15      	ldr	r2, [pc, #84]	; (8001370 <__aeabi_ddiv+0x5c8>)
 800131c:	445a      	add	r2, fp
 800131e:	2a00      	cmp	r2, #0
 8001320:	dc00      	bgt.n	8001324 <__aeabi_ddiv+0x57c>
 8001322:	e744      	b.n	80011ae <__aeabi_ddiv+0x406>
 8001324:	2301      	movs	r3, #1
 8001326:	2500      	movs	r5, #0
 8001328:	4498      	add	r8, r3
 800132a:	e609      	b.n	8000f40 <__aeabi_ddiv+0x198>
 800132c:	0765      	lsls	r5, r4, #29
 800132e:	0264      	lsls	r4, r4, #9
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	08db      	lsrs	r3, r3, #3
 8001334:	431d      	orrs	r5, r3
 8001336:	2300      	movs	r3, #0
 8001338:	e590      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 800133a:	9e00      	ldr	r6, [sp, #0]
 800133c:	3d02      	subs	r5, #2
 800133e:	0072      	lsls	r2, r6, #1
 8001340:	42b2      	cmp	r2, r6
 8001342:	41bf      	sbcs	r7, r7
 8001344:	427f      	negs	r7, r7
 8001346:	193c      	adds	r4, r7, r4
 8001348:	1909      	adds	r1, r1, r4
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	e7ce      	b.n	80012ec <__aeabi_ddiv+0x544>
 800134e:	2480      	movs	r4, #128	; 0x80
 8001350:	4643      	mov	r3, r8
 8001352:	0324      	lsls	r4, r4, #12
 8001354:	431c      	orrs	r4, r3
 8001356:	0324      	lsls	r4, r4, #12
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <__aeabi_ddiv+0x5cc>)
 800135a:	0b24      	lsrs	r4, r4, #12
 800135c:	e57e      	b.n	8000e5c <__aeabi_ddiv+0xb4>
 800135e:	9a00      	ldr	r2, [sp, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d3ea      	bcc.n	800133a <__aeabi_ddiv+0x592>
 8001364:	0035      	movs	r5, r6
 8001366:	e7c4      	b.n	80012f2 <__aeabi_ddiv+0x54a>
 8001368:	0000043e 	.word	0x0000043e
 800136c:	0000041e 	.word	0x0000041e
 8001370:	000003ff 	.word	0x000003ff
 8001374:	000007ff 	.word	0x000007ff

08001378 <__eqdf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	464f      	mov	r7, r9
 800137c:	4646      	mov	r6, r8
 800137e:	46d6      	mov	lr, sl
 8001380:	4694      	mov	ip, r2
 8001382:	4691      	mov	r9, r2
 8001384:	031a      	lsls	r2, r3, #12
 8001386:	0b12      	lsrs	r2, r2, #12
 8001388:	4d18      	ldr	r5, [pc, #96]	; (80013ec <__eqdf2+0x74>)
 800138a:	b5c0      	push	{r6, r7, lr}
 800138c:	004c      	lsls	r4, r1, #1
 800138e:	030f      	lsls	r7, r1, #12
 8001390:	4692      	mov	sl, r2
 8001392:	005a      	lsls	r2, r3, #1
 8001394:	0006      	movs	r6, r0
 8001396:	4680      	mov	r8, r0
 8001398:	0b3f      	lsrs	r7, r7, #12
 800139a:	2001      	movs	r0, #1
 800139c:	0d64      	lsrs	r4, r4, #21
 800139e:	0fc9      	lsrs	r1, r1, #31
 80013a0:	0d52      	lsrs	r2, r2, #21
 80013a2:	0fdb      	lsrs	r3, r3, #31
 80013a4:	42ac      	cmp	r4, r5
 80013a6:	d00a      	beq.n	80013be <__eqdf2+0x46>
 80013a8:	42aa      	cmp	r2, r5
 80013aa:	d003      	beq.n	80013b4 <__eqdf2+0x3c>
 80013ac:	4294      	cmp	r4, r2
 80013ae:	d101      	bne.n	80013b4 <__eqdf2+0x3c>
 80013b0:	4557      	cmp	r7, sl
 80013b2:	d00d      	beq.n	80013d0 <__eqdf2+0x58>
 80013b4:	bce0      	pop	{r5, r6, r7}
 80013b6:	46ba      	mov	sl, r7
 80013b8:	46b1      	mov	r9, r6
 80013ba:	46a8      	mov	r8, r5
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	003d      	movs	r5, r7
 80013c0:	4335      	orrs	r5, r6
 80013c2:	d1f7      	bne.n	80013b4 <__eqdf2+0x3c>
 80013c4:	42a2      	cmp	r2, r4
 80013c6:	d1f5      	bne.n	80013b4 <__eqdf2+0x3c>
 80013c8:	4652      	mov	r2, sl
 80013ca:	4665      	mov	r5, ip
 80013cc:	432a      	orrs	r2, r5
 80013ce:	d1f1      	bne.n	80013b4 <__eqdf2+0x3c>
 80013d0:	2001      	movs	r0, #1
 80013d2:	45c8      	cmp	r8, r9
 80013d4:	d1ee      	bne.n	80013b4 <__eqdf2+0x3c>
 80013d6:	4299      	cmp	r1, r3
 80013d8:	d006      	beq.n	80013e8 <__eqdf2+0x70>
 80013da:	2c00      	cmp	r4, #0
 80013dc:	d1ea      	bne.n	80013b4 <__eqdf2+0x3c>
 80013de:	433e      	orrs	r6, r7
 80013e0:	0030      	movs	r0, r6
 80013e2:	1e46      	subs	r6, r0, #1
 80013e4:	41b0      	sbcs	r0, r6
 80013e6:	e7e5      	b.n	80013b4 <__eqdf2+0x3c>
 80013e8:	2000      	movs	r0, #0
 80013ea:	e7e3      	b.n	80013b4 <__eqdf2+0x3c>
 80013ec:	000007ff 	.word	0x000007ff

080013f0 <__gedf2>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	464e      	mov	r6, r9
 80013f4:	4645      	mov	r5, r8
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	0004      	movs	r4, r0
 80013fc:	0018      	movs	r0, r3
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	0016      	movs	r6, r2
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	0b1b      	lsrs	r3, r3, #12
 8001406:	4d32      	ldr	r5, [pc, #200]	; (80014d0 <__gedf2+0xe0>)
 8001408:	030f      	lsls	r7, r1, #12
 800140a:	004a      	lsls	r2, r1, #1
 800140c:	4699      	mov	r9, r3
 800140e:	0043      	lsls	r3, r0, #1
 8001410:	46a4      	mov	ip, r4
 8001412:	46b0      	mov	r8, r6
 8001414:	0b3f      	lsrs	r7, r7, #12
 8001416:	0d52      	lsrs	r2, r2, #21
 8001418:	0fc9      	lsrs	r1, r1, #31
 800141a:	0d5b      	lsrs	r3, r3, #21
 800141c:	0fc0      	lsrs	r0, r0, #31
 800141e:	42aa      	cmp	r2, r5
 8001420:	d029      	beq.n	8001476 <__gedf2+0x86>
 8001422:	42ab      	cmp	r3, r5
 8001424:	d018      	beq.n	8001458 <__gedf2+0x68>
 8001426:	2a00      	cmp	r2, #0
 8001428:	d12a      	bne.n	8001480 <__gedf2+0x90>
 800142a:	433c      	orrs	r4, r7
 800142c:	46a3      	mov	fp, r4
 800142e:	4265      	negs	r5, r4
 8001430:	4165      	adcs	r5, r4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <__gedf2+0x4c>
 8001436:	464c      	mov	r4, r9
 8001438:	4326      	orrs	r6, r4
 800143a:	d027      	beq.n	800148c <__gedf2+0x9c>
 800143c:	2d00      	cmp	r5, #0
 800143e:	d115      	bne.n	800146c <__gedf2+0x7c>
 8001440:	4281      	cmp	r1, r0
 8001442:	d028      	beq.n	8001496 <__gedf2+0xa6>
 8001444:	2002      	movs	r0, #2
 8001446:	3901      	subs	r1, #1
 8001448:	4008      	ands	r0, r1
 800144a:	3801      	subs	r0, #1
 800144c:	bcf0      	pop	{r4, r5, r6, r7}
 800144e:	46bb      	mov	fp, r7
 8001450:	46b2      	mov	sl, r6
 8001452:	46a9      	mov	r9, r5
 8001454:	46a0      	mov	r8, r4
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	464d      	mov	r5, r9
 800145a:	432e      	orrs	r6, r5
 800145c:	d12f      	bne.n	80014be <__gedf2+0xce>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d1ee      	bne.n	8001440 <__gedf2+0x50>
 8001462:	433c      	orrs	r4, r7
 8001464:	4265      	negs	r5, r4
 8001466:	4165      	adcs	r5, r4
 8001468:	2d00      	cmp	r5, #0
 800146a:	d0e9      	beq.n	8001440 <__gedf2+0x50>
 800146c:	2800      	cmp	r0, #0
 800146e:	d1ed      	bne.n	800144c <__gedf2+0x5c>
 8001470:	2001      	movs	r0, #1
 8001472:	4240      	negs	r0, r0
 8001474:	e7ea      	b.n	800144c <__gedf2+0x5c>
 8001476:	003d      	movs	r5, r7
 8001478:	4325      	orrs	r5, r4
 800147a:	d120      	bne.n	80014be <__gedf2+0xce>
 800147c:	4293      	cmp	r3, r2
 800147e:	d0eb      	beq.n	8001458 <__gedf2+0x68>
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1dd      	bne.n	8001440 <__gedf2+0x50>
 8001484:	464c      	mov	r4, r9
 8001486:	4326      	orrs	r6, r4
 8001488:	d1da      	bne.n	8001440 <__gedf2+0x50>
 800148a:	e7db      	b.n	8001444 <__gedf2+0x54>
 800148c:	465b      	mov	r3, fp
 800148e:	2000      	movs	r0, #0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0db      	beq.n	800144c <__gedf2+0x5c>
 8001494:	e7d6      	b.n	8001444 <__gedf2+0x54>
 8001496:	429a      	cmp	r2, r3
 8001498:	dc0a      	bgt.n	80014b0 <__gedf2+0xc0>
 800149a:	dbe7      	blt.n	800146c <__gedf2+0x7c>
 800149c:	454f      	cmp	r7, r9
 800149e:	d8d1      	bhi.n	8001444 <__gedf2+0x54>
 80014a0:	d010      	beq.n	80014c4 <__gedf2+0xd4>
 80014a2:	2000      	movs	r0, #0
 80014a4:	454f      	cmp	r7, r9
 80014a6:	d2d1      	bcs.n	800144c <__gedf2+0x5c>
 80014a8:	2900      	cmp	r1, #0
 80014aa:	d0e1      	beq.n	8001470 <__gedf2+0x80>
 80014ac:	0008      	movs	r0, r1
 80014ae:	e7cd      	b.n	800144c <__gedf2+0x5c>
 80014b0:	4243      	negs	r3, r0
 80014b2:	4158      	adcs	r0, r3
 80014b4:	2302      	movs	r3, #2
 80014b6:	4240      	negs	r0, r0
 80014b8:	4018      	ands	r0, r3
 80014ba:	3801      	subs	r0, #1
 80014bc:	e7c6      	b.n	800144c <__gedf2+0x5c>
 80014be:	2002      	movs	r0, #2
 80014c0:	4240      	negs	r0, r0
 80014c2:	e7c3      	b.n	800144c <__gedf2+0x5c>
 80014c4:	45c4      	cmp	ip, r8
 80014c6:	d8bd      	bhi.n	8001444 <__gedf2+0x54>
 80014c8:	2000      	movs	r0, #0
 80014ca:	45c4      	cmp	ip, r8
 80014cc:	d2be      	bcs.n	800144c <__gedf2+0x5c>
 80014ce:	e7eb      	b.n	80014a8 <__gedf2+0xb8>
 80014d0:	000007ff 	.word	0x000007ff

080014d4 <__ledf2>:
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	464e      	mov	r6, r9
 80014d8:	4645      	mov	r5, r8
 80014da:	4657      	mov	r7, sl
 80014dc:	46de      	mov	lr, fp
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	b5e0      	push	{r5, r6, r7, lr}
 80014e4:	0016      	movs	r6, r2
 80014e6:	031b      	lsls	r3, r3, #12
 80014e8:	0b1b      	lsrs	r3, r3, #12
 80014ea:	4d31      	ldr	r5, [pc, #196]	; (80015b0 <__ledf2+0xdc>)
 80014ec:	030f      	lsls	r7, r1, #12
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	0043      	lsls	r3, r0, #1
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d011      	beq.n	800152a <__ledf2+0x56>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d014      	beq.n	8001534 <__ledf2+0x60>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d12f      	bne.n	800156e <__ledf2+0x9a>
 800150e:	433c      	orrs	r4, r7
 8001510:	46a3      	mov	fp, r4
 8001512:	4265      	negs	r5, r4
 8001514:	4165      	adcs	r5, r4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d114      	bne.n	8001544 <__ledf2+0x70>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d111      	bne.n	8001544 <__ledf2+0x70>
 8001520:	465b      	mov	r3, fp
 8001522:	2000      	movs	r0, #0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d017      	beq.n	8001558 <__ledf2+0x84>
 8001528:	e010      	b.n	800154c <__ledf2+0x78>
 800152a:	003d      	movs	r5, r7
 800152c:	4325      	orrs	r5, r4
 800152e:	d112      	bne.n	8001556 <__ledf2+0x82>
 8001530:	4293      	cmp	r3, r2
 8001532:	d11c      	bne.n	800156e <__ledf2+0x9a>
 8001534:	464d      	mov	r5, r9
 8001536:	432e      	orrs	r6, r5
 8001538:	d10d      	bne.n	8001556 <__ledf2+0x82>
 800153a:	2a00      	cmp	r2, #0
 800153c:	d104      	bne.n	8001548 <__ledf2+0x74>
 800153e:	433c      	orrs	r4, r7
 8001540:	4265      	negs	r5, r4
 8001542:	4165      	adcs	r5, r4
 8001544:	2d00      	cmp	r5, #0
 8001546:	d10d      	bne.n	8001564 <__ledf2+0x90>
 8001548:	4281      	cmp	r1, r0
 800154a:	d016      	beq.n	800157a <__ledf2+0xa6>
 800154c:	2002      	movs	r0, #2
 800154e:	3901      	subs	r1, #1
 8001550:	4008      	ands	r0, r1
 8001552:	3801      	subs	r0, #1
 8001554:	e000      	b.n	8001558 <__ledf2+0x84>
 8001556:	2002      	movs	r0, #2
 8001558:	bcf0      	pop	{r4, r5, r6, r7}
 800155a:	46bb      	mov	fp, r7
 800155c:	46b2      	mov	sl, r6
 800155e:	46a9      	mov	r9, r5
 8001560:	46a0      	mov	r8, r4
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	2800      	cmp	r0, #0
 8001566:	d1f7      	bne.n	8001558 <__ledf2+0x84>
 8001568:	2001      	movs	r0, #1
 800156a:	4240      	negs	r0, r0
 800156c:	e7f4      	b.n	8001558 <__ledf2+0x84>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ea      	bne.n	8001548 <__ledf2+0x74>
 8001572:	464c      	mov	r4, r9
 8001574:	4326      	orrs	r6, r4
 8001576:	d1e7      	bne.n	8001548 <__ledf2+0x74>
 8001578:	e7e8      	b.n	800154c <__ledf2+0x78>
 800157a:	429a      	cmp	r2, r3
 800157c:	dd06      	ble.n	800158c <__ledf2+0xb8>
 800157e:	4243      	negs	r3, r0
 8001580:	4158      	adcs	r0, r3
 8001582:	2302      	movs	r3, #2
 8001584:	4240      	negs	r0, r0
 8001586:	4018      	ands	r0, r3
 8001588:	3801      	subs	r0, #1
 800158a:	e7e5      	b.n	8001558 <__ledf2+0x84>
 800158c:	429a      	cmp	r2, r3
 800158e:	dbe9      	blt.n	8001564 <__ledf2+0x90>
 8001590:	454f      	cmp	r7, r9
 8001592:	d8db      	bhi.n	800154c <__ledf2+0x78>
 8001594:	d006      	beq.n	80015a4 <__ledf2+0xd0>
 8001596:	2000      	movs	r0, #0
 8001598:	454f      	cmp	r7, r9
 800159a:	d2dd      	bcs.n	8001558 <__ledf2+0x84>
 800159c:	2900      	cmp	r1, #0
 800159e:	d0e3      	beq.n	8001568 <__ledf2+0x94>
 80015a0:	0008      	movs	r0, r1
 80015a2:	e7d9      	b.n	8001558 <__ledf2+0x84>
 80015a4:	45c4      	cmp	ip, r8
 80015a6:	d8d1      	bhi.n	800154c <__ledf2+0x78>
 80015a8:	2000      	movs	r0, #0
 80015aa:	45c4      	cmp	ip, r8
 80015ac:	d2d4      	bcs.n	8001558 <__ledf2+0x84>
 80015ae:	e7f5      	b.n	800159c <__ledf2+0xc8>
 80015b0:	000007ff 	.word	0x000007ff

080015b4 <__aeabi_dmul>:
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	4657      	mov	r7, sl
 80015b8:	464e      	mov	r6, r9
 80015ba:	4645      	mov	r5, r8
 80015bc:	46de      	mov	lr, fp
 80015be:	b5e0      	push	{r5, r6, r7, lr}
 80015c0:	4698      	mov	r8, r3
 80015c2:	030c      	lsls	r4, r1, #12
 80015c4:	004b      	lsls	r3, r1, #1
 80015c6:	0006      	movs	r6, r0
 80015c8:	4692      	mov	sl, r2
 80015ca:	b087      	sub	sp, #28
 80015cc:	0b24      	lsrs	r4, r4, #12
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fcf      	lsrs	r7, r1, #31
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d06c      	beq.n	80016b0 <__aeabi_dmul+0xfc>
 80015d6:	4add      	ldr	r2, [pc, #884]	; (800194c <__aeabi_dmul+0x398>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d100      	bne.n	80015de <__aeabi_dmul+0x2a>
 80015dc:	e086      	b.n	80016ec <__aeabi_dmul+0x138>
 80015de:	0f42      	lsrs	r2, r0, #29
 80015e0:	00e4      	lsls	r4, r4, #3
 80015e2:	4314      	orrs	r4, r2
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	0412      	lsls	r2, r2, #16
 80015e8:	4314      	orrs	r4, r2
 80015ea:	4ad9      	ldr	r2, [pc, #868]	; (8001950 <__aeabi_dmul+0x39c>)
 80015ec:	00c5      	lsls	r5, r0, #3
 80015ee:	4694      	mov	ip, r2
 80015f0:	4463      	add	r3, ip
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	4699      	mov	r9, r3
 80015f8:	469b      	mov	fp, r3
 80015fa:	4643      	mov	r3, r8
 80015fc:	4642      	mov	r2, r8
 80015fe:	031e      	lsls	r6, r3, #12
 8001600:	0fd2      	lsrs	r2, r2, #31
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4650      	mov	r0, sl
 8001606:	4690      	mov	r8, r2
 8001608:	0b36      	lsrs	r6, r6, #12
 800160a:	0d5b      	lsrs	r3, r3, #21
 800160c:	d100      	bne.n	8001610 <__aeabi_dmul+0x5c>
 800160e:	e078      	b.n	8001702 <__aeabi_dmul+0x14e>
 8001610:	4ace      	ldr	r2, [pc, #824]	; (800194c <__aeabi_dmul+0x398>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01d      	beq.n	8001652 <__aeabi_dmul+0x9e>
 8001616:	49ce      	ldr	r1, [pc, #824]	; (8001950 <__aeabi_dmul+0x39c>)
 8001618:	0f42      	lsrs	r2, r0, #29
 800161a:	468c      	mov	ip, r1
 800161c:	9900      	ldr	r1, [sp, #0]
 800161e:	4463      	add	r3, ip
 8001620:	00f6      	lsls	r6, r6, #3
 8001622:	468c      	mov	ip, r1
 8001624:	4316      	orrs	r6, r2
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	449c      	add	ip, r3
 800162a:	0412      	lsls	r2, r2, #16
 800162c:	4663      	mov	r3, ip
 800162e:	4316      	orrs	r6, r2
 8001630:	00c2      	lsls	r2, r0, #3
 8001632:	2000      	movs	r0, #0
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	9900      	ldr	r1, [sp, #0]
 8001638:	4643      	mov	r3, r8
 800163a:	3101      	adds	r1, #1
 800163c:	468c      	mov	ip, r1
 800163e:	4649      	mov	r1, r9
 8001640:	407b      	eors	r3, r7
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	290f      	cmp	r1, #15
 8001646:	d900      	bls.n	800164a <__aeabi_dmul+0x96>
 8001648:	e07e      	b.n	8001748 <__aeabi_dmul+0x194>
 800164a:	4bc2      	ldr	r3, [pc, #776]	; (8001954 <__aeabi_dmul+0x3a0>)
 800164c:	0089      	lsls	r1, r1, #2
 800164e:	5859      	ldr	r1, [r3, r1]
 8001650:	468f      	mov	pc, r1
 8001652:	4652      	mov	r2, sl
 8001654:	9b00      	ldr	r3, [sp, #0]
 8001656:	4332      	orrs	r2, r6
 8001658:	d000      	beq.n	800165c <__aeabi_dmul+0xa8>
 800165a:	e156      	b.n	800190a <__aeabi_dmul+0x356>
 800165c:	49bb      	ldr	r1, [pc, #748]	; (800194c <__aeabi_dmul+0x398>)
 800165e:	2600      	movs	r6, #0
 8001660:	468c      	mov	ip, r1
 8001662:	4463      	add	r3, ip
 8001664:	4649      	mov	r1, r9
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2302      	movs	r3, #2
 800166a:	4319      	orrs	r1, r3
 800166c:	4689      	mov	r9, r1
 800166e:	2002      	movs	r0, #2
 8001670:	e7e1      	b.n	8001636 <__aeabi_dmul+0x82>
 8001672:	4643      	mov	r3, r8
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	0034      	movs	r4, r6
 8001678:	0015      	movs	r5, r2
 800167a:	4683      	mov	fp, r0
 800167c:	465b      	mov	r3, fp
 800167e:	2b02      	cmp	r3, #2
 8001680:	d05e      	beq.n	8001740 <__aeabi_dmul+0x18c>
 8001682:	2b03      	cmp	r3, #3
 8001684:	d100      	bne.n	8001688 <__aeabi_dmul+0xd4>
 8001686:	e1f3      	b.n	8001a70 <__aeabi_dmul+0x4bc>
 8001688:	2b01      	cmp	r3, #1
 800168a:	d000      	beq.n	800168e <__aeabi_dmul+0xda>
 800168c:	e118      	b.n	80018c0 <__aeabi_dmul+0x30c>
 800168e:	2200      	movs	r2, #0
 8001690:	2400      	movs	r4, #0
 8001692:	2500      	movs	r5, #0
 8001694:	9b01      	ldr	r3, [sp, #4]
 8001696:	0512      	lsls	r2, r2, #20
 8001698:	4322      	orrs	r2, r4
 800169a:	07db      	lsls	r3, r3, #31
 800169c:	431a      	orrs	r2, r3
 800169e:	0028      	movs	r0, r5
 80016a0:	0011      	movs	r1, r2
 80016a2:	b007      	add	sp, #28
 80016a4:	bcf0      	pop	{r4, r5, r6, r7}
 80016a6:	46bb      	mov	fp, r7
 80016a8:	46b2      	mov	sl, r6
 80016aa:	46a9      	mov	r9, r5
 80016ac:	46a0      	mov	r8, r4
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b0:	0025      	movs	r5, r4
 80016b2:	4305      	orrs	r5, r0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x104>
 80016b6:	e141      	b.n	800193c <__aeabi_dmul+0x388>
 80016b8:	2c00      	cmp	r4, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x10a>
 80016bc:	e1ad      	b.n	8001a1a <__aeabi_dmul+0x466>
 80016be:	0020      	movs	r0, r4
 80016c0:	f000 fe02 	bl	80022c8 <__clzsi2>
 80016c4:	0001      	movs	r1, r0
 80016c6:	0002      	movs	r2, r0
 80016c8:	390b      	subs	r1, #11
 80016ca:	231d      	movs	r3, #29
 80016cc:	0010      	movs	r0, r2
 80016ce:	1a5b      	subs	r3, r3, r1
 80016d0:	0031      	movs	r1, r6
 80016d2:	0035      	movs	r5, r6
 80016d4:	3808      	subs	r0, #8
 80016d6:	4084      	lsls	r4, r0
 80016d8:	40d9      	lsrs	r1, r3
 80016da:	4085      	lsls	r5, r0
 80016dc:	430c      	orrs	r4, r1
 80016de:	489e      	ldr	r0, [pc, #632]	; (8001958 <__aeabi_dmul+0x3a4>)
 80016e0:	1a83      	subs	r3, r0, r2
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	4699      	mov	r9, r3
 80016e8:	469b      	mov	fp, r3
 80016ea:	e786      	b.n	80015fa <__aeabi_dmul+0x46>
 80016ec:	0005      	movs	r5, r0
 80016ee:	4325      	orrs	r5, r4
 80016f0:	d000      	beq.n	80016f4 <__aeabi_dmul+0x140>
 80016f2:	e11c      	b.n	800192e <__aeabi_dmul+0x37a>
 80016f4:	2208      	movs	r2, #8
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2302      	movs	r3, #2
 80016fa:	2400      	movs	r4, #0
 80016fc:	4691      	mov	r9, r2
 80016fe:	469b      	mov	fp, r3
 8001700:	e77b      	b.n	80015fa <__aeabi_dmul+0x46>
 8001702:	4652      	mov	r2, sl
 8001704:	4332      	orrs	r2, r6
 8001706:	d100      	bne.n	800170a <__aeabi_dmul+0x156>
 8001708:	e10a      	b.n	8001920 <__aeabi_dmul+0x36c>
 800170a:	2e00      	cmp	r6, #0
 800170c:	d100      	bne.n	8001710 <__aeabi_dmul+0x15c>
 800170e:	e176      	b.n	80019fe <__aeabi_dmul+0x44a>
 8001710:	0030      	movs	r0, r6
 8001712:	f000 fdd9 	bl	80022c8 <__clzsi2>
 8001716:	0002      	movs	r2, r0
 8001718:	3a0b      	subs	r2, #11
 800171a:	231d      	movs	r3, #29
 800171c:	0001      	movs	r1, r0
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	4652      	mov	r2, sl
 8001722:	3908      	subs	r1, #8
 8001724:	40da      	lsrs	r2, r3
 8001726:	408e      	lsls	r6, r1
 8001728:	4316      	orrs	r6, r2
 800172a:	4652      	mov	r2, sl
 800172c:	408a      	lsls	r2, r1
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	4989      	ldr	r1, [pc, #548]	; (8001958 <__aeabi_dmul+0x3a4>)
 8001732:	1a18      	subs	r0, r3, r0
 8001734:	0003      	movs	r3, r0
 8001736:	468c      	mov	ip, r1
 8001738:	4463      	add	r3, ip
 800173a:	2000      	movs	r0, #0
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	e77a      	b.n	8001636 <__aeabi_dmul+0x82>
 8001740:	2400      	movs	r4, #0
 8001742:	2500      	movs	r5, #0
 8001744:	4a81      	ldr	r2, [pc, #516]	; (800194c <__aeabi_dmul+0x398>)
 8001746:	e7a5      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001748:	0c2f      	lsrs	r7, r5, #16
 800174a:	042d      	lsls	r5, r5, #16
 800174c:	0c2d      	lsrs	r5, r5, #16
 800174e:	002b      	movs	r3, r5
 8001750:	0c11      	lsrs	r1, r2, #16
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	0c12      	lsrs	r2, r2, #16
 8001756:	4353      	muls	r3, r2
 8001758:	4698      	mov	r8, r3
 800175a:	0013      	movs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	437b      	muls	r3, r7
 8001760:	4699      	mov	r9, r3
 8001762:	4348      	muls	r0, r1
 8001764:	4448      	add	r0, r9
 8001766:	4683      	mov	fp, r0
 8001768:	4640      	mov	r0, r8
 800176a:	000b      	movs	r3, r1
 800176c:	0c00      	lsrs	r0, r0, #16
 800176e:	4682      	mov	sl, r0
 8001770:	4658      	mov	r0, fp
 8001772:	437b      	muls	r3, r7
 8001774:	4450      	add	r0, sl
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	4581      	cmp	r9, r0
 800177a:	d906      	bls.n	800178a <__aeabi_dmul+0x1d6>
 800177c:	469a      	mov	sl, r3
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	4699      	mov	r9, r3
 8001784:	44ca      	add	sl, r9
 8001786:	4653      	mov	r3, sl
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	0c03      	lsrs	r3, r0, #16
 800178c:	469b      	mov	fp, r3
 800178e:	4643      	mov	r3, r8
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	0400      	lsls	r0, r0, #16
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	4698      	mov	r8, r3
 8001798:	0003      	movs	r3, r0
 800179a:	4443      	add	r3, r8
 800179c:	9304      	str	r3, [sp, #16]
 800179e:	0c33      	lsrs	r3, r6, #16
 80017a0:	4699      	mov	r9, r3
 80017a2:	002b      	movs	r3, r5
 80017a4:	0436      	lsls	r6, r6, #16
 80017a6:	0c36      	lsrs	r6, r6, #16
 80017a8:	4373      	muls	r3, r6
 80017aa:	4698      	mov	r8, r3
 80017ac:	0033      	movs	r3, r6
 80017ae:	437b      	muls	r3, r7
 80017b0:	469a      	mov	sl, r3
 80017b2:	464b      	mov	r3, r9
 80017b4:	435d      	muls	r5, r3
 80017b6:	435f      	muls	r7, r3
 80017b8:	4643      	mov	r3, r8
 80017ba:	4455      	add	r5, sl
 80017bc:	0c18      	lsrs	r0, r3, #16
 80017be:	1940      	adds	r0, r0, r5
 80017c0:	4582      	cmp	sl, r0
 80017c2:	d903      	bls.n	80017cc <__aeabi_dmul+0x218>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	469a      	mov	sl, r3
 80017ca:	4457      	add	r7, sl
 80017cc:	0c05      	lsrs	r5, r0, #16
 80017ce:	19eb      	adds	r3, r5, r7
 80017d0:	9305      	str	r3, [sp, #20]
 80017d2:	4643      	mov	r3, r8
 80017d4:	041d      	lsls	r5, r3, #16
 80017d6:	0c2d      	lsrs	r5, r5, #16
 80017d8:	0400      	lsls	r0, r0, #16
 80017da:	1940      	adds	r0, r0, r5
 80017dc:	0c25      	lsrs	r5, r4, #16
 80017de:	0424      	lsls	r4, r4, #16
 80017e0:	0c24      	lsrs	r4, r4, #16
 80017e2:	0027      	movs	r7, r4
 80017e4:	4357      	muls	r7, r2
 80017e6:	436a      	muls	r2, r5
 80017e8:	4690      	mov	r8, r2
 80017ea:	002a      	movs	r2, r5
 80017ec:	0c3b      	lsrs	r3, r7, #16
 80017ee:	469a      	mov	sl, r3
 80017f0:	434a      	muls	r2, r1
 80017f2:	4361      	muls	r1, r4
 80017f4:	4441      	add	r1, r8
 80017f6:	4451      	add	r1, sl
 80017f8:	4483      	add	fp, r0
 80017fa:	4588      	cmp	r8, r1
 80017fc:	d903      	bls.n	8001806 <__aeabi_dmul+0x252>
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	4698      	mov	r8, r3
 8001804:	4442      	add	r2, r8
 8001806:	043f      	lsls	r7, r7, #16
 8001808:	0c0b      	lsrs	r3, r1, #16
 800180a:	0c3f      	lsrs	r7, r7, #16
 800180c:	0409      	lsls	r1, r1, #16
 800180e:	19c9      	adds	r1, r1, r7
 8001810:	0027      	movs	r7, r4
 8001812:	4698      	mov	r8, r3
 8001814:	464b      	mov	r3, r9
 8001816:	4377      	muls	r7, r6
 8001818:	435c      	muls	r4, r3
 800181a:	436e      	muls	r6, r5
 800181c:	435d      	muls	r5, r3
 800181e:	0c3b      	lsrs	r3, r7, #16
 8001820:	4699      	mov	r9, r3
 8001822:	19a4      	adds	r4, r4, r6
 8001824:	444c      	add	r4, r9
 8001826:	4442      	add	r2, r8
 8001828:	9503      	str	r5, [sp, #12]
 800182a:	42a6      	cmp	r6, r4
 800182c:	d904      	bls.n	8001838 <__aeabi_dmul+0x284>
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	025b      	lsls	r3, r3, #9
 8001832:	4698      	mov	r8, r3
 8001834:	4445      	add	r5, r8
 8001836:	9503      	str	r5, [sp, #12]
 8001838:	9b02      	ldr	r3, [sp, #8]
 800183a:	043f      	lsls	r7, r7, #16
 800183c:	445b      	add	r3, fp
 800183e:	001e      	movs	r6, r3
 8001840:	4283      	cmp	r3, r0
 8001842:	4180      	sbcs	r0, r0
 8001844:	0423      	lsls	r3, r4, #16
 8001846:	4698      	mov	r8, r3
 8001848:	9b05      	ldr	r3, [sp, #20]
 800184a:	0c3f      	lsrs	r7, r7, #16
 800184c:	4447      	add	r7, r8
 800184e:	4698      	mov	r8, r3
 8001850:	1876      	adds	r6, r6, r1
 8001852:	428e      	cmp	r6, r1
 8001854:	4189      	sbcs	r1, r1
 8001856:	4447      	add	r7, r8
 8001858:	4240      	negs	r0, r0
 800185a:	183d      	adds	r5, r7, r0
 800185c:	46a8      	mov	r8, r5
 800185e:	4693      	mov	fp, r2
 8001860:	4249      	negs	r1, r1
 8001862:	468a      	mov	sl, r1
 8001864:	44c3      	add	fp, r8
 8001866:	429f      	cmp	r7, r3
 8001868:	41bf      	sbcs	r7, r7
 800186a:	4580      	cmp	r8, r0
 800186c:	4180      	sbcs	r0, r0
 800186e:	9b03      	ldr	r3, [sp, #12]
 8001870:	44da      	add	sl, fp
 8001872:	4698      	mov	r8, r3
 8001874:	4653      	mov	r3, sl
 8001876:	4240      	negs	r0, r0
 8001878:	427f      	negs	r7, r7
 800187a:	4307      	orrs	r7, r0
 800187c:	0c24      	lsrs	r4, r4, #16
 800187e:	4593      	cmp	fp, r2
 8001880:	4192      	sbcs	r2, r2
 8001882:	458a      	cmp	sl, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	193f      	adds	r7, r7, r4
 8001888:	0ddc      	lsrs	r4, r3, #23
 800188a:	9b04      	ldr	r3, [sp, #16]
 800188c:	0275      	lsls	r5, r6, #9
 800188e:	431d      	orrs	r5, r3
 8001890:	1e68      	subs	r0, r5, #1
 8001892:	4185      	sbcs	r5, r0
 8001894:	4653      	mov	r3, sl
 8001896:	4252      	negs	r2, r2
 8001898:	4249      	negs	r1, r1
 800189a:	430a      	orrs	r2, r1
 800189c:	18bf      	adds	r7, r7, r2
 800189e:	4447      	add	r7, r8
 80018a0:	0df6      	lsrs	r6, r6, #23
 80018a2:	027f      	lsls	r7, r7, #9
 80018a4:	4335      	orrs	r5, r6
 80018a6:	025a      	lsls	r2, r3, #9
 80018a8:	433c      	orrs	r4, r7
 80018aa:	4315      	orrs	r5, r2
 80018ac:	01fb      	lsls	r3, r7, #7
 80018ae:	d400      	bmi.n	80018b2 <__aeabi_dmul+0x2fe>
 80018b0:	e0c1      	b.n	8001a36 <__aeabi_dmul+0x482>
 80018b2:	2101      	movs	r1, #1
 80018b4:	086a      	lsrs	r2, r5, #1
 80018b6:	400d      	ands	r5, r1
 80018b8:	4315      	orrs	r5, r2
 80018ba:	07e2      	lsls	r2, r4, #31
 80018bc:	4315      	orrs	r5, r2
 80018be:	0864      	lsrs	r4, r4, #1
 80018c0:	4926      	ldr	r1, [pc, #152]	; (800195c <__aeabi_dmul+0x3a8>)
 80018c2:	4461      	add	r1, ip
 80018c4:	2900      	cmp	r1, #0
 80018c6:	dd56      	ble.n	8001976 <__aeabi_dmul+0x3c2>
 80018c8:	076b      	lsls	r3, r5, #29
 80018ca:	d009      	beq.n	80018e0 <__aeabi_dmul+0x32c>
 80018cc:	220f      	movs	r2, #15
 80018ce:	402a      	ands	r2, r5
 80018d0:	2a04      	cmp	r2, #4
 80018d2:	d005      	beq.n	80018e0 <__aeabi_dmul+0x32c>
 80018d4:	1d2a      	adds	r2, r5, #4
 80018d6:	42aa      	cmp	r2, r5
 80018d8:	41ad      	sbcs	r5, r5
 80018da:	426d      	negs	r5, r5
 80018dc:	1964      	adds	r4, r4, r5
 80018de:	0015      	movs	r5, r2
 80018e0:	01e3      	lsls	r3, r4, #7
 80018e2:	d504      	bpl.n	80018ee <__aeabi_dmul+0x33a>
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <__aeabi_dmul+0x3ac>)
 80018e8:	00c9      	lsls	r1, r1, #3
 80018ea:	4014      	ands	r4, r2
 80018ec:	4461      	add	r1, ip
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <__aeabi_dmul+0x3b0>)
 80018f0:	4291      	cmp	r1, r2
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_dmul+0x342>
 80018f4:	e724      	b.n	8001740 <__aeabi_dmul+0x18c>
 80018f6:	0762      	lsls	r2, r4, #29
 80018f8:	08ed      	lsrs	r5, r5, #3
 80018fa:	0264      	lsls	r4, r4, #9
 80018fc:	0549      	lsls	r1, r1, #21
 80018fe:	4315      	orrs	r5, r2
 8001900:	0b24      	lsrs	r4, r4, #12
 8001902:	0d4a      	lsrs	r2, r1, #21
 8001904:	e6c6      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001906:	9701      	str	r7, [sp, #4]
 8001908:	e6b8      	b.n	800167c <__aeabi_dmul+0xc8>
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <__aeabi_dmul+0x398>)
 800190c:	2003      	movs	r0, #3
 800190e:	4694      	mov	ip, r2
 8001910:	4463      	add	r3, ip
 8001912:	464a      	mov	r2, r9
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2303      	movs	r3, #3
 8001918:	431a      	orrs	r2, r3
 800191a:	4691      	mov	r9, r2
 800191c:	4652      	mov	r2, sl
 800191e:	e68a      	b.n	8001636 <__aeabi_dmul+0x82>
 8001920:	4649      	mov	r1, r9
 8001922:	2301      	movs	r3, #1
 8001924:	4319      	orrs	r1, r3
 8001926:	4689      	mov	r9, r1
 8001928:	2600      	movs	r6, #0
 800192a:	2001      	movs	r0, #1
 800192c:	e683      	b.n	8001636 <__aeabi_dmul+0x82>
 800192e:	220c      	movs	r2, #12
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2303      	movs	r3, #3
 8001934:	0005      	movs	r5, r0
 8001936:	4691      	mov	r9, r2
 8001938:	469b      	mov	fp, r3
 800193a:	e65e      	b.n	80015fa <__aeabi_dmul+0x46>
 800193c:	2304      	movs	r3, #4
 800193e:	4699      	mov	r9, r3
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	2400      	movs	r4, #0
 8001948:	469b      	mov	fp, r3
 800194a:	e656      	b.n	80015fa <__aeabi_dmul+0x46>
 800194c:	000007ff 	.word	0x000007ff
 8001950:	fffffc01 	.word	0xfffffc01
 8001954:	08006ef4 	.word	0x08006ef4
 8001958:	fffffc0d 	.word	0xfffffc0d
 800195c:	000003ff 	.word	0x000003ff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	000007fe 	.word	0x000007fe
 8001968:	2300      	movs	r3, #0
 800196a:	2480      	movs	r4, #128	; 0x80
 800196c:	2500      	movs	r5, #0
 800196e:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <__aeabi_dmul+0x4cc>)
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	0324      	lsls	r4, r4, #12
 8001974:	e68e      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001976:	2001      	movs	r0, #1
 8001978:	1a40      	subs	r0, r0, r1
 800197a:	2838      	cmp	r0, #56	; 0x38
 800197c:	dd00      	ble.n	8001980 <__aeabi_dmul+0x3cc>
 800197e:	e686      	b.n	800168e <__aeabi_dmul+0xda>
 8001980:	281f      	cmp	r0, #31
 8001982:	dd5b      	ble.n	8001a3c <__aeabi_dmul+0x488>
 8001984:	221f      	movs	r2, #31
 8001986:	0023      	movs	r3, r4
 8001988:	4252      	negs	r2, r2
 800198a:	1a51      	subs	r1, r2, r1
 800198c:	40cb      	lsrs	r3, r1
 800198e:	0019      	movs	r1, r3
 8001990:	2820      	cmp	r0, #32
 8001992:	d003      	beq.n	800199c <__aeabi_dmul+0x3e8>
 8001994:	4a3b      	ldr	r2, [pc, #236]	; (8001a84 <__aeabi_dmul+0x4d0>)
 8001996:	4462      	add	r2, ip
 8001998:	4094      	lsls	r4, r2
 800199a:	4325      	orrs	r5, r4
 800199c:	1e6a      	subs	r2, r5, #1
 800199e:	4195      	sbcs	r5, r2
 80019a0:	002a      	movs	r2, r5
 80019a2:	430a      	orrs	r2, r1
 80019a4:	2107      	movs	r1, #7
 80019a6:	000d      	movs	r5, r1
 80019a8:	2400      	movs	r4, #0
 80019aa:	4015      	ands	r5, r2
 80019ac:	4211      	tst	r1, r2
 80019ae:	d05b      	beq.n	8001a68 <__aeabi_dmul+0x4b4>
 80019b0:	210f      	movs	r1, #15
 80019b2:	2400      	movs	r4, #0
 80019b4:	4011      	ands	r1, r2
 80019b6:	2904      	cmp	r1, #4
 80019b8:	d053      	beq.n	8001a62 <__aeabi_dmul+0x4ae>
 80019ba:	1d11      	adds	r1, r2, #4
 80019bc:	4291      	cmp	r1, r2
 80019be:	4192      	sbcs	r2, r2
 80019c0:	4252      	negs	r2, r2
 80019c2:	18a4      	adds	r4, r4, r2
 80019c4:	000a      	movs	r2, r1
 80019c6:	0223      	lsls	r3, r4, #8
 80019c8:	d54b      	bpl.n	8001a62 <__aeabi_dmul+0x4ae>
 80019ca:	2201      	movs	r2, #1
 80019cc:	2400      	movs	r4, #0
 80019ce:	2500      	movs	r5, #0
 80019d0:	e660      	b.n	8001694 <__aeabi_dmul+0xe0>
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	031b      	lsls	r3, r3, #12
 80019d6:	421c      	tst	r4, r3
 80019d8:	d009      	beq.n	80019ee <__aeabi_dmul+0x43a>
 80019da:	421e      	tst	r6, r3
 80019dc:	d107      	bne.n	80019ee <__aeabi_dmul+0x43a>
 80019de:	4333      	orrs	r3, r6
 80019e0:	031c      	lsls	r4, r3, #12
 80019e2:	4643      	mov	r3, r8
 80019e4:	0015      	movs	r5, r2
 80019e6:	0b24      	lsrs	r4, r4, #12
 80019e8:	4a25      	ldr	r2, [pc, #148]	; (8001a80 <__aeabi_dmul+0x4cc>)
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	e652      	b.n	8001694 <__aeabi_dmul+0xe0>
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	0312      	lsls	r2, r2, #12
 80019f2:	4314      	orrs	r4, r2
 80019f4:	0324      	lsls	r4, r4, #12
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <__aeabi_dmul+0x4cc>)
 80019f8:	0b24      	lsrs	r4, r4, #12
 80019fa:	9701      	str	r7, [sp, #4]
 80019fc:	e64a      	b.n	8001694 <__aeabi_dmul+0xe0>
 80019fe:	f000 fc63 	bl	80022c8 <__clzsi2>
 8001a02:	0003      	movs	r3, r0
 8001a04:	001a      	movs	r2, r3
 8001a06:	3215      	adds	r2, #21
 8001a08:	3020      	adds	r0, #32
 8001a0a:	2a1c      	cmp	r2, #28
 8001a0c:	dc00      	bgt.n	8001a10 <__aeabi_dmul+0x45c>
 8001a0e:	e684      	b.n	800171a <__aeabi_dmul+0x166>
 8001a10:	4656      	mov	r6, sl
 8001a12:	3b08      	subs	r3, #8
 8001a14:	2200      	movs	r2, #0
 8001a16:	409e      	lsls	r6, r3
 8001a18:	e689      	b.n	800172e <__aeabi_dmul+0x17a>
 8001a1a:	f000 fc55 	bl	80022c8 <__clzsi2>
 8001a1e:	0001      	movs	r1, r0
 8001a20:	0002      	movs	r2, r0
 8001a22:	3115      	adds	r1, #21
 8001a24:	3220      	adds	r2, #32
 8001a26:	291c      	cmp	r1, #28
 8001a28:	dc00      	bgt.n	8001a2c <__aeabi_dmul+0x478>
 8001a2a:	e64e      	b.n	80016ca <__aeabi_dmul+0x116>
 8001a2c:	0034      	movs	r4, r6
 8001a2e:	3808      	subs	r0, #8
 8001a30:	2500      	movs	r5, #0
 8001a32:	4084      	lsls	r4, r0
 8001a34:	e653      	b.n	80016de <__aeabi_dmul+0x12a>
 8001a36:	9b00      	ldr	r3, [sp, #0]
 8001a38:	469c      	mov	ip, r3
 8001a3a:	e741      	b.n	80018c0 <__aeabi_dmul+0x30c>
 8001a3c:	4912      	ldr	r1, [pc, #72]	; (8001a88 <__aeabi_dmul+0x4d4>)
 8001a3e:	0022      	movs	r2, r4
 8001a40:	4461      	add	r1, ip
 8001a42:	002e      	movs	r6, r5
 8001a44:	408d      	lsls	r5, r1
 8001a46:	408a      	lsls	r2, r1
 8001a48:	40c6      	lsrs	r6, r0
 8001a4a:	1e69      	subs	r1, r5, #1
 8001a4c:	418d      	sbcs	r5, r1
 8001a4e:	4332      	orrs	r2, r6
 8001a50:	432a      	orrs	r2, r5
 8001a52:	40c4      	lsrs	r4, r0
 8001a54:	0753      	lsls	r3, r2, #29
 8001a56:	d0b6      	beq.n	80019c6 <__aeabi_dmul+0x412>
 8001a58:	210f      	movs	r1, #15
 8001a5a:	4011      	ands	r1, r2
 8001a5c:	2904      	cmp	r1, #4
 8001a5e:	d1ac      	bne.n	80019ba <__aeabi_dmul+0x406>
 8001a60:	e7b1      	b.n	80019c6 <__aeabi_dmul+0x412>
 8001a62:	0765      	lsls	r5, r4, #29
 8001a64:	0264      	lsls	r4, r4, #9
 8001a66:	0b24      	lsrs	r4, r4, #12
 8001a68:	08d2      	lsrs	r2, r2, #3
 8001a6a:	4315      	orrs	r5, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	e611      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	0312      	lsls	r2, r2, #12
 8001a74:	4314      	orrs	r4, r2
 8001a76:	0324      	lsls	r4, r4, #12
 8001a78:	4a01      	ldr	r2, [pc, #4]	; (8001a80 <__aeabi_dmul+0x4cc>)
 8001a7a:	0b24      	lsrs	r4, r4, #12
 8001a7c:	e60a      	b.n	8001694 <__aeabi_dmul+0xe0>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000007ff 	.word	0x000007ff
 8001a84:	0000043e 	.word	0x0000043e
 8001a88:	0000041e 	.word	0x0000041e

08001a8c <__aeabi_dsub>:
 8001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	464e      	mov	r6, r9
 8001a92:	4645      	mov	r5, r8
 8001a94:	46de      	mov	lr, fp
 8001a96:	0004      	movs	r4, r0
 8001a98:	b5e0      	push	{r5, r6, r7, lr}
 8001a9a:	001f      	movs	r7, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	030b      	lsls	r3, r1, #12
 8001aa0:	0f62      	lsrs	r2, r4, #29
 8001aa2:	004e      	lsls	r6, r1, #1
 8001aa4:	0fcd      	lsrs	r5, r1, #31
 8001aa6:	0a5b      	lsrs	r3, r3, #9
 8001aa8:	0339      	lsls	r1, r7, #12
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	0a49      	lsrs	r1, r1, #9
 8001aae:	00e2      	lsls	r2, r4, #3
 8001ab0:	0f44      	lsrs	r4, r0, #29
 8001ab2:	4321      	orrs	r1, r4
 8001ab4:	4cc2      	ldr	r4, [pc, #776]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	4692      	mov	sl, r2
 8001aba:	00c0      	lsls	r0, r0, #3
 8001abc:	007a      	lsls	r2, r7, #1
 8001abe:	4680      	mov	r8, r0
 8001ac0:	0d76      	lsrs	r6, r6, #21
 8001ac2:	0d52      	lsrs	r2, r2, #21
 8001ac4:	0fff      	lsrs	r7, r7, #31
 8001ac6:	42a2      	cmp	r2, r4
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x40>
 8001aca:	e0b4      	b.n	8001c36 <__aeabi_dsub+0x1aa>
 8001acc:	2401      	movs	r4, #1
 8001ace:	4067      	eors	r7, r4
 8001ad0:	46bb      	mov	fp, r7
 8001ad2:	42bd      	cmp	r5, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x4c>
 8001ad6:	e088      	b.n	8001bea <__aeabi_dsub+0x15e>
 8001ad8:	1ab4      	subs	r4, r6, r2
 8001ada:	46a4      	mov	ip, r4
 8001adc:	2c00      	cmp	r4, #0
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_dsub+0x56>
 8001ae0:	e0b2      	b.n	8001c48 <__aeabi_dsub+0x1bc>
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x5c>
 8001ae6:	e0c5      	b.n	8001c74 <__aeabi_dsub+0x1e8>
 8001ae8:	4ab5      	ldr	r2, [pc, #724]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001aea:	4296      	cmp	r6, r2
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x64>
 8001aee:	e28b      	b.n	8002008 <__aeabi_dsub+0x57c>
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	0412      	lsls	r2, r2, #16
 8001af4:	4311      	orrs	r1, r2
 8001af6:	4662      	mov	r2, ip
 8001af8:	2a38      	cmp	r2, #56	; 0x38
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dsub+0x72>
 8001afc:	e1a1      	b.n	8001e42 <__aeabi_dsub+0x3b6>
 8001afe:	2a1f      	cmp	r2, #31
 8001b00:	dd00      	ble.n	8001b04 <__aeabi_dsub+0x78>
 8001b02:	e216      	b.n	8001f32 <__aeabi_dsub+0x4a6>
 8001b04:	2720      	movs	r7, #32
 8001b06:	000c      	movs	r4, r1
 8001b08:	1abf      	subs	r7, r7, r2
 8001b0a:	40bc      	lsls	r4, r7
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	46a0      	mov	r8, r4
 8001b10:	4664      	mov	r4, ip
 8001b12:	40b8      	lsls	r0, r7
 8001b14:	40e2      	lsrs	r2, r4
 8001b16:	4644      	mov	r4, r8
 8001b18:	4314      	orrs	r4, r2
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	1e50      	subs	r0, r2, #1
 8001b1e:	4182      	sbcs	r2, r0
 8001b20:	4660      	mov	r0, ip
 8001b22:	40c1      	lsrs	r1, r0
 8001b24:	4322      	orrs	r2, r4
 8001b26:	1a5b      	subs	r3, r3, r1
 8001b28:	4649      	mov	r1, r9
 8001b2a:	1a8c      	subs	r4, r1, r2
 8001b2c:	45a1      	cmp	r9, r4
 8001b2e:	4192      	sbcs	r2, r2
 8001b30:	4252      	negs	r2, r2
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	4698      	mov	r8, r3
 8001b36:	4643      	mov	r3, r8
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	d400      	bmi.n	8001b3e <__aeabi_dsub+0xb2>
 8001b3c:	e117      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8001b3e:	4643      	mov	r3, r8
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	0a5b      	lsrs	r3, r3, #9
 8001b44:	4698      	mov	r8, r3
 8001b46:	4643      	mov	r3, r8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0xc2>
 8001b4c:	e16c      	b.n	8001e28 <__aeabi_dsub+0x39c>
 8001b4e:	4640      	mov	r0, r8
 8001b50:	f000 fbba 	bl	80022c8 <__clzsi2>
 8001b54:	0002      	movs	r2, r0
 8001b56:	3a08      	subs	r2, #8
 8001b58:	2120      	movs	r1, #32
 8001b5a:	0020      	movs	r0, r4
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	1a89      	subs	r1, r1, r2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	40c8      	lsrs	r0, r1
 8001b64:	4094      	lsls	r4, r2
 8001b66:	4303      	orrs	r3, r0
 8001b68:	4296      	cmp	r6, r2
 8001b6a:	dd00      	ble.n	8001b6e <__aeabi_dsub+0xe2>
 8001b6c:	e157      	b.n	8001e1e <__aeabi_dsub+0x392>
 8001b6e:	1b96      	subs	r6, r2, r6
 8001b70:	1c71      	adds	r1, r6, #1
 8001b72:	291f      	cmp	r1, #31
 8001b74:	dd00      	ble.n	8001b78 <__aeabi_dsub+0xec>
 8001b76:	e1cb      	b.n	8001f10 <__aeabi_dsub+0x484>
 8001b78:	2220      	movs	r2, #32
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	0026      	movs	r6, r4
 8001b7e:	1a52      	subs	r2, r2, r1
 8001b80:	4094      	lsls	r4, r2
 8001b82:	4090      	lsls	r0, r2
 8001b84:	40ce      	lsrs	r6, r1
 8001b86:	40cb      	lsrs	r3, r1
 8001b88:	1e62      	subs	r2, r4, #1
 8001b8a:	4194      	sbcs	r4, r2
 8001b8c:	4330      	orrs	r0, r6
 8001b8e:	4698      	mov	r8, r3
 8001b90:	2600      	movs	r6, #0
 8001b92:	4304      	orrs	r4, r0
 8001b94:	0763      	lsls	r3, r4, #29
 8001b96:	d009      	beq.n	8001bac <__aeabi_dsub+0x120>
 8001b98:	230f      	movs	r3, #15
 8001b9a:	4023      	ands	r3, r4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d005      	beq.n	8001bac <__aeabi_dsub+0x120>
 8001ba0:	1d23      	adds	r3, r4, #4
 8001ba2:	42a3      	cmp	r3, r4
 8001ba4:	41a4      	sbcs	r4, r4
 8001ba6:	4264      	negs	r4, r4
 8001ba8:	44a0      	add	r8, r4
 8001baa:	001c      	movs	r4, r3
 8001bac:	4643      	mov	r3, r8
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	d400      	bmi.n	8001bb4 <__aeabi_dsub+0x128>
 8001bb2:	e0df      	b.n	8001d74 <__aeabi_dsub+0x2e8>
 8001bb4:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001bb6:	3601      	adds	r6, #1
 8001bb8:	429e      	cmp	r6, r3
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x132>
 8001bbc:	e0fb      	b.n	8001db6 <__aeabi_dsub+0x32a>
 8001bbe:	4642      	mov	r2, r8
 8001bc0:	4b80      	ldr	r3, [pc, #512]	; (8001dc4 <__aeabi_dsub+0x338>)
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	0571      	lsls	r1, r6, #21
 8001bca:	0752      	lsls	r2, r2, #29
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	4322      	orrs	r2, r4
 8001bd0:	0b1b      	lsrs	r3, r3, #12
 8001bd2:	0d49      	lsrs	r1, r1, #21
 8001bd4:	0509      	lsls	r1, r1, #20
 8001bd6:	07ed      	lsls	r5, r5, #31
 8001bd8:	4319      	orrs	r1, r3
 8001bda:	4329      	orrs	r1, r5
 8001bdc:	0010      	movs	r0, r2
 8001bde:	bcf0      	pop	{r4, r5, r6, r7}
 8001be0:	46bb      	mov	fp, r7
 8001be2:	46b2      	mov	sl, r6
 8001be4:	46a9      	mov	r9, r5
 8001be6:	46a0      	mov	r8, r4
 8001be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bea:	1ab4      	subs	r4, r6, r2
 8001bec:	46a4      	mov	ip, r4
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	dd58      	ble.n	8001ca4 <__aeabi_dsub+0x218>
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x16c>
 8001bf6:	e09e      	b.n	8001d36 <__aeabi_dsub+0x2aa>
 8001bf8:	4a71      	ldr	r2, [pc, #452]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001bfa:	4296      	cmp	r6, r2
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x174>
 8001bfe:	e13b      	b.n	8001e78 <__aeabi_dsub+0x3ec>
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0412      	lsls	r2, r2, #16
 8001c04:	4311      	orrs	r1, r2
 8001c06:	4662      	mov	r2, ip
 8001c08:	2a38      	cmp	r2, #56	; 0x38
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_dsub+0x182>
 8001c0c:	e0c1      	b.n	8001d92 <__aeabi_dsub+0x306>
 8001c0e:	2a1f      	cmp	r2, #31
 8001c10:	dc00      	bgt.n	8001c14 <__aeabi_dsub+0x188>
 8001c12:	e1bb      	b.n	8001f8c <__aeabi_dsub+0x500>
 8001c14:	000c      	movs	r4, r1
 8001c16:	3a20      	subs	r2, #32
 8001c18:	40d4      	lsrs	r4, r2
 8001c1a:	0022      	movs	r2, r4
 8001c1c:	4664      	mov	r4, ip
 8001c1e:	2c20      	cmp	r4, #32
 8001c20:	d004      	beq.n	8001c2c <__aeabi_dsub+0x1a0>
 8001c22:	2740      	movs	r7, #64	; 0x40
 8001c24:	1b3f      	subs	r7, r7, r4
 8001c26:	40b9      	lsls	r1, r7
 8001c28:	4308      	orrs	r0, r1
 8001c2a:	4680      	mov	r8, r0
 8001c2c:	4644      	mov	r4, r8
 8001c2e:	1e61      	subs	r1, r4, #1
 8001c30:	418c      	sbcs	r4, r1
 8001c32:	4314      	orrs	r4, r2
 8001c34:	e0b1      	b.n	8001d9a <__aeabi_dsub+0x30e>
 8001c36:	000c      	movs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	d02a      	beq.n	8001c92 <__aeabi_dsub+0x206>
 8001c3c:	46bb      	mov	fp, r7
 8001c3e:	42bd      	cmp	r5, r7
 8001c40:	d02d      	beq.n	8001c9e <__aeabi_dsub+0x212>
 8001c42:	4c61      	ldr	r4, [pc, #388]	; (8001dc8 <__aeabi_dsub+0x33c>)
 8001c44:	46a4      	mov	ip, r4
 8001c46:	44b4      	add	ip, r6
 8001c48:	4664      	mov	r4, ip
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	d05c      	beq.n	8001d08 <__aeabi_dsub+0x27c>
 8001c4e:	1b94      	subs	r4, r2, r6
 8001c50:	46a4      	mov	ip, r4
 8001c52:	2e00      	cmp	r6, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x1cc>
 8001c56:	e115      	b.n	8001e84 <__aeabi_dsub+0x3f8>
 8001c58:	464d      	mov	r5, r9
 8001c5a:	431d      	orrs	r5, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1d4>
 8001c5e:	e1c3      	b.n	8001fe8 <__aeabi_dsub+0x55c>
 8001c60:	1e65      	subs	r5, r4, #1
 8001c62:	2c01      	cmp	r4, #1
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x1dc>
 8001c66:	e20c      	b.n	8002082 <__aeabi_dsub+0x5f6>
 8001c68:	4e55      	ldr	r6, [pc, #340]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001c6a:	42b4      	cmp	r4, r6
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x1e4>
 8001c6e:	e1f8      	b.n	8002062 <__aeabi_dsub+0x5d6>
 8001c70:	46ac      	mov	ip, r5
 8001c72:	e10e      	b.n	8001e92 <__aeabi_dsub+0x406>
 8001c74:	000a      	movs	r2, r1
 8001c76:	4302      	orrs	r2, r0
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1f0>
 8001c7a:	e136      	b.n	8001eea <__aeabi_dsub+0x45e>
 8001c7c:	0022      	movs	r2, r4
 8001c7e:	3a01      	subs	r2, #1
 8001c80:	2c01      	cmp	r4, #1
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x1fa>
 8001c84:	e1c6      	b.n	8002014 <__aeabi_dsub+0x588>
 8001c86:	4c4e      	ldr	r4, [pc, #312]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001c88:	45a4      	cmp	ip, r4
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x202>
 8001c8c:	e0f4      	b.n	8001e78 <__aeabi_dsub+0x3ec>
 8001c8e:	4694      	mov	ip, r2
 8001c90:	e731      	b.n	8001af6 <__aeabi_dsub+0x6a>
 8001c92:	2401      	movs	r4, #1
 8001c94:	4067      	eors	r7, r4
 8001c96:	46bb      	mov	fp, r7
 8001c98:	42bd      	cmp	r5, r7
 8001c9a:	d000      	beq.n	8001c9e <__aeabi_dsub+0x212>
 8001c9c:	e71c      	b.n	8001ad8 <__aeabi_dsub+0x4c>
 8001c9e:	4c4a      	ldr	r4, [pc, #296]	; (8001dc8 <__aeabi_dsub+0x33c>)
 8001ca0:	46a4      	mov	ip, r4
 8001ca2:	44b4      	add	ip, r6
 8001ca4:	4664      	mov	r4, ip
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x220>
 8001caa:	e0cf      	b.n	8001e4c <__aeabi_dsub+0x3c0>
 8001cac:	1b94      	subs	r4, r2, r6
 8001cae:	46a4      	mov	ip, r4
 8001cb0:	2e00      	cmp	r6, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x22a>
 8001cb4:	e15c      	b.n	8001f70 <__aeabi_dsub+0x4e4>
 8001cb6:	4e42      	ldr	r6, [pc, #264]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001cb8:	42b2      	cmp	r2, r6
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x232>
 8001cbc:	e1ec      	b.n	8002098 <__aeabi_dsub+0x60c>
 8001cbe:	2680      	movs	r6, #128	; 0x80
 8001cc0:	0436      	lsls	r6, r6, #16
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	4664      	mov	r4, ip
 8001cc6:	2c38      	cmp	r4, #56	; 0x38
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0x240>
 8001cca:	e1b3      	b.n	8002034 <__aeabi_dsub+0x5a8>
 8001ccc:	2c1f      	cmp	r4, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x246>
 8001cd0:	e238      	b.n	8002144 <__aeabi_dsub+0x6b8>
 8001cd2:	2620      	movs	r6, #32
 8001cd4:	1b36      	subs	r6, r6, r4
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	40b4      	lsls	r4, r6
 8001cda:	464f      	mov	r7, r9
 8001cdc:	46a0      	mov	r8, r4
 8001cde:	4664      	mov	r4, ip
 8001ce0:	40e7      	lsrs	r7, r4
 8001ce2:	4644      	mov	r4, r8
 8001ce4:	433c      	orrs	r4, r7
 8001ce6:	464f      	mov	r7, r9
 8001ce8:	40b7      	lsls	r7, r6
 8001cea:	003e      	movs	r6, r7
 8001cec:	1e77      	subs	r7, r6, #1
 8001cee:	41be      	sbcs	r6, r7
 8001cf0:	4334      	orrs	r4, r6
 8001cf2:	4666      	mov	r6, ip
 8001cf4:	40f3      	lsrs	r3, r6
 8001cf6:	18c9      	adds	r1, r1, r3
 8001cf8:	1824      	adds	r4, r4, r0
 8001cfa:	4284      	cmp	r4, r0
 8001cfc:	419b      	sbcs	r3, r3
 8001cfe:	425b      	negs	r3, r3
 8001d00:	4698      	mov	r8, r3
 8001d02:	0016      	movs	r6, r2
 8001d04:	4488      	add	r8, r1
 8001d06:	e04e      	b.n	8001da6 <__aeabi_dsub+0x31a>
 8001d08:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <__aeabi_dsub+0x340>)
 8001d0a:	1c74      	adds	r4, r6, #1
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x286>
 8001d10:	e0d6      	b.n	8001ec0 <__aeabi_dsub+0x434>
 8001d12:	464a      	mov	r2, r9
 8001d14:	431a      	orrs	r2, r3
 8001d16:	2e00      	cmp	r6, #0
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x290>
 8001d1a:	e15b      	b.n	8001fd4 <__aeabi_dsub+0x548>
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x296>
 8001d20:	e1a5      	b.n	800206e <__aeabi_dsub+0x5e2>
 8001d22:	000a      	movs	r2, r1
 8001d24:	4302      	orrs	r2, r0
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x29e>
 8001d28:	e1bb      	b.n	80020a2 <__aeabi_dsub+0x616>
 8001d2a:	464a      	mov	r2, r9
 8001d2c:	0759      	lsls	r1, r3, #29
 8001d2e:	08d2      	lsrs	r2, r2, #3
 8001d30:	430a      	orrs	r2, r1
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	e027      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8001d36:	000a      	movs	r2, r1
 8001d38:	4302      	orrs	r2, r0
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x2b2>
 8001d3c:	e174      	b.n	8002028 <__aeabi_dsub+0x59c>
 8001d3e:	0022      	movs	r2, r4
 8001d40:	3a01      	subs	r2, #1
 8001d42:	2c01      	cmp	r4, #1
 8001d44:	d005      	beq.n	8001d52 <__aeabi_dsub+0x2c6>
 8001d46:	4c1e      	ldr	r4, [pc, #120]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001d48:	45a4      	cmp	ip, r4
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x2c2>
 8001d4c:	e094      	b.n	8001e78 <__aeabi_dsub+0x3ec>
 8001d4e:	4694      	mov	ip, r2
 8001d50:	e759      	b.n	8001c06 <__aeabi_dsub+0x17a>
 8001d52:	4448      	add	r0, r9
 8001d54:	4548      	cmp	r0, r9
 8001d56:	4192      	sbcs	r2, r2
 8001d58:	185b      	adds	r3, r3, r1
 8001d5a:	4698      	mov	r8, r3
 8001d5c:	0004      	movs	r4, r0
 8001d5e:	4252      	negs	r2, r2
 8001d60:	4490      	add	r8, r2
 8001d62:	4643      	mov	r3, r8
 8001d64:	2602      	movs	r6, #2
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	d500      	bpl.n	8001d6c <__aeabi_dsub+0x2e0>
 8001d6a:	e0c4      	b.n	8001ef6 <__aeabi_dsub+0x46a>
 8001d6c:	3e01      	subs	r6, #1
 8001d6e:	0763      	lsls	r3, r4, #29
 8001d70:	d000      	beq.n	8001d74 <__aeabi_dsub+0x2e8>
 8001d72:	e711      	b.n	8001b98 <__aeabi_dsub+0x10c>
 8001d74:	4643      	mov	r3, r8
 8001d76:	46b4      	mov	ip, r6
 8001d78:	0759      	lsls	r1, r3, #29
 8001d7a:	08e2      	lsrs	r2, r4, #3
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	490f      	ldr	r1, [pc, #60]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001d82:	458c      	cmp	ip, r1
 8001d84:	d040      	beq.n	8001e08 <__aeabi_dsub+0x37c>
 8001d86:	4661      	mov	r1, ip
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0549      	lsls	r1, r1, #21
 8001d8c:	0b1b      	lsrs	r3, r3, #12
 8001d8e:	0d49      	lsrs	r1, r1, #21
 8001d90:	e720      	b.n	8001bd4 <__aeabi_dsub+0x148>
 8001d92:	4301      	orrs	r1, r0
 8001d94:	000c      	movs	r4, r1
 8001d96:	1e61      	subs	r1, r4, #1
 8001d98:	418c      	sbcs	r4, r1
 8001d9a:	444c      	add	r4, r9
 8001d9c:	454c      	cmp	r4, r9
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	4252      	negs	r2, r2
 8001da2:	4690      	mov	r8, r2
 8001da4:	4498      	add	r8, r3
 8001da6:	4643      	mov	r3, r8
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	d5e0      	bpl.n	8001d6e <__aeabi_dsub+0x2e2>
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__aeabi_dsub+0x334>)
 8001dae:	3601      	adds	r6, #1
 8001db0:	429e      	cmp	r6, r3
 8001db2:	d000      	beq.n	8001db6 <__aeabi_dsub+0x32a>
 8001db4:	e09f      	b.n	8001ef6 <__aeabi_dsub+0x46a>
 8001db6:	0031      	movs	r1, r6
 8001db8:	2300      	movs	r3, #0
 8001dba:	2200      	movs	r2, #0
 8001dbc:	e70a      	b.n	8001bd4 <__aeabi_dsub+0x148>
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	000007ff 	.word	0x000007ff
 8001dc4:	ff7fffff 	.word	0xff7fffff
 8001dc8:	fffff801 	.word	0xfffff801
 8001dcc:	000007fe 	.word	0x000007fe
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x34a>
 8001dd4:	e160      	b.n	8002098 <__aeabi_dsub+0x60c>
 8001dd6:	000a      	movs	r2, r1
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	d04d      	beq.n	8001e78 <__aeabi_dsub+0x3ec>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	075c      	lsls	r4, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	4322      	orrs	r2, r4
 8001de4:	2480      	movs	r4, #128	; 0x80
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	0324      	lsls	r4, r4, #12
 8001dea:	4223      	tst	r3, r4
 8001dec:	d007      	beq.n	8001dfe <__aeabi_dsub+0x372>
 8001dee:	08ce      	lsrs	r6, r1, #3
 8001df0:	4226      	tst	r6, r4
 8001df2:	d104      	bne.n	8001dfe <__aeabi_dsub+0x372>
 8001df4:	465d      	mov	r5, fp
 8001df6:	0033      	movs	r3, r6
 8001df8:	08c2      	lsrs	r2, r0, #3
 8001dfa:	0749      	lsls	r1, r1, #29
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	0f51      	lsrs	r1, r2, #29
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	08d2      	lsrs	r2, r2, #3
 8001e04:	0749      	lsls	r1, r1, #29
 8001e06:	430a      	orrs	r2, r1
 8001e08:	0011      	movs	r1, r2
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x384>
 8001e0e:	e1c8      	b.n	80021a2 <__aeabi_dsub+0x716>
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0309      	lsls	r1, r1, #12
 8001e14:	430b      	orrs	r3, r1
 8001e16:	031b      	lsls	r3, r3, #12
 8001e18:	49d5      	ldr	r1, [pc, #852]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001e1a:	0b1b      	lsrs	r3, r3, #12
 8001e1c:	e6da      	b.n	8001bd4 <__aeabi_dsub+0x148>
 8001e1e:	49d5      	ldr	r1, [pc, #852]	; (8002174 <__aeabi_dsub+0x6e8>)
 8001e20:	1ab6      	subs	r6, r6, r2
 8001e22:	400b      	ands	r3, r1
 8001e24:	4698      	mov	r8, r3
 8001e26:	e6b5      	b.n	8001b94 <__aeabi_dsub+0x108>
 8001e28:	0020      	movs	r0, r4
 8001e2a:	f000 fa4d 	bl	80022c8 <__clzsi2>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	3218      	adds	r2, #24
 8001e32:	2a1f      	cmp	r2, #31
 8001e34:	dc00      	bgt.n	8001e38 <__aeabi_dsub+0x3ac>
 8001e36:	e68f      	b.n	8001b58 <__aeabi_dsub+0xcc>
 8001e38:	0023      	movs	r3, r4
 8001e3a:	3808      	subs	r0, #8
 8001e3c:	4083      	lsls	r3, r0
 8001e3e:	2400      	movs	r4, #0
 8001e40:	e692      	b.n	8001b68 <__aeabi_dsub+0xdc>
 8001e42:	4308      	orrs	r0, r1
 8001e44:	0002      	movs	r2, r0
 8001e46:	1e50      	subs	r0, r2, #1
 8001e48:	4182      	sbcs	r2, r0
 8001e4a:	e66d      	b.n	8001b28 <__aeabi_dsub+0x9c>
 8001e4c:	4cca      	ldr	r4, [pc, #808]	; (8002178 <__aeabi_dsub+0x6ec>)
 8001e4e:	1c72      	adds	r2, r6, #1
 8001e50:	4222      	tst	r2, r4
 8001e52:	d000      	beq.n	8001e56 <__aeabi_dsub+0x3ca>
 8001e54:	e0ad      	b.n	8001fb2 <__aeabi_dsub+0x526>
 8001e56:	464a      	mov	r2, r9
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	2e00      	cmp	r6, #0
 8001e5c:	d1b8      	bne.n	8001dd0 <__aeabi_dsub+0x344>
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x3d8>
 8001e62:	e158      	b.n	8002116 <__aeabi_dsub+0x68a>
 8001e64:	000a      	movs	r2, r1
 8001e66:	4302      	orrs	r2, r0
 8001e68:	d000      	beq.n	8001e6c <__aeabi_dsub+0x3e0>
 8001e6a:	e159      	b.n	8002120 <__aeabi_dsub+0x694>
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	0759      	lsls	r1, r3, #29
 8001e70:	08d2      	lsrs	r2, r2, #3
 8001e72:	430a      	orrs	r2, r1
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	e786      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8001e78:	464a      	mov	r2, r9
 8001e7a:	0759      	lsls	r1, r3, #29
 8001e7c:	08d2      	lsrs	r2, r2, #3
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	e7c1      	b.n	8001e08 <__aeabi_dsub+0x37c>
 8001e84:	4dba      	ldr	r5, [pc, #744]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001e86:	42aa      	cmp	r2, r5
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x400>
 8001e8a:	e11e      	b.n	80020ca <__aeabi_dsub+0x63e>
 8001e8c:	2580      	movs	r5, #128	; 0x80
 8001e8e:	042d      	lsls	r5, r5, #16
 8001e90:	432b      	orrs	r3, r5
 8001e92:	4664      	mov	r4, ip
 8001e94:	2c38      	cmp	r4, #56	; 0x38
 8001e96:	dc5d      	bgt.n	8001f54 <__aeabi_dsub+0x4c8>
 8001e98:	2c1f      	cmp	r4, #31
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_dsub+0x412>
 8001e9c:	e0d0      	b.n	8002040 <__aeabi_dsub+0x5b4>
 8001e9e:	2520      	movs	r5, #32
 8001ea0:	4667      	mov	r7, ip
 8001ea2:	1b2d      	subs	r5, r5, r4
 8001ea4:	464e      	mov	r6, r9
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	40fe      	lsrs	r6, r7
 8001eaa:	40ac      	lsls	r4, r5
 8001eac:	4334      	orrs	r4, r6
 8001eae:	464e      	mov	r6, r9
 8001eb0:	40ae      	lsls	r6, r5
 8001eb2:	0035      	movs	r5, r6
 8001eb4:	40fb      	lsrs	r3, r7
 8001eb6:	1e6e      	subs	r6, r5, #1
 8001eb8:	41b5      	sbcs	r5, r6
 8001eba:	1ac9      	subs	r1, r1, r3
 8001ebc:	432c      	orrs	r4, r5
 8001ebe:	e04e      	b.n	8001f5e <__aeabi_dsub+0x4d2>
 8001ec0:	464a      	mov	r2, r9
 8001ec2:	1a14      	subs	r4, r2, r0
 8001ec4:	45a1      	cmp	r9, r4
 8001ec6:	4192      	sbcs	r2, r2
 8001ec8:	4252      	negs	r2, r2
 8001eca:	4690      	mov	r8, r2
 8001ecc:	1a5f      	subs	r7, r3, r1
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4647      	mov	r7, r8
 8001ed2:	1bd2      	subs	r2, r2, r7
 8001ed4:	4690      	mov	r8, r2
 8001ed6:	0212      	lsls	r2, r2, #8
 8001ed8:	d500      	bpl.n	8001edc <__aeabi_dsub+0x450>
 8001eda:	e08b      	b.n	8001ff4 <__aeabi_dsub+0x568>
 8001edc:	4642      	mov	r2, r8
 8001ede:	4322      	orrs	r2, r4
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x458>
 8001ee2:	e630      	b.n	8001b46 <__aeabi_dsub+0xba>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	e74d      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8001eea:	464a      	mov	r2, r9
 8001eec:	0759      	lsls	r1, r3, #29
 8001eee:	08d2      	lsrs	r2, r2, #3
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	e744      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 8001ef6:	4642      	mov	r2, r8
 8001ef8:	4b9e      	ldr	r3, [pc, #632]	; (8002174 <__aeabi_dsub+0x6e8>)
 8001efa:	0861      	lsrs	r1, r4, #1
 8001efc:	401a      	ands	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	2201      	movs	r2, #1
 8001f02:	4014      	ands	r4, r2
 8001f04:	430c      	orrs	r4, r1
 8001f06:	07da      	lsls	r2, r3, #31
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	4314      	orrs	r4, r2
 8001f0e:	e641      	b.n	8001b94 <__aeabi_dsub+0x108>
 8001f10:	001a      	movs	r2, r3
 8001f12:	3e1f      	subs	r6, #31
 8001f14:	40f2      	lsrs	r2, r6
 8001f16:	0016      	movs	r6, r2
 8001f18:	2920      	cmp	r1, #32
 8001f1a:	d003      	beq.n	8001f24 <__aeabi_dsub+0x498>
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	1a51      	subs	r1, r2, r1
 8001f20:	408b      	lsls	r3, r1
 8001f22:	431c      	orrs	r4, r3
 8001f24:	1e62      	subs	r2, r4, #1
 8001f26:	4194      	sbcs	r4, r2
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4334      	orrs	r4, r6
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	2600      	movs	r6, #0
 8001f30:	e71d      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8001f32:	000c      	movs	r4, r1
 8001f34:	3a20      	subs	r2, #32
 8001f36:	40d4      	lsrs	r4, r2
 8001f38:	0022      	movs	r2, r4
 8001f3a:	4664      	mov	r4, ip
 8001f3c:	2c20      	cmp	r4, #32
 8001f3e:	d004      	beq.n	8001f4a <__aeabi_dsub+0x4be>
 8001f40:	2740      	movs	r7, #64	; 0x40
 8001f42:	1b3f      	subs	r7, r7, r4
 8001f44:	40b9      	lsls	r1, r7
 8001f46:	4308      	orrs	r0, r1
 8001f48:	4680      	mov	r8, r0
 8001f4a:	4644      	mov	r4, r8
 8001f4c:	1e61      	subs	r1, r4, #1
 8001f4e:	418c      	sbcs	r4, r1
 8001f50:	4322      	orrs	r2, r4
 8001f52:	e5e9      	b.n	8001b28 <__aeabi_dsub+0x9c>
 8001f54:	464c      	mov	r4, r9
 8001f56:	4323      	orrs	r3, r4
 8001f58:	001c      	movs	r4, r3
 8001f5a:	1e63      	subs	r3, r4, #1
 8001f5c:	419c      	sbcs	r4, r3
 8001f5e:	1b04      	subs	r4, r0, r4
 8001f60:	42a0      	cmp	r0, r4
 8001f62:	419b      	sbcs	r3, r3
 8001f64:	425b      	negs	r3, r3
 8001f66:	1acb      	subs	r3, r1, r3
 8001f68:	4698      	mov	r8, r3
 8001f6a:	465d      	mov	r5, fp
 8001f6c:	0016      	movs	r6, r2
 8001f6e:	e5e2      	b.n	8001b36 <__aeabi_dsub+0xaa>
 8001f70:	464e      	mov	r6, r9
 8001f72:	431e      	orrs	r6, r3
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x4ec>
 8001f76:	e0ae      	b.n	80020d6 <__aeabi_dsub+0x64a>
 8001f78:	1e66      	subs	r6, r4, #1
 8001f7a:	2c01      	cmp	r4, #1
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x4f4>
 8001f7e:	e0fd      	b.n	800217c <__aeabi_dsub+0x6f0>
 8001f80:	4f7b      	ldr	r7, [pc, #492]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001f82:	42bc      	cmp	r4, r7
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4fc>
 8001f86:	e107      	b.n	8002198 <__aeabi_dsub+0x70c>
 8001f88:	46b4      	mov	ip, r6
 8001f8a:	e69b      	b.n	8001cc4 <__aeabi_dsub+0x238>
 8001f8c:	4664      	mov	r4, ip
 8001f8e:	2220      	movs	r2, #32
 8001f90:	1b12      	subs	r2, r2, r4
 8001f92:	000c      	movs	r4, r1
 8001f94:	4094      	lsls	r4, r2
 8001f96:	0007      	movs	r7, r0
 8001f98:	4090      	lsls	r0, r2
 8001f9a:	46a0      	mov	r8, r4
 8001f9c:	4664      	mov	r4, ip
 8001f9e:	1e42      	subs	r2, r0, #1
 8001fa0:	4190      	sbcs	r0, r2
 8001fa2:	4662      	mov	r2, ip
 8001fa4:	40e7      	lsrs	r7, r4
 8001fa6:	4644      	mov	r4, r8
 8001fa8:	40d1      	lsrs	r1, r2
 8001faa:	433c      	orrs	r4, r7
 8001fac:	4304      	orrs	r4, r0
 8001fae:	185b      	adds	r3, r3, r1
 8001fb0:	e6f3      	b.n	8001d9a <__aeabi_dsub+0x30e>
 8001fb2:	4c6f      	ldr	r4, [pc, #444]	; (8002170 <__aeabi_dsub+0x6e4>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x52e>
 8001fb8:	e0d5      	b.n	8002166 <__aeabi_dsub+0x6da>
 8001fba:	4448      	add	r0, r9
 8001fbc:	185b      	adds	r3, r3, r1
 8001fbe:	4548      	cmp	r0, r9
 8001fc0:	4189      	sbcs	r1, r1
 8001fc2:	4249      	negs	r1, r1
 8001fc4:	185b      	adds	r3, r3, r1
 8001fc6:	07dc      	lsls	r4, r3, #31
 8001fc8:	0840      	lsrs	r0, r0, #1
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	4698      	mov	r8, r3
 8001fce:	0016      	movs	r6, r2
 8001fd0:	4304      	orrs	r4, r0
 8001fd2:	e6cc      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d000      	beq.n	8001fda <__aeabi_dsub+0x54e>
 8001fd8:	e082      	b.n	80020e0 <__aeabi_dsub+0x654>
 8001fda:	000a      	movs	r2, r1
 8001fdc:	4302      	orrs	r2, r0
 8001fde:	d140      	bne.n	8002062 <__aeabi_dsub+0x5d6>
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	2500      	movs	r5, #0
 8001fe4:	031b      	lsls	r3, r3, #12
 8001fe6:	e713      	b.n	8001e10 <__aeabi_dsub+0x384>
 8001fe8:	074b      	lsls	r3, r1, #29
 8001fea:	08c2      	lsrs	r2, r0, #3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	465d      	mov	r5, fp
 8001ff0:	08cb      	lsrs	r3, r1, #3
 8001ff2:	e6c5      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 8001ff4:	464a      	mov	r2, r9
 8001ff6:	1a84      	subs	r4, r0, r2
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	4192      	sbcs	r2, r2
 8001ffc:	1acb      	subs	r3, r1, r3
 8001ffe:	4252      	negs	r2, r2
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	4698      	mov	r8, r3
 8002004:	465d      	mov	r5, fp
 8002006:	e59e      	b.n	8001b46 <__aeabi_dsub+0xba>
 8002008:	464a      	mov	r2, r9
 800200a:	0759      	lsls	r1, r3, #29
 800200c:	08d2      	lsrs	r2, r2, #3
 800200e:	430a      	orrs	r2, r1
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	e6f9      	b.n	8001e08 <__aeabi_dsub+0x37c>
 8002014:	464a      	mov	r2, r9
 8002016:	1a14      	subs	r4, r2, r0
 8002018:	45a1      	cmp	r9, r4
 800201a:	4192      	sbcs	r2, r2
 800201c:	1a5b      	subs	r3, r3, r1
 800201e:	4252      	negs	r2, r2
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	4698      	mov	r8, r3
 8002024:	2601      	movs	r6, #1
 8002026:	e586      	b.n	8001b36 <__aeabi_dsub+0xaa>
 8002028:	464a      	mov	r2, r9
 800202a:	0759      	lsls	r1, r3, #29
 800202c:	08d2      	lsrs	r2, r2, #3
 800202e:	430a      	orrs	r2, r1
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	e6a5      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 8002034:	464c      	mov	r4, r9
 8002036:	4323      	orrs	r3, r4
 8002038:	001c      	movs	r4, r3
 800203a:	1e63      	subs	r3, r4, #1
 800203c:	419c      	sbcs	r4, r3
 800203e:	e65b      	b.n	8001cf8 <__aeabi_dsub+0x26c>
 8002040:	4665      	mov	r5, ip
 8002042:	001e      	movs	r6, r3
 8002044:	3d20      	subs	r5, #32
 8002046:	40ee      	lsrs	r6, r5
 8002048:	2c20      	cmp	r4, #32
 800204a:	d005      	beq.n	8002058 <__aeabi_dsub+0x5cc>
 800204c:	2540      	movs	r5, #64	; 0x40
 800204e:	1b2d      	subs	r5, r5, r4
 8002050:	40ab      	lsls	r3, r5
 8002052:	464c      	mov	r4, r9
 8002054:	431c      	orrs	r4, r3
 8002056:	46a2      	mov	sl, r4
 8002058:	4654      	mov	r4, sl
 800205a:	1e63      	subs	r3, r4, #1
 800205c:	419c      	sbcs	r4, r3
 800205e:	4334      	orrs	r4, r6
 8002060:	e77d      	b.n	8001f5e <__aeabi_dsub+0x4d2>
 8002062:	074b      	lsls	r3, r1, #29
 8002064:	08c2      	lsrs	r2, r0, #3
 8002066:	431a      	orrs	r2, r3
 8002068:	465d      	mov	r5, fp
 800206a:	08cb      	lsrs	r3, r1, #3
 800206c:	e6cc      	b.n	8001e08 <__aeabi_dsub+0x37c>
 800206e:	000a      	movs	r2, r1
 8002070:	4302      	orrs	r2, r0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x5ea>
 8002074:	e736      	b.n	8001ee4 <__aeabi_dsub+0x458>
 8002076:	074b      	lsls	r3, r1, #29
 8002078:	08c2      	lsrs	r2, r0, #3
 800207a:	431a      	orrs	r2, r3
 800207c:	465d      	mov	r5, fp
 800207e:	08cb      	lsrs	r3, r1, #3
 8002080:	e681      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8002082:	464a      	mov	r2, r9
 8002084:	1a84      	subs	r4, r0, r2
 8002086:	42a0      	cmp	r0, r4
 8002088:	4192      	sbcs	r2, r2
 800208a:	1acb      	subs	r3, r1, r3
 800208c:	4252      	negs	r2, r2
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	4698      	mov	r8, r3
 8002092:	465d      	mov	r5, fp
 8002094:	2601      	movs	r6, #1
 8002096:	e54e      	b.n	8001b36 <__aeabi_dsub+0xaa>
 8002098:	074b      	lsls	r3, r1, #29
 800209a:	08c2      	lsrs	r2, r0, #3
 800209c:	431a      	orrs	r2, r3
 800209e:	08cb      	lsrs	r3, r1, #3
 80020a0:	e6b2      	b.n	8001e08 <__aeabi_dsub+0x37c>
 80020a2:	464a      	mov	r2, r9
 80020a4:	1a14      	subs	r4, r2, r0
 80020a6:	45a1      	cmp	r9, r4
 80020a8:	4192      	sbcs	r2, r2
 80020aa:	1a5f      	subs	r7, r3, r1
 80020ac:	4252      	negs	r2, r2
 80020ae:	1aba      	subs	r2, r7, r2
 80020b0:	4690      	mov	r8, r2
 80020b2:	0212      	lsls	r2, r2, #8
 80020b4:	d56b      	bpl.n	800218e <__aeabi_dsub+0x702>
 80020b6:	464a      	mov	r2, r9
 80020b8:	1a84      	subs	r4, r0, r2
 80020ba:	42a0      	cmp	r0, r4
 80020bc:	4192      	sbcs	r2, r2
 80020be:	1acb      	subs	r3, r1, r3
 80020c0:	4252      	negs	r2, r2
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	4698      	mov	r8, r3
 80020c6:	465d      	mov	r5, fp
 80020c8:	e564      	b.n	8001b94 <__aeabi_dsub+0x108>
 80020ca:	074b      	lsls	r3, r1, #29
 80020cc:	08c2      	lsrs	r2, r0, #3
 80020ce:	431a      	orrs	r2, r3
 80020d0:	465d      	mov	r5, fp
 80020d2:	08cb      	lsrs	r3, r1, #3
 80020d4:	e698      	b.n	8001e08 <__aeabi_dsub+0x37c>
 80020d6:	074b      	lsls	r3, r1, #29
 80020d8:	08c2      	lsrs	r2, r0, #3
 80020da:	431a      	orrs	r2, r3
 80020dc:	08cb      	lsrs	r3, r1, #3
 80020de:	e64f      	b.n	8001d80 <__aeabi_dsub+0x2f4>
 80020e0:	000a      	movs	r2, r1
 80020e2:	4302      	orrs	r2, r0
 80020e4:	d090      	beq.n	8002008 <__aeabi_dsub+0x57c>
 80020e6:	464a      	mov	r2, r9
 80020e8:	075c      	lsls	r4, r3, #29
 80020ea:	08d2      	lsrs	r2, r2, #3
 80020ec:	4314      	orrs	r4, r2
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	0312      	lsls	r2, r2, #12
 80020f4:	4213      	tst	r3, r2
 80020f6:	d008      	beq.n	800210a <__aeabi_dsub+0x67e>
 80020f8:	08ce      	lsrs	r6, r1, #3
 80020fa:	4216      	tst	r6, r2
 80020fc:	d105      	bne.n	800210a <__aeabi_dsub+0x67e>
 80020fe:	08c0      	lsrs	r0, r0, #3
 8002100:	0749      	lsls	r1, r1, #29
 8002102:	4308      	orrs	r0, r1
 8002104:	0004      	movs	r4, r0
 8002106:	465d      	mov	r5, fp
 8002108:	0033      	movs	r3, r6
 800210a:	0f61      	lsrs	r1, r4, #29
 800210c:	00e2      	lsls	r2, r4, #3
 800210e:	0749      	lsls	r1, r1, #29
 8002110:	08d2      	lsrs	r2, r2, #3
 8002112:	430a      	orrs	r2, r1
 8002114:	e678      	b.n	8001e08 <__aeabi_dsub+0x37c>
 8002116:	074b      	lsls	r3, r1, #29
 8002118:	08c2      	lsrs	r2, r0, #3
 800211a:	431a      	orrs	r2, r3
 800211c:	08cb      	lsrs	r3, r1, #3
 800211e:	e632      	b.n	8001d86 <__aeabi_dsub+0x2fa>
 8002120:	4448      	add	r0, r9
 8002122:	185b      	adds	r3, r3, r1
 8002124:	4548      	cmp	r0, r9
 8002126:	4192      	sbcs	r2, r2
 8002128:	4698      	mov	r8, r3
 800212a:	4252      	negs	r2, r2
 800212c:	4490      	add	r8, r2
 800212e:	4643      	mov	r3, r8
 8002130:	0004      	movs	r4, r0
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	d400      	bmi.n	8002138 <__aeabi_dsub+0x6ac>
 8002136:	e61a      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8002138:	4642      	mov	r2, r8
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <__aeabi_dsub+0x6e8>)
 800213c:	2601      	movs	r6, #1
 800213e:	401a      	ands	r2, r3
 8002140:	4690      	mov	r8, r2
 8002142:	e614      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8002144:	4666      	mov	r6, ip
 8002146:	001f      	movs	r7, r3
 8002148:	3e20      	subs	r6, #32
 800214a:	40f7      	lsrs	r7, r6
 800214c:	2c20      	cmp	r4, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x6d0>
 8002150:	2640      	movs	r6, #64	; 0x40
 8002152:	1b36      	subs	r6, r6, r4
 8002154:	40b3      	lsls	r3, r6
 8002156:	464c      	mov	r4, r9
 8002158:	431c      	orrs	r4, r3
 800215a:	46a2      	mov	sl, r4
 800215c:	4654      	mov	r4, sl
 800215e:	1e63      	subs	r3, r4, #1
 8002160:	419c      	sbcs	r4, r3
 8002162:	433c      	orrs	r4, r7
 8002164:	e5c8      	b.n	8001cf8 <__aeabi_dsub+0x26c>
 8002166:	0011      	movs	r1, r2
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	e532      	b.n	8001bd4 <__aeabi_dsub+0x148>
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	000007ff 	.word	0x000007ff
 8002174:	ff7fffff 	.word	0xff7fffff
 8002178:	000007fe 	.word	0x000007fe
 800217c:	464a      	mov	r2, r9
 800217e:	1814      	adds	r4, r2, r0
 8002180:	4284      	cmp	r4, r0
 8002182:	4192      	sbcs	r2, r2
 8002184:	185b      	adds	r3, r3, r1
 8002186:	4698      	mov	r8, r3
 8002188:	4252      	negs	r2, r2
 800218a:	4490      	add	r8, r2
 800218c:	e5e9      	b.n	8001d62 <__aeabi_dsub+0x2d6>
 800218e:	4642      	mov	r2, r8
 8002190:	4322      	orrs	r2, r4
 8002192:	d100      	bne.n	8002196 <__aeabi_dsub+0x70a>
 8002194:	e6a6      	b.n	8001ee4 <__aeabi_dsub+0x458>
 8002196:	e5ea      	b.n	8001d6e <__aeabi_dsub+0x2e2>
 8002198:	074b      	lsls	r3, r1, #29
 800219a:	08c2      	lsrs	r2, r0, #3
 800219c:	431a      	orrs	r2, r3
 800219e:	08cb      	lsrs	r3, r1, #3
 80021a0:	e632      	b.n	8001e08 <__aeabi_dsub+0x37c>
 80021a2:	2200      	movs	r2, #0
 80021a4:	4901      	ldr	r1, [pc, #4]	; (80021ac <__aeabi_dsub+0x720>)
 80021a6:	0013      	movs	r3, r2
 80021a8:	e514      	b.n	8001bd4 <__aeabi_dsub+0x148>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__aeabi_d2iz>:
 80021b0:	000a      	movs	r2, r1
 80021b2:	b530      	push	{r4, r5, lr}
 80021b4:	4c13      	ldr	r4, [pc, #76]	; (8002204 <__aeabi_d2iz+0x54>)
 80021b6:	0053      	lsls	r3, r2, #1
 80021b8:	0309      	lsls	r1, r1, #12
 80021ba:	0005      	movs	r5, r0
 80021bc:	0b09      	lsrs	r1, r1, #12
 80021be:	2000      	movs	r0, #0
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	0fd2      	lsrs	r2, r2, #31
 80021c4:	42a3      	cmp	r3, r4
 80021c6:	dd04      	ble.n	80021d2 <__aeabi_d2iz+0x22>
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <__aeabi_d2iz+0x58>)
 80021ca:	4283      	cmp	r3, r0
 80021cc:	dd02      	ble.n	80021d4 <__aeabi_d2iz+0x24>
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <__aeabi_d2iz+0x5c>)
 80021d0:	18d0      	adds	r0, r2, r3
 80021d2:	bd30      	pop	{r4, r5, pc}
 80021d4:	2080      	movs	r0, #128	; 0x80
 80021d6:	0340      	lsls	r0, r0, #13
 80021d8:	4301      	orrs	r1, r0
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <__aeabi_d2iz+0x60>)
 80021dc:	1ac0      	subs	r0, r0, r3
 80021de:	281f      	cmp	r0, #31
 80021e0:	dd08      	ble.n	80021f4 <__aeabi_d2iz+0x44>
 80021e2:	480c      	ldr	r0, [pc, #48]	; (8002214 <__aeabi_d2iz+0x64>)
 80021e4:	1ac3      	subs	r3, r0, r3
 80021e6:	40d9      	lsrs	r1, r3
 80021e8:	000b      	movs	r3, r1
 80021ea:	4258      	negs	r0, r3
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d1f0      	bne.n	80021d2 <__aeabi_d2iz+0x22>
 80021f0:	0018      	movs	r0, r3
 80021f2:	e7ee      	b.n	80021d2 <__aeabi_d2iz+0x22>
 80021f4:	4c08      	ldr	r4, [pc, #32]	; (8002218 <__aeabi_d2iz+0x68>)
 80021f6:	40c5      	lsrs	r5, r0
 80021f8:	46a4      	mov	ip, r4
 80021fa:	4463      	add	r3, ip
 80021fc:	4099      	lsls	r1, r3
 80021fe:	000b      	movs	r3, r1
 8002200:	432b      	orrs	r3, r5
 8002202:	e7f2      	b.n	80021ea <__aeabi_d2iz+0x3a>
 8002204:	000003fe 	.word	0x000003fe
 8002208:	0000041d 	.word	0x0000041d
 800220c:	7fffffff 	.word	0x7fffffff
 8002210:	00000433 	.word	0x00000433
 8002214:	00000413 	.word	0x00000413
 8002218:	fffffbed 	.word	0xfffffbed

0800221c <__aeabi_i2d>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	2800      	cmp	r0, #0
 8002220:	d016      	beq.n	8002250 <__aeabi_i2d+0x34>
 8002222:	17c3      	asrs	r3, r0, #31
 8002224:	18c5      	adds	r5, r0, r3
 8002226:	405d      	eors	r5, r3
 8002228:	0fc4      	lsrs	r4, r0, #31
 800222a:	0028      	movs	r0, r5
 800222c:	f000 f84c 	bl	80022c8 <__clzsi2>
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <__aeabi_i2d+0x5c>)
 8002232:	1a12      	subs	r2, r2, r0
 8002234:	280a      	cmp	r0, #10
 8002236:	dc16      	bgt.n	8002266 <__aeabi_i2d+0x4a>
 8002238:	0003      	movs	r3, r0
 800223a:	002e      	movs	r6, r5
 800223c:	3315      	adds	r3, #21
 800223e:	409e      	lsls	r6, r3
 8002240:	230b      	movs	r3, #11
 8002242:	1a18      	subs	r0, r3, r0
 8002244:	40c5      	lsrs	r5, r0
 8002246:	0553      	lsls	r3, r2, #21
 8002248:	032d      	lsls	r5, r5, #12
 800224a:	0b2d      	lsrs	r5, r5, #12
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	e003      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002250:	2400      	movs	r4, #0
 8002252:	2300      	movs	r3, #0
 8002254:	2500      	movs	r5, #0
 8002256:	2600      	movs	r6, #0
 8002258:	051b      	lsls	r3, r3, #20
 800225a:	432b      	orrs	r3, r5
 800225c:	07e4      	lsls	r4, r4, #31
 800225e:	4323      	orrs	r3, r4
 8002260:	0030      	movs	r0, r6
 8002262:	0019      	movs	r1, r3
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	380b      	subs	r0, #11
 8002268:	4085      	lsls	r5, r0
 800226a:	0553      	lsls	r3, r2, #21
 800226c:	032d      	lsls	r5, r5, #12
 800226e:	2600      	movs	r6, #0
 8002270:	0b2d      	lsrs	r5, r5, #12
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	e7f0      	b.n	8002258 <__aeabi_i2d+0x3c>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	0000041e 	.word	0x0000041e

0800227c <__aeabi_ui2d>:
 800227c:	b510      	push	{r4, lr}
 800227e:	1e04      	subs	r4, r0, #0
 8002280:	d010      	beq.n	80022a4 <__aeabi_ui2d+0x28>
 8002282:	f000 f821 	bl	80022c8 <__clzsi2>
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <__aeabi_ui2d+0x48>)
 8002288:	1a1b      	subs	r3, r3, r0
 800228a:	280a      	cmp	r0, #10
 800228c:	dc11      	bgt.n	80022b2 <__aeabi_ui2d+0x36>
 800228e:	220b      	movs	r2, #11
 8002290:	0021      	movs	r1, r4
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	40d1      	lsrs	r1, r2
 8002296:	3015      	adds	r0, #21
 8002298:	030a      	lsls	r2, r1, #12
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	4084      	lsls	r4, r0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e001      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2200      	movs	r2, #0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	4313      	orrs	r3, r2
 80022ac:	0020      	movs	r0, r4
 80022ae:	0019      	movs	r1, r3
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	0022      	movs	r2, r4
 80022b4:	380b      	subs	r0, #11
 80022b6:	4082      	lsls	r2, r0
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	0312      	lsls	r2, r2, #12
 80022bc:	2400      	movs	r4, #0
 80022be:	0b12      	lsrs	r2, r2, #12
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	e7f1      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022c4:	0000041e 	.word	0x0000041e

080022c8 <__clzsi2>:
 80022c8:	211c      	movs	r1, #28
 80022ca:	2301      	movs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d301      	bcc.n	80022d6 <__clzsi2+0xe>
 80022d2:	0c00      	lsrs	r0, r0, #16
 80022d4:	3910      	subs	r1, #16
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	4298      	cmp	r0, r3
 80022da:	d301      	bcc.n	80022e0 <__clzsi2+0x18>
 80022dc:	0a00      	lsrs	r0, r0, #8
 80022de:	3908      	subs	r1, #8
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	4298      	cmp	r0, r3
 80022e4:	d301      	bcc.n	80022ea <__clzsi2+0x22>
 80022e6:	0900      	lsrs	r0, r0, #4
 80022e8:	3904      	subs	r1, #4
 80022ea:	a202      	add	r2, pc, #8	; (adr r2, 80022f4 <__clzsi2+0x2c>)
 80022ec:	5c10      	ldrb	r0, [r2, r0]
 80022ee:	1840      	adds	r0, r0, r1
 80022f0:	4770      	bx	lr
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	02020304 	.word	0x02020304
 80022f8:	01010101 	.word	0x01010101
	...

08002304 <__clzdi2>:
 8002304:	b510      	push	{r4, lr}
 8002306:	2900      	cmp	r1, #0
 8002308:	d103      	bne.n	8002312 <__clzdi2+0xe>
 800230a:	f7ff ffdd 	bl	80022c8 <__clzsi2>
 800230e:	3020      	adds	r0, #32
 8002310:	e002      	b.n	8002318 <__clzdi2+0x14>
 8002312:	1c08      	adds	r0, r1, #0
 8002314:	f7ff ffd8 	bl	80022c8 <__clzsi2>
 8002318:	bd10      	pop	{r4, pc}
 800231a:	46c0      	nop			; (mov r8, r8)

0800231c <scan_i2c2>:
/**
  * @brief I2C Bus Scan
  * @param None
  * @retval None
  */
void scan_i2c2(){
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result;
	uint8_t i =0;
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]

	printf("--------------------\r\n");
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <scan_i2c2+0x8c>)
 800232a:	0018      	movs	r0, r3
 800232c:	f001 fe4a 	bl	8003fc4 <printf_>
	printf("Scanning IEB I2C2...\r\n");
 8002330:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <scan_i2c2+0x90>)
 8002332:	0018      	movs	r0, r3
 8002334:	f001 fe46 	bl	8003fc4 <printf_>

	for (i=0; i<128; i++){
 8002338:	1dfb      	adds	r3, r7, #7
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e020      	b.n	8002382 <scan_i2c2+0x66>
		result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	18db      	adds	r3, r3, r3
 8002348:	b299      	uxth	r1, r3
 800234a:	1dbc      	adds	r4, r7, #6
 800234c:	4818      	ldr	r0, [pc, #96]	; (80023b0 <scan_i2c2+0x94>)
 800234e:	2302      	movs	r3, #2
 8002350:	2202      	movs	r2, #2
 8002352:	f002 fc17 	bl	8004b84 <HAL_I2C_IsDeviceReady>
 8002356:	0003      	movs	r3, r0
 8002358:	7023      	strb	r3, [r4, #0]

		if (result == HAL_OK){
 800235a:	1dbb      	adds	r3, r7, #6
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <scan_i2c2+0x5c>
			printf("I2C address found: 0x%X\r\n", (uint16_t)(i<<1));
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	18db      	adds	r3, r3, r3
 800236a:	b29b      	uxth	r3, r3
 800236c:	001a      	movs	r2, r3
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <scan_i2c2+0x98>)
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f001 fe26 	bl	8003fc4 <printf_>
	for (i=0; i<128; i++){
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	3201      	adds	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b25b      	sxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	dad9      	bge.n	8002340 <scan_i2c2+0x24>
		}
	}
	printf("I2C Scan Complete\r\n--------------------\r\n");
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <scan_i2c2+0x9c>)
 800238e:	0018      	movs	r0, r3
 8002390:	f001 fe18 	bl	8003fc4 <printf_>
	HAL_Delay(1000);
 8002394:	23fa      	movs	r3, #250	; 0xfa
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	0018      	movs	r0, r3
 800239a:	f001 ff9b 	bl	80042d4 <HAL_Delay>
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b003      	add	sp, #12
 80023a4:	bd90      	pop	{r4, r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	08006bf0 	.word	0x08006bf0
 80023ac:	08006c08 	.word	0x08006c08
 80023b0:	2000002c 	.word	0x2000002c
 80023b4:	08006c20 	.word	0x08006c20
 80023b8:	08006c3c 	.word	0x08006c3c

080023bc <hi2c2_read_register>:

uint8_t hi2c2_read_register(uint8_t addr, uint16_t register_pointer)
{
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	0002      	movs	r2, r0
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	1c0a      	adds	r2, r1, #0
 80023cc:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80023ce:	200f      	movs	r0, #15
 80023d0:	183b      	adds	r3, r7, r0
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
    uint16_t return_value = 0;
 80023d6:	260c      	movs	r6, #12
 80023d8:	19bb      	adds	r3, r7, r6
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]

    status = HAL_I2C_Mem_Read(&hi2c2, addr, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 2, 100);
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b299      	uxth	r1, r3
 80023e4:	0005      	movs	r5, r0
 80023e6:	183c      	adds	r4, r7, r0
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	4813      	ldr	r0, [pc, #76]	; (800243c <hi2c2_read_register+0x80>)
 80023ee:	2364      	movs	r3, #100	; 0x64
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	2302      	movs	r3, #2
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	19bb      	adds	r3, r7, r6
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	f002 fa8e 	bl	800491c <HAL_I2C_Mem_Read>
 8002400:	0003      	movs	r3, r0
 8002402:	7023      	strb	r3, [r4, #0]

    /* Check the communication status */
    if(status != HAL_OK)
 8002404:	197b      	adds	r3, r7, r5
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <hi2c2_read_register+0x60>
    {
        // Error handling, for example re-initialization of the I2C peripheral
    	printf("I2C read from 0x%x failed...\r\n", register_pointer );
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <hi2c2_read_register+0x84>)
 8002412:	0011      	movs	r1, r2
 8002414:	0018      	movs	r0, r3
 8002416:	f001 fdd5 	bl	8003fc4 <printf_>
 800241a:	e006      	b.n	800242a <hi2c2_read_register+0x6e>
    }
    else{
    	printf("I2C read from 0x%x was successful!\r\n", register_pointer );
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	881a      	ldrh	r2, [r3, #0]
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <hi2c2_read_register+0x88>)
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f001 fdcd 	bl	8003fc4 <printf_>
    }
    return return_value;
 800242a:	230c      	movs	r3, #12
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b005      	add	sp, #20
 8002438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	2000002c 	.word	0x2000002c
 8002440:	08006c68 	.word	0x08006c68
 8002444:	08006c88 	.word	0x08006c88

08002448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800244e:	f001 fed1 	bl	80041f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002452:	f000 f8a3 	bl	800259c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002456:	f000 f981 	bl	800275c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800245a:	f000 f94f 	bl	80026fc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800245e:	f000 f90d 	bl	800267c <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rtn;
  scan_i2c2();
 8002462:	f7ff ff5b 	bl	800231c <scan_i2c2>
//  printf("Reading 0x3801 from 0x7D; expecting 0xa8\r\n");
//  rtn = hi2c2_read_register(0x7D, 0X3801);
//  printf("Read 0x%X from 0x3801\r\n", rtn);


  printf("Reading 0x3004 from 0x79; expecting 0xDF\r\n");
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <main+0x114>)
 8002468:	0018      	movs	r0, r3
 800246a:	f001 fdab 	bl	8003fc4 <printf_>
  rtn = hi2c2_read_register(0x79, 0X3004);
 800246e:	1dfc      	adds	r4, r7, #7
 8002470:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <main+0x118>)
 8002472:	0019      	movs	r1, r3
 8002474:	2079      	movs	r0, #121	; 0x79
 8002476:	f7ff ffa1 	bl	80023bc <hi2c2_read_register>
 800247a:	0003      	movs	r3, r0
 800247c:	7023      	strb	r3, [r4, #0]
  printf("Read 0x%X from 0x3004 at 0x79\r\n", rtn);
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <main+0x11c>)
 8002484:	0011      	movs	r1, r2
 8002486:	0018      	movs	r0, r3
 8002488:	f001 fd9c 	bl	8003fc4 <printf_>
  printf("Reading 0x3004 from 0x7D; expecting 0xDF\r\n");
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <main+0x120>)
 800248e:	0018      	movs	r0, r3
 8002490:	f001 fd98 	bl	8003fc4 <printf_>
  rtn = hi2c2_read_register(0x7D, 0X3004);
 8002494:	1dfc      	adds	r4, r7, #7
 8002496:	4b32      	ldr	r3, [pc, #200]	; (8002560 <main+0x118>)
 8002498:	0019      	movs	r1, r3
 800249a:	207d      	movs	r0, #125	; 0x7d
 800249c:	f7ff ff8e 	bl	80023bc <hi2c2_read_register>
 80024a0:	0003      	movs	r3, r0
 80024a2:	7023      	strb	r3, [r4, #0]
  printf("Read 0x%X from 0x3004\r\n", rtn);
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <main+0x124>)
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 fd89 	bl	8003fc4 <printf_>


  printf("Reading 0x300B from 0x79; expecting 0x42\r\n");
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <main+0x128>)
 80024b4:	0018      	movs	r0, r3
 80024b6:	f001 fd85 	bl	8003fc4 <printf_>
  rtn = hi2c2_read_register(0x79, 0X300B);
 80024ba:	1dfc      	adds	r4, r7, #7
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <main+0x12c>)
 80024be:	0019      	movs	r1, r3
 80024c0:	2079      	movs	r0, #121	; 0x79
 80024c2:	f7ff ff7b 	bl	80023bc <hi2c2_read_register>
 80024c6:	0003      	movs	r3, r0
 80024c8:	7023      	strb	r3, [r4, #0]
  printf("Read 0x%X from 0x3005 at 0x79\r\n", rtn);
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <main+0x130>)
 80024d0:	0011      	movs	r1, r2
 80024d2:	0018      	movs	r0, r3
 80024d4:	f001 fd76 	bl	8003fc4 <printf_>
  printf("Reading 0x300B from 0x7D; expecting 0x42\r\n");
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <main+0x134>)
 80024da:	0018      	movs	r0, r3
 80024dc:	f001 fd72 	bl	8003fc4 <printf_>
  rtn = hi2c2_read_register(0x7D, 0X300B);
 80024e0:	1dfc      	adds	r4, r7, #7
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <main+0x12c>)
 80024e4:	0019      	movs	r1, r3
 80024e6:	207d      	movs	r0, #125	; 0x7d
 80024e8:	f7ff ff68 	bl	80023bc <hi2c2_read_register>
 80024ec:	0003      	movs	r3, r0
 80024ee:	7023      	strb	r3, [r4, #0]
  printf("Read 0x%X from 0x300B\r\n", rtn);
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <main+0x138>)
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f001 fd63 	bl	8003fc4 <printf_>


  printf("Reading 0x300A from 0x79; expecting 0x56\r\n");
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <main+0x13c>)
 8002500:	0018      	movs	r0, r3
 8002502:	f001 fd5f 	bl	8003fc4 <printf_>
  rtn = hi2c2_read_register(0x79, 0X300A);
 8002506:	1dfc      	adds	r4, r7, #7
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <main+0x140>)
 800250a:	0019      	movs	r1, r3
 800250c:	2079      	movs	r0, #121	; 0x79
 800250e:	f7ff ff55 	bl	80023bc <hi2c2_read_register>
 8002512:	0003      	movs	r3, r0
 8002514:	7023      	strb	r3, [r4, #0]
  printf("Read 0x%X from 0x300A at 0x79\r\n", rtn);
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <main+0x144>)
 800251c:	0011      	movs	r1, r2
 800251e:	0018      	movs	r0, r3
 8002520:	f001 fd50 	bl	8003fc4 <printf_>
  printf("Reading 0x300A from 0x7D; expecting 0x56\r\n");
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <main+0x148>)
 8002526:	0018      	movs	r0, r3
 8002528:	f001 fd4c 	bl	8003fc4 <printf_>
  rtn = hi2c2_read_register(0x7D, 0X300A);
 800252c:	1dfc      	adds	r4, r7, #7
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <main+0x140>)
 8002530:	0019      	movs	r1, r3
 8002532:	207d      	movs	r0, #125	; 0x7d
 8002534:	f7ff ff42 	bl	80023bc <hi2c2_read_register>
 8002538:	0003      	movs	r3, r0
 800253a:	7023      	strb	r3, [r4, #0]
  printf("Read 0x%X from 0x300A\r\n", rtn);
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <main+0x14c>)
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f001 fd3d 	bl	8003fc4 <printf_>
  while (1)
  {
	  HAL_GPIO_TogglePin(TEST_OUT1_GPIO_Port, TEST_OUT1_Pin);
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <main+0x150>)
 800254c:	2101      	movs	r1, #1
 800254e:	0018      	movs	r0, r3
 8002550:	f002 f933 	bl	80047ba <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002554:	2064      	movs	r0, #100	; 0x64
 8002556:	f001 febd 	bl	80042d4 <HAL_Delay>
	  HAL_GPIO_TogglePin(TEST_OUT1_GPIO_Port, TEST_OUT1_Pin);
 800255a:	e7f6      	b.n	800254a <main+0x102>
 800255c:	08006cec 	.word	0x08006cec
 8002560:	00003004 	.word	0x00003004
 8002564:	08006d18 	.word	0x08006d18
 8002568:	08006d38 	.word	0x08006d38
 800256c:	08006d64 	.word	0x08006d64
 8002570:	08006d7c 	.word	0x08006d7c
 8002574:	0000300b 	.word	0x0000300b
 8002578:	08006da8 	.word	0x08006da8
 800257c:	08006dc8 	.word	0x08006dc8
 8002580:	08006df4 	.word	0x08006df4
 8002584:	08006e0c 	.word	0x08006e0c
 8002588:	0000300a 	.word	0x0000300a
 800258c:	08006e38 	.word	0x08006e38
 8002590:	08006e58 	.word	0x08006e58
 8002594:	08006e84 	.word	0x08006e84
 8002598:	50000400 	.word	0x50000400

0800259c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b09b      	sub	sp, #108	; 0x6c
 80025a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a2:	2434      	movs	r4, #52	; 0x34
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	0018      	movs	r0, r3
 80025a8:	2334      	movs	r3, #52	; 0x34
 80025aa:	001a      	movs	r2, r3
 80025ac:	2100      	movs	r1, #0
 80025ae:	f004 fb0b 	bl	8006bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b2:	2320      	movs	r3, #32
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	0018      	movs	r0, r3
 80025b8:	2314      	movs	r3, #20
 80025ba:	001a      	movs	r2, r3
 80025bc:	2100      	movs	r1, #0
 80025be:	f004 fb03 	bl	8006bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c2:	003b      	movs	r3, r7
 80025c4:	0018      	movs	r0, r3
 80025c6:	2320      	movs	r3, #32
 80025c8:	001a      	movs	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	f004 fafc 	bl	8006bc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <SystemClock_Config+0xd8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a28      	ldr	r2, [pc, #160]	; (8002678 <SystemClock_Config+0xdc>)
 80025d6:	401a      	ands	r2, r3
 80025d8:	4b26      	ldr	r3, [pc, #152]	; (8002674 <SystemClock_Config+0xd8>)
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0109      	lsls	r1, r1, #4
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025e2:	0021      	movs	r1, r4
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	22a0      	movs	r2, #160	; 0xa0
 80025ee:	02d2      	lsls	r2, r2, #11
 80025f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2202      	movs	r2, #2
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	0252      	lsls	r2, r2, #9
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2200      	movs	r2, #0
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	0412      	lsls	r2, r2, #16
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800260e:	187b      	adds	r3, r7, r1
 8002610:	0018      	movs	r0, r3
 8002612:	f002 fe57 	bl	80052c4 <HAL_RCC_OscConfig>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d001      	beq.n	800261e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800261a:	f000 f8ef 	bl	80027fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800261e:	2120      	movs	r1, #32
 8002620:	187b      	adds	r3, r7, r1
 8002622:	220f      	movs	r2, #15
 8002624:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002626:	187b      	adds	r3, r7, r1
 8002628:	2203      	movs	r2, #3
 800262a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800262c:	187b      	adds	r3, r7, r1
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002638:	187b      	adds	r3, r7, r1
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800263e:	187b      	adds	r3, r7, r1
 8002640:	2100      	movs	r1, #0
 8002642:	0018      	movs	r0, r3
 8002644:	f003 f9ba 	bl	80059bc <HAL_RCC_ClockConfig>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d001      	beq.n	8002650 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800264c:	f000 f8d6 	bl	80027fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002650:	003b      	movs	r3, r7
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002656:	003b      	movs	r3, r7
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800265c:	003b      	movs	r3, r7
 800265e:	0018      	movs	r0, r3
 8002660:	f003 fbce 	bl	8005e00 <HAL_RCCEx_PeriphCLKConfig>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d001      	beq.n	800266c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002668:	f000 f8c8 	bl	80027fc <Error_Handler>
  }
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b01b      	add	sp, #108	; 0x6c
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	40007000 	.word	0x40007000
 8002678:	ffffe7ff 	.word	0xffffe7ff

0800267c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <MX_I2C2_Init+0x74>)
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <MX_I2C2_Init+0x78>)
 8002684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_I2C2_Init+0x74>)
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <MX_I2C2_Init+0x7c>)
 800268a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_I2C2_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <MX_I2C2_Init+0x74>)
 8002694:	2201      	movs	r2, #1
 8002696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <MX_I2C2_Init+0x74>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026b8:	0018      	movs	r0, r3
 80026ba:	f002 f899 	bl	80047f0 <HAL_I2C_Init>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026c2:	f000 f89b 	bl	80027fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026c8:	2100      	movs	r1, #0
 80026ca:	0018      	movs	r0, r3
 80026cc:	f002 fd62 	bl	8005194 <HAL_I2CEx_ConfigAnalogFilter>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d001      	beq.n	80026d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80026d4:	f000 f892 	bl	80027fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <MX_I2C2_Init+0x74>)
 80026da:	2100      	movs	r1, #0
 80026dc:	0018      	movs	r0, r3
 80026de:	f002 fda5 	bl	800522c <HAL_I2CEx_ConfigDigitalFilter>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80026e6:	f000 f889 	bl	80027fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	2000002c 	.word	0x2000002c
 80026f4:	40005800 	.word	0x40005800
 80026f8:	00303d5b 	.word	0x00303d5b

080026fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <MX_USART1_UART_Init+0x5c>)
 8002704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002708:	22e1      	movs	r2, #225	; 0xe1
 800270a:	0252      	lsls	r2, r2, #9
 800270c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART1_UART_Init+0x58>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART1_UART_Init+0x58>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART1_UART_Init+0x58>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <MX_USART1_UART_Init+0x58>)
 8002740:	0018      	movs	r0, r3
 8002742:	f003 fca3 	bl	800608c <HAL_UART_Init>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800274a:	f000 f857 	bl	80027fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000078 	.word	0x20000078
 8002758:	40013800 	.word	0x40013800

0800275c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002762:	240c      	movs	r4, #12
 8002764:	193b      	adds	r3, r7, r4
 8002766:	0018      	movs	r0, r3
 8002768:	2314      	movs	r3, #20
 800276a:	001a      	movs	r2, r3
 800276c:	2100      	movs	r1, #0
 800276e:	f004 fa2b 	bl	8006bc8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <MX_GPIO_Init+0x98>)
 8002774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <MX_GPIO_Init+0x98>)
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	430a      	orrs	r2, r1
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_GPIO_Init+0x98>)
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_GPIO_Init+0x98>)
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <MX_GPIO_Init+0x98>)
 8002790:	2102      	movs	r1, #2
 8002792:	430a      	orrs	r2, r1
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <MX_GPIO_Init+0x98>)
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	2202      	movs	r2, #2
 800279c:	4013      	ands	r3, r2
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <MX_GPIO_Init+0x98>)
 80027a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <MX_GPIO_Init+0x98>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	430a      	orrs	r2, r1
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <MX_GPIO_Init+0x98>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	2201      	movs	r2, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|TEST_OUT2_Pin, GPIO_PIN_RESET);
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <MX_GPIO_Init+0x9c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	2103      	movs	r1, #3
 80027c0:	0018      	movs	r0, r3
 80027c2:	f001 ffdd 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_OUT1_Pin TEST_OUT2_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|TEST_OUT2_Pin;
 80027c6:	0021      	movs	r1, r4
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	2203      	movs	r2, #3
 80027cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2201      	movs	r2, #1
 80027d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	2200      	movs	r2, #0
 80027de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <MX_GPIO_Init+0x9c>)
 80027e4:	0019      	movs	r1, r3
 80027e6:	0010      	movs	r0, r2
 80027e8:	f001 fe4c 	bl	8004484 <HAL_GPIO_Init>

}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b009      	add	sp, #36	; 0x24
 80027f2:	bd90      	pop	{r4, r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	50000400 	.word	0x50000400

080027fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002804:	e7fe      	b.n	8002804 <Error_Handler+0x8>
	...

08002808 <__putchar>:

extern UART_HandleTypeDef huart1;

static char outchar;

void __putchar(char character) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	0002      	movs	r2, r0
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	701a      	strb	r2, [r3, #0]
	outchar=character;
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <__putchar+0x28>)
 8002816:	1dfa      	adds	r2, r7, #7
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &outchar, 1, 0xFFFF);
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <__putchar+0x2c>)
 800281e:	4904      	ldr	r1, [pc, #16]	; (8002830 <__putchar+0x28>)
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <__putchar+0x30>)
 8002822:	2201      	movs	r2, #1
 8002824:	f003 fc86 	bl	8006134 <HAL_UART_Transmit>
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000028 	.word	0x20000028
 8002834:	0000ffff 	.word	0x0000ffff
 8002838:	20000078 	.word	0x20000078

0800283c <_out_null>:
        ((char *)buffer)[idx] = character;
    }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	230f      	movs	r3, #15
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	1c02      	adds	r2, r0, #0
 800284e:	701a      	strb	r2, [r3, #0]
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b004      	add	sp, #16
 8002856:	bd80      	pop	{r7, pc}

08002858 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	210f      	movs	r1, #15
 8002866:	187b      	adds	r3, r7, r1
 8002868:	1c02      	adds	r2, r0, #0
 800286a:	701a      	strb	r2, [r3, #0]
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
 800286c:	000a      	movs	r2, r1
 800286e:	18bb      	adds	r3, r7, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <_out_char+0x28>
        __putchar(character);
 8002876:	18bb      	adds	r3, r7, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff ffc4 	bl	8002808 <__putchar>
    }
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}

08002888 <_strnlen_s>:
    }
}

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    const char *s;
    for (s = str; *s && maxsize--; ++s)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e002      	b.n	800289e <_strnlen_s+0x16>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <_strnlen_s+0x28>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	603a      	str	r2, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f3      	bne.n	8002898 <_strnlen_s+0x10>
        ;
    return (unsigned int)(s - str);
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1ad3      	subs	r3, r2, r3
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}

080028be <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	0002      	movs	r2, r0
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b2f      	cmp	r3, #47	; 0x2f
 80028d0:	d905      	bls.n	80028de <_is_digit+0x20>
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b39      	cmp	r3, #57	; 0x39
 80028d8:	d801      	bhi.n	80028de <_is_digit+0x20>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <_is_digit+0x22>
 80028de:	2300      	movs	r3, #0
 80028e0:	1c1a      	adds	r2, r3, #0
 80028e2:	2301      	movs	r3, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b002      	add	sp, #8
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    unsigned int i = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
 80028fc:	e00e      	b.n	800291c <_atoi+0x2c>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	0013      	movs	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	189b      	adds	r3, r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	0018      	movs	r0, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	1c59      	adds	r1, r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6011      	str	r1, [r2, #0]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	18c3      	adds	r3, r0, r3
 8002918:	3b30      	subs	r3, #48	; 0x30
 800291a:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	0018      	movs	r0, r3
 8002924:	f7ff ffcb 	bl	80028be <_is_digit>
 8002928:	1e03      	subs	r3, r0, #0
 800292a:	d1e8      	bne.n	80028fe <_atoi+0xe>
    }
    return i;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}

08002936 <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
 8002936:	b590      	push	{r4, r7, lr}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
    const size_t start_idx = idx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	613b      	str	r3, [r7, #16]

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d124      	bne.n	800299a <_out_rev+0x64>
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	d120      	bne.n	800299a <_out_rev+0x64>
        size_t i;
        for (i = len; i < width; i++) {
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e00a      	b.n	8002974 <_out_rev+0x3e>
            out(' ', buffer, idx++, maxlen);
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	1c53      	adds	r3, r2, #1
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68fc      	ldr	r4, [r7, #12]
 800296a:	2020      	movs	r0, #32
 800296c:	47a0      	blx	r4
        for (i = len; i < width; i++) {
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3301      	adds	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	429a      	cmp	r2, r3
 800297a:	d3f0      	bcc.n	800295e <_out_rev+0x28>
        }
    }

    // reverse string
    while (len) {
 800297c:	e00d      	b.n	800299a <_out_rev+0x64>
        out(buf[--len], buffer, idx++, maxlen);
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	3b01      	subs	r3, #1
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	7818      	ldrb	r0, [r3, #0]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	1c53      	adds	r3, r2, #1
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68fc      	ldr	r4, [r7, #12]
 8002998:	47a0      	blx	r4
    while (len) {
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ee      	bne.n	800297e <_out_rev+0x48>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	2202      	movs	r2, #2
 80029a4:	4013      	ands	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <_out_rev+0x90>
        while (idx - start_idx < width) {
 80029a8:	e007      	b.n	80029ba <_out_rev+0x84>
            out(' ', buffer, idx++, maxlen);
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	1c53      	adds	r3, r2, #1
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68fc      	ldr	r4, [r7, #12]
 80029b6:	2020      	movs	r0, #32
 80029b8:	47a0      	blx	r4
        while (idx - start_idx < width) {
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d8f1      	bhi.n	80029aa <_out_rev+0x74>
        }
    }

    return idx;
 80029c6:	687b      	ldr	r3, [r7, #4]
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b007      	add	sp, #28
 80029ce:	bd90      	pop	{r4, r7, pc}

080029d0 <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af04      	add	r7, sp, #16
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	2202      	movs	r2, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	d134      	bne.n	8002a50 <_ntoa_format+0x80>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d017      	beq.n	8002a1c <_ntoa_format+0x4c>
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d013      	beq.n	8002a1c <_ntoa_format+0x4c>
 80029f4:	2328      	movs	r3, #40	; 0x28
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <_ntoa_format+0x36>
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	220c      	movs	r2, #12
 8002a02:	4013      	ands	r3, r2
 8002a04:	d00a      	beq.n	8002a1c <_ntoa_format+0x4c>
            width--;
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a0c:	e006      	b.n	8002a1c <_ntoa_format+0x4c>
            buf[len++] = '0';
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	627a      	str	r2, [r7, #36]	; 0x24
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	18d3      	adds	r3, r2, r3
 8002a18:	2230      	movs	r2, #48	; 0x30
 8002a1a:	701a      	strb	r2, [r3, #0]
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d20a      	bcs.n	8002a3a <_ntoa_format+0x6a>
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2b1f      	cmp	r3, #31
 8002a28:	d9f1      	bls.n	8002a0e <_ntoa_format+0x3e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a2a:	e006      	b.n	8002a3a <_ntoa_format+0x6a>
            buf[len++] = '0';
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	627a      	str	r2, [r7, #36]	; 0x24
 8002a32:	6a3a      	ldr	r2, [r7, #32]
 8002a34:	18d3      	adds	r3, r2, r3
 8002a36:	2230      	movs	r2, #48	; 0x30
 8002a38:	701a      	strb	r2, [r3, #0]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d006      	beq.n	8002a50 <_ntoa_format+0x80>
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d202      	bcs.n	8002a50 <_ntoa_format+0x80>
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	2b1f      	cmp	r3, #31
 8002a4e:	d9ed      	bls.n	8002a2c <_ntoa_format+0x5c>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	2210      	movs	r2, #16
 8002a54:	4013      	ands	r3, r2
 8002a56:	d056      	beq.n	8002b06 <_ntoa_format+0x136>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d116      	bne.n	8002a90 <_ntoa_format+0xc0>
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <_ntoa_format+0xc0>
 8002a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d003      	beq.n	8002a78 <_ntoa_format+0xa8>
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d10b      	bne.n	8002a90 <_ntoa_format+0xc0>
            len--;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
            if (len && (base == 16U)) {
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <_ntoa_format+0xc0>
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d102      	bne.n	8002a90 <_ntoa_format+0xc0>
                len--;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d10e      	bne.n	8002ab4 <_ntoa_format+0xe4>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d10a      	bne.n	8002ab4 <_ntoa_format+0xe4>
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	2b1f      	cmp	r3, #31
 8002aa2:	d807      	bhi.n	8002ab4 <_ntoa_format+0xe4>
            buf[len++] = 'x';
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	627a      	str	r2, [r7, #36]	; 0x24
 8002aaa:	6a3a      	ldr	r2, [r7, #32]
 8002aac:	18d3      	adds	r3, r2, r3
 8002aae:	2278      	movs	r2, #120	; 0x78
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e01e      	b.n	8002af2 <_ntoa_format+0x122>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d10e      	bne.n	8002ad8 <_ntoa_format+0x108>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	2220      	movs	r2, #32
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d00a      	beq.n	8002ad8 <_ntoa_format+0x108>
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	2b1f      	cmp	r3, #31
 8002ac6:	d807      	bhi.n	8002ad8 <_ntoa_format+0x108>
            buf[len++] = 'X';
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	627a      	str	r2, [r7, #36]	; 0x24
 8002ace:	6a3a      	ldr	r2, [r7, #32]
 8002ad0:	18d3      	adds	r3, r2, r3
 8002ad2:	2258      	movs	r2, #88	; 0x58
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e00c      	b.n	8002af2 <_ntoa_format+0x122>
        } else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d109      	bne.n	8002af2 <_ntoa_format+0x122>
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	2b1f      	cmp	r3, #31
 8002ae2:	d806      	bhi.n	8002af2 <_ntoa_format+0x122>
            buf[len++] = 'b';
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8002aea:	6a3a      	ldr	r2, [r7, #32]
 8002aec:	18d3      	adds	r3, r2, r3
 8002aee:	2262      	movs	r2, #98	; 0x62
 8002af0:	701a      	strb	r2, [r3, #0]
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	2b1f      	cmp	r3, #31
 8002af6:	d806      	bhi.n	8002b06 <_ntoa_format+0x136>
            buf[len++] = '0';
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	627a      	str	r2, [r7, #36]	; 0x24
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	18d3      	adds	r3, r2, r3
 8002b02:	2230      	movs	r2, #48	; 0x30
 8002b04:	701a      	strb	r2, [r3, #0]
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	2b1f      	cmp	r3, #31
 8002b0a:	d823      	bhi.n	8002b54 <_ntoa_format+0x184>
        if (negative) {
 8002b0c:	2328      	movs	r3, #40	; 0x28
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <_ntoa_format+0x156>
            buf[len++] = '-';
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	627a      	str	r2, [r7, #36]	; 0x24
 8002b1c:	6a3a      	ldr	r2, [r7, #32]
 8002b1e:	18d3      	adds	r3, r2, r3
 8002b20:	222d      	movs	r2, #45	; 0x2d
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e016      	b.n	8002b54 <_ntoa_format+0x184>
        } else if (flags & FLAGS_PLUS) {
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2204      	movs	r2, #4
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <_ntoa_format+0x16e>
            buf[len++] = '+'; // ignore the space if the '+' exists
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	627a      	str	r2, [r7, #36]	; 0x24
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	18d3      	adds	r3, r2, r3
 8002b38:	222b      	movs	r2, #43	; 0x2b
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e00a      	b.n	8002b54 <_ntoa_format+0x184>
        } else if (flags & FLAGS_SPACE) {
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2208      	movs	r2, #8
 8002b42:	4013      	ands	r3, r2
 8002b44:	d006      	beq.n	8002b54 <_ntoa_format+0x184>
            buf[len++] = ' ';
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	2220      	movs	r2, #32
 8002b52:	701a      	strb	r2, [r3, #0]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b54:	683c      	ldr	r4, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5e:	9303      	str	r3, [sp, #12]
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	0023      	movs	r3, r4
 8002b6e:	f7ff fee2 	bl	8002936 <_out_rev>
 8002b72:	0003      	movs	r3, r0
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b005      	add	sp, #20
 8002b7a:	bd90      	pop	{r4, r7, pc}

08002b7c <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value,
                         bool negative, unsigned long base, unsigned int prec, unsigned int width,
                         unsigned int flags) {
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b097      	sub	sp, #92	; 0x5c
 8002b80:	af08      	add	r7, sp, #32
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	2210      	movs	r2, #16
 8002b98:	4393      	bics	r3, r2
 8002b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 8002b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d002      	beq.n	8002bac <_ntoa_long+0x30>
 8002ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d033      	beq.n	8002c14 <_ntoa_long+0x98>
        do {
            const char digit = (char)(value % base);
 8002bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fd fb2f 	bl	8000214 <__aeabi_uidivmod>
 8002bb6:	000b      	movs	r3, r1
 8002bb8:	001a      	movs	r2, r3
 8002bba:	2133      	movs	r1, #51	; 0x33
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	18bb      	adds	r3, r7, r2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b09      	cmp	r3, #9
 8002bc8:	d804      	bhi.n	8002bd4 <_ntoa_long+0x58>
 8002bca:	18bb      	adds	r3, r7, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3330      	adds	r3, #48	; 0x30
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	e00d      	b.n	8002bf0 <_ntoa_long+0x74>
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d001      	beq.n	8002be0 <_ntoa_long+0x64>
 8002bdc:	2341      	movs	r3, #65	; 0x41
 8002bde:	e000      	b.n	8002be2 <_ntoa_long+0x66>
 8002be0:	2361      	movs	r3, #97	; 0x61
 8002be2:	2233      	movs	r2, #51	; 0x33
 8002be4:	18ba      	adds	r2, r7, r2
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	189b      	adds	r3, r3, r2
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3b0a      	subs	r3, #10
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	1c59      	adds	r1, r3, #1
 8002bf4:	6379      	str	r1, [r7, #52]	; 0x34
 8002bf6:	2110      	movs	r1, #16
 8002bf8:	1879      	adds	r1, r7, r1
 8002bfa:	54ca      	strb	r2, [r1, r3]
            value /= base;
 8002bfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002bfe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c00:	f7fd fa82 	bl	8000108 <__udivsi3>
 8002c04:	0003      	movs	r3, r0
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <_ntoa_long+0x98>
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	2b1f      	cmp	r3, #31
 8002c12:	d9cb      	bls.n	8002bac <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002c14:	683c      	ldr	r4, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1e:	9306      	str	r3, [sp, #24]
 8002c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c22:	9305      	str	r3, [sp, #20]
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c26:	9304      	str	r3, [sp, #16]
 8002c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2a:	9303      	str	r3, [sp, #12]
 8002c2c:	234c      	movs	r3, #76	; 0x4c
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	2310      	movs	r3, #16
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	0023      	movs	r3, r4
 8002c40:	f7ff fec6 	bl	80029d0 <_ntoa_format>
 8002c44:	0003      	movs	r3, r0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b00f      	add	sp, #60	; 0x3c
 8002c4c:	bd90      	pop	{r4, r7, pc}

08002c4e <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
 8002c4e:	b5b0      	push	{r4, r5, r7, lr}
 8002c50:	b096      	sub	sp, #88	; 0x58
 8002c52:	af08      	add	r7, sp, #32
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
 8002c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c64:	4313      	orrs	r3, r2
 8002c66:	d103      	bne.n	8002c70 <_ntoa_long_long+0x22>
        flags &= ~FLAGS_HASH;
 8002c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 8002c70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4013      	ands	r3, r2
 8002c78:	d003      	beq.n	8002c82 <_ntoa_long_long+0x34>
 8002c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	d03a      	beq.n	8002cf8 <_ntoa_long_long+0xaa>
        do {
            const char digit = (char)(value % base);
 8002c82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8a:	f7fd fbf1 	bl	8000470 <__aeabi_uldivmod>
 8002c8e:	0010      	movs	r0, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	2433      	movs	r4, #51	; 0x33
 8002c94:	193b      	adds	r3, r7, r4
 8002c96:	1c02      	adds	r2, r0, #0
 8002c98:	701a      	strb	r2, [r3, #0]
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002c9a:	0022      	movs	r2, r4
 8002c9c:	18bb      	adds	r3, r7, r2
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	d804      	bhi.n	8002cae <_ntoa_long_long+0x60>
 8002ca4:	18bb      	adds	r3, r7, r2
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	3330      	adds	r3, #48	; 0x30
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	e00d      	b.n	8002cca <_ntoa_long_long+0x7c>
 8002cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d001      	beq.n	8002cba <_ntoa_long_long+0x6c>
 8002cb6:	2341      	movs	r3, #65	; 0x41
 8002cb8:	e000      	b.n	8002cbc <_ntoa_long_long+0x6e>
 8002cba:	2361      	movs	r3, #97	; 0x61
 8002cbc:	2233      	movs	r2, #51	; 0x33
 8002cbe:	18ba      	adds	r2, r7, r2
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3b0a      	subs	r3, #10
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	1c59      	adds	r1, r3, #1
 8002cce:	6379      	str	r1, [r7, #52]	; 0x34
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	1879      	adds	r1, r7, r1
 8002cd4:	54ca      	strb	r2, [r1, r3]
            value /= base;
 8002cd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cda:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002cdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cde:	f7fd fbc7 	bl	8000470 <__aeabi_uldivmod>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	000b      	movs	r3, r1
 8002ce6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	d002      	beq.n	8002cf8 <_ntoa_long_long+0xaa>
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf4:	2b1f      	cmp	r3, #31
 8002cf6:	d9c4      	bls.n	8002c82 <_ntoa_long_long+0x34>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cfa:	683d      	ldr	r5, [r7, #0]
 8002cfc:	687c      	ldr	r4, [r7, #4]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d04:	9206      	str	r2, [sp, #24]
 8002d06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002d08:	9205      	str	r2, [sp, #20]
 8002d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d0c:	9204      	str	r2, [sp, #16]
 8002d0e:	9303      	str	r3, [sp, #12]
 8002d10:	2350      	movs	r3, #80	; 0x50
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	002b      	movs	r3, r5
 8002d24:	0022      	movs	r2, r4
 8002d26:	f7ff fe53 	bl	80029d0 <_ntoa_format>
 8002d2a:	0003      	movs	r3, r0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b00e      	add	sp, #56	; 0x38
 8002d32:	bdb0      	pop	{r4, r5, r7, pc}

08002d34 <_ftoa>:
                    unsigned int width, unsigned int flags);
#endif

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 8002d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d36:	b09d      	sub	sp, #116	; 0x74
 8002d38:	af06      	add	r7, sp, #24
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	657b      	str	r3, [r7, #84]	; 0x54
    double diff = 0.0;
 8002d46:	2200      	movs	r2, #0
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (value != value)
 8002d4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d52:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d54:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002d56:	f7fd fb5d 	bl	8000414 <__aeabi_dcmpeq>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d112      	bne.n	8002d84 <_ftoa+0x50>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002d5e:	683c      	ldr	r4, [r7, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	9303      	str	r3, [sp, #12]
 8002d6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d70:	9302      	str	r3, [sp, #8]
 8002d72:	2303      	movs	r3, #3
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	4bbf      	ldr	r3, [pc, #764]	; (8003074 <_ftoa+0x340>)
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	0023      	movs	r3, r4
 8002d7c:	f7ff fddb 	bl	8002936 <_out_rev>
 8002d80:	0003      	movs	r3, r0
 8002d82:	e211      	b.n	80031a8 <_ftoa+0x474>
    if (value < -DBL_MAX)
 8002d84:	2201      	movs	r2, #1
 8002d86:	4252      	negs	r2, r2
 8002d88:	4bbb      	ldr	r3, [pc, #748]	; (8003078 <_ftoa+0x344>)
 8002d8a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d8c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002d8e:	f7fd fb47 	bl	8000420 <__aeabi_dcmplt>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d012      	beq.n	8002dbc <_ftoa+0x88>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002d96:	683c      	ldr	r4, [r7, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	9303      	str	r3, [sp, #12]
 8002da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	2304      	movs	r3, #4
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	4bb3      	ldr	r3, [pc, #716]	; (800307c <_ftoa+0x348>)
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	0023      	movs	r3, r4
 8002db4:	f7ff fdbf 	bl	8002936 <_out_rev>
 8002db8:	0003      	movs	r3, r0
 8002dba:	e1f5      	b.n	80031a8 <_ftoa+0x474>
    if (value > DBL_MAX)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4252      	negs	r2, r2
 8002dc0:	4baf      	ldr	r3, [pc, #700]	; (8003080 <_ftoa+0x34c>)
 8002dc2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002dc4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002dc6:	f7fd fb3f 	bl	8000448 <__aeabi_dcmpgt>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d024      	beq.n	8002e18 <_ftoa+0xe4>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d001      	beq.n	8002dde <_ftoa+0xaa>
 8002dda:	4baa      	ldr	r3, [pc, #680]	; (8003084 <_ftoa+0x350>)
 8002ddc:	e000      	b.n	8002de0 <_ftoa+0xac>
 8002dde:	4baa      	ldr	r3, [pc, #680]	; (8003088 <_ftoa+0x354>)
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	18ba      	adds	r2, r7, r2
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	2104      	movs	r1, #4
 8002de8:	400a      	ands	r2, r1
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 8002dea:	d001      	beq.n	8002df0 <_ftoa+0xbc>
 8002dec:	2204      	movs	r2, #4
 8002dee:	e000      	b.n	8002df2 <_ftoa+0xbe>
 8002df0:	2203      	movs	r2, #3
 8002df2:	683e      	ldr	r6, [r7, #0]
 8002df4:	687d      	ldr	r5, [r7, #4]
 8002df6:	68bc      	ldr	r4, [r7, #8]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	1879      	adds	r1, r7, r1
 8002dfe:	6809      	ldr	r1, [r1, #0]
 8002e00:	9103      	str	r1, [sp, #12]
 8002e02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e04:	9102      	str	r1, [sp, #8]
 8002e06:	9201      	str	r2, [sp, #4]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	0033      	movs	r3, r6
 8002e0c:	002a      	movs	r2, r5
 8002e0e:	0021      	movs	r1, r4
 8002e10:	f7ff fd91 	bl	8002936 <_out_rev>
 8002e14:	0003      	movs	r3, r0
 8002e16:	e1c7      	b.n	80031a8 <_ftoa+0x474>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters
    // overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4b9c      	ldr	r3, [pc, #624]	; (800308c <_ftoa+0x358>)
 8002e1c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002e1e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002e20:	f7fd fb12 	bl	8000448 <__aeabi_dcmpgt>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d107      	bne.n	8002e38 <_ftoa+0x104>
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4b99      	ldr	r3, [pc, #612]	; (8003090 <_ftoa+0x35c>)
 8002e2c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002e2e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002e30:	f7fd faf6 	bl	8000420 <__aeabi_dcmplt>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d015      	beq.n	8002e64 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e38:	683d      	ldr	r5, [r7, #0]
 8002e3a:	687c      	ldr	r4, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	9304      	str	r3, [sp, #16]
 8002e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e4a:	9303      	str	r3, [sp, #12]
 8002e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	002b      	movs	r3, r5
 8002e5a:	0022      	movs	r2, r4
 8002e5c:	f000 f9a8 	bl	80031b0 <_etoa>
 8002e60:	0003      	movs	r3, r0
 8002e62:	e1a1      	b.n	80031a8 <_ftoa+0x474>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
 8002e64:	2453      	movs	r4, #83	; 0x53
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
    if (value < 0) {
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2300      	movs	r3, #0
 8002e70:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002e72:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002e74:	f7fd fad4 	bl	8000420 <__aeabi_dcmplt>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d00c      	beq.n	8002e96 <_ftoa+0x162>
        negative = true;
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
        value = 0 - value;
 8002e82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e86:	2000      	movs	r0, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	f7fe fdff 	bl	8001a8c <__aeabi_dsub>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	000b      	movs	r3, r1
 8002e92:	673a      	str	r2, [r7, #112]	; 0x70
 8002e94:	677b      	str	r3, [r7, #116]	; 0x74
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d10c      	bne.n	8002ebe <_ftoa+0x18a>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002ea4:	2306      	movs	r3, #6
 8002ea6:	67bb      	str	r3, [r7, #120]	; 0x78
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002ea8:	e009      	b.n	8002ebe <_ftoa+0x18a>
        buf[len++] = '0';
 8002eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	657a      	str	r2, [r7, #84]	; 0x54
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	18ba      	adds	r2, r7, r2
 8002eb4:	2130      	movs	r1, #48	; 0x30
 8002eb6:	54d1      	strb	r1, [r2, r3]
        prec--;
 8002eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	67bb      	str	r3, [r7, #120]	; 0x78
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec0:	2b1f      	cmp	r3, #31
 8002ec2:	d802      	bhi.n	8002eca <_ftoa+0x196>
 8002ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	d8ef      	bhi.n	8002eaa <_ftoa+0x176>
    }

    int whole = (int)value;
 8002eca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ecc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ece:	f7ff f96f 	bl	80021b0 <__aeabi_d2iz>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
    double tmp = (value - whole) * pow10[prec];
 8002ed6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ed8:	f7ff f9a0 	bl	800221c <__aeabi_i2d>
 8002edc:	0002      	movs	r2, r0
 8002ede:	000b      	movs	r3, r1
 8002ee0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ee2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ee4:	f7fe fdd2 	bl	8001a8c <__aeabi_dsub>
 8002ee8:	0002      	movs	r2, r0
 8002eea:	000b      	movs	r3, r1
 8002eec:	0010      	movs	r0, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	4a68      	ldr	r2, [pc, #416]	; (8003094 <_ftoa+0x360>)
 8002ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	18d3      	adds	r3, r2, r3
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f7fe fb5a 	bl	80015b4 <__aeabi_dmul>
 8002f00:	0002      	movs	r2, r0
 8002f02:	000b      	movs	r3, r1
 8002f04:	633a      	str	r2, [r7, #48]	; 0x30
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned long frac = (unsigned long)tmp;
 8002f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f0c:	f7fd faf8 	bl	8000500 <__aeabi_d2uiz>
 8002f10:	0003      	movs	r3, r0
 8002f12:	64bb      	str	r3, [r7, #72]	; 0x48
    diff = tmp - frac;
 8002f14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f16:	f7ff f9b1 	bl	800227c <__aeabi_ui2d>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	000b      	movs	r3, r1
 8002f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f22:	f7fe fdb3 	bl	8001a8c <__aeabi_dsub>
 8002f26:	0002      	movs	r2, r0
 8002f28:	000b      	movs	r3, r1
 8002f2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (diff > 0.5) {
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <_ftoa+0x364>)
 8002f32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f36:	f7fd fa87 	bl	8000448 <__aeabi_dcmpgt>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d015      	beq.n	8002f6a <_ftoa+0x236>
        ++frac;
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	3301      	adds	r3, #1
 8002f42:	64bb      	str	r3, [r7, #72]	; 0x48
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
 8002f44:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f46:	f7ff f999 	bl	800227c <__aeabi_ui2d>
 8002f4a:	4a52      	ldr	r2, [pc, #328]	; (8003094 <_ftoa+0x360>)
 8002f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	18d3      	adds	r3, r2, r3
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f7fd fa81 	bl	800045c <__aeabi_dcmpge>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d017      	beq.n	8002f8e <_ftoa+0x25a>
            frac = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
            ++whole;
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	3301      	adds	r3, #1
 8002f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f68:	e011      	b.n	8002f8e <_ftoa+0x25a>
        }
    } else if (diff < 0.5) {
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <_ftoa+0x364>)
 8002f6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f72:	f7fd fa55 	bl	8000420 <__aeabi_dcmplt>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d109      	bne.n	8002f8e <_ftoa+0x25a>
    } else if ((frac == 0U) || (frac & 1U)) {
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <_ftoa+0x254>
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	2201      	movs	r2, #1
 8002f84:	4013      	ands	r3, r2
 8002f86:	d002      	beq.n	8002f8e <_ftoa+0x25a>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
 8002f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (prec == 0U) {
 8002f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d12f      	bne.n	8002ff4 <_ftoa+0x2c0>
        diff = value - (double)whole;
 8002f94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f96:	f7ff f941 	bl	800221c <__aeabi_i2d>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	000b      	movs	r3, r1
 8002f9e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002fa0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002fa2:	f7fe fd73 	bl	8001a8c <__aeabi_dsub>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	000b      	movs	r3, r1
 8002faa:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002fae:	2301      	movs	r3, #1
 8002fb0:	1c1c      	adds	r4, r3, #0
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <_ftoa+0x364>)
 8002fb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fba:	f7fd fa31 	bl	8000420 <__aeabi_dcmplt>
 8002fbe:	1e03      	subs	r3, r0, #0
 8002fc0:	d101      	bne.n	8002fc6 <_ftoa+0x292>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	1c1c      	adds	r4, r3, #0
 8002fc6:	b2e3      	uxtb	r3, r4
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4053      	eors	r3, r2
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d107      	bne.n	8002fe2 <_ftoa+0x2ae>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <_ftoa+0x364>)
 8002fd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fda:	f7fd fa35 	bl	8000448 <__aeabi_dcmpgt>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d046      	beq.n	8003070 <_ftoa+0x33c>
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d100      	bne.n	8002fec <_ftoa+0x2b8>
 8002fea:	e070      	b.n	80030ce <_ftoa+0x39a>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
 8002fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fee:	3301      	adds	r3, #1
 8002ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff2:	e06c      	b.n	80030ce <_ftoa+0x39a>
        }
    } else {
        unsigned int count = prec;
 8002ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ff8:	e01b      	b.n	8003032 <_ftoa+0x2fe>
            --count;
 8002ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
            buf[len++] = (char)(48U + (frac % 10U));
 8003000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003002:	210a      	movs	r1, #10
 8003004:	0018      	movs	r0, r3
 8003006:	f7fd f905 	bl	8000214 <__aeabi_uidivmod>
 800300a:	000b      	movs	r3, r1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003010:	1c59      	adds	r1, r3, #1
 8003012:	6579      	str	r1, [r7, #84]	; 0x54
 8003014:	3230      	adds	r2, #48	; 0x30
 8003016:	b2d1      	uxtb	r1, r2
 8003018:	2210      	movs	r2, #16
 800301a:	18ba      	adds	r2, r7, r2
 800301c:	54d1      	strb	r1, [r2, r3]
            if (!(frac /= 10U)) {
 800301e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003020:	210a      	movs	r1, #10
 8003022:	0018      	movs	r0, r3
 8003024:	f7fd f870 	bl	8000108 <__udivsi3>
 8003028:	0003      	movs	r3, r0
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
 800302c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <_ftoa+0x306>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003034:	2b1f      	cmp	r3, #31
 8003036:	d9e0      	bls.n	8002ffa <_ftoa+0x2c6>
 8003038:	e008      	b.n	800304c <_ftoa+0x318>
                break;
 800303a:	46c0      	nop			; (mov r8, r8)
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800303c:	e006      	b.n	800304c <_ftoa+0x318>
            buf[len++] = '0';
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	657a      	str	r2, [r7, #84]	; 0x54
 8003044:	2210      	movs	r2, #16
 8003046:	18ba      	adds	r2, r7, r2
 8003048:	2130      	movs	r1, #48	; 0x30
 800304a:	54d1      	strb	r1, [r2, r3]
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800304c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304e:	2b1f      	cmp	r3, #31
 8003050:	d804      	bhi.n	800305c <_ftoa+0x328>
 8003052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	647a      	str	r2, [r7, #68]	; 0x44
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <_ftoa+0x30a>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800305c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305e:	2b1f      	cmp	r3, #31
 8003060:	d835      	bhi.n	80030ce <_ftoa+0x39a>
            // add decimal
            buf[len++] = '.';
 8003062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	657a      	str	r2, [r7, #84]	; 0x54
 8003068:	2210      	movs	r2, #16
 800306a:	18ba      	adds	r2, r7, r2
 800306c:	212e      	movs	r1, #46	; 0x2e
 800306e:	54d1      	strb	r1, [r2, r3]
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003070:	e02d      	b.n	80030ce <_ftoa+0x39a>
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	08006e9c 	.word	0x08006e9c
 8003078:	ffefffff 	.word	0xffefffff
 800307c:	08006ea0 	.word	0x08006ea0
 8003080:	7fefffff 	.word	0x7fefffff
 8003084:	08006ea8 	.word	0x08006ea8
 8003088:	08006eb0 	.word	0x08006eb0
 800308c:	41cdcd65 	.word	0x41cdcd65
 8003090:	c1cdcd65 	.word	0xc1cdcd65
 8003094:	08007118 	.word	0x08007118
 8003098:	3fe00000 	.word	0x3fe00000
        buf[len++] = (char)(48 + (whole % 10));
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	210a      	movs	r1, #10
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7fd f9a1 	bl	80003e8 <__aeabi_idivmod>
 80030a6:	000b      	movs	r3, r1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	6579      	str	r1, [r7, #84]	; 0x54
 80030b0:	3230      	adds	r2, #48	; 0x30
 80030b2:	b2d1      	uxtb	r1, r2
 80030b4:	2210      	movs	r2, #16
 80030b6:	18ba      	adds	r2, r7, r2
 80030b8:	54d1      	strb	r1, [r2, r3]
        if (!(whole /= 10)) {
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	210a      	movs	r1, #10
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fd f8ac 	bl	800021c <__divsi3>
 80030c4:	0003      	movs	r3, r0
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <_ftoa+0x3a2>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	2b1f      	cmp	r3, #31
 80030d2:	d9e3      	bls.n	800309c <_ftoa+0x368>
 80030d4:	e000      	b.n	80030d8 <_ftoa+0x3a4>
            break;
 80030d6:	46c0      	nop			; (mov r8, r8)
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2202      	movs	r2, #2
 80030e0:	4013      	ands	r3, r2
 80030e2:	d123      	bne.n	800312c <_ftoa+0x3f8>
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	4013      	ands	r3, r2
 80030ec:	d01e      	beq.n	800312c <_ftoa+0x3f8>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80030ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d014      	beq.n	800311e <_ftoa+0x3ea>
 80030f4:	2353      	movs	r3, #83	; 0x53
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <_ftoa+0x3d4>
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	220c      	movs	r2, #12
 8003104:	4013      	ands	r3, r2
 8003106:	d00a      	beq.n	800311e <_ftoa+0x3ea>
            width--;
 8003108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800310a:	3b01      	subs	r3, #1
 800310c:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800310e:	e006      	b.n	800311e <_ftoa+0x3ea>
            buf[len++] = '0';
 8003110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	657a      	str	r2, [r7, #84]	; 0x54
 8003116:	2210      	movs	r2, #16
 8003118:	18ba      	adds	r2, r7, r2
 800311a:	2130      	movs	r1, #48	; 0x30
 800311c:	54d1      	strb	r1, [r2, r3]
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800311e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003120:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003122:	429a      	cmp	r2, r3
 8003124:	d202      	bcs.n	800312c <_ftoa+0x3f8>
 8003126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003128:	2b1f      	cmp	r3, #31
 800312a:	d9f1      	bls.n	8003110 <_ftoa+0x3dc>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800312c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312e:	2b1f      	cmp	r3, #31
 8003130:	d827      	bhi.n	8003182 <_ftoa+0x44e>
        if (negative) {
 8003132:	2353      	movs	r3, #83	; 0x53
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <_ftoa+0x418>
            buf[len++] = '-';
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	657a      	str	r2, [r7, #84]	; 0x54
 8003142:	2210      	movs	r2, #16
 8003144:	18ba      	adds	r2, r7, r2
 8003146:	212d      	movs	r1, #45	; 0x2d
 8003148:	54d1      	strb	r1, [r2, r3]
 800314a:	e01a      	b.n	8003182 <_ftoa+0x44e>
        } else if (flags & FLAGS_PLUS) {
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	d007      	beq.n	8003168 <_ftoa+0x434>
            buf[len++] = '+'; // ignore the space if the '+' exists
 8003158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	657a      	str	r2, [r7, #84]	; 0x54
 800315e:	2210      	movs	r2, #16
 8003160:	18ba      	adds	r2, r7, r2
 8003162:	212b      	movs	r1, #43	; 0x2b
 8003164:	54d1      	strb	r1, [r2, r3]
 8003166:	e00c      	b.n	8003182 <_ftoa+0x44e>
        } else if (flags & FLAGS_SPACE) {
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2208      	movs	r2, #8
 8003170:	4013      	ands	r3, r2
 8003172:	d006      	beq.n	8003182 <_ftoa+0x44e>
            buf[len++] = ' ';
 8003174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	657a      	str	r2, [r7, #84]	; 0x54
 800317a:	2210      	movs	r2, #16
 800317c:	18ba      	adds	r2, r7, r2
 800317e:	2120      	movs	r1, #32
 8003180:	54d1      	strb	r1, [r2, r3]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003182:	683c      	ldr	r4, [r7, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	9303      	str	r3, [sp, #12]
 8003192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003194:	9302      	str	r3, [sp, #8]
 8003196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	2310      	movs	r3, #16
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	0023      	movs	r3, r4
 80031a2:	f7ff fbc8 	bl	8002936 <_out_rev>
 80031a6:	0003      	movs	r3, r0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b017      	add	sp, #92	; 0x5c
 80031ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b0 <_etoa>:

#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse
// <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 80031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b2:	b0a5      	sub	sp, #148	; 0x94
 80031b4:	af06      	add	r7, sp, #24
 80031b6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80031b8:	63b9      	str	r1, [r7, #56]	; 0x38
 80031ba:	637a      	str	r2, [r7, #52]	; 0x34
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80031be:	2690      	movs	r6, #144	; 0x90
 80031c0:	19bb      	adds	r3, r7, r6
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	19b9      	adds	r1, r7, r6
 80031c8:	6808      	ldr	r0, [r1, #0]
 80031ca:	6849      	ldr	r1, [r1, #4]
 80031cc:	f7fd f922 	bl	8000414 <__aeabi_dcmpeq>
 80031d0:	1e03      	subs	r3, r0, #0
 80031d2:	d013      	beq.n	80031fc <_etoa+0x4c>
 80031d4:	2201      	movs	r2, #1
 80031d6:	4252      	negs	r2, r2
 80031d8:	4bd9      	ldr	r3, [pc, #868]	; (8003540 <_etoa+0x390>)
 80031da:	19b9      	adds	r1, r7, r6
 80031dc:	6808      	ldr	r0, [r1, #0]
 80031de:	6849      	ldr	r1, [r1, #4]
 80031e0:	f7fd f932 	bl	8000448 <__aeabi_dcmpgt>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d109      	bne.n	80031fc <_etoa+0x4c>
 80031e8:	2201      	movs	r2, #1
 80031ea:	4252      	negs	r2, r2
 80031ec:	4bd5      	ldr	r3, [pc, #852]	; (8003544 <_etoa+0x394>)
 80031ee:	19b9      	adds	r1, r7, r6
 80031f0:	6808      	ldr	r0, [r1, #0]
 80031f2:	6849      	ldr	r1, [r1, #4]
 80031f4:	f7fd f914 	bl	8000420 <__aeabi_dcmplt>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d01b      	beq.n	8003234 <_etoa+0x84>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80031fc:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80031fe:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003202:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003204:	23a0      	movs	r3, #160	; 0xa0
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	239c      	movs	r3, #156	; 0x9c
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9303      	str	r3, [sp, #12]
 8003214:	2398      	movs	r3, #152	; 0x98
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	9302      	str	r3, [sp, #8]
 800321c:	2390      	movs	r3, #144	; 0x90
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	002b      	movs	r3, r5
 800322a:	0022      	movs	r2, r4
 800322c:	f7ff fd82 	bl	8002d34 <_ftoa>
 8003230:	0003      	movs	r3, r0
 8003232:	e271      	b.n	8003718 <_etoa+0x568>
    }

    // determine the sign
    const bool negative = value < 0;
 8003234:	233b      	movs	r3, #59	; 0x3b
 8003236:	2230      	movs	r2, #48	; 0x30
 8003238:	18ba      	adds	r2, r7, r2
 800323a:	18d6      	adds	r6, r2, r3
 800323c:	2301      	movs	r3, #1
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	2200      	movs	r2, #0
 8003242:	2300      	movs	r3, #0
 8003244:	2190      	movs	r1, #144	; 0x90
 8003246:	1879      	adds	r1, r7, r1
 8003248:	6808      	ldr	r0, [r1, #0]
 800324a:	6849      	ldr	r1, [r1, #4]
 800324c:	f7fd f8e8 	bl	8000420 <__aeabi_dcmplt>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d101      	bne.n	8003258 <_etoa+0xa8>
 8003254:	2300      	movs	r3, #0
 8003256:	71fb      	strb	r3, [r7, #7]
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	7033      	strb	r3, [r6, #0]
    if (negative) {
 800325c:	233b      	movs	r3, #59	; 0x3b
 800325e:	2230      	movs	r2, #48	; 0x30
 8003260:	4694      	mov	ip, r2
 8003262:	44bc      	add	ip, r7
 8003264:	4463      	add	r3, ip
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00c      	beq.n	8003286 <_etoa+0xd6>
        value = -value;
 800326c:	2290      	movs	r2, #144	; 0x90
 800326e:	18bb      	adds	r3, r7, r2
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	18ba      	adds	r2, r7, r2
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	2194      	movs	r1, #148	; 0x94
 8003278:	187b      	adds	r3, r7, r1
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	4053      	eors	r3, r2
 8003282:	187a      	adds	r2, r7, r1
 8003284:	6013      	str	r3, [r2, #0]
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
 8003286:	23a0      	movs	r3, #160	; 0xa0
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4013      	ands	r3, r2
 8003292:	d103      	bne.n	800329c <_etoa+0xec>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003294:	2306      	movs	r3, #6
 8003296:	2298      	movs	r2, #152	; 0x98
 8003298:	18ba      	adds	r2, r7, r2
 800329a:	6013      	str	r3, [r2, #0]
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
 800329c:	2690      	movs	r6, #144	; 0x90
 800329e:	19bb      	adds	r3, r7, r6
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	643a      	str	r2, [r7, #64]	; 0x40
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;          // effectively log2
 80032a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ac:	0d1b      	lsrs	r3, r3, #20
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	055b      	lsls	r3, r3, #21
 80032b8:	0d5b      	lsrs	r3, r3, #21
 80032ba:	4aa3      	ldr	r2, [pc, #652]	; (8003548 <_etoa+0x398>)
 80032bc:	4694      	mov	ip, r2
 80032be:	4463      	add	r3, ip
 80032c0:	667b      	str	r3, [r7, #100]	; 0x64
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U); // drop the exponent so conv.F is now in [1,2)
 80032c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	2100      	movs	r1, #0
 80032c8:	0010      	movs	r0, r2
 80032ca:	4388      	bics	r0, r1
 80032cc:	0004      	movs	r4, r0
 80032ce:	031b      	lsls	r3, r3, #12
 80032d0:	0b1d      	lsrs	r5, r3, #12
 80032d2:	2300      	movs	r3, #0
 80032d4:	4323      	orrs	r3, r4
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	4b9c      	ldr	r3, [pc, #624]	; (800354c <_etoa+0x39c>)
 80032da:	432b      	orrs	r3, r5
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	69fc      	ldr	r4, [r7, #28]
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
 80032e4:	647c      	str	r4, [r7, #68]	; 0x44
    // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
    int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80032e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80032e8:	f7fe ff98 	bl	800221c <__aeabi_i2d>
 80032ec:	4a98      	ldr	r2, [pc, #608]	; (8003550 <_etoa+0x3a0>)
 80032ee:	4b99      	ldr	r3, [pc, #612]	; (8003554 <_etoa+0x3a4>)
 80032f0:	f7fe f960 	bl	80015b4 <__aeabi_dmul>
 80032f4:	0002      	movs	r2, r0
 80032f6:	000b      	movs	r3, r1
 80032f8:	0010      	movs	r0, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	4a96      	ldr	r2, [pc, #600]	; (8003558 <_etoa+0x3a8>)
 80032fe:	4b97      	ldr	r3, [pc, #604]	; (800355c <_etoa+0x3ac>)
 8003300:	f7fd f9e8 	bl	80006d4 <__aeabi_dadd>
 8003304:	0002      	movs	r2, r0
 8003306:	000b      	movs	r3, r1
 8003308:	0014      	movs	r4, r2
 800330a:	001d      	movs	r5, r3
 800330c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800330e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003310:	2200      	movs	r2, #0
 8003312:	4b93      	ldr	r3, [pc, #588]	; (8003560 <_etoa+0x3b0>)
 8003314:	f7fe fbba 	bl	8001a8c <__aeabi_dsub>
 8003318:	0002      	movs	r2, r0
 800331a:	000b      	movs	r3, r1
 800331c:	0010      	movs	r0, r2
 800331e:	0019      	movs	r1, r3
 8003320:	4a90      	ldr	r2, [pc, #576]	; (8003564 <_etoa+0x3b4>)
 8003322:	4b91      	ldr	r3, [pc, #580]	; (8003568 <_etoa+0x3b8>)
 8003324:	f7fe f946 	bl	80015b4 <__aeabi_dmul>
 8003328:	0002      	movs	r2, r0
 800332a:	000b      	movs	r3, r1
 800332c:	0020      	movs	r0, r4
 800332e:	0029      	movs	r1, r5
 8003330:	f7fd f9d0 	bl	80006d4 <__aeabi_dadd>
 8003334:	0002      	movs	r2, r0
 8003336:	000b      	movs	r3, r1
 8003338:	0010      	movs	r0, r2
 800333a:	0019      	movs	r1, r3
 800333c:	f7fe ff38 	bl	80021b0 <__aeabi_d2iz>
 8003340:	0003      	movs	r3, r0
 8003342:	677b      	str	r3, [r7, #116]	; 0x74
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003344:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003346:	f7fe ff69 	bl	800221c <__aeabi_i2d>
 800334a:	4a88      	ldr	r2, [pc, #544]	; (800356c <_etoa+0x3bc>)
 800334c:	4b88      	ldr	r3, [pc, #544]	; (8003570 <_etoa+0x3c0>)
 800334e:	f7fe f931 	bl	80015b4 <__aeabi_dmul>
 8003352:	0002      	movs	r2, r0
 8003354:	000b      	movs	r3, r1
 8003356:	0010      	movs	r0, r2
 8003358:	0019      	movs	r1, r3
 800335a:	2200      	movs	r2, #0
 800335c:	4b85      	ldr	r3, [pc, #532]	; (8003574 <_etoa+0x3c4>)
 800335e:	f7fd f9b9 	bl	80006d4 <__aeabi_dadd>
 8003362:	0002      	movs	r2, r0
 8003364:	000b      	movs	r3, r1
 8003366:	0010      	movs	r0, r2
 8003368:	0019      	movs	r1, r3
 800336a:	f7fe ff21 	bl	80021b0 <__aeabi_d2iz>
 800336e:	0003      	movs	r3, r0
 8003370:	667b      	str	r3, [r7, #100]	; 0x64
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003372:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003374:	f7fe ff52 	bl	800221c <__aeabi_i2d>
 8003378:	4a7f      	ldr	r2, [pc, #508]	; (8003578 <_etoa+0x3c8>)
 800337a:	4b80      	ldr	r3, [pc, #512]	; (800357c <_etoa+0x3cc>)
 800337c:	f7fe f91a 	bl	80015b4 <__aeabi_dmul>
 8003380:	0002      	movs	r2, r0
 8003382:	000b      	movs	r3, r1
 8003384:	0014      	movs	r4, r2
 8003386:	001d      	movs	r5, r3
 8003388:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800338a:	f7fe ff47 	bl	800221c <__aeabi_i2d>
 800338e:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <_etoa+0x3d0>)
 8003390:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <_etoa+0x3d4>)
 8003392:	f7fe f90f 	bl	80015b4 <__aeabi_dmul>
 8003396:	0002      	movs	r2, r0
 8003398:	000b      	movs	r3, r1
 800339a:	0020      	movs	r0, r4
 800339c:	0029      	movs	r1, r5
 800339e:	f7fe fb75 	bl	8001a8c <__aeabi_dsub>
 80033a2:	0002      	movs	r2, r0
 80033a4:	000b      	movs	r3, r1
 80033a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    const double z2 = z * z;
 80033aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80033b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80033b2:	f7fe f8ff 	bl	80015b4 <__aeabi_dmul>
 80033b6:	0002      	movs	r2, r0
 80033b8:	000b      	movs	r3, r1
 80033ba:	653a      	str	r2, [r7, #80]	; 0x50
 80033bc:	657b      	str	r3, [r7, #84]	; 0x54
    conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80033be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033c0:	4a71      	ldr	r2, [pc, #452]	; (8003588 <_etoa+0x3d8>)
 80033c2:	4694      	mov	ip, r2
 80033c4:	4463      	add	r3, ip
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	17db      	asrs	r3, r3, #31
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	051b      	lsls	r3, r3, #20
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	68fc      	ldr	r4, [r7, #12]
 80033da:	643b      	str	r3, [r7, #64]	; 0x40
 80033dc:	647c      	str	r4, [r7, #68]	; 0x44
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80033de:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80033e0:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80033e2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80033e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80033e6:	0002      	movs	r2, r0
 80033e8:	000b      	movs	r3, r1
 80033ea:	f7fd f973 	bl	80006d4 <__aeabi_dadd>
 80033ee:	0002      	movs	r2, r0
 80033f0:	000b      	movs	r3, r1
 80033f2:	623a      	str	r2, [r7, #32]
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fa:	2000      	movs	r0, #0
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	05c9      	lsls	r1, r1, #23
 8003400:	f7fe fb44 	bl	8001a8c <__aeabi_dsub>
 8003404:	0002      	movs	r2, r0
 8003406:	000b      	movs	r3, r1
 8003408:	61ba      	str	r2, [r7, #24]
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	2200      	movs	r2, #0
 800340e:	4b5f      	ldr	r3, [pc, #380]	; (800358c <_etoa+0x3dc>)
 8003410:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003412:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003414:	f7fd fcc8 	bl	8000da8 <__aeabi_ddiv>
 8003418:	0002      	movs	r2, r0
 800341a:	000b      	movs	r3, r1
 800341c:	0010      	movs	r0, r2
 800341e:	0019      	movs	r1, r3
 8003420:	2200      	movs	r2, #0
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <_etoa+0x3e0>)
 8003424:	f7fd f956 	bl	80006d4 <__aeabi_dadd>
 8003428:	0002      	movs	r2, r0
 800342a:	000b      	movs	r3, r1
 800342c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800342e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003430:	f7fd fcba 	bl	8000da8 <__aeabi_ddiv>
 8003434:	0002      	movs	r2, r0
 8003436:	000b      	movs	r3, r1
 8003438:	0010      	movs	r0, r2
 800343a:	0019      	movs	r1, r3
 800343c:	2200      	movs	r2, #0
 800343e:	4b55      	ldr	r3, [pc, #340]	; (8003594 <_etoa+0x3e4>)
 8003440:	f7fd f948 	bl	80006d4 <__aeabi_dadd>
 8003444:	0002      	movs	r2, r0
 8003446:	000b      	movs	r3, r1
 8003448:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800344a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800344c:	f7fd fcac 	bl	8000da8 <__aeabi_ddiv>
 8003450:	0002      	movs	r2, r0
 8003452:	000b      	movs	r3, r1
 8003454:	69b8      	ldr	r0, [r7, #24]
 8003456:	69f9      	ldr	r1, [r7, #28]
 8003458:	f7fd f93c 	bl	80006d4 <__aeabi_dadd>
 800345c:	0002      	movs	r2, r0
 800345e:	000b      	movs	r3, r1
 8003460:	6a38      	ldr	r0, [r7, #32]
 8003462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003464:	f7fd fca0 	bl	8000da8 <__aeabi_ddiv>
 8003468:	0002      	movs	r2, r0
 800346a:	000b      	movs	r3, r1
 800346c:	0010      	movs	r0, r2
 800346e:	0019      	movs	r1, r3
 8003470:	2200      	movs	r2, #0
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <_etoa+0x39c>)
 8003474:	f7fd f92e 	bl	80006d4 <__aeabi_dadd>
 8003478:	0002      	movs	r2, r0
 800347a:	000b      	movs	r3, r1
 800347c:	0020      	movs	r0, r4
 800347e:	0029      	movs	r1, r5
 8003480:	f7fe f898 	bl	80015b4 <__aeabi_dmul>
 8003484:	0002      	movs	r2, r0
 8003486:	000b      	movs	r3, r1
 8003488:	643a      	str	r2, [r7, #64]	; 0x40
 800348a:	647b      	str	r3, [r7, #68]	; 0x44
    // correct for rounding errors
    if (value < conv.F) {
 800348c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800348e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003490:	19b9      	adds	r1, r7, r6
 8003492:	6808      	ldr	r0, [r1, #0]
 8003494:	6849      	ldr	r1, [r1, #4]
 8003496:	f7fc ffc3 	bl	8000420 <__aeabi_dcmplt>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d00c      	beq.n	80034b8 <_etoa+0x308>
        expval--;
 800349e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a0:	3b01      	subs	r3, #1
 80034a2:	677b      	str	r3, [r7, #116]	; 0x74
        conv.F /= 10;
 80034a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034a8:	2200      	movs	r2, #0
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <_etoa+0x3e0>)
 80034ac:	f7fd fc7c 	bl	8000da8 <__aeabi_ddiv>
 80034b0:	0002      	movs	r2, r0
 80034b2:	000b      	movs	r3, r1
 80034b4:	643a      	str	r2, [r7, #64]	; 0x40
 80034b6:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80034b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ba:	2b63      	cmp	r3, #99	; 0x63
 80034bc:	dc04      	bgt.n	80034c8 <_etoa+0x318>
 80034be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c0:	3363      	adds	r3, #99	; 0x63
 80034c2:	db01      	blt.n	80034c8 <_etoa+0x318>
 80034c4:	2304      	movs	r3, #4
 80034c6:	e000      	b.n	80034ca <_etoa+0x31a>
 80034c8:	2305      	movs	r3, #5
 80034ca:	673b      	str	r3, [r7, #112]	; 0x70

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
 80034cc:	23a0      	movs	r3, #160	; 0xa0
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4013      	ands	r3, r2
 80034d8:	d100      	bne.n	80034dc <_etoa+0x32c>
 80034da:	e074      	b.n	80035c6 <_etoa+0x416>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
 80034dc:	4a2e      	ldr	r2, [pc, #184]	; (8003598 <_etoa+0x3e8>)
 80034de:	4b2f      	ldr	r3, [pc, #188]	; (800359c <_etoa+0x3ec>)
 80034e0:	2490      	movs	r4, #144	; 0x90
 80034e2:	1939      	adds	r1, r7, r4
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	6849      	ldr	r1, [r1, #4]
 80034e8:	f7fc ffb8 	bl	800045c <__aeabi_dcmpge>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d059      	beq.n	80035a4 <_etoa+0x3f4>
 80034f0:	2200      	movs	r2, #0
 80034f2:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <_etoa+0x3f0>)
 80034f4:	1939      	adds	r1, r7, r4
 80034f6:	6808      	ldr	r0, [r1, #0]
 80034f8:	6849      	ldr	r1, [r1, #4]
 80034fa:	f7fc ff91 	bl	8000420 <__aeabi_dcmplt>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d050      	beq.n	80035a4 <_etoa+0x3f4>
            if ((int)prec > expval) {
 8003502:	2198      	movs	r1, #152	; 0x98
 8003504:	187b      	adds	r3, r7, r1
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800350a:	429a      	cmp	r2, r3
 800350c:	da07      	bge.n	800351e <_etoa+0x36e>
                prec = (unsigned)((int)prec - expval - 1);
 800350e:	187b      	adds	r3, r7, r1
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	187a      	adds	r2, r7, r1
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e003      	b.n	8003526 <_etoa+0x376>
            } else {
                prec = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	2298      	movs	r2, #152	; 0x98
 8003522:	18ba      	adds	r2, r7, r2
 8003524:	6013      	str	r3, [r2, #0]
            }
            flags |= FLAGS_PRECISION; // make sure _ftoa respects precision
 8003526:	21a0      	movs	r1, #160	; 0xa0
 8003528:	187b      	adds	r3, r7, r1
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	00d2      	lsls	r2, r2, #3
 8003530:	4313      	orrs	r3, r2
 8003532:	187a      	adds	r2, r7, r1
 8003534:	6013      	str	r3, [r2, #0]
            // no characters in exponent
            minwidth = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	673b      	str	r3, [r7, #112]	; 0x70
            expval = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	677b      	str	r3, [r7, #116]	; 0x74
 800353e:	e042      	b.n	80035c6 <_etoa+0x416>
 8003540:	7fefffff 	.word	0x7fefffff
 8003544:	ffefffff 	.word	0xffefffff
 8003548:	fffffc01 	.word	0xfffffc01
 800354c:	3ff00000 	.word	0x3ff00000
 8003550:	509f79fb 	.word	0x509f79fb
 8003554:	3fd34413 	.word	0x3fd34413
 8003558:	8b60c8b3 	.word	0x8b60c8b3
 800355c:	3fc68a28 	.word	0x3fc68a28
 8003560:	3ff80000 	.word	0x3ff80000
 8003564:	636f4361 	.word	0x636f4361
 8003568:	3fd287a7 	.word	0x3fd287a7
 800356c:	0979a371 	.word	0x0979a371
 8003570:	400a934f 	.word	0x400a934f
 8003574:	3fe00000 	.word	0x3fe00000
 8003578:	bbb55516 	.word	0xbbb55516
 800357c:	40026bb1 	.word	0x40026bb1
 8003580:	fefa39ef 	.word	0xfefa39ef
 8003584:	3fe62e42 	.word	0x3fe62e42
 8003588:	000003ff 	.word	0x000003ff
 800358c:	402c0000 	.word	0x402c0000
 8003590:	40240000 	.word	0x40240000
 8003594:	40180000 	.word	0x40180000
 8003598:	eb1c432d 	.word	0xeb1c432d
 800359c:	3f1a36e2 	.word	0x3f1a36e2
 80035a0:	412e8480 	.word	0x412e8480
        } else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80035a4:	2198      	movs	r1, #152	; 0x98
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <_etoa+0x416>
 80035ae:	23a0      	movs	r3, #160	; 0xa0
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4013      	ands	r3, r2
 80035ba:	d004      	beq.n	80035c6 <_etoa+0x416>
                --prec;
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	187a      	adds	r2, r7, r1
 80035c4:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
 80035c6:	229c      	movs	r2, #156	; 0x9c
 80035c8:	18bb      	adds	r3, r7, r2
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (width > minwidth) {
 80035ce:	18bb      	adds	r3, r7, r2
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d904      	bls.n	80035e2 <_etoa+0x432>
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
 80035d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035e0:	e001      	b.n	80035e6 <_etoa+0x436>
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
 80035e6:	23a0      	movs	r3, #160	; 0xa0
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2202      	movs	r2, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d004      	beq.n	80035fc <_etoa+0x44c>
 80035f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <_etoa+0x44c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    }

    // rescale the float value
    if (expval) {
 80035fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <_etoa+0x46c>
        value /= conv.F;
 8003602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003606:	2490      	movs	r4, #144	; 0x90
 8003608:	1939      	adds	r1, r7, r4
 800360a:	6808      	ldr	r0, [r1, #0]
 800360c:	6849      	ldr	r1, [r1, #4]
 800360e:	f7fd fbcb 	bl	8000da8 <__aeabi_ddiv>
 8003612:	0002      	movs	r2, r0
 8003614:	000b      	movs	r3, r1
 8003616:	1939      	adds	r1, r7, r4
 8003618:	600a      	str	r2, [r1, #0]
 800361a:	604b      	str	r3, [r1, #4]
    }

    // output the floating part
    const size_t start_idx = idx;
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003620:	233b      	movs	r3, #59	; 0x3b
 8003622:	2230      	movs	r2, #48	; 0x30
 8003624:	4694      	mov	ip, r2
 8003626:	44bc      	add	ip, r7
 8003628:	4463      	add	r3, ip
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <_etoa+0x498>
 8003630:	2390      	movs	r3, #144	; 0x90
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
 8003638:	2394      	movs	r3, #148	; 0x94
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	0612      	lsls	r2, r2, #24
 8003642:	405a      	eors	r2, r3
 8003644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003646:	e005      	b.n	8003654 <_etoa+0x4a4>
 8003648:	2390      	movs	r3, #144	; 0x90
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	685c      	ldr	r4, [r3, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003654:	23a0      	movs	r3, #160	; 0xa0
 8003656:	18fa      	adds	r2, r7, r3
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	4a31      	ldr	r2, [pc, #196]	; (8003720 <_etoa+0x570>)
 800365c:	4013      	ands	r3, r2
 800365e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8003660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003664:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003666:	9304      	str	r3, [sp, #16]
 8003668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366a:	9303      	str	r3, [sp, #12]
 800366c:	2598      	movs	r5, #152	; 0x98
 800366e:	197d      	adds	r5, r7, r5
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8003676:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8003678:	9500      	str	r5, [sp, #0]
 800367a:	9601      	str	r6, [sp, #4]
 800367c:	0023      	movs	r3, r4
 800367e:	f7ff fb59 	bl	8002d34 <_ftoa>
 8003682:	0003      	movs	r3, r0
 8003684:	637b      	str	r3, [r7, #52]	; 0x34

    // output the exponent part
    if (minwidth) {
 8003686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003688:	2b00      	cmp	r3, #0
 800368a:	d044      	beq.n	8003716 <_etoa+0x566>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800368c:	23a0      	movs	r3, #160	; 0xa0
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	4013      	ands	r3, r2
 8003696:	d001      	beq.n	800369c <_etoa+0x4ec>
 8003698:	2045      	movs	r0, #69	; 0x45
 800369a:	e000      	b.n	800369e <_etoa+0x4ee>
 800369c:	2065      	movs	r0, #101	; 0x65
 800369e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a0:	1c53      	adds	r3, r2, #1
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036a8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80036aa:	47a0      	blx	r4
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0,
 80036ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ae:	17da      	asrs	r2, r3, #31
 80036b0:	189b      	adds	r3, r3, r2
 80036b2:	4053      	eors	r3, r2
 80036b4:	469c      	mov	ip, r3
 80036b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b8:	0fdb      	lsrs	r3, r3, #31
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036be:	3a01      	subs	r2, #1
 80036c0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80036c2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80036c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036c8:	2605      	movs	r6, #5
 80036ca:	9605      	str	r6, [sp, #20]
 80036cc:	9204      	str	r2, [sp, #16]
 80036ce:	2200      	movs	r2, #0
 80036d0:	9203      	str	r2, [sp, #12]
 80036d2:	220a      	movs	r2, #10
 80036d4:	9202      	str	r2, [sp, #8]
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	4663      	mov	r3, ip
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	002b      	movs	r3, r5
 80036de:	0022      	movs	r2, r4
 80036e0:	f7ff fa4c 	bl	8002b7c <_ntoa_long>
 80036e4:	0003      	movs	r3, r0
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
 80036e8:	23a0      	movs	r3, #160	; 0xa0
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2202      	movs	r2, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	d010      	beq.n	8003716 <_etoa+0x566>
            while (idx - start_idx < width)
 80036f4:	e007      	b.n	8003706 <_etoa+0x556>
                out(' ', buffer, idx++, maxlen);
 80036f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f8:	1c53      	adds	r3, r2, #1
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003700:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003702:	2020      	movs	r0, #32
 8003704:	47a0      	blx	r4
            while (idx - start_idx < width)
 8003706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	229c      	movs	r2, #156	; 0x9c
 800370e:	18ba      	adds	r2, r7, r2
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d8ef      	bhi.n	80036f6 <_etoa+0x546>
        }
    }
    return idx;
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b01f      	add	sp, #124	; 0x7c
 800371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003720:	fffff7ff 	.word	0xfffff7ff

08003724 <_vsnprintf>:
#endif // PRINTF_SUPPORT_EXPONENTIAL
#endif // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003726:	46c6      	mov	lr, r8
 8003728:	b500      	push	{lr}
 800372a:	b0a6      	sub	sp, #152	; 0x98
 800372c:	af0a      	add	r7, sp, #40	; 0x28
 800372e:	6278      	str	r0, [r7, #36]	; 0x24
 8003730:	6239      	str	r1, [r7, #32]
 8003732:	61fa      	str	r2, [r7, #28]
 8003734:	61bb      	str	r3, [r7, #24]
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (!buffer) {
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <_vsnprintf+0x20>
 8003740:	f000 fc26 	bl	8003f90 <_vsnprintf+0x86c>
        // use null output function
        out = _out_null;
 8003744:	4bd0      	ldr	r3, [pc, #832]	; (8003a88 <_vsnprintf+0x364>)
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while (*format) {
 8003748:	f000 fc22 	bl	8003f90 <_vsnprintf+0x86c>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b25      	cmp	r3, #37	; 0x25
 8003752:	d00d      	beq.n	8003770 <_vsnprintf+0x4c>
            // no
            out(*format, buffer, idx++, maxlen);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	7818      	ldrb	r0, [r3, #0]
 8003758:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800375a:	1c53      	adds	r3, r2, #1
 800375c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	6a39      	ldr	r1, [r7, #32]
 8003762:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003764:	47a0      	blx	r4
            format++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3301      	adds	r3, #1
 800376a:	61bb      	str	r3, [r7, #24]
            continue;
 800376c:	f000 fc10 	bl	8003f90 <_vsnprintf+0x86c>
        } else {
            // yes, evaluate it
            format++;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	3301      	adds	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
        }

        // evaluate flags
        flags = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	66fb      	str	r3, [r7, #108]	; 0x6c
        do {
            switch (*format) {
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	3b20      	subs	r3, #32
 8003780:	2b10      	cmp	r3, #16
 8003782:	d836      	bhi.n	80037f2 <_vsnprintf+0xce>
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	4bc1      	ldr	r3, [pc, #772]	; (8003a8c <_vsnprintf+0x368>)
 8003788:	18d3      	adds	r3, r2, r3
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	469f      	mov	pc, r3
            case '0':
                flags |= FLAGS_ZEROPAD;
 800378e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003790:	2201      	movs	r2, #1
 8003792:	4313      	orrs	r3, r2
 8003794:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3301      	adds	r3, #1
 800379a:	61bb      	str	r3, [r7, #24]
                n = 1U;
 800379c:	2301      	movs	r3, #1
 800379e:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80037a0:	e02a      	b.n	80037f8 <_vsnprintf+0xd4>
            case '-':
                flags |= FLAGS_LEFT;
 80037a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a4:	2202      	movs	r2, #2
 80037a6:	4313      	orrs	r3, r2
 80037a8:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61bb      	str	r3, [r7, #24]
                n = 1U;
 80037b0:	2301      	movs	r3, #1
 80037b2:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80037b4:	e020      	b.n	80037f8 <_vsnprintf+0xd4>
            case '+':
                flags |= FLAGS_PLUS;
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b8:	2204      	movs	r2, #4
 80037ba:	4313      	orrs	r3, r2
 80037bc:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	3301      	adds	r3, #1
 80037c2:	61bb      	str	r3, [r7, #24]
                n = 1U;
 80037c4:	2301      	movs	r3, #1
 80037c6:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80037c8:	e016      	b.n	80037f8 <_vsnprintf+0xd4>
            case ' ':
                flags |= FLAGS_SPACE;
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	2208      	movs	r2, #8
 80037ce:	4313      	orrs	r3, r2
 80037d0:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3301      	adds	r3, #1
 80037d6:	61bb      	str	r3, [r7, #24]
                n = 1U;
 80037d8:	2301      	movs	r3, #1
 80037da:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80037dc:	e00c      	b.n	80037f8 <_vsnprintf+0xd4>
            case '#':
                flags |= FLAGS_HASH;
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	2210      	movs	r2, #16
 80037e2:	4313      	orrs	r3, r2
 80037e4:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61bb      	str	r3, [r7, #24]
                n = 1U;
 80037ec:	2301      	movs	r3, #1
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80037f0:	e002      	b.n	80037f8 <_vsnprintf+0xd4>
            default:
                n = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	663b      	str	r3, [r7, #96]	; 0x60
                break;
 80037f6:	46c0      	nop			; (mov r8, r8)
            }
        } while (n);
 80037f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1bd      	bne.n	800377a <_vsnprintf+0x56>

        // evaluate width field
        width = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	66bb      	str	r3, [r7, #104]	; 0x68
        if (_is_digit(*format)) {
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	0018      	movs	r0, r3
 8003808:	f7ff f859 	bl	80028be <_is_digit>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d007      	beq.n	8003820 <_vsnprintf+0xfc>
            width = _atoi(&format);
 8003810:	2318      	movs	r3, #24
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff f86b 	bl	80028f0 <_atoi>
 800381a:	0003      	movs	r3, r0
 800381c:	66bb      	str	r3, [r7, #104]	; 0x68
 800381e:	e01c      	b.n	800385a <_vsnprintf+0x136>
        } else if (*format == '*') {
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b2a      	cmp	r3, #42	; 0x2a
 8003826:	d118      	bne.n	800385a <_vsnprintf+0x136>
            const int w = va_arg(va, int);
 8003828:	2388      	movs	r3, #136	; 0x88
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	2188      	movs	r1, #136	; 0x88
 8003832:	1879      	adds	r1, r7, r1
 8003834:	600a      	str	r2, [r1, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
            if (w < 0) {
 800383a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383c:	2b00      	cmp	r3, #0
 800383e:	da07      	bge.n	8003850 <_vsnprintf+0x12c>
                flags |= FLAGS_LEFT; // reverse padding
 8003840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003842:	2202      	movs	r2, #2
 8003844:	4313      	orrs	r3, r2
 8003846:	66fb      	str	r3, [r7, #108]	; 0x6c
                width = (unsigned int)-w;
 8003848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384a:	425b      	negs	r3, r3
 800384c:	66bb      	str	r3, [r7, #104]	; 0x68
 800384e:	e001      	b.n	8003854 <_vsnprintf+0x130>
            } else {
                width = (unsigned int)w;
 8003850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003852:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            format++;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	3301      	adds	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
        }

        // evaluate precision field
        precision = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	667b      	str	r3, [r7, #100]	; 0x64
        if (*format == '.') {
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b2e      	cmp	r3, #46	; 0x2e
 8003864:	d12b      	bne.n	80038be <_vsnprintf+0x19a>
            flags |= FLAGS_PRECISION;
 8003866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	00d2      	lsls	r2, r2, #3
 800386c:	4313      	orrs	r3, r2
 800386e:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	3301      	adds	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
            if (_is_digit(*format)) {
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	0018      	movs	r0, r3
 800387c:	f7ff f81f 	bl	80028be <_is_digit>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d007      	beq.n	8003894 <_vsnprintf+0x170>
                precision = _atoi(&format);
 8003884:	2318      	movs	r3, #24
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff f831 	bl	80028f0 <_atoi>
 800388e:	0003      	movs	r3, r0
 8003890:	667b      	str	r3, [r7, #100]	; 0x64
 8003892:	e014      	b.n	80038be <_vsnprintf+0x19a>
            } else if (*format == '*') {
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b2a      	cmp	r3, #42	; 0x2a
 800389a:	d110      	bne.n	80038be <_vsnprintf+0x19a>
                const int prec = (int)va_arg(va, int);
 800389c:	2388      	movs	r3, #136	; 0x88
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1d1a      	adds	r2, r3, #4
 80038a4:	2188      	movs	r1, #136	; 0x88
 80038a6:	1879      	adds	r1, r7, r1
 80038a8:	600a      	str	r2, [r1, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
                precision = prec > 0 ? (unsigned int)prec : 0U;
 80038ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da00      	bge.n	80038b6 <_vsnprintf+0x192>
 80038b4:	2300      	movs	r3, #0
 80038b6:	667b      	str	r3, [r7, #100]	; 0x64
                format++;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61bb      	str	r3, [r7, #24]
            }
        }

        // evaluate length field
        switch (*format) {
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	3b68      	subs	r3, #104	; 0x68
 80038c4:	2b12      	cmp	r3, #18
 80038c6:	d847      	bhi.n	8003958 <_vsnprintf+0x234>
 80038c8:	009a      	lsls	r2, r3, #2
 80038ca:	4b71      	ldr	r3, [pc, #452]	; (8003a90 <_vsnprintf+0x36c>)
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	469f      	mov	pc, r3
        case 'l':
            flags |= FLAGS_LONG;
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	0052      	lsls	r2, r2, #1
 80038d8:	4313      	orrs	r3, r2
 80038da:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	3301      	adds	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
            if (*format == 'l') {
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b6c      	cmp	r3, #108	; 0x6c
 80038e8:	d138      	bne.n	800395c <_vsnprintf+0x238>
                flags |= FLAGS_LONG_LONG;
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	4313      	orrs	r3, r2
 80038f2:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	3301      	adds	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
            }
            break;
 80038fa:	e02f      	b.n	800395c <_vsnprintf+0x238>
        case 'h':
            flags |= FLAGS_SHORT;
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	4313      	orrs	r3, r2
 8003902:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	3301      	adds	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]
            if (*format == 'h') {
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b68      	cmp	r3, #104	; 0x68
 8003910:	d126      	bne.n	8003960 <_vsnprintf+0x23c>
                flags |= FLAGS_CHAR;
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	4313      	orrs	r3, r2
 8003918:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3301      	adds	r3, #1
 800391e:	61bb      	str	r3, [r7, #24]
            }
            break;
 8003920:	e01e      	b.n	8003960 <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
        case 't':
            flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	0052      	lsls	r2, r2, #1
 8003928:	4313      	orrs	r3, r2
 800392a:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	3301      	adds	r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
            break;
 8003932:	e016      	b.n	8003962 <_vsnprintf+0x23e>
#endif
        case 'j':
            flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	4313      	orrs	r3, r2
 800393c:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3301      	adds	r3, #1
 8003942:	61bb      	str	r3, [r7, #24]
            break;
 8003944:	e00d      	b.n	8003962 <_vsnprintf+0x23e>
        case 'z':
            flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	0052      	lsls	r2, r2, #1
 800394c:	4313      	orrs	r3, r2
 800394e:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3301      	adds	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
            break;
 8003956:	e004      	b.n	8003962 <_vsnprintf+0x23e>
        default:
            break;
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	e002      	b.n	8003962 <_vsnprintf+0x23e>
            break;
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	e000      	b.n	8003962 <_vsnprintf+0x23e>
            break;
 8003960:	46c0      	nop			; (mov r8, r8)
        }

        // evaluate specifier
        switch (*format) {
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	3b25      	subs	r3, #37	; 0x25
 8003968:	2b53      	cmp	r3, #83	; 0x53
 800396a:	d900      	bls.n	800396e <_vsnprintf+0x24a>
 800396c:	e303      	b.n	8003f76 <_vsnprintf+0x852>
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	4b48      	ldr	r3, [pc, #288]	; (8003a94 <_vsnprintf+0x370>)
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	469f      	mov	pc, r3
        case 'X':
        case 'o':
        case 'b': {
            // set the base
            unsigned int base;
            if (*format == 'x' || *format == 'X') {
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b78      	cmp	r3, #120	; 0x78
 800397e:	d003      	beq.n	8003988 <_vsnprintf+0x264>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b58      	cmp	r3, #88	; 0x58
 8003986:	d102      	bne.n	800398e <_vsnprintf+0x26a>
                base = 16U;
 8003988:	2310      	movs	r3, #16
 800398a:	65bb      	str	r3, [r7, #88]	; 0x58
 800398c:	e013      	b.n	80039b6 <_vsnprintf+0x292>
            } else if (*format == 'o') {
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b6f      	cmp	r3, #111	; 0x6f
 8003994:	d102      	bne.n	800399c <_vsnprintf+0x278>
                base = 8U;
 8003996:	2308      	movs	r3, #8
 8003998:	65bb      	str	r3, [r7, #88]	; 0x58
 800399a:	e00c      	b.n	80039b6 <_vsnprintf+0x292>
            } else if (*format == 'b') {
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b62      	cmp	r3, #98	; 0x62
 80039a2:	d102      	bne.n	80039aa <_vsnprintf+0x286>
                base = 2U;
 80039a4:	2302      	movs	r3, #2
 80039a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80039a8:	e005      	b.n	80039b6 <_vsnprintf+0x292>
            } else {
                base = 10U;
 80039aa:	230a      	movs	r3, #10
 80039ac:	65bb      	str	r3, [r7, #88]	; 0x58
                flags &= ~FLAGS_HASH; // no hash for dec format
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	2210      	movs	r2, #16
 80039b2:	4393      	bics	r3, r2
 80039b4:	66fb      	str	r3, [r7, #108]	; 0x6c
            }
            // uppercase
            if (*format == 'X') {
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b58      	cmp	r3, #88	; 0x58
 80039bc:	d103      	bne.n	80039c6 <_vsnprintf+0x2a2>
                flags |= FLAGS_UPPERCASE;
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	2220      	movs	r2, #32
 80039c2:	4313      	orrs	r3, r2
 80039c4:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            // no plus or space flag for u, x, X, o, b
            if ((*format != 'i') && (*format != 'd')) {
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b69      	cmp	r3, #105	; 0x69
 80039cc:	d007      	beq.n	80039de <_vsnprintf+0x2ba>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d003      	beq.n	80039de <_vsnprintf+0x2ba>
                flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	220c      	movs	r2, #12
 80039da:	4393      	bics	r3, r2
 80039dc:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            // ignore '0' flag when precision is given
            if (flags & FLAGS_PRECISION) {
 80039de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	d003      	beq.n	80039f0 <_vsnprintf+0x2cc>
                flags &= ~FLAGS_ZEROPAD;
 80039e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ea:	2201      	movs	r2, #1
 80039ec:	4393      	bics	r3, r2
 80039ee:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            // convert the integer
            if ((*format == 'i') || (*format == 'd')) {
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b69      	cmp	r3, #105	; 0x69
 80039f6:	d004      	beq.n	8003a02 <_vsnprintf+0x2de>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b64      	cmp	r3, #100	; 0x64
 80039fe:	d000      	beq.n	8003a02 <_vsnprintf+0x2de>
 8003a00:	e0b7      	b.n	8003b72 <_vsnprintf+0x44e>
                // signed
                if (flags & FLAGS_LONG_LONG) {
 8003a02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d045      	beq.n	8003a98 <_vsnprintf+0x374>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                    const long long value = va_arg(va, long long);
 8003a0c:	2388      	movs	r3, #136	; 0x88
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3307      	adds	r3, #7
 8003a14:	2207      	movs	r2, #7
 8003a16:	4393      	bics	r3, r2
 8003a18:	001a      	movs	r2, r3
 8003a1a:	3208      	adds	r2, #8
 8003a1c:	2188      	movs	r1, #136	; 0x88
 8003a1e:	1879      	adds	r1, r7, r1
 8003a20:	600a      	str	r2, [r1, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 8003a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da04      	bge.n	8003a3c <_vsnprintf+0x318>
 8003a32:	0010      	movs	r0, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	2300      	movs	r3, #0
 8003a38:	4242      	negs	r2, r0
 8003a3a:	418b      	sbcs	r3, r1
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 8003a3c:	0010      	movs	r0, r2
 8003a3e:	0019      	movs	r1, r3
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	0fdb      	lsrs	r3, r3, #31
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	469c      	mov	ip, r3
 8003a52:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8003a54:	6a3d      	ldr	r5, [r7, #32]
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	4698      	mov	r8, r3
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	9308      	str	r3, [sp, #32]
 8003a5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a60:	9307      	str	r3, [sp, #28]
 8003a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a64:	9306      	str	r3, [sp, #24]
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	697c      	ldr	r4, [r7, #20]
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	9405      	str	r4, [sp, #20]
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	9101      	str	r1, [sp, #4]
 8003a74:	4663      	mov	r3, ip
 8003a76:	0032      	movs	r2, r6
 8003a78:	0029      	movs	r1, r5
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	f7ff f8e7 	bl	8002c4e <_ntoa_long_long>
 8003a80:	0003      	movs	r3, r0
 8003a82:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (flags & FLAGS_LONG_LONG) {
 8003a84:	e103      	b.n	8003c8e <_vsnprintf+0x56a>
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	0800283d 	.word	0x0800283d
 8003a8c:	08006f34 	.word	0x08006f34
 8003a90:	08006f78 	.word	0x08006f78
 8003a94:	08006fc4 	.word	0x08006fc4
                                          precision, width, flags);
#endif
                } else if (flags & FLAGS_LONG) {
 8003a98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d025      	beq.n	8003aee <_vsnprintf+0x3ca>
                    const long value = va_arg(va, long);
 8003aa2:	2388      	movs	r3, #136	; 0x88
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1d1a      	adds	r2, r3, #4
 8003aaa:	2188      	movs	r1, #136	; 0x88
 8003aac:	1879      	adds	r1, r7, r1
 8003aae:	600a      	str	r2, [r1, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value),
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	17da      	asrs	r2, r3, #31
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	4053      	eors	r3, r2
 8003abc:	001e      	movs	r6, r3
 8003abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac0:	0fdb      	lsrs	r3, r3, #31
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	69fd      	ldr	r5, [r7, #28]
 8003ac6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003ac8:	6a39      	ldr	r1, [r7, #32]
 8003aca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ace:	9305      	str	r3, [sp, #20]
 8003ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad2:	9304      	str	r3, [sp, #16]
 8003ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad6:	9303      	str	r3, [sp, #12]
 8003ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	9201      	str	r2, [sp, #4]
 8003ade:	9600      	str	r6, [sp, #0]
 8003ae0:	002b      	movs	r3, r5
 8003ae2:	0022      	movs	r2, r4
 8003ae4:	f7ff f84a 	bl	8002b7c <_ntoa_long>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (flags & FLAGS_LONG_LONG) {
 8003aec:	e0cf      	b.n	8003c8e <_vsnprintf+0x56a>
                                     value < 0, base, precision, width, flags);
                } else {
                    const int value = (flags & FLAGS_CHAR)
 8003aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af0:	2240      	movs	r2, #64	; 0x40
 8003af2:	4013      	ands	r3, r2
                                          ? (char)va_arg(va, int)
                                          : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003af4:	d009      	beq.n	8003b0a <_vsnprintf+0x3e6>
                                          ? (char)va_arg(va, int)
 8003af6:	2388      	movs	r3, #136	; 0x88
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	1d1a      	adds	r2, r3, #4
 8003afe:	2188      	movs	r1, #136	; 0x88
 8003b00:	1879      	adds	r1, r7, r1
 8003b02:	600a      	str	r2, [r1, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e015      	b.n	8003b36 <_vsnprintf+0x412>
                                          : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d009      	beq.n	8003b26 <_vsnprintf+0x402>
 8003b12:	2388      	movs	r3, #136	; 0x88
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	2188      	movs	r1, #136	; 0x88
 8003b1c:	1879      	adds	r1, r7, r1
 8003b1e:	600a      	str	r2, [r1, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	e007      	b.n	8003b36 <_vsnprintf+0x412>
 8003b26:	2388      	movs	r3, #136	; 0x88
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	1d1a      	adds	r2, r3, #4
 8003b2e:	2188      	movs	r1, #136	; 0x88
 8003b30:	1879      	adds	r1, r7, r1
 8003b32:	600a      	str	r2, [r1, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
                    const int value = (flags & FLAGS_CHAR)
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value),
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	17da      	asrs	r2, r3, #31
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	4053      	eors	r3, r2
 8003b40:	001e      	movs	r6, r3
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	0fdb      	lsrs	r3, r3, #31
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	69fd      	ldr	r5, [r7, #28]
 8003b4a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003b4c:	6a39      	ldr	r1, [r7, #32]
 8003b4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b52:	9305      	str	r3, [sp, #20]
 8003b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b56:	9304      	str	r3, [sp, #16]
 8003b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	9201      	str	r2, [sp, #4]
 8003b62:	9600      	str	r6, [sp, #0]
 8003b64:	002b      	movs	r3, r5
 8003b66:	0022      	movs	r2, r4
 8003b68:	f7ff f808 	bl	8002b7c <_ntoa_long>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (flags & FLAGS_LONG_LONG) {
 8003b70:	e08d      	b.n	8003c8e <_vsnprintf+0x56a>
                                     value < 0, base, precision, width, flags);
                }
            } else {
                // unsigned
                if (flags & FLAGS_LONG_LONG) {
 8003b72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d02b      	beq.n	8003bd4 <_vsnprintf+0x4b0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
 8003b7c:	2388      	movs	r3, #136	; 0x88
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3307      	adds	r3, #7
 8003b84:	2207      	movs	r2, #7
 8003b86:	4393      	bics	r3, r2
 8003b88:	001a      	movs	r2, r3
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	2188      	movs	r1, #136	; 0x88
 8003b8e:	1879      	adds	r1, r7, r1
 8003b90:	600a      	str	r2, [r1, #0]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	69fe      	ldr	r6, [r7, #28]
 8003ba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ba2:	6a3d      	ldr	r5, [r7, #32]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	469c      	mov	ip, r3
 8003ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003baa:	9308      	str	r3, [sp, #32]
 8003bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bae:	9307      	str	r3, [sp, #28]
 8003bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb2:	9306      	str	r3, [sp, #24]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	68fc      	ldr	r4, [r7, #12]
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	9405      	str	r4, [sp, #20]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9302      	str	r3, [sp, #8]
 8003bc0:	9000      	str	r0, [sp, #0]
 8003bc2:	9101      	str	r1, [sp, #4]
 8003bc4:	0033      	movs	r3, r6
 8003bc6:	0029      	movs	r1, r5
 8003bc8:	4660      	mov	r0, ip
 8003bca:	f7ff f840 	bl	8002c4e <_ntoa_long_long>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd2:	e05c      	b.n	8003c8e <_vsnprintf+0x56a>
                                          precision, width, flags);
#endif
                } else if (flags & FLAGS_LONG) {
 8003bd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d01d      	beq.n	8003c1a <_vsnprintf+0x4f6>
                    idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
 8003bde:	2388      	movs	r3, #136	; 0x88
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	1d1a      	adds	r2, r3, #4
 8003be6:	2188      	movs	r1, #136	; 0x88
 8003be8:	1879      	adds	r1, r7, r1
 8003bea:	600a      	str	r2, [r1, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69fd      	ldr	r5, [r7, #28]
 8003bf0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003bf2:	6a39      	ldr	r1, [r7, #32]
 8003bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bf8:	9205      	str	r2, [sp, #20]
 8003bfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bfc:	9204      	str	r2, [sp, #16]
 8003bfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c00:	9203      	str	r2, [sp, #12]
 8003c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c04:	9202      	str	r2, [sp, #8]
 8003c06:	2200      	movs	r2, #0
 8003c08:	9201      	str	r2, [sp, #4]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	002b      	movs	r3, r5
 8003c0e:	0022      	movs	r2, r4
 8003c10:	f7fe ffb4 	bl	8002b7c <_ntoa_long>
 8003c14:	0003      	movs	r3, r0
 8003c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c18:	e039      	b.n	8003c8e <_vsnprintf+0x56a>
                                     width, flags);
                } else {
                    const unsigned int value =
                        (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int)
 8003c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	4013      	ands	r3, r2
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8003c20:	d009      	beq.n	8003c36 <_vsnprintf+0x512>
                        (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int)
 8003c22:	2388      	movs	r3, #136	; 0x88
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1d1a      	adds	r2, r3, #4
 8003c2a:	2188      	movs	r1, #136	; 0x88
 8003c2c:	1879      	adds	r1, r7, r1
 8003c2e:	600a      	str	r2, [r1, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	e015      	b.n	8003c62 <_vsnprintf+0x53e>
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	4013      	ands	r3, r2
                                                                     : va_arg(va, unsigned int);
 8003c3c:	d009      	beq.n	8003c52 <_vsnprintf+0x52e>
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8003c3e:	2388      	movs	r3, #136	; 0x88
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	1d1a      	adds	r2, r3, #4
 8003c46:	2188      	movs	r1, #136	; 0x88
 8003c48:	1879      	adds	r1, r7, r1
 8003c4a:	600a      	str	r2, [r1, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	e007      	b.n	8003c62 <_vsnprintf+0x53e>
                                                                     : va_arg(va, unsigned int);
 8003c52:	2388      	movs	r3, #136	; 0x88
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	2188      	movs	r1, #136	; 0x88
 8003c5c:	1879      	adds	r1, r7, r1
 8003c5e:	600a      	str	r2, [r1, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
                    const unsigned int value =
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
                    idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003c64:	69fc      	ldr	r4, [r7, #28]
 8003c66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c68:	6a39      	ldr	r1, [r7, #32]
 8003c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6e:	9305      	str	r3, [sp, #20]
 8003c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c72:	9304      	str	r3, [sp, #16]
 8003c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c76:	9303      	str	r3, [sp, #12]
 8003c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c7a:	9302      	str	r3, [sp, #8]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	0023      	movs	r3, r4
 8003c86:	f7fe ff79 	bl	8002b7c <_ntoa_long>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
            }
            format++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61bb      	str	r3, [r7, #24]
            break;
 8003c94:	e17c      	b.n	8003f90 <_vsnprintf+0x86c>
        }
#if defined(PRINTF_SUPPORT_FLOAT)
        case 'f':
        case 'F':
            if (*format == 'F')
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b46      	cmp	r3, #70	; 0x46
 8003c9c:	d103      	bne.n	8003ca6 <_vsnprintf+0x582>
                flags |= FLAGS_UPPERCASE;
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
            idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003ca6:	2388      	movs	r3, #136	; 0x88
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3307      	adds	r3, #7
 8003cae:	2207      	movs	r2, #7
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	3208      	adds	r2, #8
 8003cb6:	2188      	movs	r1, #136	; 0x88
 8003cb8:	1879      	adds	r1, r7, r1
 8003cba:	600a      	str	r2, [r1, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	69fe      	ldr	r6, [r7, #28]
 8003cc2:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8003cc4:	6a3c      	ldr	r4, [r7, #32]
 8003cc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cc8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003cca:	9104      	str	r1, [sp, #16]
 8003ccc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cce:	9103      	str	r1, [sp, #12]
 8003cd0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003cd2:	9102      	str	r1, [sp, #8]
 8003cd4:	9200      	str	r2, [sp, #0]
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	0033      	movs	r3, r6
 8003cda:	002a      	movs	r2, r5
 8003cdc:	0021      	movs	r1, r4
 8003cde:	f7ff f829 	bl	8002d34 <_ftoa>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
            format++;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61bb      	str	r3, [r7, #24]
            break;
 8003cec:	e150      	b.n	8003f90 <_vsnprintf+0x86c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        case 'e':
        case 'E':
        case 'g':
        case 'G':
            if ((*format == 'g') || (*format == 'G'))
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b67      	cmp	r3, #103	; 0x67
 8003cf4:	d003      	beq.n	8003cfe <_vsnprintf+0x5da>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b47      	cmp	r3, #71	; 0x47
 8003cfc:	d104      	bne.n	8003d08 <_vsnprintf+0x5e4>
                flags |= FLAGS_ADAPT_EXP;
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	4313      	orrs	r3, r2
 8003d06:	66fb      	str	r3, [r7, #108]	; 0x6c
            if ((*format == 'E') || (*format == 'G'))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b45      	cmp	r3, #69	; 0x45
 8003d0e:	d003      	beq.n	8003d18 <_vsnprintf+0x5f4>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b47      	cmp	r3, #71	; 0x47
 8003d16:	d103      	bne.n	8003d20 <_vsnprintf+0x5fc>
                flags |= FLAGS_UPPERCASE;
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
            idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003d20:	2388      	movs	r3, #136	; 0x88
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3307      	adds	r3, #7
 8003d28:	2207      	movs	r2, #7
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	3208      	adds	r2, #8
 8003d30:	2188      	movs	r1, #136	; 0x88
 8003d32:	1879      	adds	r1, r7, r1
 8003d34:	600a      	str	r2, [r1, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	69fe      	ldr	r6, [r7, #28]
 8003d3c:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8003d3e:	6a3c      	ldr	r4, [r7, #32]
 8003d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d42:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003d44:	9104      	str	r1, [sp, #16]
 8003d46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d48:	9103      	str	r1, [sp, #12]
 8003d4a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003d4c:	9102      	str	r1, [sp, #8]
 8003d4e:	9200      	str	r2, [sp, #0]
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	0033      	movs	r3, r6
 8003d54:	002a      	movs	r2, r5
 8003d56:	0021      	movs	r1, r4
 8003d58:	f7ff fa2a 	bl	80031b0 <_etoa>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
            format++;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
            break;
 8003d66:	e113      	b.n	8003f90 <_vsnprintf+0x86c>
#endif // PRINTF_SUPPORT_EXPONENTIAL
#endif // PRINTF_SUPPORT_FLOAT
        case 'c': {
            unsigned int l = 1U;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	657b      	str	r3, [r7, #84]	; 0x54
            // pre padding
            if (!(flags & FLAGS_LEFT)) {
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	2202      	movs	r2, #2
 8003d70:	4013      	ands	r3, r2
 8003d72:	d10e      	bne.n	8003d92 <_vsnprintf+0x66e>
                while (l++ < width) {
 8003d74:	e007      	b.n	8003d86 <_vsnprintf+0x662>
                    out(' ', buffer, idx++, maxlen);
 8003d76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d78:	1c53      	adds	r3, r2, #1
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	6a39      	ldr	r1, [r7, #32]
 8003d80:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003d82:	2020      	movs	r0, #32
 8003d84:	47a0      	blx	r4
                while (l++ < width) {
 8003d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	657a      	str	r2, [r7, #84]	; 0x54
 8003d8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d8f1      	bhi.n	8003d76 <_vsnprintf+0x652>
                }
            }
            // char output
            out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003d92:	2388      	movs	r3, #136	; 0x88
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	2188      	movs	r1, #136	; 0x88
 8003d9c:	1879      	adds	r1, r7, r1
 8003d9e:	600a      	str	r2, [r1, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b2d8      	uxtb	r0, r3
 8003da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003da6:	1c53      	adds	r3, r2, #1
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	6a39      	ldr	r1, [r7, #32]
 8003dae:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003db0:	47a0      	blx	r4
            // post padding
            if (flags & FLAGS_LEFT) {
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	2202      	movs	r2, #2
 8003db6:	4013      	ands	r3, r2
 8003db8:	d00e      	beq.n	8003dd8 <_vsnprintf+0x6b4>
                while (l++ < width) {
 8003dba:	e007      	b.n	8003dcc <_vsnprintf+0x6a8>
                    out(' ', buffer, idx++, maxlen);
 8003dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dbe:	1c53      	adds	r3, r2, #1
 8003dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003dc8:	2020      	movs	r0, #32
 8003dca:	47a0      	blx	r4
                while (l++ < width) {
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	657a      	str	r2, [r7, #84]	; 0x54
 8003dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d8f1      	bhi.n	8003dbc <_vsnprintf+0x698>
                }
            }
            format++;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
            break;
 8003dde:	e0d7      	b.n	8003f90 <_vsnprintf+0x86c>
        }

        case 's': {
            const char *p = va_arg(va, char *);
 8003de0:	2388      	movs	r3, #136	; 0x88
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	2188      	movs	r1, #136	; 0x88
 8003dea:	1879      	adds	r1, r7, r1
 8003dec:	600a      	str	r2, [r1, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	653b      	str	r3, [r7, #80]	; 0x50
            unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <_vsnprintf+0x6d8>
 8003df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dfa:	e001      	b.n	8003e00 <_vsnprintf+0x6dc>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	425b      	negs	r3, r3
 8003e00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e02:	0019      	movs	r1, r3
 8003e04:	0010      	movs	r0, r2
 8003e06:	f7fe fd3f 	bl	8002888 <_strnlen_s>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
            // pre padding
            if (flags & FLAGS_PRECISION) {
 8003e0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4013      	ands	r3, r2
 8003e16:	d005      	beq.n	8003e24 <_vsnprintf+0x700>
                l = (l < precision ? l : precision);
 8003e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d900      	bls.n	8003e22 <_vsnprintf+0x6fe>
 8003e20:	0013      	movs	r3, r2
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            if (!(flags & FLAGS_LEFT)) {
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	2202      	movs	r2, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d11a      	bne.n	8003e62 <_vsnprintf+0x73e>
                while (l++ < width) {
 8003e2c:	e007      	b.n	8003e3e <_vsnprintf+0x71a>
                    out(' ', buffer, idx++, maxlen);
 8003e2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e30:	1c53      	adds	r3, r2, #1
 8003e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	6a39      	ldr	r1, [r7, #32]
 8003e38:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003e3a:	2020      	movs	r0, #32
 8003e3c:	47a0      	blx	r4
                while (l++ < width) {
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d8f1      	bhi.n	8003e2e <_vsnprintf+0x70a>
                }
            }
            // string output
            while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003e4a:	e00a      	b.n	8003e62 <_vsnprintf+0x73e>
                out(*(p++), buffer, idx++, maxlen);
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	653a      	str	r2, [r7, #80]	; 0x50
 8003e52:	7818      	ldrb	r0, [r3, #0]
 8003e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e56:	1c53      	adds	r3, r2, #1
 8003e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003e60:	47a0      	blx	r4
            while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <_vsnprintf+0x75a>
 8003e6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4013      	ands	r3, r2
 8003e72:	d0eb      	beq.n	8003e4c <_vsnprintf+0x728>
 8003e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e76:	1e5a      	subs	r2, r3, #1
 8003e78:	667a      	str	r2, [r7, #100]	; 0x64
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <_vsnprintf+0x728>
            }
            // post padding
            if (flags & FLAGS_LEFT) {
 8003e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e80:	2202      	movs	r2, #2
 8003e82:	4013      	ands	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <_vsnprintf+0x780>
                while (l++ < width) {
 8003e86:	e007      	b.n	8003e98 <_vsnprintf+0x774>
                    out(' ', buffer, idx++, maxlen);
 8003e88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e8a:	1c53      	adds	r3, r2, #1
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	6a39      	ldr	r1, [r7, #32]
 8003e92:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003e94:	2020      	movs	r0, #32
 8003e96:	47a0      	blx	r4
                while (l++ < width) {
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8f1      	bhi.n	8003e88 <_vsnprintf+0x764>
                }
            }
            format++;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61bb      	str	r3, [r7, #24]
            break;
 8003eaa:	e071      	b.n	8003f90 <_vsnprintf+0x86c>
        }

        case 'p': {
            width = sizeof(void *) * 2U;
 8003eac:	2308      	movs	r3, #8
 8003eae:	66bb      	str	r3, [r7, #104]	; 0x68
            flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb2:	2221      	movs	r2, #33	; 0x21
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003eb8:	212b      	movs	r1, #43	; 0x2b
 8003eba:	2318      	movs	r3, #24
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	185b      	adds	r3, r3, r1
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
            if (is_ll) {
 8003ec4:	2318      	movs	r3, #24
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	185b      	adds	r3, r3, r1
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d025      	beq.n	8003f1c <_vsnprintf+0x7f8>
                idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void *), false, 16U,
 8003ed0:	2388      	movs	r3, #136	; 0x88
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	2188      	movs	r1, #136	; 0x88
 8003eda:	1879      	adds	r1, r7, r1
 8003edc:	600a      	str	r2, [r1, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	69fd      	ldr	r5, [r7, #28]
 8003ee8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003eea:	6a39      	ldr	r1, [r7, #32]
 8003eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef0:	9308      	str	r3, [sp, #32]
 8003ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef4:	9307      	str	r3, [sp, #28]
 8003ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef8:	9306      	str	r3, [sp, #24]
 8003efa:	2210      	movs	r2, #16
 8003efc:	2300      	movs	r3, #0
 8003efe:	9204      	str	r2, [sp, #16]
 8003f00:	9305      	str	r3, [sp, #20]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9200      	str	r2, [sp, #0]
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	002b      	movs	r3, r5
 8003f10:	0022      	movs	r2, r4
 8003f12:	f7fe fe9c 	bl	8002c4e <_ntoa_long_long>
 8003f16:	0003      	movs	r3, r0
 8003f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1a:	e01c      	b.n	8003f56 <_vsnprintf+0x832>
                                      precision, width, flags);
            } else {
#endif
                idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false,
 8003f1c:	2388      	movs	r3, #136	; 0x88
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	2188      	movs	r1, #136	; 0x88
 8003f26:	1879      	adds	r1, r7, r1
 8003f28:	600a      	str	r2, [r1, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	001d      	movs	r5, r3
 8003f2e:	69fc      	ldr	r4, [r7, #28]
 8003f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f32:	6a39      	ldr	r1, [r7, #32]
 8003f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	2310      	movs	r3, #16
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	9500      	str	r5, [sp, #0]
 8003f4c:	0023      	movs	r3, r4
 8003f4e:	f7fe fe15 	bl	8002b7c <_ntoa_long>
 8003f52:	0003      	movs	r3, r0
 8003f54:	65fb      	str	r3, [r7, #92]	; 0x5c
                                 16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
            }
#endif
            format++;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
            break;
 8003f5c:	e018      	b.n	8003f90 <_vsnprintf+0x86c>
        }

        case '%':
            out('%', buffer, idx++, maxlen);
 8003f5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f60:	1c53      	adds	r3, r2, #1
 8003f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f6a:	2025      	movs	r0, #37	; 0x25
 8003f6c:	47a0      	blx	r4
            format++;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61bb      	str	r3, [r7, #24]
            break;
 8003f74:	e00c      	b.n	8003f90 <_vsnprintf+0x86c>

        default:
            out(*format, buffer, idx++, maxlen);
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	7818      	ldrb	r0, [r3, #0]
 8003f7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f7c:	1c53      	adds	r3, r2, #1
 8003f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	6a39      	ldr	r1, [r7, #32]
 8003f84:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f86:	47a0      	blx	r4
            format++;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
            break;
 8003f8e:	46c0      	nop			; (mov r8, r8)
    while (*format) {
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <_vsnprintf+0x878>
 8003f98:	f7ff fbd8 	bl	800374c <_vsnprintf+0x28>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <_vsnprintf+0x886>
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	e000      	b.n	8003fac <_vsnprintf+0x888>
 8003faa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	6a39      	ldr	r1, [r7, #32]
 8003fb0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
 8003fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b01c      	add	sp, #112	; 0x70
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	46b8      	mov	r8, r7
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fc4 <printf_>:

///////////////////////////////////////////////////////////////////////////////

int printf_(const char *format, ...) {
 8003fc4:	b40f      	push	{r0, r1, r2, r3}
 8003fc6:	b590      	push	{r4, r7, lr}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af02      	add	r7, sp, #8
    va_list va;
    va_start(va, format);
 8003fcc:	2324      	movs	r3, #36	; 0x24
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	60bb      	str	r3, [r7, #8]
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003fd2:	6a3c      	ldr	r4, [r7, #32]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	425a      	negs	r2, r3
 8003fd8:	1d39      	adds	r1, r7, #4
 8003fda:	4808      	ldr	r0, [pc, #32]	; (8003ffc <printf_+0x38>)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	0023      	movs	r3, r4
 8003fe2:	f7ff fb9f 	bl	8003724 <_vsnprintf>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	60fb      	str	r3, [r7, #12]
    va_end(va);
    return ret;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b005      	add	sp, #20
 8003ff2:	bc90      	pop	{r4, r7}
 8003ff4:	bc08      	pop	{r3}
 8003ff6:	b004      	add	sp, #16
 8003ff8:	4718      	bx	r3
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	08002859 	.word	0x08002859

08004000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <HAL_MspInit+0x24>)
 8004006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_MspInit+0x24>)
 800400a:	2101      	movs	r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <HAL_MspInit+0x24>)
 8004012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <HAL_MspInit+0x24>)
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	0549      	lsls	r1, r1, #21
 800401a:	430a      	orrs	r2, r1
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	240c      	movs	r4, #12
 8004032:	193b      	adds	r3, r7, r4
 8004034:	0018      	movs	r0, r3
 8004036:	2314      	movs	r3, #20
 8004038:	001a      	movs	r2, r3
 800403a:	2100      	movs	r1, #0
 800403c:	f002 fdc4 	bl	8006bc8 <memset>
  if(hi2c->Instance==I2C2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <HAL_I2C_MspInit+0xac>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d13f      	bne.n	80040ca <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <HAL_I2C_MspInit+0xb0>)
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <HAL_I2C_MspInit+0xb0>)
 8004050:	2102      	movs	r1, #2
 8004052:	430a      	orrs	r2, r1
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_I2C_MspInit+0xb0>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	2202      	movs	r2, #2
 800405c:	4013      	ands	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004062:	193b      	adds	r3, r7, r4
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800406a:	193b      	adds	r3, r7, r4
 800406c:	2212      	movs	r2, #18
 800406e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	193b      	adds	r3, r7, r4
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004076:	193b      	adds	r3, r7, r4
 8004078:	2203      	movs	r2, #3
 800407a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800407c:	193b      	adds	r3, r7, r4
 800407e:	2206      	movs	r2, #6
 8004080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004082:	193b      	adds	r3, r7, r4
 8004084:	4a15      	ldr	r2, [pc, #84]	; (80040dc <HAL_I2C_MspInit+0xb4>)
 8004086:	0019      	movs	r1, r3
 8004088:	0010      	movs	r0, r2
 800408a:	f000 f9fb 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800408e:	0021      	movs	r1, r4
 8004090:	187b      	adds	r3, r7, r1
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	0192      	lsls	r2, r2, #6
 8004096:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004098:	187b      	adds	r3, r7, r1
 800409a:	2212      	movs	r2, #18
 800409c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	2203      	movs	r2, #3
 80040a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80040aa:	187b      	adds	r3, r7, r1
 80040ac:	2205      	movs	r2, #5
 80040ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_I2C_MspInit+0xb4>)
 80040b4:	0019      	movs	r1, r3
 80040b6:	0010      	movs	r0, r2
 80040b8:	f000 f9e4 	bl	8004484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_I2C_MspInit+0xb0>)
 80040be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_I2C_MspInit+0xb0>)
 80040c2:	2180      	movs	r1, #128	; 0x80
 80040c4:	03c9      	lsls	r1, r1, #15
 80040c6:	430a      	orrs	r2, r1
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b009      	add	sp, #36	; 0x24
 80040d0:	bd90      	pop	{r4, r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	40005800 	.word	0x40005800
 80040d8:	40021000 	.word	0x40021000
 80040dc:	50000400 	.word	0x50000400

080040e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	240c      	movs	r4, #12
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	0018      	movs	r0, r3
 80040ee:	2314      	movs	r3, #20
 80040f0:	001a      	movs	r2, r3
 80040f2:	2100      	movs	r1, #0
 80040f4:	f002 fd68 	bl	8006bc8 <memset>
  if(huart->Instance==USART1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_UART_MspInit+0x80>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d12a      	bne.n	8004158 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004102:	4b18      	ldr	r3, [pc, #96]	; (8004164 <HAL_UART_MspInit+0x84>)
 8004104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_UART_MspInit+0x84>)
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	01c9      	lsls	r1, r1, #7
 800410c:	430a      	orrs	r2, r1
 800410e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_UART_MspInit+0x84>)
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_UART_MspInit+0x84>)
 8004116:	2101      	movs	r1, #1
 8004118:	430a      	orrs	r2, r1
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_UART_MspInit+0x84>)
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004128:	193b      	adds	r3, r7, r4
 800412a:	22c0      	movs	r2, #192	; 0xc0
 800412c:	00d2      	lsls	r2, r2, #3
 800412e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004130:	0021      	movs	r1, r4
 8004132:	187b      	adds	r3, r7, r1
 8004134:	2202      	movs	r2, #2
 8004136:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004138:	187b      	adds	r3, r7, r1
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413e:	187b      	adds	r3, r7, r1
 8004140:	2203      	movs	r2, #3
 8004142:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004144:	187b      	adds	r3, r7, r1
 8004146:	2204      	movs	r2, #4
 8004148:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414a:	187a      	adds	r2, r7, r1
 800414c:	23a0      	movs	r3, #160	; 0xa0
 800414e:	05db      	lsls	r3, r3, #23
 8004150:	0011      	movs	r1, r2
 8004152:	0018      	movs	r0, r3
 8004154:	f000 f996 	bl	8004484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	b009      	add	sp, #36	; 0x24
 800415e:	bd90      	pop	{r4, r7, pc}
 8004160:	40013800 	.word	0x40013800
 8004164:	40021000 	.word	0x40021000

08004168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800416c:	e7fe      	b.n	800416c <NMI_Handler+0x4>

0800416e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <HardFault_Handler+0x4>

08004174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800418c:	f000 f886 	bl	800429c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80041a0:	480d      	ldr	r0, [pc, #52]	; (80041d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80041a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041a4:	480d      	ldr	r0, [pc, #52]	; (80041dc <LoopForever+0x6>)
  ldr r1, =_edata
 80041a6:	490e      	ldr	r1, [pc, #56]	; (80041e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <LoopForever+0xe>)
  movs r3, #0
 80041aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041ac:	e002      	b.n	80041b4 <LoopCopyDataInit>

080041ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041b2:	3304      	adds	r3, #4

080041b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041b8:	d3f9      	bcc.n	80041ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ba:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041bc:	4c0b      	ldr	r4, [pc, #44]	; (80041ec <LoopForever+0x16>)
  movs r3, #0
 80041be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041c0:	e001      	b.n	80041c6 <LoopFillZerobss>

080041c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041c4:	3204      	adds	r2, #4

080041c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041c8:	d3fb      	bcc.n	80041c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80041ca:	f7ff ffe4 	bl	8004196 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ce:	f002 fcd7 	bl	8006b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041d2:	f7fe f939 	bl	8002448 <main>

080041d6 <LoopForever>:

LoopForever:
    b LoopForever
 80041d6:	e7fe      	b.n	80041d6 <LoopForever>
   ldr   r0, =_estack
 80041d8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80041dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80041e4:	080071e4 	.word	0x080071e4
  ldr r2, =_sbss
 80041e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80041ec:	20000100 	.word	0x20000100

080041f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041f0:	e7fe      	b.n	80041f0 <ADC1_COMP_IRQHandler>
	...

080041f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_Init+0x3c>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_Init+0x3c>)
 8004206:	2140      	movs	r1, #64	; 0x40
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800420c:	2003      	movs	r0, #3
 800420e:	f000 f811 	bl	8004234 <HAL_InitTick>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d003      	beq.n	800421e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004216:	1dfb      	adds	r3, r7, #7
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e001      	b.n	8004222 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800421e:	f7ff feef 	bl	8004000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004222:	1dfb      	adds	r3, r7, #7
 8004224:	781b      	ldrb	r3, [r3, #0]
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b002      	add	sp, #8
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	40022000 	.word	0x40022000

08004234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_InitTick+0x5c>)
 800423e:	681c      	ldr	r4, [r3, #0]
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <HAL_InitTick+0x60>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	0019      	movs	r1, r3
 8004246:	23fa      	movs	r3, #250	; 0xfa
 8004248:	0098      	lsls	r0, r3, #2
 800424a:	f7fb ff5d 	bl	8000108 <__udivsi3>
 800424e:	0003      	movs	r3, r0
 8004250:	0019      	movs	r1, r3
 8004252:	0020      	movs	r0, r4
 8004254:	f7fb ff58 	bl	8000108 <__udivsi3>
 8004258:	0003      	movs	r3, r0
 800425a:	0018      	movs	r0, r3
 800425c:	f000 f905 	bl	800446a <HAL_SYSTICK_Config>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d001      	beq.n	8004268 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e00f      	b.n	8004288 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b03      	cmp	r3, #3
 800426c:	d80b      	bhi.n	8004286 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	2301      	movs	r3, #1
 8004272:	425b      	negs	r3, r3
 8004274:	2200      	movs	r2, #0
 8004276:	0018      	movs	r0, r3
 8004278:	f000 f8e2 	bl	8004440 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_InitTick+0x64>)
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e000      	b.n	8004288 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	b003      	add	sp, #12
 800428e:	bd90      	pop	{r4, r7, pc}
 8004290:	20000000 	.word	0x20000000
 8004294:	20000008 	.word	0x20000008
 8004298:	20000004 	.word	0x20000004

0800429c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_IncTick+0x1c>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	001a      	movs	r2, r3
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_IncTick+0x20>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	18d2      	adds	r2, r2, r3
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <HAL_IncTick+0x20>)
 80042ae:	601a      	str	r2, [r3, #0]
}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	20000008 	.word	0x20000008
 80042bc:	200000fc 	.word	0x200000fc

080042c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  return uwTick;
 80042c4:	4b02      	ldr	r3, [pc, #8]	; (80042d0 <HAL_GetTick+0x10>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	200000fc 	.word	0x200000fc

080042d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7ff fff0 	bl	80042c0 <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3301      	adds	r3, #1
 80042ec:	d005      	beq.n	80042fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_Delay+0x44>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	001a      	movs	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	f7ff ffe0 	bl	80042c0 <HAL_GetTick>
 8004300:	0002      	movs	r2, r0
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	429a      	cmp	r2, r3
 800430a:	d8f7      	bhi.n	80042fc <HAL_Delay+0x28>
  {
  }
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b004      	add	sp, #16
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	20000008 	.word	0x20000008

0800431c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	0002      	movs	r2, r0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	1dfb      	adds	r3, r7, #7
 8004328:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b7f      	cmp	r3, #127	; 0x7f
 8004330:	d828      	bhi.n	8004384 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004332:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <__NVIC_SetPriority+0xd4>)
 8004334:	1dfb      	adds	r3, r7, #7
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b25b      	sxtb	r3, r3
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	33c0      	adds	r3, #192	; 0xc0
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	589b      	ldr	r3, [r3, r2]
 8004342:	1dfa      	adds	r2, r7, #7
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	0011      	movs	r1, r2
 8004348:	2203      	movs	r2, #3
 800434a:	400a      	ands	r2, r1
 800434c:	00d2      	lsls	r2, r2, #3
 800434e:	21ff      	movs	r1, #255	; 0xff
 8004350:	4091      	lsls	r1, r2
 8004352:	000a      	movs	r2, r1
 8004354:	43d2      	mvns	r2, r2
 8004356:	401a      	ands	r2, r3
 8004358:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	22ff      	movs	r2, #255	; 0xff
 8004360:	401a      	ands	r2, r3
 8004362:	1dfb      	adds	r3, r7, #7
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	0018      	movs	r0, r3
 8004368:	2303      	movs	r3, #3
 800436a:	4003      	ands	r3, r0
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004370:	481f      	ldr	r0, [pc, #124]	; (80043f0 <__NVIC_SetPriority+0xd4>)
 8004372:	1dfb      	adds	r3, r7, #7
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b25b      	sxtb	r3, r3
 8004378:	089b      	lsrs	r3, r3, #2
 800437a:	430a      	orrs	r2, r1
 800437c:	33c0      	adds	r3, #192	; 0xc0
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004382:	e031      	b.n	80043e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <__NVIC_SetPriority+0xd8>)
 8004386:	1dfb      	adds	r3, r7, #7
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	0019      	movs	r1, r3
 800438c:	230f      	movs	r3, #15
 800438e:	400b      	ands	r3, r1
 8004390:	3b08      	subs	r3, #8
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	3306      	adds	r3, #6
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	18d3      	adds	r3, r2, r3
 800439a:	3304      	adds	r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	1dfa      	adds	r2, r7, #7
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	0011      	movs	r1, r2
 80043a4:	2203      	movs	r2, #3
 80043a6:	400a      	ands	r2, r1
 80043a8:	00d2      	lsls	r2, r2, #3
 80043aa:	21ff      	movs	r1, #255	; 0xff
 80043ac:	4091      	lsls	r1, r2
 80043ae:	000a      	movs	r2, r1
 80043b0:	43d2      	mvns	r2, r2
 80043b2:	401a      	ands	r2, r3
 80043b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	22ff      	movs	r2, #255	; 0xff
 80043bc:	401a      	ands	r2, r3
 80043be:	1dfb      	adds	r3, r7, #7
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	0018      	movs	r0, r3
 80043c4:	2303      	movs	r3, #3
 80043c6:	4003      	ands	r3, r0
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043cc:	4809      	ldr	r0, [pc, #36]	; (80043f4 <__NVIC_SetPriority+0xd8>)
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	001c      	movs	r4, r3
 80043d4:	230f      	movs	r3, #15
 80043d6:	4023      	ands	r3, r4
 80043d8:	3b08      	subs	r3, #8
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	430a      	orrs	r2, r1
 80043de:	3306      	adds	r3, #6
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	18c3      	adds	r3, r0, r3
 80043e4:	3304      	adds	r3, #4
 80043e6:	601a      	str	r2, [r3, #0]
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b003      	add	sp, #12
 80043ee:	bd90      	pop	{r4, r7, pc}
 80043f0:	e000e100 	.word	0xe000e100
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	1e5a      	subs	r2, r3, #1
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	045b      	lsls	r3, r3, #17
 8004408:	429a      	cmp	r2, r3
 800440a:	d301      	bcc.n	8004410 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800440c:	2301      	movs	r3, #1
 800440e:	e010      	b.n	8004432 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <SysTick_Config+0x44>)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	3a01      	subs	r2, #1
 8004416:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004418:	2301      	movs	r3, #1
 800441a:	425b      	negs	r3, r3
 800441c:	2103      	movs	r1, #3
 800441e:	0018      	movs	r0, r3
 8004420:	f7ff ff7c 	bl	800431c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <SysTick_Config+0x44>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442a:	4b04      	ldr	r3, [pc, #16]	; (800443c <SysTick_Config+0x44>)
 800442c:	2207      	movs	r2, #7
 800442e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004430:	2300      	movs	r3, #0
}
 8004432:	0018      	movs	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	b002      	add	sp, #8
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	e000e010 	.word	0xe000e010

08004440 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	210f      	movs	r1, #15
 800444c:	187b      	adds	r3, r7, r1
 800444e:	1c02      	adds	r2, r0, #0
 8004450:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	187b      	adds	r3, r7, r1
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b25b      	sxtb	r3, r3
 800445a:	0011      	movs	r1, r2
 800445c:	0018      	movs	r0, r3
 800445e:	f7ff ff5d 	bl	800431c <__NVIC_SetPriority>
}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b004      	add	sp, #16
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f7ff ffbf 	bl	80043f8 <SysTick_Config>
 800447a:	0003      	movs	r3, r0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800449a:	e155      	b.n	8004748 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4091      	lsls	r1, r2
 80044a6:	000a      	movs	r2, r1
 80044a8:	4013      	ands	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d100      	bne.n	80044b4 <HAL_GPIO_Init+0x30>
 80044b2:	e146      	b.n	8004742 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2203      	movs	r2, #3
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d005      	beq.n	80044cc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2203      	movs	r2, #3
 80044c6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d130      	bne.n	800452e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2203      	movs	r2, #3
 80044d8:	409a      	lsls	r2, r3
 80044da:	0013      	movs	r3, r2
 80044dc:	43da      	mvns	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4013      	ands	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	409a      	lsls	r2, r3
 80044ee:	0013      	movs	r3, r2
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004502:	2201      	movs	r2, #1
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	409a      	lsls	r2, r3
 8004508:	0013      	movs	r3, r2
 800450a:	43da      	mvns	r2, r3
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	2201      	movs	r2, #1
 800451a:	401a      	ands	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	409a      	lsls	r2, r3
 8004520:	0013      	movs	r3, r2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2203      	movs	r2, #3
 8004534:	4013      	ands	r3, r2
 8004536:	2b03      	cmp	r3, #3
 8004538:	d017      	beq.n	800456a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	2203      	movs	r2, #3
 8004546:	409a      	lsls	r2, r3
 8004548:	0013      	movs	r3, r2
 800454a:	43da      	mvns	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	0013      	movs	r3, r2
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2203      	movs	r2, #3
 8004570:	4013      	ands	r3, r2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d123      	bne.n	80045be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	08da      	lsrs	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3208      	adds	r2, #8
 800457e:	0092      	lsls	r2, r2, #2
 8004580:	58d3      	ldr	r3, [r2, r3]
 8004582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2207      	movs	r2, #7
 8004588:	4013      	ands	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	220f      	movs	r2, #15
 800458e:	409a      	lsls	r2, r3
 8004590:	0013      	movs	r3, r2
 8004592:	43da      	mvns	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2107      	movs	r1, #7
 80045a2:	400b      	ands	r3, r1
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	409a      	lsls	r2, r3
 80045a8:	0013      	movs	r3, r2
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	08da      	lsrs	r2, r3, #3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3208      	adds	r2, #8
 80045b8:	0092      	lsls	r2, r2, #2
 80045ba:	6939      	ldr	r1, [r7, #16]
 80045bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	2203      	movs	r2, #3
 80045ca:	409a      	lsls	r2, r3
 80045cc:	0013      	movs	r3, r2
 80045ce:	43da      	mvns	r2, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2203      	movs	r2, #3
 80045dc:	401a      	ands	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	0013      	movs	r3, r2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	23c0      	movs	r3, #192	; 0xc0
 80045f8:	029b      	lsls	r3, r3, #10
 80045fa:	4013      	ands	r3, r2
 80045fc:	d100      	bne.n	8004600 <HAL_GPIO_Init+0x17c>
 80045fe:	e0a0      	b.n	8004742 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004600:	4b57      	ldr	r3, [pc, #348]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 8004602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004604:	4b56      	ldr	r3, [pc, #344]	; (8004760 <HAL_GPIO_Init+0x2dc>)
 8004606:	2101      	movs	r1, #1
 8004608:	430a      	orrs	r2, r1
 800460a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800460c:	4a55      	ldr	r2, [pc, #340]	; (8004764 <HAL_GPIO_Init+0x2e0>)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	3302      	adds	r3, #2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	589b      	ldr	r3, [r3, r2]
 8004618:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2203      	movs	r2, #3
 800461e:	4013      	ands	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	220f      	movs	r2, #15
 8004624:	409a      	lsls	r2, r3
 8004626:	0013      	movs	r3, r2
 8004628:	43da      	mvns	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	23a0      	movs	r3, #160	; 0xa0
 8004634:	05db      	lsls	r3, r3, #23
 8004636:	429a      	cmp	r2, r3
 8004638:	d01f      	beq.n	800467a <HAL_GPIO_Init+0x1f6>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a4a      	ldr	r2, [pc, #296]	; (8004768 <HAL_GPIO_Init+0x2e4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d019      	beq.n	8004676 <HAL_GPIO_Init+0x1f2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a49      	ldr	r2, [pc, #292]	; (800476c <HAL_GPIO_Init+0x2e8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_GPIO_Init+0x1ee>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a48      	ldr	r2, [pc, #288]	; (8004770 <HAL_GPIO_Init+0x2ec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00d      	beq.n	800466e <HAL_GPIO_Init+0x1ea>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a47      	ldr	r2, [pc, #284]	; (8004774 <HAL_GPIO_Init+0x2f0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <HAL_GPIO_Init+0x1e6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a46      	ldr	r2, [pc, #280]	; (8004778 <HAL_GPIO_Init+0x2f4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <HAL_GPIO_Init+0x1e2>
 8004662:	2305      	movs	r3, #5
 8004664:	e00a      	b.n	800467c <HAL_GPIO_Init+0x1f8>
 8004666:	2306      	movs	r3, #6
 8004668:	e008      	b.n	800467c <HAL_GPIO_Init+0x1f8>
 800466a:	2304      	movs	r3, #4
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x1f8>
 800466e:	2303      	movs	r3, #3
 8004670:	e004      	b.n	800467c <HAL_GPIO_Init+0x1f8>
 8004672:	2302      	movs	r3, #2
 8004674:	e002      	b.n	800467c <HAL_GPIO_Init+0x1f8>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x1f8>
 800467a:	2300      	movs	r3, #0
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	2103      	movs	r1, #3
 8004680:	400a      	ands	r2, r1
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	4093      	lsls	r3, r2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468c:	4935      	ldr	r1, [pc, #212]	; (8004764 <HAL_GPIO_Init+0x2e0>)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	3302      	adds	r3, #2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800469a:	4b38      	ldr	r3, [pc, #224]	; (800477c <HAL_GPIO_Init+0x2f8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	43da      	mvns	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	025b      	lsls	r3, r3, #9
 80046b2:	4013      	ands	r3, r2
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80046be:	4b2f      	ldr	r3, [pc, #188]	; (800477c <HAL_GPIO_Init+0x2f8>)
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80046c4:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_GPIO_Init+0x2f8>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	43da      	mvns	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	029b      	lsls	r3, r3, #10
 80046dc:	4013      	ands	r3, r2
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80046e8:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_GPIO_Init+0x2f8>)
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ee:	4b23      	ldr	r3, [pc, #140]	; (800477c <HAL_GPIO_Init+0x2f8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43da      	mvns	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	035b      	lsls	r3, r3, #13
 8004706:	4013      	ands	r3, r2
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_GPIO_Init+0x2f8>)
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004718:	4b18      	ldr	r3, [pc, #96]	; (800477c <HAL_GPIO_Init+0x2f8>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43da      	mvns	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	039b      	lsls	r3, r3, #14
 8004730:	4013      	ands	r3, r2
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_GPIO_Init+0x2f8>)
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	3301      	adds	r3, #1
 8004746:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	40da      	lsrs	r2, r3
 8004750:	1e13      	subs	r3, r2, #0
 8004752:	d000      	beq.n	8004756 <HAL_GPIO_Init+0x2d2>
 8004754:	e6a2      	b.n	800449c <HAL_GPIO_Init+0x18>
  }
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b006      	add	sp, #24
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	40010000 	.word	0x40010000
 8004768:	50000400 	.word	0x50000400
 800476c:	50000800 	.word	0x50000800
 8004770:	50000c00 	.word	0x50000c00
 8004774:	50001000 	.word	0x50001000
 8004778:	50001c00 	.word	0x50001c00
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	0008      	movs	r0, r1
 800478a:	0011      	movs	r1, r2
 800478c:	1cbb      	adds	r3, r7, #2
 800478e:	1c02      	adds	r2, r0, #0
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	1c7b      	adds	r3, r7, #1
 8004794:	1c0a      	adds	r2, r1, #0
 8004796:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004798:	1c7b      	adds	r3, r7, #1
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047a0:	1cbb      	adds	r3, r7, #2
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80047a8:	e003      	b.n	80047b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80047aa:	1cbb      	adds	r3, r7, #2
 80047ac:	881a      	ldrh	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b002      	add	sp, #8
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	000a      	movs	r2, r1
 80047c4:	1cbb      	adds	r3, r7, #2
 80047c6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047ce:	1cbb      	adds	r3, r7, #2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4013      	ands	r3, r2
 80047d6:	041a      	lsls	r2, r3, #16
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	43db      	mvns	r3, r3
 80047dc:	1cb9      	adds	r1, r7, #2
 80047de:	8809      	ldrh	r1, [r1, #0]
 80047e0:	400b      	ands	r3, r1
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	619a      	str	r2, [r3, #24]
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b004      	add	sp, #16
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e082      	b.n	8004908 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2241      	movs	r2, #65	; 0x41
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f7ff fc05 	bl	8004028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2241      	movs	r2, #65	; 0x41
 8004822:	2124      	movs	r1, #36	; 0x24
 8004824:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	438a      	bics	r2, r1
 8004834:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4934      	ldr	r1, [pc, #208]	; (8004910 <HAL_I2C_Init+0x120>)
 8004840:	400a      	ands	r2, r1
 8004842:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4931      	ldr	r1, [pc, #196]	; (8004914 <HAL_I2C_Init+0x124>)
 8004850:	400a      	ands	r2, r1
 8004852:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d108      	bne.n	800486e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2180      	movs	r1, #128	; 0x80
 8004866:	0209      	lsls	r1, r1, #8
 8004868:	430a      	orrs	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	e007      	b.n	800487e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2184      	movs	r1, #132	; 0x84
 8004878:	0209      	lsls	r1, r1, #8
 800487a:	430a      	orrs	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d104      	bne.n	8004890 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2280      	movs	r2, #128	; 0x80
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	491f      	ldr	r1, [pc, #124]	; (8004918 <HAL_I2C_Init+0x128>)
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	491a      	ldr	r1, [pc, #104]	; (8004914 <HAL_I2C_Init+0x124>)
 80048ac:	400a      	ands	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69d9      	ldr	r1, [r3, #28]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2241      	movs	r2, #65	; 0x41
 80048f4:	2120      	movs	r1, #32
 80048f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2242      	movs	r2, #66	; 0x42
 8004902:	2100      	movs	r1, #0
 8004904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}
 8004910:	f0ffffff 	.word	0xf0ffffff
 8004914:	ffff7fff 	.word	0xffff7fff
 8004918:	02008000 	.word	0x02008000

0800491c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b089      	sub	sp, #36	; 0x24
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	000c      	movs	r4, r1
 8004926:	0010      	movs	r0, r2
 8004928:	0019      	movs	r1, r3
 800492a:	230a      	movs	r3, #10
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	1c22      	adds	r2, r4, #0
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	2308      	movs	r3, #8
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	1c02      	adds	r2, r0, #0
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	1dbb      	adds	r3, r7, #6
 800493c:	1c0a      	adds	r2, r1, #0
 800493e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2241      	movs	r2, #65	; 0x41
 8004944:	5c9b      	ldrb	r3, [r3, r2]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b20      	cmp	r3, #32
 800494a:	d000      	beq.n	800494e <HAL_I2C_Mem_Read+0x32>
 800494c:	e110      	b.n	8004b70 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <HAL_I2C_Mem_Read+0x42>
 8004954:	232c      	movs	r3, #44	; 0x2c
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d105      	bne.n	800496a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	0092      	lsls	r2, r2, #2
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e103      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	5c9b      	ldrb	r3, [r3, r2]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_I2C_Mem_Read+0x5c>
 8004974:	2302      	movs	r3, #2
 8004976:	e0fc      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	2101      	movs	r1, #1
 800497e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004980:	f7ff fc9e 	bl	80042c0 <HAL_GetTick>
 8004984:	0003      	movs	r3, r0
 8004986:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	0219      	lsls	r1, r3, #8
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2319      	movs	r3, #25
 8004994:	2201      	movs	r2, #1
 8004996:	f000 fa93 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0e7      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2241      	movs	r2, #65	; 0x41
 80049a6:	2122      	movs	r1, #34	; 0x22
 80049a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2242      	movs	r2, #66	; 0x42
 80049ae:	2140      	movs	r1, #64	; 0x40
 80049b0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	222c      	movs	r2, #44	; 0x2c
 80049c2:	18ba      	adds	r2, r7, r2
 80049c4:	8812      	ldrh	r2, [r2, #0]
 80049c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ce:	1dbb      	adds	r3, r7, #6
 80049d0:	881c      	ldrh	r4, [r3, #0]
 80049d2:	2308      	movs	r3, #8
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	230a      	movs	r3, #10
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	8819      	ldrh	r1, [r3, #0]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	0023      	movs	r3, r4
 80049ea:	f000 f9e5 	bl	8004db8 <I2C_RequestMemoryRead>
 80049ee:	1e03      	subs	r3, r0, #0
 80049f0:	d005      	beq.n	80049fe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2240      	movs	r2, #64	; 0x40
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0b9      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2bff      	cmp	r3, #255	; 0xff
 8004a06:	d911      	bls.n	8004a2c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	22ff      	movs	r2, #255	; 0xff
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	045c      	lsls	r4, r3, #17
 8004a18:	230a      	movs	r3, #10
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	8819      	ldrh	r1, [r3, #0]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	4b56      	ldr	r3, [pc, #344]	; (8004b7c <HAL_I2C_Mem_Read+0x260>)
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	0023      	movs	r3, r4
 8004a26:	f000 fb7f 	bl	8005128 <I2C_TransferConfig>
 8004a2a:	e012      	b.n	8004a52 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	049c      	lsls	r4, r3, #18
 8004a40:	230a      	movs	r3, #10
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	8819      	ldrh	r1, [r3, #0]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	4b4c      	ldr	r3, [pc, #304]	; (8004b7c <HAL_I2C_Mem_Read+0x260>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	0023      	movs	r3, r4
 8004a4e:	f000 fb6b 	bl	8005128 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	0013      	movs	r3, r2
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2104      	movs	r1, #4
 8004a60:	f000 fa2e 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004a64:	1e03      	subs	r3, r0, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e082      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03a      	beq.n	8004b1e <HAL_I2C_Mem_Read+0x202>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d136      	bne.n	8004b1e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	0013      	movs	r3, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	f000 f9ff 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004ac2:	1e03      	subs	r3, r0, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e053      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2bff      	cmp	r3, #255	; 0xff
 8004ad2:	d911      	bls.n	8004af8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	22ff      	movs	r2, #255	; 0xff
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	045c      	lsls	r4, r3, #17
 8004ae4:	230a      	movs	r3, #10
 8004ae6:	18fb      	adds	r3, r7, r3
 8004ae8:	8819      	ldrh	r1, [r3, #0]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	2300      	movs	r3, #0
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	0023      	movs	r3, r4
 8004af2:	f000 fb19 	bl	8005128 <I2C_TransferConfig>
 8004af6:	e012      	b.n	8004b1e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	049c      	lsls	r4, r3, #18
 8004b0c:	230a      	movs	r3, #10
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	8819      	ldrh	r1, [r3, #0]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	2300      	movs	r3, #0
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	0023      	movs	r3, r4
 8004b1a:	f000 fb05 	bl	8005128 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d194      	bne.n	8004a52 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 fa44 	bl	8004fbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e01a      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2220      	movs	r2, #32
 8004b42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	490c      	ldr	r1, [pc, #48]	; (8004b80 <HAL_I2C_Mem_Read+0x264>)
 8004b50:	400a      	ands	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2241      	movs	r2, #65	; 0x41
 8004b58:	2120      	movs	r1, #32
 8004b5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2242      	movs	r2, #66	; 0x42
 8004b60:	2100      	movs	r1, #0
 8004b62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2240      	movs	r2, #64	; 0x40
 8004b68:	2100      	movs	r1, #0
 8004b6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b007      	add	sp, #28
 8004b78:	bd90      	pop	{r4, r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	80002400 	.word	0x80002400
 8004b80:	fe00e800 	.word	0xfe00e800

08004b84 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	230a      	movs	r3, #10
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	1c0a      	adds	r2, r1, #0
 8004b96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2241      	movs	r2, #65	; 0x41
 8004ba0:	5c9b      	ldrb	r3, [r3, r2]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d000      	beq.n	8004baa <HAL_I2C_IsDeviceReady+0x26>
 8004ba8:	e0fe      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	401a      	ands	r2, r3
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e0f3      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2240      	movs	r2, #64	; 0x40
 8004bc6:	5c9b      	ldrb	r3, [r3, r2]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_I2C_IsDeviceReady+0x4c>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e0ec      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2241      	movs	r2, #65	; 0x41
 8004bdc:	2124      	movs	r1, #36	; 0x24
 8004bde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d107      	bne.n	8004bfe <HAL_I2C_IsDeviceReady+0x7a>
 8004bee:	230a      	movs	r3, #10
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	059b      	lsls	r3, r3, #22
 8004bf6:	0d9b      	lsrs	r3, r3, #22
 8004bf8:	4a6e      	ldr	r2, [pc, #440]	; (8004db4 <HAL_I2C_IsDeviceReady+0x230>)
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	e007      	b.n	8004c0e <HAL_I2C_IsDeviceReady+0x8a>
 8004bfe:	230a      	movs	r3, #10
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	059b      	lsls	r3, r3, #22
 8004c06:	0d9b      	lsrs	r3, r3, #22
 8004c08:	22a0      	movs	r2, #160	; 0xa0
 8004c0a:	0192      	lsls	r2, r2, #6
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c14:	f7ff fb54 	bl	80042c0 <HAL_GetTick>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2220      	movs	r2, #32
 8004c24:	4013      	ands	r3, r2
 8004c26:	3b20      	subs	r3, #32
 8004c28:	425a      	negs	r2, r3
 8004c2a:	4153      	adcs	r3, r2
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	231f      	movs	r3, #31
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	3b10      	subs	r3, #16
 8004c40:	425a      	negs	r2, r3
 8004c42:	4153      	adcs	r3, r2
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	231e      	movs	r3, #30
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c4c:	e035      	b.n	8004cba <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	d01a      	beq.n	8004c8a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c54:	f7ff fb34 	bl	80042c0 <HAL_GetTick>
 8004c58:	0002      	movs	r2, r0
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d302      	bcc.n	8004c6a <HAL_I2C_IsDeviceReady+0xe6>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2241      	movs	r2, #65	; 0x41
 8004c6e:	2120      	movs	r1, #32
 8004c70:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	2220      	movs	r2, #32
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2240      	movs	r2, #64	; 0x40
 8004c82:	2100      	movs	r1, #0
 8004c84:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e08f      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2220      	movs	r2, #32
 8004c92:	4013      	ands	r3, r2
 8004c94:	3b20      	subs	r3, #32
 8004c96:	425a      	negs	r2, r3
 8004c98:	4153      	adcs	r3, r2
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	231f      	movs	r3, #31
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2210      	movs	r2, #16
 8004caa:	4013      	ands	r3, r2
 8004cac:	3b10      	subs	r3, #16
 8004cae:	425a      	negs	r2, r3
 8004cb0:	4153      	adcs	r3, r2
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	231e      	movs	r3, #30
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004cba:	231f      	movs	r3, #31
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_I2C_IsDeviceReady+0x14a>
 8004cc4:	231e      	movs	r3, #30
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0bf      	beq.n	8004c4e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d01a      	beq.n	8004d12 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	0013      	movs	r3, r2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2120      	movs	r1, #32
 8004cea:	f000 f8e9 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004cee:	1e03      	subs	r3, r0, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e059      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2241      	movs	r2, #65	; 0x41
 8004d02:	2120      	movs	r1, #32
 8004d04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2240      	movs	r2, #64	; 0x40
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e04b      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	0013      	movs	r3, r2
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2120      	movs	r1, #32
 8004d20:	f000 f8ce 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004d24:	1e03      	subs	r3, r0, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e03e      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2210      	movs	r2, #16
 8004d32:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d119      	bne.n	8004d78 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	01c9      	lsls	r1, r1, #7
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	0013      	movs	r3, r2
 8004d60:	2200      	movs	r2, #0
 8004d62:	2120      	movs	r1, #32
 8004d64:	f000 f8ac 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004d68:	1e03      	subs	r3, r0, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e01c      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2220      	movs	r2, #32
 8004d76:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d900      	bls.n	8004d88 <HAL_I2C_IsDeviceReady+0x204>
 8004d86:	e72e      	b.n	8004be6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2241      	movs	r2, #65	; 0x41
 8004d8c:	2120      	movs	r1, #32
 8004d8e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	2220      	movs	r2, #32
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b008      	add	sp, #32
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	02002000 	.word	0x02002000

08004db8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004db8:	b5b0      	push	{r4, r5, r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	000c      	movs	r4, r1
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	250a      	movs	r5, #10
 8004dc8:	197b      	adds	r3, r7, r5
 8004dca:	1c22      	adds	r2, r4, #0
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	2308      	movs	r3, #8
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	1c02      	adds	r2, r0, #0
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	1dbb      	adds	r3, r7, #6
 8004dd8:	1c0a      	adds	r2, r1, #0
 8004dda:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ddc:	1dbb      	adds	r3, r7, #6
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	197b      	adds	r3, r7, r5
 8004de4:	8819      	ldrh	r1, [r3, #0]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <I2C_RequestMemoryRead+0xc0>)
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	f000 f99b 	bl	8005128 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df4:	6a39      	ldr	r1, [r7, #32]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 f8a0 	bl	8004f3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e033      	b.n	8004e6e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e06:	1dbb      	adds	r3, r7, #6
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d107      	bne.n	8004e1e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0e:	2308      	movs	r3, #8
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1c:	e019      	b.n	8004e52 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e1e:	2308      	movs	r3, #8
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	6a39      	ldr	r1, [r7, #32]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 f881 	bl	8004f3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e3c:	1e03      	subs	r3, r0, #0
 8004e3e:	d001      	beq.n	8004e44 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e014      	b.n	8004e6e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e44:	2308      	movs	r3, #8
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	0013      	movs	r3, r2
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2140      	movs	r1, #64	; 0x40
 8004e60:	f000 f82e 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004e64:	1e03      	subs	r3, r0, #0
 8004e66:	d001      	beq.n	8004e6c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b004      	add	sp, #16
 8004e74:	bdb0      	pop	{r4, r5, r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	80002000 	.word	0x80002000

08004e7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d007      	beq.n	8004eb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
  }
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	1dfb      	adds	r3, r7, #7
 8004ece:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed0:	e021      	b.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	d01e      	beq.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed8:	f7ff f9f2 	bl	80042c0 <HAL_GetTick>
 8004edc:	0002      	movs	r2, r0
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d302      	bcc.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d113      	bne.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2241      	movs	r2, #65	; 0x41
 8004efe:	2120      	movs	r1, #32
 8004f00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2242      	movs	r2, #66	; 0x42
 8004f06:	2100      	movs	r1, #0
 8004f08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2240      	movs	r2, #64	; 0x40
 8004f0e:	2100      	movs	r1, #0
 8004f10:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	425a      	negs	r2, r3
 8004f26:	4153      	adcs	r3, r2
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d0ce      	beq.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f4a:	e02b      	b.n	8004fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 f86e 	bl	8005034 <I2C_IsAcknowledgeFailed>
 8004f58:	1e03      	subs	r3, r0, #0
 8004f5a:	d001      	beq.n	8004f60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e029      	b.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3301      	adds	r3, #1
 8004f64:	d01e      	beq.n	8004fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7ff f9ab 	bl	80042c0 <HAL_GetTick>
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d113      	bne.n	8004fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	2220      	movs	r2, #32
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2241      	movs	r2, #65	; 0x41
 8004f8c:	2120      	movs	r1, #32
 8004f8e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2242      	movs	r2, #66	; 0x42
 8004f94:	2100      	movs	r1, #0
 8004f96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e007      	b.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2202      	movs	r2, #2
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d1cc      	bne.n	8004f4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b004      	add	sp, #16
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fc8:	e028      	b.n	800501c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 f82f 	bl	8005034 <I2C_IsAcknowledgeFailed>
 8004fd6:	1e03      	subs	r3, r0, #0
 8004fd8:	d001      	beq.n	8004fde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e026      	b.n	800502c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7ff f96f 	bl	80042c0 <HAL_GetTick>
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d113      	bne.n	800501c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2241      	movs	r2, #65	; 0x41
 8005004:	2120      	movs	r1, #32
 8005006:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2242      	movs	r2, #66	; 0x42
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	2100      	movs	r1, #0
 8005016:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e007      	b.n	800502c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2220      	movs	r2, #32
 8005024:	4013      	ands	r3, r2
 8005026:	2b20      	cmp	r3, #32
 8005028:	d1cf      	bne.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2210      	movs	r2, #16
 8005048:	4013      	ands	r3, r2
 800504a:	2b10      	cmp	r3, #16
 800504c:	d164      	bne.n	8005118 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	049b      	lsls	r3, r3, #18
 8005058:	401a      	ands	r2, r3
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	049b      	lsls	r3, r3, #18
 800505e:	429a      	cmp	r2, r3
 8005060:	d02b      	beq.n	80050ba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	01c9      	lsls	r1, r1, #7
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005074:	e021      	b.n	80050ba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	3301      	adds	r3, #1
 800507a:	d01e      	beq.n	80050ba <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507c:	f7ff f920 	bl	80042c0 <HAL_GetTick>
 8005080:	0002      	movs	r2, r0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <I2C_IsAcknowledgeFailed+0x5e>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d113      	bne.n	80050ba <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	2220      	movs	r2, #32
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2241      	movs	r2, #65	; 0x41
 80050a2:	2120      	movs	r1, #32
 80050a4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2242      	movs	r2, #66	; 0x42
 80050aa:	2100      	movs	r1, #0
 80050ac:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2240      	movs	r2, #64	; 0x40
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e02f      	b.n	800511a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2220      	movs	r2, #32
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d1d6      	bne.n	8005076 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2210      	movs	r2, #16
 80050ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2220      	movs	r2, #32
 80050d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	0018      	movs	r0, r3
 80050dc:	f7ff fece 	bl	8004e7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	490e      	ldr	r1, [pc, #56]	; (8005124 <I2C_IsAcknowledgeFailed+0xf0>)
 80050ec:	400a      	ands	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	2204      	movs	r2, #4
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2241      	movs	r2, #65	; 0x41
 8005100:	2120      	movs	r1, #32
 8005102:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2242      	movs	r2, #66	; 0x42
 8005108:	2100      	movs	r1, #0
 800510a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	2100      	movs	r1, #0
 8005112:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b004      	add	sp, #16
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	fe00e800 	.word	0xfe00e800

08005128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	0008      	movs	r0, r1
 8005132:	0011      	movs	r1, r2
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	240a      	movs	r4, #10
 8005138:	193b      	adds	r3, r7, r4
 800513a:	1c02      	adds	r2, r0, #0
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	2009      	movs	r0, #9
 8005140:	183b      	adds	r3, r7, r0
 8005142:	1c0a      	adds	r2, r1, #0
 8005144:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	0d51      	lsrs	r1, r2, #21
 8005150:	2280      	movs	r2, #128	; 0x80
 8005152:	00d2      	lsls	r2, r2, #3
 8005154:	400a      	ands	r2, r1
 8005156:	490e      	ldr	r1, [pc, #56]	; (8005190 <I2C_TransferConfig+0x68>)
 8005158:	430a      	orrs	r2, r1
 800515a:	43d2      	mvns	r2, r2
 800515c:	401a      	ands	r2, r3
 800515e:	0011      	movs	r1, r2
 8005160:	193b      	adds	r3, r7, r4
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	059b      	lsls	r3, r3, #22
 8005166:	0d9a      	lsrs	r2, r3, #22
 8005168:	183b      	adds	r3, r7, r0
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	0418      	lsls	r0, r3, #16
 800516e:	23ff      	movs	r3, #255	; 0xff
 8005170:	041b      	lsls	r3, r3, #16
 8005172:	4003      	ands	r3, r0
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	431a      	orrs	r2, r3
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	431a      	orrs	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b005      	add	sp, #20
 800518c:	bd90      	pop	{r4, r7, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	03ff63ff 	.word	0x03ff63ff

08005194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2241      	movs	r2, #65	; 0x41
 80051a2:	5c9b      	ldrb	r3, [r3, r2]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d138      	bne.n	800521c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2240      	movs	r2, #64	; 0x40
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e032      	b.n	800521e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2241      	movs	r2, #65	; 0x41
 80051c4:	2124      	movs	r1, #36	; 0x24
 80051c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2101      	movs	r1, #1
 80051d4:	438a      	bics	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4911      	ldr	r1, [pc, #68]	; (8005228 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80051e4:	400a      	ands	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6819      	ldr	r1, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2101      	movs	r1, #1
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2241      	movs	r2, #65	; 0x41
 800520c:	2120      	movs	r1, #32
 800520e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2240      	movs	r2, #64	; 0x40
 8005214:	2100      	movs	r1, #0
 8005216:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	0018      	movs	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	b002      	add	sp, #8
 8005224:	bd80      	pop	{r7, pc}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	ffffefff 	.word	0xffffefff

0800522c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2241      	movs	r2, #65	; 0x41
 800523a:	5c9b      	ldrb	r3, [r3, r2]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b20      	cmp	r3, #32
 8005240:	d139      	bne.n	80052b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	5c9b      	ldrb	r3, [r3, r2]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800524c:	2302      	movs	r3, #2
 800524e:	e033      	b.n	80052b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2240      	movs	r2, #64	; 0x40
 8005254:	2101      	movs	r1, #1
 8005256:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2241      	movs	r2, #65	; 0x41
 800525c:	2124      	movs	r1, #36	; 0x24
 800525e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2101      	movs	r1, #1
 800526c:	438a      	bics	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2101      	movs	r1, #1
 800529e:	430a      	orrs	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2241      	movs	r2, #65	; 0x41
 80052a6:	2120      	movs	r1, #32
 80052a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2240      	movs	r2, #64	; 0x40
 80052ae:	2100      	movs	r1, #0
 80052b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e000      	b.n	80052b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052b6:	2302      	movs	r3, #2
  }
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b004      	add	sp, #16
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	fffff0ff 	.word	0xfffff0ff

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b08a      	sub	sp, #40	; 0x28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f000 fb6c 	bl	80059b0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d8:	4bc8      	ldr	r3, [pc, #800]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	220c      	movs	r2, #12
 80052de:	4013      	ands	r3, r2
 80052e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e2:	4bc6      	ldr	r3, [pc, #792]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	025b      	lsls	r3, r3, #9
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4013      	ands	r3, r2
 80052f6:	d100      	bne.n	80052fa <HAL_RCC_OscConfig+0x36>
 80052f8:	e07d      	b.n	80053f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d007      	beq.n	8005310 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d112      	bne.n	800532c <HAL_RCC_OscConfig+0x68>
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	025b      	lsls	r3, r3, #9
 800530c:	429a      	cmp	r2, r3
 800530e:	d10d      	bne.n	800532c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	4bba      	ldr	r3, [pc, #744]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	029b      	lsls	r3, r3, #10
 8005318:	4013      	ands	r3, r2
 800531a:	d100      	bne.n	800531e <HAL_RCC_OscConfig+0x5a>
 800531c:	e06a      	b.n	80053f4 <HAL_RCC_OscConfig+0x130>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d166      	bne.n	80053f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f000 fb42 	bl	80059b0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	025b      	lsls	r3, r3, #9
 8005334:	429a      	cmp	r2, r3
 8005336:	d107      	bne.n	8005348 <HAL_RCC_OscConfig+0x84>
 8005338:	4bb0      	ldr	r3, [pc, #704]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4baf      	ldr	r3, [pc, #700]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	0249      	lsls	r1, r1, #9
 8005342:	430a      	orrs	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e027      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	23a0      	movs	r3, #160	; 0xa0
 800534e:	02db      	lsls	r3, r3, #11
 8005350:	429a      	cmp	r2, r3
 8005352:	d10e      	bne.n	8005372 <HAL_RCC_OscConfig+0xae>
 8005354:	4ba9      	ldr	r3, [pc, #676]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4ba8      	ldr	r3, [pc, #672]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800535a:	2180      	movs	r1, #128	; 0x80
 800535c:	02c9      	lsls	r1, r1, #11
 800535e:	430a      	orrs	r2, r1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	4ba6      	ldr	r3, [pc, #664]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4ba5      	ldr	r3, [pc, #660]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005368:	2180      	movs	r1, #128	; 0x80
 800536a:	0249      	lsls	r1, r1, #9
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e012      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 8005372:	4ba2      	ldr	r3, [pc, #648]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4ba1      	ldr	r3, [pc, #644]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005378:	49a1      	ldr	r1, [pc, #644]	; (8005600 <HAL_RCC_OscConfig+0x33c>)
 800537a:	400a      	ands	r2, r1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	4b9f      	ldr	r3, [pc, #636]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	025b      	lsls	r3, r3, #9
 8005386:	4013      	ands	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4b9b      	ldr	r3, [pc, #620]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b9a      	ldr	r3, [pc, #616]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005392:	499c      	ldr	r1, [pc, #624]	; (8005604 <HAL_RCC_OscConfig+0x340>)
 8005394:	400a      	ands	r2, r1
 8005396:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d014      	beq.n	80053ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fe ff8e 	bl	80042c0 <HAL_GetTick>
 80053a4:	0003      	movs	r3, r0
 80053a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053aa:	f7fe ff89 	bl	80042c0 <HAL_GetTick>
 80053ae:	0002      	movs	r2, r0
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b64      	cmp	r3, #100	; 0x64
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e2f9      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053bc:	4b8f      	ldr	r3, [pc, #572]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	4013      	ands	r3, r2
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0xe6>
 80053c8:	e015      	b.n	80053f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ca:	f7fe ff79 	bl	80042c0 <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d4:	f7fe ff74 	bl	80042c0 <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	; 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e2e4      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053e6:	4b85      	ldr	r3, [pc, #532]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	4013      	ands	r3, r2
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x110>
 80053f2:	e000      	b.n	80053f6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2202      	movs	r2, #2
 80053fc:	4013      	ands	r3, r2
 80053fe:	d100      	bne.n	8005402 <HAL_RCC_OscConfig+0x13e>
 8005400:	e099      	b.n	8005536 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	2220      	movs	r2, #32
 800540c:	4013      	ands	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005410:	4b7a      	ldr	r3, [pc, #488]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4b79      	ldr	r3, [pc, #484]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005416:	2120      	movs	r1, #32
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	2220      	movs	r2, #32
 8005420:	4393      	bics	r3, r2
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d005      	beq.n	8005436 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d13e      	bne.n	80054ae <HAL_RCC_OscConfig+0x1ea>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d13b      	bne.n	80054ae <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005436:	4b71      	ldr	r3, [pc, #452]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2204      	movs	r2, #4
 800543c:	4013      	ands	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_RCC_OscConfig+0x186>
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e2b2      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544a:	4b6c      	ldr	r3, [pc, #432]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4a6e      	ldr	r2, [pc, #440]	; (8005608 <HAL_RCC_OscConfig+0x344>)
 8005450:	4013      	ands	r3, r2
 8005452:	0019      	movs	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	021a      	lsls	r2, r3, #8
 800545a:	4b68      	ldr	r3, [pc, #416]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005460:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2209      	movs	r2, #9
 8005466:	4393      	bics	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	4b64      	ldr	r3, [pc, #400]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800546c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546e:	430a      	orrs	r2, r1
 8005470:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005472:	f000 fbeb 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 8005476:	0001      	movs	r1, r0
 8005478:	4b60      	ldr	r3, [pc, #384]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	220f      	movs	r2, #15
 8005480:	4013      	ands	r3, r2
 8005482:	4a62      	ldr	r2, [pc, #392]	; (800560c <HAL_RCC_OscConfig+0x348>)
 8005484:	5cd3      	ldrb	r3, [r2, r3]
 8005486:	000a      	movs	r2, r1
 8005488:	40da      	lsrs	r2, r3
 800548a:	4b61      	ldr	r3, [pc, #388]	; (8005610 <HAL_RCC_OscConfig+0x34c>)
 800548c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800548e:	4b61      	ldr	r3, [pc, #388]	; (8005614 <HAL_RCC_OscConfig+0x350>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2513      	movs	r5, #19
 8005494:	197c      	adds	r4, r7, r5
 8005496:	0018      	movs	r0, r3
 8005498:	f7fe fecc 	bl	8004234 <HAL_InitTick>
 800549c:	0003      	movs	r3, r0
 800549e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80054a0:	197b      	adds	r3, r7, r5
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d046      	beq.n	8005536 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80054a8:	197b      	adds	r3, r7, r5
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	e280      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d027      	beq.n	8005504 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80054b4:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2209      	movs	r2, #9
 80054ba:	4393      	bics	r3, r2
 80054bc:	0019      	movs	r1, r3
 80054be:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	430a      	orrs	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c6:	f7fe fefb 	bl	80042c0 <HAL_GetTick>
 80054ca:	0003      	movs	r3, r0
 80054cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d0:	f7fe fef6 	bl	80042c0 <HAL_GetTick>
 80054d4:	0002      	movs	r2, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e266      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e2:	4b46      	ldr	r3, [pc, #280]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2204      	movs	r2, #4
 80054e8:	4013      	ands	r3, r2
 80054ea:	d0f1      	beq.n	80054d0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4a45      	ldr	r2, [pc, #276]	; (8005608 <HAL_RCC_OscConfig+0x344>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	0019      	movs	r1, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	e018      	b.n	8005536 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005504:	4b3d      	ldr	r3, [pc, #244]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b3c      	ldr	r3, [pc, #240]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800550a:	2101      	movs	r1, #1
 800550c:	438a      	bics	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fe fed6 	bl	80042c0 <HAL_GetTick>
 8005514:	0003      	movs	r3, r0
 8005516:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551a:	f7fe fed1 	bl	80042c0 <HAL_GetTick>
 800551e:	0002      	movs	r2, r0
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e241      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800552c:	4b33      	ldr	r3, [pc, #204]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2204      	movs	r2, #4
 8005532:	4013      	ands	r3, r2
 8005534:	d1f1      	bne.n	800551a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2210      	movs	r2, #16
 800553c:	4013      	ands	r3, r2
 800553e:	d100      	bne.n	8005542 <HAL_RCC_OscConfig+0x27e>
 8005540:	e0a1      	b.n	8005686 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d140      	bne.n	80055ca <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005548:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4013      	ands	r3, r2
 8005552:	d005      	beq.n	8005560 <HAL_RCC_OscConfig+0x29c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e227      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005560:	4b26      	ldr	r3, [pc, #152]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <HAL_RCC_OscConfig+0x354>)
 8005566:	4013      	ands	r3, r2
 8005568:	0019      	movs	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	4b23      	ldr	r3, [pc, #140]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005574:	4b21      	ldr	r3, [pc, #132]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	0a19      	lsrs	r1, r3, #8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	061a      	lsls	r2, r3, #24
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	0b5b      	lsrs	r3, r3, #13
 800558e:	3301      	adds	r3, #1
 8005590:	2280      	movs	r2, #128	; 0x80
 8005592:	0212      	lsls	r2, r2, #8
 8005594:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005596:	4b19      	ldr	r3, [pc, #100]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	210f      	movs	r1, #15
 800559e:	400b      	ands	r3, r1
 80055a0:	491a      	ldr	r1, [pc, #104]	; (800560c <HAL_RCC_OscConfig+0x348>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <HAL_RCC_OscConfig+0x34c>)
 80055a8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80055aa:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <HAL_RCC_OscConfig+0x350>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2513      	movs	r5, #19
 80055b0:	197c      	adds	r4, r7, r5
 80055b2:	0018      	movs	r0, r3
 80055b4:	f7fe fe3e 	bl	8004234 <HAL_InitTick>
 80055b8:	0003      	movs	r3, r0
 80055ba:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80055bc:	197b      	adds	r3, r7, r5
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d060      	beq.n	8005686 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80055c4:	197b      	adds	r3, r7, r5
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	e1f2      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d03f      	beq.n	8005652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 80055d8:	2180      	movs	r1, #128	; 0x80
 80055da:	0049      	lsls	r1, r1, #1
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fe fe6e 	bl	80042c0 <HAL_GetTick>
 80055e4:	0003      	movs	r3, r0
 80055e6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80055e8:	e018      	b.n	800561c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055ea:	f7fe fe69 	bl	80042c0 <HAL_GetTick>
 80055ee:	0002      	movs	r2, r0
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d911      	bls.n	800561c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e1d9      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
 80055fc:	40021000 	.word	0x40021000
 8005600:	fffeffff 	.word	0xfffeffff
 8005604:	fffbffff 	.word	0xfffbffff
 8005608:	ffffe0ff 	.word	0xffffe0ff
 800560c:	08007168 	.word	0x08007168
 8005610:	20000000 	.word	0x20000000
 8005614:	20000004 	.word	0x20000004
 8005618:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800561c:	4bc9      	ldr	r3, [pc, #804]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4013      	ands	r3, r2
 8005626:	d0e0      	beq.n	80055ea <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005628:	4bc6      	ldr	r3, [pc, #792]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	4ac6      	ldr	r2, [pc, #792]	; (8005948 <HAL_RCC_OscConfig+0x684>)
 800562e:	4013      	ands	r3, r2
 8005630:	0019      	movs	r1, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	4bc3      	ldr	r3, [pc, #780]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800563c:	4bc1      	ldr	r3, [pc, #772]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	0a19      	lsrs	r1, r3, #8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	061a      	lsls	r2, r3, #24
 800564a:	4bbe      	ldr	r3, [pc, #760]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	e019      	b.n	8005686 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005652:	4bbc      	ldr	r3, [pc, #752]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4bbb      	ldr	r3, [pc, #748]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005658:	49bc      	ldr	r1, [pc, #752]	; (800594c <HAL_RCC_OscConfig+0x688>)
 800565a:	400a      	ands	r2, r1
 800565c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565e:	f7fe fe2f 	bl	80042c0 <HAL_GetTick>
 8005662:	0003      	movs	r3, r0
 8005664:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005668:	f7fe fe2a 	bl	80042c0 <HAL_GetTick>
 800566c:	0002      	movs	r2, r0
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e19a      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800567a:	4bb2      	ldr	r3, [pc, #712]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4013      	ands	r3, r2
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2208      	movs	r2, #8
 800568c:	4013      	ands	r3, r2
 800568e:	d036      	beq.n	80056fe <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d019      	beq.n	80056cc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005698:	4baa      	ldr	r3, [pc, #680]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800569a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569c:	4ba9      	ldr	r3, [pc, #676]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800569e:	2101      	movs	r1, #1
 80056a0:	430a      	orrs	r2, r1
 80056a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a4:	f7fe fe0c 	bl	80042c0 <HAL_GetTick>
 80056a8:	0003      	movs	r3, r0
 80056aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ae:	f7fe fe07 	bl	80042c0 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e177      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056c0:	4ba0      	ldr	r3, [pc, #640]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	2202      	movs	r2, #2
 80056c6:	4013      	ands	r3, r2
 80056c8:	d0f1      	beq.n	80056ae <HAL_RCC_OscConfig+0x3ea>
 80056ca:	e018      	b.n	80056fe <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056cc:	4b9d      	ldr	r3, [pc, #628]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80056ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d0:	4b9c      	ldr	r3, [pc, #624]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80056d2:	2101      	movs	r1, #1
 80056d4:	438a      	bics	r2, r1
 80056d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fe fdf2 	bl	80042c0 <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e2:	f7fe fded 	bl	80042c0 <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e15d      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056f4:	4b93      	ldr	r3, [pc, #588]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	2202      	movs	r2, #2
 80056fa:	4013      	ands	r3, r2
 80056fc:	d1f1      	bne.n	80056e2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2204      	movs	r2, #4
 8005704:	4013      	ands	r3, r2
 8005706:	d100      	bne.n	800570a <HAL_RCC_OscConfig+0x446>
 8005708:	e0ae      	b.n	8005868 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570a:	2023      	movs	r0, #35	; 0x23
 800570c:	183b      	adds	r3, r7, r0
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005712:	4b8c      	ldr	r3, [pc, #560]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	055b      	lsls	r3, r3, #21
 800571a:	4013      	ands	r3, r2
 800571c:	d109      	bne.n	8005732 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005722:	4b88      	ldr	r3, [pc, #544]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005724:	2180      	movs	r1, #128	; 0x80
 8005726:	0549      	lsls	r1, r1, #21
 8005728:	430a      	orrs	r2, r1
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800572c:	183b      	adds	r3, r7, r0
 800572e:	2201      	movs	r2, #1
 8005730:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005732:	4b87      	ldr	r3, [pc, #540]	; (8005950 <HAL_RCC_OscConfig+0x68c>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4013      	ands	r3, r2
 800573c:	d11a      	bne.n	8005774 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800573e:	4b84      	ldr	r3, [pc, #528]	; (8005950 <HAL_RCC_OscConfig+0x68c>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b83      	ldr	r3, [pc, #524]	; (8005950 <HAL_RCC_OscConfig+0x68c>)
 8005744:	2180      	movs	r1, #128	; 0x80
 8005746:	0049      	lsls	r1, r1, #1
 8005748:	430a      	orrs	r2, r1
 800574a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800574c:	f7fe fdb8 	bl	80042c0 <HAL_GetTick>
 8005750:	0003      	movs	r3, r0
 8005752:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005756:	f7fe fdb3 	bl	80042c0 <HAL_GetTick>
 800575a:	0002      	movs	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b64      	cmp	r3, #100	; 0x64
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e123      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005768:	4b79      	ldr	r3, [pc, #484]	; (8005950 <HAL_RCC_OscConfig+0x68c>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4013      	ands	r3, r2
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	429a      	cmp	r2, r3
 800577e:	d107      	bne.n	8005790 <HAL_RCC_OscConfig+0x4cc>
 8005780:	4b70      	ldr	r3, [pc, #448]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005784:	4b6f      	ldr	r3, [pc, #444]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005786:	2180      	movs	r1, #128	; 0x80
 8005788:	0049      	lsls	r1, r1, #1
 800578a:	430a      	orrs	r2, r1
 800578c:	651a      	str	r2, [r3, #80]	; 0x50
 800578e:	e031      	b.n	80057f4 <HAL_RCC_OscConfig+0x530>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10c      	bne.n	80057b2 <HAL_RCC_OscConfig+0x4ee>
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800579a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800579c:	4b69      	ldr	r3, [pc, #420]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800579e:	496b      	ldr	r1, [pc, #428]	; (800594c <HAL_RCC_OscConfig+0x688>)
 80057a0:	400a      	ands	r2, r1
 80057a2:	651a      	str	r2, [r3, #80]	; 0x50
 80057a4:	4b67      	ldr	r3, [pc, #412]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057a8:	4b66      	ldr	r3, [pc, #408]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057aa:	496a      	ldr	r1, [pc, #424]	; (8005954 <HAL_RCC_OscConfig+0x690>)
 80057ac:	400a      	ands	r2, r1
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50
 80057b0:	e020      	b.n	80057f4 <HAL_RCC_OscConfig+0x530>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	23a0      	movs	r3, #160	; 0xa0
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d10e      	bne.n	80057dc <HAL_RCC_OscConfig+0x518>
 80057be:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057c2:	4b60      	ldr	r3, [pc, #384]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057c4:	2180      	movs	r1, #128	; 0x80
 80057c6:	00c9      	lsls	r1, r1, #3
 80057c8:	430a      	orrs	r2, r1
 80057ca:	651a      	str	r2, [r3, #80]	; 0x50
 80057cc:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057d0:	4b5c      	ldr	r3, [pc, #368]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	0049      	lsls	r1, r1, #1
 80057d6:	430a      	orrs	r2, r1
 80057d8:	651a      	str	r2, [r3, #80]	; 0x50
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0x530>
 80057dc:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057e0:	4b58      	ldr	r3, [pc, #352]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057e2:	495a      	ldr	r1, [pc, #360]	; (800594c <HAL_RCC_OscConfig+0x688>)
 80057e4:	400a      	ands	r2, r1
 80057e6:	651a      	str	r2, [r3, #80]	; 0x50
 80057e8:	4b56      	ldr	r3, [pc, #344]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ec:	4b55      	ldr	r3, [pc, #340]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80057ee:	4959      	ldr	r1, [pc, #356]	; (8005954 <HAL_RCC_OscConfig+0x690>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d015      	beq.n	8005828 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057fc:	f7fe fd60 	bl	80042c0 <HAL_GetTick>
 8005800:	0003      	movs	r3, r0
 8005802:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005804:	e009      	b.n	800581a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005806:	f7fe fd5b 	bl	80042c0 <HAL_GetTick>
 800580a:	0002      	movs	r2, r0
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	4a51      	ldr	r2, [pc, #324]	; (8005958 <HAL_RCC_OscConfig+0x694>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e0ca      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800581a:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800581c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4013      	ands	r3, r2
 8005824:	d0ef      	beq.n	8005806 <HAL_RCC_OscConfig+0x542>
 8005826:	e014      	b.n	8005852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005828:	f7fe fd4a 	bl	80042c0 <HAL_GetTick>
 800582c:	0003      	movs	r3, r0
 800582e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005830:	e009      	b.n	8005846 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fe fd45 	bl	80042c0 <HAL_GetTick>
 8005836:	0002      	movs	r2, r0
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	4a46      	ldr	r2, [pc, #280]	; (8005958 <HAL_RCC_OscConfig+0x694>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e0b4      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005846:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4013      	ands	r3, r2
 8005850:	d1ef      	bne.n	8005832 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005852:	2323      	movs	r3, #35	; 0x23
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d105      	bne.n	8005868 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800585c:	4b39      	ldr	r3, [pc, #228]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 800585e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005860:	4b38      	ldr	r3, [pc, #224]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005862:	493e      	ldr	r1, [pc, #248]	; (800595c <HAL_RCC_OscConfig+0x698>)
 8005864:	400a      	ands	r2, r1
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d100      	bne.n	8005872 <HAL_RCC_OscConfig+0x5ae>
 8005870:	e09d      	b.n	80059ae <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	2b0c      	cmp	r3, #12
 8005876:	d100      	bne.n	800587a <HAL_RCC_OscConfig+0x5b6>
 8005878:	e076      	b.n	8005968 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b02      	cmp	r3, #2
 8005880:	d145      	bne.n	800590e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b30      	ldr	r3, [pc, #192]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005888:	4935      	ldr	r1, [pc, #212]	; (8005960 <HAL_RCC_OscConfig+0x69c>)
 800588a:	400a      	ands	r2, r1
 800588c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588e:	f7fe fd17 	bl	80042c0 <HAL_GetTick>
 8005892:	0003      	movs	r3, r0
 8005894:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005898:	f7fe fd12 	bl	80042c0 <HAL_GetTick>
 800589c:	0002      	movs	r2, r0
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e082      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058aa:	4b26      	ldr	r3, [pc, #152]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	049b      	lsls	r3, r3, #18
 80058b2:	4013      	ands	r3, r2
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b6:	4b23      	ldr	r3, [pc, #140]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	4a2a      	ldr	r2, [pc, #168]	; (8005964 <HAL_RCC_OscConfig+0x6a0>)
 80058bc:	4013      	ands	r3, r2
 80058be:	0019      	movs	r1, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	431a      	orrs	r2, r3
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80058d2:	430a      	orrs	r2, r1
 80058d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d6:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 80058dc:	2180      	movs	r1, #128	; 0x80
 80058de:	0449      	lsls	r1, r1, #17
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fe fcec 	bl	80042c0 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fe fce7 	bl	80042c0 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e057      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	049b      	lsls	r3, r3, #18
 8005908:	4013      	ands	r3, r2
 800590a:	d0f0      	beq.n	80058ee <HAL_RCC_OscConfig+0x62a>
 800590c:	e04f      	b.n	80059ae <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005914:	4912      	ldr	r1, [pc, #72]	; (8005960 <HAL_RCC_OscConfig+0x69c>)
 8005916:	400a      	ands	r2, r1
 8005918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7fe fcd1 	bl	80042c0 <HAL_GetTick>
 800591e:	0003      	movs	r3, r0
 8005920:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005924:	f7fe fccc 	bl	80042c0 <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e03c      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005936:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCC_OscConfig+0x680>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	049b      	lsls	r3, r3, #18
 800593e:	4013      	ands	r3, r2
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x660>
 8005942:	e034      	b.n	80059ae <HAL_RCC_OscConfig+0x6ea>
 8005944:	40021000 	.word	0x40021000
 8005948:	ffff1fff 	.word	0xffff1fff
 800594c:	fffffeff 	.word	0xfffffeff
 8005950:	40007000 	.word	0x40007000
 8005954:	fffffbff 	.word	0xfffffbff
 8005958:	00001388 	.word	0x00001388
 800595c:	efffffff 	.word	0xefffffff
 8005960:	feffffff 	.word	0xfeffffff
 8005964:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e01d      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCC_OscConfig+0x6f4>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	025b      	lsls	r3, r3, #9
 8005980:	401a      	ands	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	429a      	cmp	r2, r3
 8005988:	d10f      	bne.n	80059aa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	23f0      	movs	r3, #240	; 0xf0
 800598e:	039b      	lsls	r3, r3, #14
 8005990:	401a      	ands	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d107      	bne.n	80059aa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	23c0      	movs	r3, #192	; 0xc0
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	401a      	ands	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b00a      	add	sp, #40	; 0x28
 80059b6:	bdb0      	pop	{r4, r5, r7, pc}
 80059b8:	40021000 	.word	0x40021000

080059bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059bc:	b5b0      	push	{r4, r5, r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e128      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d0:	4b96      	ldr	r3, [pc, #600]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2201      	movs	r2, #1
 80059d6:	4013      	ands	r3, r2
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d91e      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059de:	4b93      	ldr	r3, [pc, #588]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2201      	movs	r2, #1
 80059e4:	4393      	bics	r3, r2
 80059e6:	0019      	movs	r1, r3
 80059e8:	4b90      	ldr	r3, [pc, #576]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059f0:	f7fe fc66 	bl	80042c0 <HAL_GetTick>
 80059f4:	0003      	movs	r3, r0
 80059f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f8:	e009      	b.n	8005a0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fa:	f7fe fc61 	bl	80042c0 <HAL_GetTick>
 80059fe:	0002      	movs	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	4a8a      	ldr	r2, [pc, #552]	; (8005c30 <HAL_RCC_ClockConfig+0x274>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e109      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b87      	ldr	r3, [pc, #540]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2201      	movs	r2, #1
 8005a14:	4013      	ands	r3, r2
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d1ee      	bne.n	80059fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2202      	movs	r2, #2
 8005a22:	4013      	ands	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a26:	4b83      	ldr	r3, [pc, #524]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	22f0      	movs	r2, #240	; 0xf0
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	4b7f      	ldr	r3, [pc, #508]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005a36:	430a      	orrs	r2, r1
 8005a38:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	4013      	ands	r3, r2
 8005a42:	d100      	bne.n	8005a46 <HAL_RCC_ClockConfig+0x8a>
 8005a44:	e089      	b.n	8005b5a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a4e:	4b79      	ldr	r3, [pc, #484]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	4013      	ands	r3, r2
 8005a58:	d120      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e0e1      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d107      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a66:	4b73      	ldr	r3, [pc, #460]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	2380      	movs	r3, #128	; 0x80
 8005a6c:	049b      	lsls	r3, r3, #18
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d114      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e0d5      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d106      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a7e:	4b6d      	ldr	r3, [pc, #436]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2204      	movs	r2, #4
 8005a84:	4013      	ands	r3, r2
 8005a86:	d109      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0ca      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a8c:	4b69      	ldr	r3, [pc, #420]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4013      	ands	r3, r2
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0c2      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a9c:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	4393      	bics	r3, r2
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	4b62      	ldr	r3, [pc, #392]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005aac:	430a      	orrs	r2, r1
 8005aae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab0:	f7fe fc06 	bl	80042c0 <HAL_GetTick>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ac0:	e009      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac2:	f7fe fbfd 	bl	80042c0 <HAL_GetTick>
 8005ac6:	0002      	movs	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	4a58      	ldr	r2, [pc, #352]	; (8005c30 <HAL_RCC_ClockConfig+0x274>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e0a5      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ad6:	4b57      	ldr	r3, [pc, #348]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	220c      	movs	r2, #12
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d1ef      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0x106>
 8005ae2:	e03a      	b.n	8005b5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d111      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aec:	e009      	b.n	8005b02 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aee:	f7fe fbe7 	bl	80042c0 <HAL_GetTick>
 8005af2:	0002      	movs	r2, r0
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	4a4d      	ldr	r2, [pc, #308]	; (8005c30 <HAL_RCC_ClockConfig+0x274>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e08f      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b02:	4b4c      	ldr	r3, [pc, #304]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	220c      	movs	r2, #12
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d1ef      	bne.n	8005aee <HAL_RCC_ClockConfig+0x132>
 8005b0e:	e024      	b.n	8005b5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d11b      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b18:	e009      	b.n	8005b2e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b1a:	f7fe fbd1 	bl	80042c0 <HAL_GetTick>
 8005b1e:	0002      	movs	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	4a42      	ldr	r2, [pc, #264]	; (8005c30 <HAL_RCC_ClockConfig+0x274>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e079      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b2e:	4b41      	ldr	r3, [pc, #260]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	220c      	movs	r2, #12
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d1ef      	bne.n	8005b1a <HAL_RCC_ClockConfig+0x15e>
 8005b3a:	e00e      	b.n	8005b5a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b3c:	f7fe fbc0 	bl	80042c0 <HAL_GetTick>
 8005b40:	0002      	movs	r2, r0
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a3a      	ldr	r2, [pc, #232]	; (8005c30 <HAL_RCC_ClockConfig+0x274>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e068      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b50:	4b38      	ldr	r3, [pc, #224]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	220c      	movs	r2, #12
 8005b56:	4013      	ands	r3, r2
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b5a:	4b34      	ldr	r3, [pc, #208]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4013      	ands	r3, r2
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d21e      	bcs.n	8005ba6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b68:	4b30      	ldr	r3, [pc, #192]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	4393      	bics	r3, r2
 8005b70:	0019      	movs	r1, r3
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b7a:	f7fe fba1 	bl	80042c0 <HAL_GetTick>
 8005b7e:	0003      	movs	r3, r0
 8005b80:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b82:	e009      	b.n	8005b98 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b84:	f7fe fb9c 	bl	80042c0 <HAL_GetTick>
 8005b88:	0002      	movs	r2, r0
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <HAL_RCC_ClockConfig+0x274>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e044      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <HAL_RCC_ClockConfig+0x270>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d1ee      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2204      	movs	r2, #4
 8005bac:	4013      	ands	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb0:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <HAL_RCC_ClockConfig+0x27c>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d00a      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bce:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	; (8005c3c <HAL_RCC_ClockConfig+0x280>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	00da      	lsls	r2, r3, #3
 8005bde:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005be0:	430a      	orrs	r2, r1
 8005be2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005be4:	f000 f832 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 8005be8:	0001      	movs	r1, r0
 8005bea:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <HAL_RCC_ClockConfig+0x278>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	220f      	movs	r2, #15
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <HAL_RCC_ClockConfig+0x284>)
 8005bf6:	5cd3      	ldrb	r3, [r2, r3]
 8005bf8:	000a      	movs	r2, r1
 8005bfa:	40da      	lsrs	r2, r3
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_RCC_ClockConfig+0x288>)
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_RCC_ClockConfig+0x28c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	250b      	movs	r5, #11
 8005c06:	197c      	adds	r4, r7, r5
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7fe fb13 	bl	8004234 <HAL_InitTick>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005c12:	197b      	adds	r3, r7, r5
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005c1a:	197b      	adds	r3, r7, r5
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	e000      	b.n	8005c22 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	0018      	movs	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b004      	add	sp, #16
 8005c28:	bdb0      	pop	{r4, r5, r7, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	40022000 	.word	0x40022000
 8005c30:	00001388 	.word	0x00001388
 8005c34:	40021000 	.word	0x40021000
 8005c38:	fffff8ff 	.word	0xfffff8ff
 8005c3c:	ffffc7ff 	.word	0xffffc7ff
 8005c40:	08007168 	.word	0x08007168
 8005c44:	20000000 	.word	0x20000000
 8005c48:	20000004 	.word	0x20000004

08005c4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c4c:	b5b0      	push	{r4, r5, r7, lr}
 8005c4e:	b08e      	sub	sp, #56	; 0x38
 8005c50:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005c52:	4b4c      	ldr	r3, [pc, #304]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d014      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x40>
 8005c62:	d900      	bls.n	8005c66 <HAL_RCC_GetSysClockFreq+0x1a>
 8005c64:	e07b      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x112>
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d002      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0x24>
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d00b      	beq.n	8005c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c6e:	e076      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c70:	4b44      	ldr	r3, [pc, #272]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2210      	movs	r2, #16
 8005c76:	4013      	ands	r3, r2
 8005c78:	d002      	beq.n	8005c80 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005c7a:	4b43      	ldr	r3, [pc, #268]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005c7e:	e07c      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005c80:	4b42      	ldr	r3, [pc, #264]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x140>)
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c84:	e079      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c86:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x140>)
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c8a:	e076      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	0c9a      	lsrs	r2, r3, #18
 8005c90:	230f      	movs	r3, #15
 8005c92:	401a      	ands	r2, r3
 8005c94:	4b3e      	ldr	r3, [pc, #248]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x144>)
 8005c96:	5c9b      	ldrb	r3, [r3, r2]
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	0d9a      	lsrs	r2, r3, #22
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ca6:	4b37      	ldr	r3, [pc, #220]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	025b      	lsls	r3, r3, #9
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d01a      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	4a34      	ldr	r2, [pc, #208]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x140>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	69b8      	ldr	r0, [r7, #24]
 8005cc0:	69f9      	ldr	r1, [r7, #28]
 8005cc2:	f7fa fbf5 	bl	80004b0 <__aeabi_lmul>
 8005cc6:	0002      	movs	r2, r0
 8005cc8:	000b      	movs	r3, r1
 8005cca:	0010      	movs	r0, r2
 8005ccc:	0019      	movs	r1, r3
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f7fa fbc9 	bl	8000470 <__aeabi_uldivmod>
 8005cde:	0002      	movs	r2, r0
 8005ce0:	000b      	movs	r3, r1
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce6:	e037      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ce8:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2210      	movs	r2, #16
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d01a      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	68f9      	ldr	r1, [r7, #12]
 8005d02:	f7fa fbd5 	bl	80004b0 <__aeabi_lmul>
 8005d06:	0002      	movs	r2, r0
 8005d08:	000b      	movs	r3, r1
 8005d0a:	0010      	movs	r0, r2
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f7fa fba9 	bl	8000470 <__aeabi_uldivmod>
 8005d1e:	0002      	movs	r2, r0
 8005d20:	000b      	movs	r3, r1
 8005d22:	0013      	movs	r3, r2
 8005d24:	637b      	str	r3, [r7, #52]	; 0x34
 8005d26:	e017      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	0019      	movs	r1, r3
 8005d30:	4a16      	ldr	r2, [pc, #88]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x140>)
 8005d32:	2300      	movs	r3, #0
 8005d34:	f7fa fbbc 	bl	80004b0 <__aeabi_lmul>
 8005d38:	0002      	movs	r2, r0
 8005d3a:	000b      	movs	r3, r1
 8005d3c:	0010      	movs	r0, r2
 8005d3e:	0019      	movs	r1, r3
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	001c      	movs	r4, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	001d      	movs	r5, r3
 8005d48:	0022      	movs	r2, r4
 8005d4a:	002b      	movs	r3, r5
 8005d4c:	f7fa fb90 	bl	8000470 <__aeabi_uldivmod>
 8005d50:	0002      	movs	r2, r0
 8005d52:	000b      	movs	r3, r1
 8005d54:	0013      	movs	r3, r2
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d5c:	e00d      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	0b5b      	lsrs	r3, r3, #13
 8005d64:	2207      	movs	r2, #7
 8005d66:	4013      	ands	r3, r2
 8005d68:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	0212      	lsls	r2, r2, #8
 8005d72:	409a      	lsls	r2, r3
 8005d74:	0013      	movs	r3, r2
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d78:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b00e      	add	sp, #56	; 0x38
 8005d82:	bdb0      	pop	{r4, r5, r7, pc}
 8005d84:	40021000 	.word	0x40021000
 8005d88:	003d0900 	.word	0x003d0900
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	08007180 	.word	0x08007180

08005d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d98:	4b02      	ldr	r3, [pc, #8]	; (8005da4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	20000000 	.word	0x20000000

08005da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dac:	f7ff fff2 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005db0:	0001      	movs	r1, r0
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	2207      	movs	r2, #7
 8005dba:	4013      	ands	r3, r2
 8005dbc:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dbe:	5cd3      	ldrb	r3, [r2, r3]
 8005dc0:	40d9      	lsrs	r1, r3
 8005dc2:	000b      	movs	r3, r1
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	08007178 	.word	0x08007178

08005dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dd8:	f7ff ffdc 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005ddc:	0001      	movs	r1, r0
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	0adb      	lsrs	r3, r3, #11
 8005de4:	2207      	movs	r2, #7
 8005de6:	4013      	ands	r3, r2
 8005de8:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	40d9      	lsrs	r1, r3
 8005dee:	000b      	movs	r3, r1
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	08007178 	.word	0x08007178

08005e00 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005e08:	2017      	movs	r0, #23
 8005e0a:	183b      	adds	r3, r7, r0
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2220      	movs	r2, #32
 8005e16:	4013      	ands	r3, r2
 8005e18:	d100      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005e1a:	e0c2      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1c:	4b91      	ldr	r3, [pc, #580]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	055b      	lsls	r3, r3, #21
 8005e24:	4013      	ands	r3, r2
 8005e26:	d109      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e28:	4b8e      	ldr	r3, [pc, #568]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2c:	4b8d      	ldr	r3, [pc, #564]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e2e:	2180      	movs	r1, #128	; 0x80
 8005e30:	0549      	lsls	r1, r1, #21
 8005e32:	430a      	orrs	r2, r1
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e36:	183b      	adds	r3, r7, r0
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3c:	4b8a      	ldr	r3, [pc, #552]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4013      	ands	r3, r2
 8005e46:	d11a      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e48:	4b87      	ldr	r3, [pc, #540]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b86      	ldr	r3, [pc, #536]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	0049      	lsls	r1, r1, #1
 8005e52:	430a      	orrs	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e56:	f7fe fa33 	bl	80042c0 <HAL_GetTick>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5e:	e008      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e60:	f7fe fa2e 	bl	80042c0 <HAL_GetTick>
 8005e64:	0002      	movs	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	; 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e0f3      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e72:	4b7d      	ldr	r3, [pc, #500]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005e7e:	4b79      	ldr	r3, [pc, #484]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	23c0      	movs	r3, #192	; 0xc0
 8005e84:	039b      	lsls	r3, r3, #14
 8005e86:	4013      	ands	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	23c0      	movs	r3, #192	; 0xc0
 8005e90:	039b      	lsls	r3, r3, #14
 8005e92:	4013      	ands	r3, r2
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d013      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	23c0      	movs	r3, #192	; 0xc0
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	23c0      	movs	r3, #192	; 0xc0
 8005ea6:	029b      	lsls	r3, r3, #10
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d10a      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005eac:	4b6d      	ldr	r3, [pc, #436]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	029b      	lsls	r3, r3, #10
 8005eb4:	401a      	ands	r2, r3
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e0cb      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005ec2:	4b68      	ldr	r3, [pc, #416]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ec6:	23c0      	movs	r3, #192	; 0xc0
 8005ec8:	029b      	lsls	r3, r3, #10
 8005eca:	4013      	ands	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d03b      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	23c0      	movs	r3, #192	; 0xc0
 8005eda:	029b      	lsls	r3, r3, #10
 8005edc:	4013      	ands	r3, r2
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d033      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	4013      	ands	r3, r2
 8005eec:	d02e      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005eee:	4b5d      	ldr	r3, [pc, #372]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef2:	4a5e      	ldr	r2, [pc, #376]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ef8:	4b5a      	ldr	r3, [pc, #360]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005efc:	4b59      	ldr	r3, [pc, #356]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	0309      	lsls	r1, r1, #12
 8005f02:	430a      	orrs	r2, r1
 8005f04:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f06:	4b57      	ldr	r3, [pc, #348]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f0a:	4b56      	ldr	r3, [pc, #344]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f0c:	4958      	ldr	r1, [pc, #352]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005f0e:	400a      	ands	r2, r1
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005f12:	4b54      	ldr	r3, [pc, #336]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d014      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f22:	f7fe f9cd 	bl	80042c0 <HAL_GetTick>
 8005f26:	0003      	movs	r3, r0
 8005f28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f2a:	e009      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2c:	f7fe f9c8 	bl	80042c0 <HAL_GetTick>
 8005f30:	0002      	movs	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	4a4f      	ldr	r2, [pc, #316]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e08c      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f40:	4b48      	ldr	r3, [pc, #288]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d0ef      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	23c0      	movs	r3, #192	; 0xc0
 8005f52:	029b      	lsls	r3, r3, #10
 8005f54:	401a      	ands	r2, r3
 8005f56:	23c0      	movs	r3, #192	; 0xc0
 8005f58:	029b      	lsls	r3, r3, #10
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005f5e:	4b41      	ldr	r3, [pc, #260]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a45      	ldr	r2, [pc, #276]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	0019      	movs	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	23c0      	movs	r3, #192	; 0xc0
 8005f6e:	039b      	lsls	r3, r3, #14
 8005f70:	401a      	ands	r2, r3
 8005f72:	4b3c      	ldr	r3, [pc, #240]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f74:	430a      	orrs	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	4b3a      	ldr	r3, [pc, #232]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	23c0      	movs	r3, #192	; 0xc0
 8005f82:	029b      	lsls	r3, r3, #10
 8005f84:	401a      	ands	r2, r3
 8005f86:	4b37      	ldr	r3, [pc, #220]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f8c:	2317      	movs	r3, #23
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d105      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f96:	4b33      	ldr	r3, [pc, #204]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	4b32      	ldr	r3, [pc, #200]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f9c:	4937      	ldr	r1, [pc, #220]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f9e:	400a      	ands	r2, r1
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fac:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	4393      	bics	r3, r2
 8005fb4:	0019      	movs	r1, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fca:	4b26      	ldr	r3, [pc, #152]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	220c      	movs	r2, #12
 8005fd0:	4393      	bics	r3, r2
 8005fd2:	0019      	movs	r1, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	4b22      	ldr	r3, [pc, #136]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d009      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fe8:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fec:	4a24      	ldr	r2, [pc, #144]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	0019      	movs	r1, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2208      	movs	r2, #8
 8006002:	4013      	ands	r3, r2
 8006004:	d009      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006006:	4b17      	ldr	r3, [pc, #92]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600a:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800600c:	4013      	ands	r3, r2
 800600e:	0019      	movs	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006016:	430a      	orrs	r2, r1
 8006018:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4013      	ands	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800602c:	4013      	ands	r3, r2
 800602e:	0019      	movs	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006036:	430a      	orrs	r2, r1
 8006038:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2280      	movs	r2, #128	; 0x80
 8006040:	4013      	ands	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006048:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800604a:	4013      	ands	r3, r2
 800604c:	0019      	movs	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	4b04      	ldr	r3, [pc, #16]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006054:	430a      	orrs	r2, r1
 8006056:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b006      	add	sp, #24
 8006060:	bd80      	pop	{r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	40021000 	.word	0x40021000
 8006068:	40007000 	.word	0x40007000
 800606c:	fffcffff 	.word	0xfffcffff
 8006070:	fff7ffff 	.word	0xfff7ffff
 8006074:	00001388 	.word	0x00001388
 8006078:	ffcfffff 	.word	0xffcfffff
 800607c:	efffffff 	.word	0xefffffff
 8006080:	fffff3ff 	.word	0xfffff3ff
 8006084:	ffffcfff 	.word	0xffffcfff
 8006088:	fff3ffff 	.word	0xfff3ffff

0800608c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e044      	b.n	8006128 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d107      	bne.n	80060b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2274      	movs	r2, #116	; 0x74
 80060aa:	2100      	movs	r1, #0
 80060ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7fe f815 	bl	80040e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2224      	movs	r2, #36	; 0x24
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2101      	movs	r1, #1
 80060c8:	438a      	bics	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 f8d8 	bl	8006284 <UART_SetConfig>
 80060d4:	0003      	movs	r3, r0
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e024      	b.n	8006128 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 fb89 	bl	8006800 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	490d      	ldr	r1, [pc, #52]	; (8006130 <HAL_UART_Init+0xa4>)
 80060fa:	400a      	ands	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	212a      	movs	r1, #42	; 0x2a
 800610a:	438a      	bics	r2, r1
 800610c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2101      	movs	r1, #1
 800611a:	430a      	orrs	r2, r1
 800611c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	0018      	movs	r0, r3
 8006122:	f000 fc21 	bl	8006968 <UART_CheckIdleState>
 8006126:	0003      	movs	r3, r0
}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b002      	add	sp, #8
 800612e:	bd80      	pop	{r7, pc}
 8006130:	ffffb7ff 	.word	0xffffb7ff

08006134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	1dbb      	adds	r3, r7, #6
 8006142:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006148:	2b20      	cmp	r3, #32
 800614a:	d000      	beq.n	800614e <HAL_UART_Transmit+0x1a>
 800614c:	e095      	b.n	800627a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_UART_Transmit+0x28>
 8006154:	1dbb      	adds	r3, r7, #6
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e08d      	b.n	800627c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	015b      	lsls	r3, r3, #5
 8006168:	429a      	cmp	r2, r3
 800616a:	d109      	bne.n	8006180 <HAL_UART_Transmit+0x4c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2201      	movs	r2, #1
 8006178:	4013      	ands	r3, r2
 800617a:	d001      	beq.n	8006180 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e07d      	b.n	800627c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2274      	movs	r2, #116	; 0x74
 8006184:	5c9b      	ldrb	r3, [r3, r2]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_UART_Transmit+0x5a>
 800618a:	2302      	movs	r3, #2
 800618c:	e076      	b.n	800627c <HAL_UART_Transmit+0x148>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2274      	movs	r2, #116	; 0x74
 8006192:	2101      	movs	r1, #1
 8006194:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2280      	movs	r2, #128	; 0x80
 800619a:	2100      	movs	r1, #0
 800619c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2221      	movs	r2, #33	; 0x21
 80061a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a4:	f7fe f88c 	bl	80042c0 <HAL_GetTick>
 80061a8:	0003      	movs	r3, r0
 80061aa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1dba      	adds	r2, r7, #6
 80061b0:	2150      	movs	r1, #80	; 0x50
 80061b2:	8812      	ldrh	r2, [r2, #0]
 80061b4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1dba      	adds	r2, r7, #6
 80061ba:	2152      	movs	r1, #82	; 0x52
 80061bc:	8812      	ldrh	r2, [r2, #0]
 80061be:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	015b      	lsls	r3, r3, #5
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d108      	bne.n	80061de <HAL_UART_Transmit+0xaa>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	e003      	b.n	80061e6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2274      	movs	r2, #116	; 0x74
 80061ea:	2100      	movs	r1, #0
 80061ec:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80061ee:	e02c      	b.n	800624a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	0013      	movs	r3, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	2180      	movs	r1, #128	; 0x80
 80061fe:	f000 fbfb 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 8006202:	1e03      	subs	r3, r0, #0
 8006204:	d001      	beq.n	800620a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e038      	b.n	800627c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	001a      	movs	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	05d2      	lsls	r2, r2, #23
 800621c:	0dd2      	lsrs	r2, r2, #23
 800621e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	3302      	adds	r3, #2
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	e007      	b.n	8006238 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3301      	adds	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2252      	movs	r2, #82	; 0x52
 800623c:	5a9b      	ldrh	r3, [r3, r2]
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b299      	uxth	r1, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2252      	movs	r2, #82	; 0x52
 8006248:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2252      	movs	r2, #82	; 0x52
 800624e:	5a9b      	ldrh	r3, [r3, r2]
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1cc      	bne.n	80061f0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	0013      	movs	r3, r2
 8006260:	2200      	movs	r2, #0
 8006262:	2140      	movs	r1, #64	; 0x40
 8006264:	f000 fbc8 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 8006268:	1e03      	subs	r3, r0, #0
 800626a:	d001      	beq.n	8006270 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e005      	b.n	800627c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e000      	b.n	800627c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
  }
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b008      	add	sp, #32
 8006282:	bd80      	pop	{r7, pc}

08006284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006284:	b5b0      	push	{r4, r5, r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800628c:	231a      	movs	r3, #26
 800628e:	2218      	movs	r2, #24
 8006290:	4694      	mov	ip, r2
 8006292:	44bc      	add	ip, r7
 8006294:	4463      	add	r3, ip
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4ab0      	ldr	r2, [pc, #704]	; (800657c <UART_SetConfig+0x2f8>)
 80062ba:	4013      	ands	r3, r2
 80062bc:	0019      	movs	r1, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c4:	430a      	orrs	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4aac      	ldr	r2, [pc, #688]	; (8006580 <UART_SetConfig+0x2fc>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	0019      	movs	r1, r3
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4aa6      	ldr	r2, [pc, #664]	; (8006584 <UART_SetConfig+0x300>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f6:	4313      	orrs	r3, r2
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4aa1      	ldr	r2, [pc, #644]	; (8006588 <UART_SetConfig+0x304>)
 8006302:	4013      	ands	r3, r2
 8006304:	0019      	movs	r1, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a9d      	ldr	r2, [pc, #628]	; (800658c <UART_SetConfig+0x308>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d136      	bne.n	8006388 <UART_SetConfig+0x104>
 800631a:	4b9d      	ldr	r3, [pc, #628]	; (8006590 <UART_SetConfig+0x30c>)
 800631c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631e:	2203      	movs	r2, #3
 8006320:	4013      	ands	r3, r2
 8006322:	2b03      	cmp	r3, #3
 8006324:	d020      	beq.n	8006368 <UART_SetConfig+0xe4>
 8006326:	d827      	bhi.n	8006378 <UART_SetConfig+0xf4>
 8006328:	2b02      	cmp	r3, #2
 800632a:	d00d      	beq.n	8006348 <UART_SetConfig+0xc4>
 800632c:	d824      	bhi.n	8006378 <UART_SetConfig+0xf4>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <UART_SetConfig+0xb4>
 8006332:	2b01      	cmp	r3, #1
 8006334:	d010      	beq.n	8006358 <UART_SetConfig+0xd4>
 8006336:	e01f      	b.n	8006378 <UART_SetConfig+0xf4>
 8006338:	231b      	movs	r3, #27
 800633a:	2218      	movs	r2, #24
 800633c:	4694      	mov	ip, r2
 800633e:	44bc      	add	ip, r7
 8006340:	4463      	add	r3, ip
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e0c5      	b.n	80064d4 <UART_SetConfig+0x250>
 8006348:	231b      	movs	r3, #27
 800634a:	2218      	movs	r2, #24
 800634c:	4694      	mov	ip, r2
 800634e:	44bc      	add	ip, r7
 8006350:	4463      	add	r3, ip
 8006352:	2202      	movs	r2, #2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e0bd      	b.n	80064d4 <UART_SetConfig+0x250>
 8006358:	231b      	movs	r3, #27
 800635a:	2218      	movs	r2, #24
 800635c:	4694      	mov	ip, r2
 800635e:	44bc      	add	ip, r7
 8006360:	4463      	add	r3, ip
 8006362:	2204      	movs	r2, #4
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e0b5      	b.n	80064d4 <UART_SetConfig+0x250>
 8006368:	231b      	movs	r3, #27
 800636a:	2218      	movs	r2, #24
 800636c:	4694      	mov	ip, r2
 800636e:	44bc      	add	ip, r7
 8006370:	4463      	add	r3, ip
 8006372:	2208      	movs	r2, #8
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	e0ad      	b.n	80064d4 <UART_SetConfig+0x250>
 8006378:	231b      	movs	r3, #27
 800637a:	2218      	movs	r2, #24
 800637c:	4694      	mov	ip, r2
 800637e:	44bc      	add	ip, r7
 8006380:	4463      	add	r3, ip
 8006382:	2210      	movs	r2, #16
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e0a5      	b.n	80064d4 <UART_SetConfig+0x250>
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a81      	ldr	r2, [pc, #516]	; (8006594 <UART_SetConfig+0x310>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d136      	bne.n	8006400 <UART_SetConfig+0x17c>
 8006392:	4b7f      	ldr	r3, [pc, #508]	; (8006590 <UART_SetConfig+0x30c>)
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	220c      	movs	r2, #12
 8006398:	4013      	ands	r3, r2
 800639a:	2b0c      	cmp	r3, #12
 800639c:	d020      	beq.n	80063e0 <UART_SetConfig+0x15c>
 800639e:	d827      	bhi.n	80063f0 <UART_SetConfig+0x16c>
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d00d      	beq.n	80063c0 <UART_SetConfig+0x13c>
 80063a4:	d824      	bhi.n	80063f0 <UART_SetConfig+0x16c>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <UART_SetConfig+0x12c>
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d010      	beq.n	80063d0 <UART_SetConfig+0x14c>
 80063ae:	e01f      	b.n	80063f0 <UART_SetConfig+0x16c>
 80063b0:	231b      	movs	r3, #27
 80063b2:	2218      	movs	r2, #24
 80063b4:	4694      	mov	ip, r2
 80063b6:	44bc      	add	ip, r7
 80063b8:	4463      	add	r3, ip
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e089      	b.n	80064d4 <UART_SetConfig+0x250>
 80063c0:	231b      	movs	r3, #27
 80063c2:	2218      	movs	r2, #24
 80063c4:	4694      	mov	ip, r2
 80063c6:	44bc      	add	ip, r7
 80063c8:	4463      	add	r3, ip
 80063ca:	2202      	movs	r2, #2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e081      	b.n	80064d4 <UART_SetConfig+0x250>
 80063d0:	231b      	movs	r3, #27
 80063d2:	2218      	movs	r2, #24
 80063d4:	4694      	mov	ip, r2
 80063d6:	44bc      	add	ip, r7
 80063d8:	4463      	add	r3, ip
 80063da:	2204      	movs	r2, #4
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e079      	b.n	80064d4 <UART_SetConfig+0x250>
 80063e0:	231b      	movs	r3, #27
 80063e2:	2218      	movs	r2, #24
 80063e4:	4694      	mov	ip, r2
 80063e6:	44bc      	add	ip, r7
 80063e8:	4463      	add	r3, ip
 80063ea:	2208      	movs	r2, #8
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e071      	b.n	80064d4 <UART_SetConfig+0x250>
 80063f0:	231b      	movs	r3, #27
 80063f2:	2218      	movs	r2, #24
 80063f4:	4694      	mov	ip, r2
 80063f6:	44bc      	add	ip, r7
 80063f8:	4463      	add	r3, ip
 80063fa:	2210      	movs	r2, #16
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	e069      	b.n	80064d4 <UART_SetConfig+0x250>
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a64      	ldr	r2, [pc, #400]	; (8006598 <UART_SetConfig+0x314>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d107      	bne.n	800641a <UART_SetConfig+0x196>
 800640a:	231b      	movs	r3, #27
 800640c:	2218      	movs	r2, #24
 800640e:	4694      	mov	ip, r2
 8006410:	44bc      	add	ip, r7
 8006412:	4463      	add	r3, ip
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	e05c      	b.n	80064d4 <UART_SetConfig+0x250>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a5f      	ldr	r2, [pc, #380]	; (800659c <UART_SetConfig+0x318>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d107      	bne.n	8006434 <UART_SetConfig+0x1b0>
 8006424:	231b      	movs	r3, #27
 8006426:	2218      	movs	r2, #24
 8006428:	4694      	mov	ip, r2
 800642a:	44bc      	add	ip, r7
 800642c:	4463      	add	r3, ip
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e04f      	b.n	80064d4 <UART_SetConfig+0x250>
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a52      	ldr	r2, [pc, #328]	; (8006584 <UART_SetConfig+0x300>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d143      	bne.n	80064c6 <UART_SetConfig+0x242>
 800643e:	4b54      	ldr	r3, [pc, #336]	; (8006590 <UART_SetConfig+0x30c>)
 8006440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006442:	23c0      	movs	r3, #192	; 0xc0
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	4013      	ands	r3, r2
 8006448:	22c0      	movs	r2, #192	; 0xc0
 800644a:	0112      	lsls	r2, r2, #4
 800644c:	4293      	cmp	r3, r2
 800644e:	d02a      	beq.n	80064a6 <UART_SetConfig+0x222>
 8006450:	22c0      	movs	r2, #192	; 0xc0
 8006452:	0112      	lsls	r2, r2, #4
 8006454:	4293      	cmp	r3, r2
 8006456:	d82e      	bhi.n	80064b6 <UART_SetConfig+0x232>
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	0112      	lsls	r2, r2, #4
 800645c:	4293      	cmp	r3, r2
 800645e:	d012      	beq.n	8006486 <UART_SetConfig+0x202>
 8006460:	2280      	movs	r2, #128	; 0x80
 8006462:	0112      	lsls	r2, r2, #4
 8006464:	4293      	cmp	r3, r2
 8006466:	d826      	bhi.n	80064b6 <UART_SetConfig+0x232>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <UART_SetConfig+0x1f2>
 800646c:	2280      	movs	r2, #128	; 0x80
 800646e:	00d2      	lsls	r2, r2, #3
 8006470:	4293      	cmp	r3, r2
 8006472:	d010      	beq.n	8006496 <UART_SetConfig+0x212>
 8006474:	e01f      	b.n	80064b6 <UART_SetConfig+0x232>
 8006476:	231b      	movs	r3, #27
 8006478:	2218      	movs	r2, #24
 800647a:	4694      	mov	ip, r2
 800647c:	44bc      	add	ip, r7
 800647e:	4463      	add	r3, ip
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e026      	b.n	80064d4 <UART_SetConfig+0x250>
 8006486:	231b      	movs	r3, #27
 8006488:	2218      	movs	r2, #24
 800648a:	4694      	mov	ip, r2
 800648c:	44bc      	add	ip, r7
 800648e:	4463      	add	r3, ip
 8006490:	2202      	movs	r2, #2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e01e      	b.n	80064d4 <UART_SetConfig+0x250>
 8006496:	231b      	movs	r3, #27
 8006498:	2218      	movs	r2, #24
 800649a:	4694      	mov	ip, r2
 800649c:	44bc      	add	ip, r7
 800649e:	4463      	add	r3, ip
 80064a0:	2204      	movs	r2, #4
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e016      	b.n	80064d4 <UART_SetConfig+0x250>
 80064a6:	231b      	movs	r3, #27
 80064a8:	2218      	movs	r2, #24
 80064aa:	4694      	mov	ip, r2
 80064ac:	44bc      	add	ip, r7
 80064ae:	4463      	add	r3, ip
 80064b0:	2208      	movs	r2, #8
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e00e      	b.n	80064d4 <UART_SetConfig+0x250>
 80064b6:	231b      	movs	r3, #27
 80064b8:	2218      	movs	r2, #24
 80064ba:	4694      	mov	ip, r2
 80064bc:	44bc      	add	ip, r7
 80064be:	4463      	add	r3, ip
 80064c0:	2210      	movs	r2, #16
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e006      	b.n	80064d4 <UART_SetConfig+0x250>
 80064c6:	231b      	movs	r3, #27
 80064c8:	2218      	movs	r2, #24
 80064ca:	4694      	mov	ip, r2
 80064cc:	44bc      	add	ip, r7
 80064ce:	4463      	add	r3, ip
 80064d0:	2210      	movs	r2, #16
 80064d2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <UART_SetConfig+0x300>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d000      	beq.n	80064e0 <UART_SetConfig+0x25c>
 80064de:	e09e      	b.n	800661e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064e0:	231b      	movs	r3, #27
 80064e2:	2218      	movs	r2, #24
 80064e4:	4694      	mov	ip, r2
 80064e6:	44bc      	add	ip, r7
 80064e8:	4463      	add	r3, ip
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d01d      	beq.n	800652c <UART_SetConfig+0x2a8>
 80064f0:	dc20      	bgt.n	8006534 <UART_SetConfig+0x2b0>
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d015      	beq.n	8006522 <UART_SetConfig+0x29e>
 80064f6:	dc1d      	bgt.n	8006534 <UART_SetConfig+0x2b0>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <UART_SetConfig+0x27e>
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d005      	beq.n	800650c <UART_SetConfig+0x288>
 8006500:	e018      	b.n	8006534 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006502:	f7ff fc51 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8006506:	0003      	movs	r3, r0
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800650a:	e01d      	b.n	8006548 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800650c:	4b20      	ldr	r3, [pc, #128]	; (8006590 <UART_SetConfig+0x30c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2210      	movs	r2, #16
 8006512:	4013      	ands	r3, r2
 8006514:	d002      	beq.n	800651c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006516:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <UART_SetConfig+0x31c>)
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800651a:	e015      	b.n	8006548 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800651c:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <UART_SetConfig+0x320>)
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006520:	e012      	b.n	8006548 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7ff fb93 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 8006526:	0003      	movs	r3, r0
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800652a:	e00d      	b.n	8006548 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006532:	e009      	b.n	8006548 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006538:	231a      	movs	r3, #26
 800653a:	2218      	movs	r2, #24
 800653c:	4694      	mov	ip, r2
 800653e:	44bc      	add	ip, r7
 8006540:	4463      	add	r3, ip
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
        break;
 8006546:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d100      	bne.n	8006550 <UART_SetConfig+0x2cc>
 800654e:	e13c      	b.n	80067ca <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	0013      	movs	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	189b      	adds	r3, r3, r2
 800655a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655c:	429a      	cmp	r2, r3
 800655e:	d305      	bcc.n	800656c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006568:	429a      	cmp	r2, r3
 800656a:	d91d      	bls.n	80065a8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800656c:	231a      	movs	r3, #26
 800656e:	2218      	movs	r2, #24
 8006570:	4694      	mov	ip, r2
 8006572:	44bc      	add	ip, r7
 8006574:	4463      	add	r3, ip
 8006576:	2201      	movs	r2, #1
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	e126      	b.n	80067ca <UART_SetConfig+0x546>
 800657c:	efff69f3 	.word	0xefff69f3
 8006580:	ffffcfff 	.word	0xffffcfff
 8006584:	40004800 	.word	0x40004800
 8006588:	fffff4ff 	.word	0xfffff4ff
 800658c:	40013800 	.word	0x40013800
 8006590:	40021000 	.word	0x40021000
 8006594:	40004400 	.word	0x40004400
 8006598:	40004c00 	.word	0x40004c00
 800659c:	40005000 	.word	0x40005000
 80065a0:	003d0900 	.word	0x003d0900
 80065a4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	6939      	ldr	r1, [r7, #16]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	000b      	movs	r3, r1
 80065b6:	0e1b      	lsrs	r3, r3, #24
 80065b8:	0010      	movs	r0, r2
 80065ba:	0205      	lsls	r5, r0, #8
 80065bc:	431d      	orrs	r5, r3
 80065be:	000b      	movs	r3, r1
 80065c0:	021c      	lsls	r4, r3, #8
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68b8      	ldr	r0, [r7, #8]
 80065d0:	68f9      	ldr	r1, [r7, #12]
 80065d2:	1900      	adds	r0, r0, r4
 80065d4:	4169      	adcs	r1, r5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f7f9 ff44 	bl	8000470 <__aeabi_uldivmod>
 80065e8:	0002      	movs	r2, r0
 80065ea:	000b      	movs	r3, r1
 80065ec:	0013      	movs	r3, r2
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f2:	23c0      	movs	r3, #192	; 0xc0
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d309      	bcc.n	800660e <UART_SetConfig+0x38a>
 80065fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	035b      	lsls	r3, r3, #13
 8006600:	429a      	cmp	r2, r3
 8006602:	d204      	bcs.n	800660e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660a:	60da      	str	r2, [r3, #12]
 800660c:	e0dd      	b.n	80067ca <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800660e:	231a      	movs	r3, #26
 8006610:	2218      	movs	r2, #24
 8006612:	4694      	mov	ip, r2
 8006614:	44bc      	add	ip, r7
 8006616:	4463      	add	r3, ip
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	e0d5      	b.n	80067ca <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	69da      	ldr	r2, [r3, #28]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	429a      	cmp	r2, r3
 8006628:	d000      	beq.n	800662c <UART_SetConfig+0x3a8>
 800662a:	e074      	b.n	8006716 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800662c:	231b      	movs	r3, #27
 800662e:	2218      	movs	r2, #24
 8006630:	4694      	mov	ip, r2
 8006632:	44bc      	add	ip, r7
 8006634:	4463      	add	r3, ip
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d822      	bhi.n	8006682 <UART_SetConfig+0x3fe>
 800663c:	009a      	lsls	r2, r3, #2
 800663e:	4b6b      	ldr	r3, [pc, #428]	; (80067ec <UART_SetConfig+0x568>)
 8006640:	18d3      	adds	r3, r2, r3
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006646:	f7ff fbaf 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 800664a:	0003      	movs	r3, r0
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800664e:	e022      	b.n	8006696 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006650:	f7ff fbc0 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8006654:	0003      	movs	r3, r0
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006658:	e01d      	b.n	8006696 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800665a:	4b65      	ldr	r3, [pc, #404]	; (80067f0 <UART_SetConfig+0x56c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2210      	movs	r2, #16
 8006660:	4013      	ands	r3, r2
 8006662:	d002      	beq.n	800666a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006664:	4b63      	ldr	r3, [pc, #396]	; (80067f4 <UART_SetConfig+0x570>)
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006668:	e015      	b.n	8006696 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800666a:	4b63      	ldr	r3, [pc, #396]	; (80067f8 <UART_SetConfig+0x574>)
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800666e:	e012      	b.n	8006696 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006670:	f7ff faec 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 8006674:	0003      	movs	r3, r0
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006678:	e00d      	b.n	8006696 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667a:	2380      	movs	r3, #128	; 0x80
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006680:	e009      	b.n	8006696 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006686:	231a      	movs	r3, #26
 8006688:	2218      	movs	r2, #24
 800668a:	4694      	mov	ip, r2
 800668c:	44bc      	add	ip, r7
 800668e:	4463      	add	r3, ip
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
        break;
 8006694:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d100      	bne.n	800669e <UART_SetConfig+0x41a>
 800669c:	e095      	b.n	80067ca <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	005a      	lsls	r2, r3, #1
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	18d2      	adds	r2, r2, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	0019      	movs	r1, r3
 80066b0:	0010      	movs	r0, r2
 80066b2:	f7f9 fd29 	bl	8000108 <__udivsi3>
 80066b6:	0003      	movs	r3, r0
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d921      	bls.n	8006706 <UART_SetConfig+0x482>
 80066c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	025b      	lsls	r3, r3, #9
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d21c      	bcs.n	8006706 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	200e      	movs	r0, #14
 80066d2:	2418      	movs	r4, #24
 80066d4:	193b      	adds	r3, r7, r4
 80066d6:	181b      	adds	r3, r3, r0
 80066d8:	210f      	movs	r1, #15
 80066da:	438a      	bics	r2, r1
 80066dc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2207      	movs	r2, #7
 80066e6:	4013      	ands	r3, r2
 80066e8:	b299      	uxth	r1, r3
 80066ea:	193b      	adds	r3, r7, r4
 80066ec:	181b      	adds	r3, r3, r0
 80066ee:	193a      	adds	r2, r7, r4
 80066f0:	1812      	adds	r2, r2, r0
 80066f2:	8812      	ldrh	r2, [r2, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	193a      	adds	r2, r7, r4
 80066fe:	1812      	adds	r2, r2, r0
 8006700:	8812      	ldrh	r2, [r2, #0]
 8006702:	60da      	str	r2, [r3, #12]
 8006704:	e061      	b.n	80067ca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006706:	231a      	movs	r3, #26
 8006708:	2218      	movs	r2, #24
 800670a:	4694      	mov	ip, r2
 800670c:	44bc      	add	ip, r7
 800670e:	4463      	add	r3, ip
 8006710:	2201      	movs	r2, #1
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	e059      	b.n	80067ca <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006716:	231b      	movs	r3, #27
 8006718:	2218      	movs	r2, #24
 800671a:	4694      	mov	ip, r2
 800671c:	44bc      	add	ip, r7
 800671e:	4463      	add	r3, ip
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b08      	cmp	r3, #8
 8006724:	d822      	bhi.n	800676c <UART_SetConfig+0x4e8>
 8006726:	009a      	lsls	r2, r3, #2
 8006728:	4b34      	ldr	r3, [pc, #208]	; (80067fc <UART_SetConfig+0x578>)
 800672a:	18d3      	adds	r3, r2, r3
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006730:	f7ff fb3a 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8006734:	0003      	movs	r3, r0
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006738:	e022      	b.n	8006780 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800673a:	f7ff fb4b 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 800673e:	0003      	movs	r3, r0
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006742:	e01d      	b.n	8006780 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006744:	4b2a      	ldr	r3, [pc, #168]	; (80067f0 <UART_SetConfig+0x56c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2210      	movs	r2, #16
 800674a:	4013      	ands	r3, r2
 800674c:	d002      	beq.n	8006754 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800674e:	4b29      	ldr	r3, [pc, #164]	; (80067f4 <UART_SetConfig+0x570>)
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006752:	e015      	b.n	8006780 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8006754:	4b28      	ldr	r3, [pc, #160]	; (80067f8 <UART_SetConfig+0x574>)
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006758:	e012      	b.n	8006780 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7ff fa77 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 800675e:	0003      	movs	r3, r0
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006762:	e00d      	b.n	8006780 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800676a:	e009      	b.n	8006780 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006770:	231a      	movs	r3, #26
 8006772:	2218      	movs	r2, #24
 8006774:	4694      	mov	ip, r2
 8006776:	44bc      	add	ip, r7
 8006778:	4463      	add	r3, ip
 800677a:	2201      	movs	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
        break;
 800677e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d021      	beq.n	80067ca <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	085a      	lsrs	r2, r3, #1
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	18d2      	adds	r2, r2, r3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	0019      	movs	r1, r3
 8006796:	0010      	movs	r0, r2
 8006798:	f7f9 fcb6 	bl	8000108 <__udivsi3>
 800679c:	0003      	movs	r3, r0
 800679e:	b29b      	uxth	r3, r3
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b0f      	cmp	r3, #15
 80067a6:	d909      	bls.n	80067bc <UART_SetConfig+0x538>
 80067a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	025b      	lsls	r3, r3, #9
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d204      	bcs.n	80067bc <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	e006      	b.n	80067ca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80067bc:	231a      	movs	r3, #26
 80067be:	2218      	movs	r2, #24
 80067c0:	4694      	mov	ip, r2
 80067c2:	44bc      	add	ip, r7
 80067c4:	4463      	add	r3, ip
 80067c6:	2201      	movs	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2200      	movs	r2, #0
 80067ce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2200      	movs	r2, #0
 80067d4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067d6:	231a      	movs	r3, #26
 80067d8:	2218      	movs	r2, #24
 80067da:	4694      	mov	ip, r2
 80067dc:	44bc      	add	ip, r7
 80067de:	4463      	add	r3, ip
 80067e0:	781b      	ldrb	r3, [r3, #0]
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b00e      	add	sp, #56	; 0x38
 80067e8:	bdb0      	pop	{r4, r5, r7, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	0800718c 	.word	0x0800718c
 80067f0:	40021000 	.word	0x40021000
 80067f4:	003d0900 	.word	0x003d0900
 80067f8:	00f42400 	.word	0x00f42400
 80067fc:	080071b0 	.word	0x080071b0

08006800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2201      	movs	r2, #1
 800680e:	4013      	ands	r3, r2
 8006810:	d00b      	beq.n	800682a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4a4a      	ldr	r2, [pc, #296]	; (8006944 <UART_AdvFeatureConfig+0x144>)
 800681a:	4013      	ands	r3, r2
 800681c:	0019      	movs	r1, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2202      	movs	r2, #2
 8006830:	4013      	ands	r3, r2
 8006832:	d00b      	beq.n	800684c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4a43      	ldr	r2, [pc, #268]	; (8006948 <UART_AdvFeatureConfig+0x148>)
 800683c:	4013      	ands	r3, r2
 800683e:	0019      	movs	r1, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2204      	movs	r2, #4
 8006852:	4013      	ands	r3, r2
 8006854:	d00b      	beq.n	800686e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4a3b      	ldr	r2, [pc, #236]	; (800694c <UART_AdvFeatureConfig+0x14c>)
 800685e:	4013      	ands	r3, r2
 8006860:	0019      	movs	r1, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	2208      	movs	r2, #8
 8006874:	4013      	ands	r3, r2
 8006876:	d00b      	beq.n	8006890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	4a34      	ldr	r2, [pc, #208]	; (8006950 <UART_AdvFeatureConfig+0x150>)
 8006880:	4013      	ands	r3, r2
 8006882:	0019      	movs	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	2210      	movs	r2, #16
 8006896:	4013      	ands	r3, r2
 8006898:	d00b      	beq.n	80068b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a2c      	ldr	r2, [pc, #176]	; (8006954 <UART_AdvFeatureConfig+0x154>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	0019      	movs	r1, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2220      	movs	r2, #32
 80068b8:	4013      	ands	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	4a25      	ldr	r2, [pc, #148]	; (8006958 <UART_AdvFeatureConfig+0x158>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	0019      	movs	r1, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	2240      	movs	r2, #64	; 0x40
 80068da:	4013      	ands	r3, r2
 80068dc:	d01d      	beq.n	800691a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <UART_AdvFeatureConfig+0x15c>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	0019      	movs	r1, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fa:	2380      	movs	r3, #128	; 0x80
 80068fc:	035b      	lsls	r3, r3, #13
 80068fe:	429a      	cmp	r2, r3
 8006900:	d10b      	bne.n	800691a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a15      	ldr	r2, [pc, #84]	; (8006960 <UART_AdvFeatureConfig+0x160>)
 800690a:	4013      	ands	r3, r2
 800690c:	0019      	movs	r1, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2280      	movs	r2, #128	; 0x80
 8006920:	4013      	ands	r3, r2
 8006922:	d00b      	beq.n	800693c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4a0e      	ldr	r2, [pc, #56]	; (8006964 <UART_AdvFeatureConfig+0x164>)
 800692c:	4013      	ands	r3, r2
 800692e:	0019      	movs	r1, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }
}
 800693c:	46c0      	nop			; (mov r8, r8)
 800693e:	46bd      	mov	sp, r7
 8006940:	b002      	add	sp, #8
 8006942:	bd80      	pop	{r7, pc}
 8006944:	fffdffff 	.word	0xfffdffff
 8006948:	fffeffff 	.word	0xfffeffff
 800694c:	fffbffff 	.word	0xfffbffff
 8006950:	ffff7fff 	.word	0xffff7fff
 8006954:	ffffefff 	.word	0xffffefff
 8006958:	ffffdfff 	.word	0xffffdfff
 800695c:	ffefffff 	.word	0xffefffff
 8006960:	ff9fffff 	.word	0xff9fffff
 8006964:	fff7ffff 	.word	0xfff7ffff

08006968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af02      	add	r7, sp, #8
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2280      	movs	r2, #128	; 0x80
 8006974:	2100      	movs	r1, #0
 8006976:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006978:	f7fd fca2 	bl	80042c0 <HAL_GetTick>
 800697c:	0003      	movs	r3, r0
 800697e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2208      	movs	r2, #8
 8006988:	4013      	ands	r3, r2
 800698a:	2b08      	cmp	r3, #8
 800698c:	d10c      	bne.n	80069a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2280      	movs	r2, #128	; 0x80
 8006992:	0391      	lsls	r1, r2, #14
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <UART_CheckIdleState+0x8c>)
 8006998:	9200      	str	r2, [sp, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	f000 f82c 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 80069a0:	1e03      	subs	r3, r0, #0
 80069a2:	d001      	beq.n	80069a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e021      	b.n	80069ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2204      	movs	r2, #4
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d10c      	bne.n	80069d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2280      	movs	r2, #128	; 0x80
 80069ba:	03d1      	lsls	r1, r2, #15
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <UART_CheckIdleState+0x8c>)
 80069c0:	9200      	str	r2, [sp, #0]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f000 f818 	bl	80069f8 <UART_WaitOnFlagUntilTimeout>
 80069c8:	1e03      	subs	r3, r0, #0
 80069ca:	d001      	beq.n	80069d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e00d      	b.n	80069ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2274      	movs	r2, #116	; 0x74
 80069e6:	2100      	movs	r1, #0
 80069e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	0018      	movs	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b004      	add	sp, #16
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	01ffffff 	.word	0x01ffffff

080069f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b094      	sub	sp, #80	; 0x50
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	1dfb      	adds	r3, r7, #7
 8006a06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a08:	e0a3      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	d100      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006a10:	e09f      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a12:	f7fd fc55 	bl	80042c0 <HAL_GetTick>
 8006a16:	0002      	movs	r2, r0
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d302      	bcc.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d13d      	bne.n	8006aa4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a28:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a30:	647b      	str	r3, [r7, #68]	; 0x44
 8006a32:	2301      	movs	r3, #1
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	f383 8810 	msr	PRIMASK, r3
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	494c      	ldr	r1, [pc, #304]	; (8006b7c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006a4a:	400a      	ands	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f383 8810 	msr	PRIMASK, r3
}
 8006a58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a62:	643b      	str	r3, [r7, #64]	; 0x40
 8006a64:	2301      	movs	r3, #1
 8006a66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	f383 8810 	msr	PRIMASK, r3
}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	438a      	bics	r2, r1
 8006a7e:	609a      	str	r2, [r3, #8]
 8006a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a86:	f383 8810 	msr	PRIMASK, r3
}
 8006a8a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2274      	movs	r2, #116	; 0x74
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e067      	b.n	8006b74 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2204      	movs	r2, #4
 8006aac:	4013      	ands	r3, r2
 8006aae:	d050      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69da      	ldr	r2, [r3, #28]
 8006ab6:	2380      	movs	r3, #128	; 0x80
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	401a      	ands	r2, r3
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d146      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2280      	movs	r2, #128	; 0x80
 8006aca:	0112      	lsls	r2, r2, #4
 8006acc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ace:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad2:	613b      	str	r3, [r7, #16]
  return(result);
 8006ad4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad8:	2301      	movs	r3, #1
 8006ada:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f383 8810 	msr	PRIMASK, r3
}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4923      	ldr	r1, [pc, #140]	; (8006b7c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006af0:	400a      	ands	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f383 8810 	msr	PRIMASK, r3
}
 8006afe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b00:	f3ef 8310 	mrs	r3, PRIMASK
 8006b04:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b06:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	f383 8810 	msr	PRIMASK, r3
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2101      	movs	r1, #1
 8006b22:	438a      	bics	r2, r1
 8006b24:	609a      	str	r2, [r3, #8]
 8006b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	f383 8810 	msr	PRIMASK, r3
}
 8006b30:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2280      	movs	r2, #128	; 0x80
 8006b42:	2120      	movs	r1, #32
 8006b44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2274      	movs	r2, #116	; 0x74
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e010      	b.n	8006b74 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	425a      	negs	r2, r3
 8006b62:	4153      	adcs	r3, r2
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	001a      	movs	r2, r3
 8006b68:	1dfb      	adds	r3, r7, #7
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d100      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006b70:	e74b      	b.n	8006a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b014      	add	sp, #80	; 0x50
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	fffffe5f 	.word	0xfffffe5f

08006b80 <__libc_init_array>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	2600      	movs	r6, #0
 8006b84:	4d0c      	ldr	r5, [pc, #48]	; (8006bb8 <__libc_init_array+0x38>)
 8006b86:	4c0d      	ldr	r4, [pc, #52]	; (8006bbc <__libc_init_array+0x3c>)
 8006b88:	1b64      	subs	r4, r4, r5
 8006b8a:	10a4      	asrs	r4, r4, #2
 8006b8c:	42a6      	cmp	r6, r4
 8006b8e:	d109      	bne.n	8006ba4 <__libc_init_array+0x24>
 8006b90:	2600      	movs	r6, #0
 8006b92:	f000 f821 	bl	8006bd8 <_init>
 8006b96:	4d0a      	ldr	r5, [pc, #40]	; (8006bc0 <__libc_init_array+0x40>)
 8006b98:	4c0a      	ldr	r4, [pc, #40]	; (8006bc4 <__libc_init_array+0x44>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	42a6      	cmp	r6, r4
 8006ba0:	d105      	bne.n	8006bae <__libc_init_array+0x2e>
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	00b3      	lsls	r3, r6, #2
 8006ba6:	58eb      	ldr	r3, [r5, r3]
 8006ba8:	4798      	blx	r3
 8006baa:	3601      	adds	r6, #1
 8006bac:	e7ee      	b.n	8006b8c <__libc_init_array+0xc>
 8006bae:	00b3      	lsls	r3, r6, #2
 8006bb0:	58eb      	ldr	r3, [r5, r3]
 8006bb2:	4798      	blx	r3
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	e7f2      	b.n	8006b9e <__libc_init_array+0x1e>
 8006bb8:	080071dc 	.word	0x080071dc
 8006bbc:	080071dc 	.word	0x080071dc
 8006bc0:	080071dc 	.word	0x080071dc
 8006bc4:	080071e0 	.word	0x080071e0

08006bc8 <memset>:
 8006bc8:	0003      	movs	r3, r0
 8006bca:	1882      	adds	r2, r0, r2
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <memset+0xa>
 8006bd0:	4770      	bx	lr
 8006bd2:	7019      	strb	r1, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	e7f9      	b.n	8006bcc <memset+0x4>

08006bd8 <_init>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bde:	bc08      	pop	{r3}
 8006be0:	469e      	mov	lr, r3
 8006be2:	4770      	bx	lr

08006be4 <_fini>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr
