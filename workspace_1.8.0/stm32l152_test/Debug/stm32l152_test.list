
stm32l152_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004448  08004448  00014448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ec  080044ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08004500  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08004500  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af01  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a53  00000000  00000000  0002af36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002c990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133a0  00000000  00000000  0002dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdf7  00000000  00000000  00041380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077200  00000000  00000000  0004e177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003270  00000000  00000000  000c53cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000000c 	.word	0x2000000c
 800015c:	00000000 	.word	0x00000000
 8000160:	08004430 	.word	0x08004430

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000010 	.word	0x20000010
 800017c:	08004430 	.word	0x08004430

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	468e      	mov	lr, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f040 8083 	bne.w	8000c04 <__udivmoddi4+0x118>
 8000afe:	428a      	cmp	r2, r1
 8000b00:	4617      	mov	r7, r2
 8000b02:	d947      	bls.n	8000b94 <__udivmoddi4+0xa8>
 8000b04:	fab2 f382 	clz	r3, r2
 8000b08:	b14b      	cbz	r3, 8000b1e <__udivmoddi4+0x32>
 8000b0a:	f1c3 0120 	rsb	r1, r3, #32
 8000b0e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000b12:	fa20 f101 	lsr.w	r1, r0, r1
 8000b16:	409f      	lsls	r7, r3
 8000b18:	ea41 0e0e 	orr.w	lr, r1, lr
 8000b1c:	409c      	lsls	r4, r3
 8000b1e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b22:	fbbe fcf8 	udiv	ip, lr, r8
 8000b26:	fa1f f987 	uxth.w	r9, r7
 8000b2a:	fb08 e21c 	mls	r2, r8, ip, lr
 8000b2e:	fb0c f009 	mul.w	r0, ip, r9
 8000b32:	0c21      	lsrs	r1, r4, #16
 8000b34:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000b38:	4290      	cmp	r0, r2
 8000b3a:	d90a      	bls.n	8000b52 <__udivmoddi4+0x66>
 8000b3c:	18ba      	adds	r2, r7, r2
 8000b3e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000b42:	f080 8118 	bcs.w	8000d76 <__udivmoddi4+0x28a>
 8000b46:	4290      	cmp	r0, r2
 8000b48:	f240 8115 	bls.w	8000d76 <__udivmoddi4+0x28a>
 8000b4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b50:	443a      	add	r2, r7
 8000b52:	1a12      	subs	r2, r2, r0
 8000b54:	fbb2 f0f8 	udiv	r0, r2, r8
 8000b58:	fb08 2210 	mls	r2, r8, r0, r2
 8000b5c:	fb00 f109 	mul.w	r1, r0, r9
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b66:	42a1      	cmp	r1, r4
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b6a:	193c      	adds	r4, r7, r4
 8000b6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b70:	f080 8103 	bcs.w	8000d7a <__udivmoddi4+0x28e>
 8000b74:	42a1      	cmp	r1, r4
 8000b76:	f240 8100 	bls.w	8000d7a <__udivmoddi4+0x28e>
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	443c      	add	r4, r7
 8000b7e:	1a64      	subs	r4, r4, r1
 8000b80:	2100      	movs	r1, #0
 8000b82:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b86:	b11e      	cbz	r6, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	40dc      	lsrs	r4, r3
 8000b8c:	e9c6 4200 	strd	r4, r2, [r6]
 8000b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xac>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f382 	clz	r3, r2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14f      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000ba0:	1a8d      	subs	r5, r1, r2
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ba8:	fa1f f882 	uxth.w	r8, r2
 8000bac:	fbb5 fcfe 	udiv	ip, r5, lr
 8000bb0:	fb0e 551c 	mls	r5, lr, ip, r5
 8000bb4:	fb08 f00c 	mul.w	r0, r8, ip
 8000bb8:	0c22      	lsrs	r2, r4, #16
 8000bba:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000bbe:	42a8      	cmp	r0, r5
 8000bc0:	d907      	bls.n	8000bd2 <__udivmoddi4+0xe6>
 8000bc2:	197d      	adds	r5, r7, r5
 8000bc4:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0xe4>
 8000bca:	42a8      	cmp	r0, r5
 8000bcc:	f200 80e9 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	1a2d      	subs	r5, r5, r0
 8000bd4:	fbb5 f0fe 	udiv	r0, r5, lr
 8000bd8:	fb0e 5510 	mls	r5, lr, r0, r5
 8000bdc:	fb08 f800 	mul.w	r8, r8, r0
 8000be0:	b2a4      	uxth	r4, r4
 8000be2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be6:	45a0      	cmp	r8, r4
 8000be8:	d907      	bls.n	8000bfa <__udivmoddi4+0x10e>
 8000bea:	193c      	adds	r4, r7, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x10c>
 8000bf2:	45a0      	cmp	r8, r4
 8000bf4:	f200 80d9 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 0408 	sub.w	r4, r4, r8
 8000bfe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c02:	e7c0      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	f000 80b1 	beq.w	8000d70 <__udivmoddi4+0x284>
 8000c0e:	2100      	movs	r1, #0
 8000c10:	e9c6 0500 	strd	r0, r5, [r6]
 8000c14:	4608      	mov	r0, r1
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f183 	clz	r1, r3
 8000c1e:	2900      	cmp	r1, #0
 8000c20:	d14b      	bne.n	8000cba <__udivmoddi4+0x1ce>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b9 	bhi.w	8000d9e <__udivmoddi4+0x2b2>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	469e      	mov	lr, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0aa      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000c3a:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c3e:	e7a7      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000c40:	409f      	lsls	r7, r3
 8000c42:	f1c3 0220 	rsb	r2, r3, #32
 8000c46:	40d1      	lsrs	r1, r2
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c50:	fa1f f887 	uxth.w	r8, r7
 8000c54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c58:	fa24 f202 	lsr.w	r2, r4, r2
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	fb00 fc08 	mul.w	ip, r0, r8
 8000c62:	432a      	orrs	r2, r5
 8000c64:	0c15      	lsrs	r5, r2, #16
 8000c66:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000c6a:	45ac      	cmp	ip, r5
 8000c6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x19a>
 8000c72:	197d      	adds	r5, r7, r5
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	f080 808f 	bcs.w	8000d9a <__udivmoddi4+0x2ae>
 8000c7c:	45ac      	cmp	ip, r5
 8000c7e:	f240 808c 	bls.w	8000d9a <__udivmoddi4+0x2ae>
 8000c82:	3802      	subs	r0, #2
 8000c84:	443d      	add	r5, r7
 8000c86:	eba5 050c 	sub.w	r5, r5, ip
 8000c8a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000c8e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000c92:	fb01 f908 	mul.w	r9, r1, r8
 8000c96:	b295      	uxth	r5, r2
 8000c98:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c9c:	45a9      	cmp	r9, r5
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	197d      	adds	r5, r7, r5
 8000ca2:	f101 32ff 	add.w	r2, r1, #4294967295
 8000ca6:	d274      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000ca8:	45a9      	cmp	r9, r5
 8000caa:	d972      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000cac:	3902      	subs	r1, #2
 8000cae:	443d      	add	r5, r7
 8000cb0:	eba5 0509 	sub.w	r5, r5, r9
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	e778      	b.n	8000bac <__udivmoddi4+0xc0>
 8000cba:	f1c1 0720 	rsb	r7, r1, #32
 8000cbe:	408b      	lsls	r3, r1
 8000cc0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc8:	fa25 f407 	lsr.w	r4, r5, r7
 8000ccc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd0:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cd4:	fa1f f88c 	uxth.w	r8, ip
 8000cd8:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cdc:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce0:	fb09 fa08 	mul.w	sl, r9, r8
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	431d      	orrs	r5, r3
 8000ce8:	0c2b      	lsrs	r3, r5, #16
 8000cea:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf4:	fa00 f301 	lsl.w	r3, r0, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0x222>
 8000cfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfe:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d02:	d248      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d946      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000d08:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d16:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d1a:	fb00 fa08 	mul.w	sl, r0, r8
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d24:	45a2      	cmp	sl, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x24e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d30:	d22d      	bcs.n	8000d8e <__udivmoddi4+0x2a2>
 8000d32:	45a2      	cmp	sl, r4
 8000d34:	d92b      	bls.n	8000d8e <__udivmoddi4+0x2a2>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	eba4 040a 	sub.w	r4, r4, sl
 8000d46:	454c      	cmp	r4, r9
 8000d48:	46c6      	mov	lr, r8
 8000d4a:	464d      	mov	r5, r9
 8000d4c:	d319      	bcc.n	8000d82 <__udivmoddi4+0x296>
 8000d4e:	d016      	beq.n	8000d7e <__udivmoddi4+0x292>
 8000d50:	b15e      	cbz	r6, 8000d6a <__udivmoddi4+0x27e>
 8000d52:	ebb3 020e 	subs.w	r2, r3, lr
 8000d56:	eb64 0405 	sbc.w	r4, r4, r5
 8000d5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d62:	431f      	orrs	r7, r3
 8000d64:	40cc      	lsrs	r4, r1
 8000d66:	e9c6 7400 	strd	r7, r4, [r6]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d70:	4631      	mov	r1, r6
 8000d72:	4630      	mov	r0, r6
 8000d74:	e70c      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d76:	468c      	mov	ip, r1
 8000d78:	e6eb      	b.n	8000b52 <__udivmoddi4+0x66>
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	e6ff      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d7e:	4543      	cmp	r3, r8
 8000d80:	d2e6      	bcs.n	8000d50 <__udivmoddi4+0x264>
 8000d82:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d86:	eb69 050c 	sbc.w	r5, r9, ip
 8000d8a:	3801      	subs	r0, #1
 8000d8c:	e7e0      	b.n	8000d50 <__udivmoddi4+0x264>
 8000d8e:	4628      	mov	r0, r5
 8000d90:	e7d3      	b.n	8000d3a <__udivmoddi4+0x24e>
 8000d92:	4611      	mov	r1, r2
 8000d94:	e78c      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d96:	4681      	mov	r9, r0
 8000d98:	e7b9      	b.n	8000d0e <__udivmoddi4+0x222>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e773      	b.n	8000c86 <__udivmoddi4+0x19a>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e749      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da6:	443d      	add	r5, r7
 8000da8:	e713      	b.n	8000bd2 <__udivmoddi4+0xe6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	e724      	b.n	8000bfa <__udivmoddi4+0x10e>

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f001 feaf 	bl	8002b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f812 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 f8e6 	bl	8000f90 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000dc4:	f000 f856 	bl	8000e74 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000dc8:	f000 f882 	bl	8000ed0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000dcc:	f000 f8b6 	bl	8000f3c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("hello world!\r\n");
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <main+0x2c>)
 8000dd2:	f001 fd39 	bl	8002848 <printf_>
	  HAL_Delay(5000);
 8000dd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dda:	f001 ff0d 	bl	8002bf8 <HAL_Delay>
	  printf("hello world!\r\n");
 8000dde:	e7f7      	b.n	8000dd0 <main+0x1c>
 8000de0:	08004448 	.word	0x08004448

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b092      	sub	sp, #72	; 0x48
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	2234      	movs	r2, #52	; 0x34
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fb14 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <SystemClock_Config+0x8c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <SystemClock_Config+0x8c>)
 8000e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e14:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e16:	2310      	movs	r3, #16
 8000e18:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e22:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 faab 	bl	800338c <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f8ca 	bl	8000fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fdc7 	bl	80039ec <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e64:	f000 f8b6 	bl	8000fd4 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3748      	adds	r7, #72	; 0x48
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40007000 	.word	0x40007000

08000e74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <MX_I2C2_Init+0x54>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_I2C2_Init+0x58>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_I2C2_Init+0x50>)
 8000eb2:	f002 f927 	bl	8003104 <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f000 f88a 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000084 	.word	0x20000084
 8000ec8:	40005800 	.word	0x40005800
 8000ecc:	000186a0 	.word	0x000186a0

08000ed0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <MX_SPI2_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000efc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_SPI2_Init+0x64>)
 8000f22:	f002 ffcf 	bl	8003ec4 <HAL_SPI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f2c:	f000 f852 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000002c 	.word	0x2000002c
 8000f38:	40003800 	.word	0x40003800

08000f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f003 f822 	bl	8003fbc <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f000 f829 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000d8 	.word	0x200000d8
 8000f8c:	40013800 	.word	0x40013800

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_GPIO_Init+0x40>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <MX_GPIO_Init+0x40>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_GPIO_Init+0x40>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_GPIO_Init+0x40>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <MX_GPIO_Init+0x40>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <MX_GPIO_Init+0x40>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <__putchar>:

extern UART_HandleTypeDef huart1;

static char outchar;

void __putchar(char character) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	outchar=character;
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <__putchar+0x28>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(&huart1, &outchar, 1, 0xFFFF);
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4904      	ldr	r1, [pc, #16]	; (8001008 <__putchar+0x28>)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <__putchar+0x2c>)
 8000ffa:	f003 f82c 	bl	8004056 <HAL_UART_Transmit>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000028 	.word	0x20000028
 800100c:	200000d8 	.word	0x200000d8

08001010 <_out_null>:
        ((char *)buffer)[idx] = character;
    }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <_out_char+0x1e>
        __putchar(character);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffcc 	bl	8000fe0 <__putchar>
    }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_strnlen_s>:
    }
}

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
    const char *s;
    for (s = str; *s && maxsize--; ++s)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e002      	b.n	8001066 <_strnlen_s+0x16>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <_strnlen_s+0x28>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	1e5a      	subs	r2, r3, #1
 8001072:	603a      	str	r2, [r7, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f3      	bne.n	8001060 <_strnlen_s+0x10>
        ;
    return (unsigned int)(s - str);
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1ad3      	subs	r3, r2, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b2f      	cmp	r3, #47	; 0x2f
 8001096:	d904      	bls.n	80010a2 <_is_digit+0x1a>
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b39      	cmp	r3, #57	; 0x39
 800109c:	d801      	bhi.n	80010a2 <_is_digit+0x1a>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <_is_digit+0x1c>
 80010a2:	2300      	movs	r3, #0
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    unsigned int i = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
 80010c0:	e00e      	b.n	80010e0 <_atoi+0x2c>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1c59      	adds	r1, r3, #1
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6011      	str	r1, [r2, #0]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4403      	add	r3, r0
 80010dc:	3b30      	subs	r3, #48	; 0x30
 80010de:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffce 	bl	8001088 <_is_digit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1e7      	bne.n	80010c2 <_atoi+0xe>
    }
    return i;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
    const size_t start_idx = idx;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	613b      	str	r3, [r7, #16]

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800110e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d125      	bne.n	8001164 <_out_rev+0x68>
 8001118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d120      	bne.n	8001164 <_out_rev+0x68>
        size_t i;
        for (i = len; i < width; i++) {
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e00a      	b.n	800113e <_out_rev+0x42>
            out(' ', buffer, idx++, maxlen);
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1c53      	adds	r3, r2, #1
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	68fc      	ldr	r4, [r7, #12]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	2020      	movs	r0, #32
 8001136:	47a0      	blx	r4
        for (i = len; i < width; i++) {
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001142:	429a      	cmp	r2, r3
 8001144:	d3f0      	bcc.n	8001128 <_out_rev+0x2c>
        }
    }

    // reverse string
    while (len) {
 8001146:	e00d      	b.n	8001164 <_out_rev+0x68>
        out(buf[--len], buffer, idx++, maxlen);
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	3b01      	subs	r3, #1
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800114e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	4413      	add	r3, r2
 8001154:	7818      	ldrb	r0, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	1c53      	adds	r3, r2, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	68fc      	ldr	r4, [r7, #12]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	47a0      	blx	r4
    while (len) {
 8001164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1ee      	bne.n	8001148 <_out_rev+0x4c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
 800116a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <_out_rev+0x96>
        while (idx - start_idx < width) {
 8001174:	e007      	b.n	8001186 <_out_rev+0x8a>
            out(' ', buffer, idx++, maxlen);
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	1c53      	adds	r3, r2, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	68fc      	ldr	r4, [r7, #12]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	2020      	movs	r0, #32
 8001184:	47a0      	blx	r4
        while (idx - start_idx < width) {
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118e:	429a      	cmp	r2, r3
 8001190:	d8f1      	bhi.n	8001176 <_out_rev+0x7a>
        }
    }

    return idx;
 8001192:	687b      	ldr	r3, [r7, #4]
}
 8001194:	4618      	mov	r0, r3
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
 80011aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d136      	bne.n	8001222 <_ntoa_format+0x86>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80011b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d018      	beq.n	80011ec <_ntoa_format+0x50>
 80011ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <_ntoa_format+0x50>
 80011c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d104      	bne.n	80011d6 <_ntoa_format+0x3a>
 80011cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <_ntoa_format+0x50>
            width--;
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	3b01      	subs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80011dc:	e006      	b.n	80011ec <_ntoa_format+0x50>
            buf[len++] = '0';
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	61fa      	str	r2, [r7, #28]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4413      	add	r3, r2
 80011e8:	2230      	movs	r2, #48	; 0x30
 80011ea:	701a      	strb	r2, [r3, #0]
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d20a      	bcs.n	800120a <_ntoa_format+0x6e>
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b1f      	cmp	r3, #31
 80011f8:	d9f1      	bls.n	80011de <_ntoa_format+0x42>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80011fa:	e006      	b.n	800120a <_ntoa_format+0x6e>
            buf[len++] = '0';
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	61fa      	str	r2, [r7, #28]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4413      	add	r3, r2
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	701a      	strb	r2, [r3, #0]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <_ntoa_format+0x86>
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	429a      	cmp	r2, r3
 800121a:	d202      	bcs.n	8001222 <_ntoa_format+0x86>
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b1f      	cmp	r3, #31
 8001220:	d9ec      	bls.n	80011fc <_ntoa_format+0x60>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d058      	beq.n	80012de <_ntoa_format+0x142>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <_ntoa_format+0xc8>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <_ntoa_format+0xc8>
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	429a      	cmp	r2, r3
 8001242:	d003      	beq.n	800124c <_ntoa_format+0xb0>
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	429a      	cmp	r2, r3
 800124a:	d10b      	bne.n	8001264 <_ntoa_format+0xc8>
            len--;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3b01      	subs	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
            if (len && (base == 16U)) {
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <_ntoa_format+0xc8>
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	2b10      	cmp	r3, #16
 800125c:	d102      	bne.n	8001264 <_ntoa_format+0xc8>
                len--;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b01      	subs	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	2b10      	cmp	r3, #16
 8001268:	d10f      	bne.n	800128a <_ntoa_format+0xee>
 800126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10a      	bne.n	800128a <_ntoa_format+0xee>
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b1f      	cmp	r3, #31
 8001278:	d807      	bhi.n	800128a <_ntoa_format+0xee>
            buf[len++] = 'x';
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	61fa      	str	r2, [r7, #28]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4413      	add	r3, r2
 8001284:	2278      	movs	r2, #120	; 0x78
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e01f      	b.n	80012ca <_ntoa_format+0x12e>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	2b10      	cmp	r3, #16
 800128e:	d10f      	bne.n	80012b0 <_ntoa_format+0x114>
 8001290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00a      	beq.n	80012b0 <_ntoa_format+0x114>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2b1f      	cmp	r3, #31
 800129e:	d807      	bhi.n	80012b0 <_ntoa_format+0x114>
            buf[len++] = 'X';
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	61fa      	str	r2, [r7, #28]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4413      	add	r3, r2
 80012aa:	2258      	movs	r2, #88	; 0x58
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e00c      	b.n	80012ca <_ntoa_format+0x12e>
        } else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d109      	bne.n	80012ca <_ntoa_format+0x12e>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	2b1f      	cmp	r3, #31
 80012ba:	d806      	bhi.n	80012ca <_ntoa_format+0x12e>
            buf[len++] = 'b';
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61fa      	str	r2, [r7, #28]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4413      	add	r3, r2
 80012c6:	2262      	movs	r2, #98	; 0x62
 80012c8:	701a      	strb	r2, [r3, #0]
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2b1f      	cmp	r3, #31
 80012ce:	d806      	bhi.n	80012de <_ntoa_format+0x142>
            buf[len++] = '0';
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	61fa      	str	r2, [r7, #28]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4413      	add	r3, r2
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	701a      	strb	r2, [r3, #0]
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2b1f      	cmp	r3, #31
 80012e2:	d824      	bhi.n	800132e <_ntoa_format+0x192>
        if (negative) {
 80012e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <_ntoa_format+0x160>
            buf[len++] = '-';
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	61fa      	str	r2, [r7, #28]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4413      	add	r3, r2
 80012f6:	222d      	movs	r2, #45	; 0x2d
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e018      	b.n	800132e <_ntoa_format+0x192>
        } else if (flags & FLAGS_PLUS) {
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <_ntoa_format+0x17a>
            buf[len++] = '+'; // ignore the space if the '+' exists
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	61fa      	str	r2, [r7, #28]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4413      	add	r3, r2
 8001310:	222b      	movs	r2, #43	; 0x2b
 8001312:	701a      	strb	r2, [r3, #0]
 8001314:	e00b      	b.n	800132e <_ntoa_format+0x192>
        } else if (flags & FLAGS_SPACE) {
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <_ntoa_format+0x192>
            buf[len++] = ' ';
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	61fa      	str	r2, [r7, #28]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4413      	add	r3, r2
 800132a:	2220      	movs	r2, #32
 800132c:	701a      	strb	r2, [r3, #0]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f7ff fed9 	bl	80010fc <_out_rev>
 800134a:	4603      	mov	r3, r0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value,
                         bool negative, unsigned long base, unsigned int prec, unsigned int width,
                         unsigned int flags) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b096      	sub	sp, #88	; 0x58
 8001358:	af08      	add	r7, sp, #32
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
 8001366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
 800136c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136e:	f023 0310 	bic.w	r3, r3, #16
 8001372:	657b      	str	r3, [r7, #84]	; 0x54
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 8001374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <_ntoa_long+0x30>
 800137e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d033      	beq.n	80013ec <_ntoa_long+0x98>
        do {
            const char digit = (char)(value % base);
 8001384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001388:	fbb3 f2f2 	udiv	r2, r3, r2
 800138c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800138e:	fb01 f202 	mul.w	r2, r1, r2
 8001392:	1a9b      	subs	r3, r3, r2
 8001394:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001398:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800139c:	2b09      	cmp	r3, #9
 800139e:	d804      	bhi.n	80013aa <_ntoa_long+0x56>
 80013a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013a4:	3330      	adds	r3, #48	; 0x30
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	e00d      	b.n	80013c6 <_ntoa_long+0x72>
 80013aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <_ntoa_long+0x64>
 80013b4:	2241      	movs	r2, #65	; 0x41
 80013b6:	e000      	b.n	80013ba <_ntoa_long+0x66>
 80013b8:	2261      	movs	r2, #97	; 0x61
 80013ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013be:	4413      	add	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3b0a      	subs	r3, #10
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c8:	1c59      	adds	r1, r3, #1
 80013ca:	6379      	str	r1, [r7, #52]	; 0x34
 80013cc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80013d0:	440b      	add	r3, r1
 80013d2:	f803 2c28 	strb.w	r2, [r3, #-40]
            value /= base;
 80013d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80013e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <_ntoa_long+0x98>
 80013e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e8:	2b1f      	cmp	r3, #31
 80013ea:	d9cb      	bls.n	8001384 <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80013ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ee:	9306      	str	r3, [sp, #24]
 80013f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f2:	9305      	str	r3, [sp, #20]
 80013f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f6:	9304      	str	r3, [sp, #16]
 80013f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013fa:	9303      	str	r3, [sp, #12]
 80013fc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff fec2 	bl	800119c <_ntoa_format>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3738      	adds	r7, #56	; 0x38
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
 8001422:	b580      	push	{r7, lr}
 8001424:	b096      	sub	sp, #88	; 0x58
 8001426:	af08      	add	r7, sp, #32
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
 8001434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001438:	4313      	orrs	r3, r2
 800143a:	d103      	bne.n	8001444 <_ntoa_long_long+0x22>
        flags &= ~FLAGS_HASH;
 800143c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800143e:	f023 0310 	bic.w	r3, r3, #16
 8001442:	663b      	str	r3, [r7, #96]	; 0x60
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
 8001444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <_ntoa_long_long+0x34>
 800144e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001452:	4313      	orrs	r3, r2
 8001454:	d038      	beq.n	80014c8 <_ntoa_long_long+0xa6>
        do {
            const char digit = (char)(value % base);
 8001456:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800145a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800145e:	f7ff fb2d 	bl	8000abc <__aeabi_uldivmod>
 8001462:	4613      	mov	r3, r2
 8001464:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800146c:	2b09      	cmp	r3, #9
 800146e:	d804      	bhi.n	800147a <_ntoa_long_long+0x58>
 8001470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001474:	3330      	adds	r3, #48	; 0x30
 8001476:	b2da      	uxtb	r2, r3
 8001478:	e00d      	b.n	8001496 <_ntoa_long_long+0x74>
 800147a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <_ntoa_long_long+0x66>
 8001484:	2241      	movs	r2, #65	; 0x41
 8001486:	e000      	b.n	800148a <_ntoa_long_long+0x68>
 8001488:	2261      	movs	r2, #97	; 0x61
 800148a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800148e:	4413      	add	r3, r2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	3b0a      	subs	r3, #10
 8001494:	b2da      	uxtb	r2, r3
 8001496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001498:	1c59      	adds	r1, r3, #1
 800149a:	6379      	str	r1, [r7, #52]	; 0x34
 800149c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80014a0:	440b      	add	r3, r1
 80014a2:	f803 2c28 	strb.w	r2, [r3, #-40]
            value /= base;
 80014a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80014ae:	f7ff fb05 	bl	8000abc <__aeabi_uldivmod>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80014ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014be:	4313      	orrs	r3, r2
 80014c0:	d002      	beq.n	80014c8 <_ntoa_long_long+0xa6>
 80014c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c4:	2b1f      	cmp	r3, #31
 80014c6:	d9c6      	bls.n	8001456 <_ntoa_long_long+0x34>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80014c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014cc:	9206      	str	r2, [sp, #24]
 80014ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014d0:	9205      	str	r2, [sp, #20]
 80014d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014d4:	9204      	str	r2, [sp, #16]
 80014d6:	9303      	str	r3, [sp, #12]
 80014d8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff fe54 	bl	800119c <_ntoa_format>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3738      	adds	r7, #56	; 0x38
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <_ftoa>:
                    unsigned int width, unsigned int flags);
#endif

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b09d      	sub	sp, #116	; 0x74
 8001504:	af06      	add	r7, sp, #24
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	657b      	str	r3, [r7, #84]	; 0x54
    double diff = 0.0;
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (value != value)
 800151e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001526:	f7ff fa4f 	bl	80009c8 <__aeabi_dcmpeq>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10f      	bne.n	8001550 <_ftoa+0x50>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001532:	9303      	str	r3, [sp, #12]
 8001534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	2303      	movs	r3, #3
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	4baa      	ldr	r3, [pc, #680]	; (80017e8 <_ftoa+0x2e8>)
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff fdd8 	bl	80010fc <_out_rev>
 800154c:	4603      	mov	r3, r0
 800154e:	e22d      	b.n	80019ac <_ftoa+0x4ac>
    if (value < -DBL_MAX)
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001558:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800155c:	f7ff fa3e 	bl	80009dc <__aeabi_dcmplt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00f      	beq.n	8001586 <_ftoa+0x86>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001568:	9303      	str	r3, [sp, #12]
 800156a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	2304      	movs	r3, #4
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <_ftoa+0x2ec>)
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fdbd 	bl	80010fc <_out_rev>
 8001582:	4603      	mov	r3, r0
 8001584:	e212      	b.n	80019ac <_ftoa+0x4ac>
    if (value > DBL_MAX)
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <_ftoa+0x2f0>)
 800158c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001590:	f7ff fa42 	bl	8000a18 <__aeabi_dcmpgt>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01d      	beq.n	80015d6 <_ftoa+0xd6>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 800159a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <_ftoa+0xa8>
 80015a4:	4b93      	ldr	r3, [pc, #588]	; (80017f4 <_ftoa+0x2f4>)
 80015a6:	e000      	b.n	80015aa <_ftoa+0xaa>
 80015a8:	4b93      	ldr	r3, [pc, #588]	; (80017f8 <_ftoa+0x2f8>)
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80015aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80015ac:	f002 0204 	and.w	r2, r2, #4
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni",
 80015b0:	2a00      	cmp	r2, #0
 80015b2:	d001      	beq.n	80015b8 <_ftoa+0xb8>
 80015b4:	2204      	movs	r2, #4
 80015b6:	e000      	b.n	80015ba <_ftoa+0xba>
 80015b8:	2203      	movs	r2, #3
 80015ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80015bc:	9103      	str	r1, [sp, #12]
 80015be:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80015c0:	9102      	str	r1, [sp, #8]
 80015c2:	9201      	str	r2, [sp, #4]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fd95 	bl	80010fc <_out_rev>
 80015d2:	4603      	mov	r3, r0
 80015d4:	e1ea      	b.n	80019ac <_ftoa+0x4ac>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters
    // overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80015d6:	a380      	add	r3, pc, #512	; (adr r3, 80017d8 <_ftoa+0x2d8>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80015e0:	f7ff fa1a 	bl	8000a18 <__aeabi_dcmpgt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <_ftoa+0xfe>
 80015ea:	a37d      	add	r3, pc, #500	; (adr r3, 80017e0 <_ftoa+0x2e0>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80015f4:	f7ff f9f2 	bl	80009dc <__aeabi_dcmplt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d011      	beq.n	8001622 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80015fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001600:	9304      	str	r3, [sp, #16]
 8001602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001604:	9303      	str	r3, [sp, #12]
 8001606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800160e:	e9cd 2300 	strd	r2, r3, [sp]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f9d1 	bl	80019c0 <_etoa>
 800161e:	4603      	mov	r3, r0
 8001620:	e1c4      	b.n	80019ac <_ftoa+0x4ac>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (value < 0) {
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001634:	f7ff f9d2 	bl	80009dc <__aeabi_dcmplt>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00e      	beq.n	800165c <_ftoa+0x15c>
        negative = true;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        value = 0 - value;
 8001644:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	f7fe fd9a 	bl	8000188 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
 800165c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10e      	bne.n	8001684 <_ftoa+0x184>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001666:	2306      	movs	r3, #6
 8001668:	673b      	str	r3, [r7, #112]	; 0x70
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800166a:	e00b      	b.n	8001684 <_ftoa+0x184>
        buf[len++] = '0';
 800166c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	657a      	str	r2, [r7, #84]	; 0x54
 8001672:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001676:	4413      	add	r3, r2
 8001678:	2230      	movs	r2, #48	; 0x30
 800167a:	f803 2c48 	strb.w	r2, [r3, #-72]
        prec--;
 800167e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001680:	3b01      	subs	r3, #1
 8001682:	673b      	str	r3, [r7, #112]	; 0x70
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001686:	2b1f      	cmp	r3, #31
 8001688:	d802      	bhi.n	8001690 <_ftoa+0x190>
 800168a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800168c:	2b09      	cmp	r3, #9
 800168e:	d8ed      	bhi.n	800166c <_ftoa+0x16c>
    }

    int whole = (int)value;
 8001690:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001694:	f7ff f9ca 	bl	8000a2c <__aeabi_d2iz>
 8001698:	4603      	mov	r3, r0
 800169a:	64fb      	str	r3, [r7, #76]	; 0x4c
    double tmp = (value - whole) * pow10[prec];
 800169c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800169e:	f7fe fec1 	bl	8000424 <__aeabi_i2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80016aa:	f7fe fd6d 	bl	8000188 <__aeabi_dsub>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	4a51      	ldr	r2, [pc, #324]	; (80017fc <_ftoa+0x2fc>)
 80016b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe ff19 	bl	80004f8 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    unsigned long frac = (unsigned long)tmp;
 80016ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016d2:	f7ff f9d3 	bl	8000a7c <__aeabi_d2uiz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	64bb      	str	r3, [r7, #72]	; 0x48
    diff = tmp - frac;
 80016da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016dc:	f7fe fe92 	bl	8000404 <__aeabi_ui2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016e8:	f7fe fd4e 	bl	8000188 <__aeabi_dsub>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    if (diff > 0.5) {
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b41      	ldr	r3, [pc, #260]	; (8001800 <_ftoa+0x300>)
 80016fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80016fe:	f7ff f98b 	bl	8000a18 <__aeabi_dcmpgt>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d016      	beq.n	8001736 <_ftoa+0x236>
        ++frac;
 8001708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800170a:	3301      	adds	r3, #1
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
 800170e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001710:	f7fe fe78 	bl	8000404 <__aeabi_ui2d>
 8001714:	4a39      	ldr	r2, [pc, #228]	; (80017fc <_ftoa+0x2fc>)
 8001716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7ff f970 	bl	8000a04 <__aeabi_dcmpge>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01a      	beq.n	8001760 <_ftoa+0x260>
            frac = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	64bb      	str	r3, [r7, #72]	; 0x48
            ++whole;
 800172e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001730:	3301      	adds	r3, #1
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001734:	e014      	b.n	8001760 <_ftoa+0x260>
        }
    } else if (diff < 0.5) {
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b31      	ldr	r3, [pc, #196]	; (8001800 <_ftoa+0x300>)
 800173c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001740:	f7ff f94c 	bl	80009dc <__aeabi_dcmplt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10a      	bne.n	8001760 <_ftoa+0x260>
    } else if ((frac == 0U) || (frac & 1U)) {
 800174a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <_ftoa+0x25a>
 8001750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <_ftoa+0x260>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
 800175a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800175c:	3301      	adds	r3, #1
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (prec == 0U) {
 8001760:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001762:	2b00      	cmp	r3, #0
 8001764:	d134      	bne.n	80017d0 <_ftoa+0x2d0>
        diff = value - (double)whole;
 8001766:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001768:	f7fe fe5c 	bl	8000424 <__aeabi_i2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001774:	f7fe fd08 	bl	8000188 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001780:	2301      	movs	r3, #1
 8001782:	461c      	mov	r4, r3
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <_ftoa+0x300>)
 800178a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800178e:	f7ff f925 	bl	80009dc <__aeabi_dcmplt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <_ftoa+0x29c>
 8001798:	2300      	movs	r3, #0
 800179a:	461c      	mov	r4, r3
 800179c:	b2e3      	uxtb	r3, r4
 800179e:	f083 0301 	eor.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <_ftoa+0x2bc>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <_ftoa+0x300>)
 80017ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017b2:	f7ff f931 	bl	8000a18 <__aeabi_dcmpgt>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d067      	beq.n	800188c <_ftoa+0x38c>
 80017bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8085 	beq.w	80018d2 <_ftoa+0x3d2>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
 80017c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ca:	3301      	adds	r3, #1
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017ce:	e080      	b.n	80018d2 <_ftoa+0x3d2>
        }
    } else {
        unsigned int count = prec;
 80017d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80017d4:	e037      	b.n	8001846 <_ftoa+0x346>
 80017d6:	bf00      	nop
 80017d8:	00000000 	.word	0x00000000
 80017dc:	41cdcd65 	.word	0x41cdcd65
 80017e0:	00000000 	.word	0x00000000
 80017e4:	c1cdcd65 	.word	0xc1cdcd65
 80017e8:	08004458 	.word	0x08004458
 80017ec:	0800445c 	.word	0x0800445c
 80017f0:	7fefffff 	.word	0x7fefffff
 80017f4:	08004464 	.word	0x08004464
 80017f8:	0800446c 	.word	0x0800446c
 80017fc:	08004470 	.word	0x08004470
 8001800:	3fe00000 	.word	0x3fe00000
            --count;
 8001804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001806:	3b01      	subs	r3, #1
 8001808:	647b      	str	r3, [r7, #68]	; 0x44
            buf[len++] = (char)(48U + (frac % 10U));
 800180a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800180c:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <_ftoa+0x4b4>)
 800180e:	fba3 2301 	umull	r2, r3, r3, r1
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	1aca      	subs	r2, r1, r3
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	6579      	str	r1, [r7, #84]	; 0x54
 8001826:	3230      	adds	r2, #48	; 0x30
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800182e:	440b      	add	r3, r1
 8001830:	f803 2c48 	strb.w	r2, [r3, #-72]
            if (!(frac /= 10U)) {
 8001834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001836:	4a5f      	ldr	r2, [pc, #380]	; (80019b4 <_ftoa+0x4b4>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <_ftoa+0x34e>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001848:	2b1f      	cmp	r3, #31
 800184a:	d9db      	bls.n	8001804 <_ftoa+0x304>
 800184c:	e00a      	b.n	8001864 <_ftoa+0x364>
                break;
 800184e:	bf00      	nop
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001850:	e008      	b.n	8001864 <_ftoa+0x364>
            buf[len++] = '0';
 8001852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	657a      	str	r2, [r7, #84]	; 0x54
 8001858:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800185c:	4413      	add	r3, r2
 800185e:	2230      	movs	r2, #48	; 0x30
 8001860:	f803 2c48 	strb.w	r2, [r3, #-72]
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	2b1f      	cmp	r3, #31
 8001868:	d804      	bhi.n	8001874 <_ftoa+0x374>
 800186a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	647a      	str	r2, [r7, #68]	; 0x44
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <_ftoa+0x352>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	2b1f      	cmp	r3, #31
 8001878:	d82b      	bhi.n	80018d2 <_ftoa+0x3d2>
            // add decimal
            buf[len++] = '.';
 800187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	657a      	str	r2, [r7, #84]	; 0x54
 8001880:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001884:	4413      	add	r3, r2
 8001886:	222e      	movs	r2, #46	; 0x2e
 8001888:	f803 2c48 	strb.w	r2, [r3, #-72]
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800188c:	e021      	b.n	80018d2 <_ftoa+0x3d2>
        buf[len++] = (char)(48 + (whole % 10));
 800188e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001890:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <_ftoa+0x4b8>)
 8001892:	fb83 1302 	smull	r1, r3, r3, r2
 8001896:	1099      	asrs	r1, r3, #2
 8001898:	17d3      	asrs	r3, r2, #31
 800189a:	1ac9      	subs	r1, r1, r3
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	1ad1      	subs	r1, r2, r3
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	6579      	str	r1, [r7, #84]	; 0x54
 80018ae:	3230      	adds	r2, #48	; 0x30
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018b6:	440b      	add	r3, r1
 80018b8:	f803 2c48 	strb.w	r2, [r3, #-72]
        if (!(whole /= 10)) {
 80018bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018be:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <_ftoa+0x4b8>)
 80018c0:	fb82 1203 	smull	r1, r2, r2, r3
 80018c4:	1092      	asrs	r2, r2, #2
 80018c6:	17db      	asrs	r3, r3, #31
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <_ftoa+0x3da>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	2b1f      	cmp	r3, #31
 80018d6:	d9da      	bls.n	800188e <_ftoa+0x38e>
 80018d8:	e000      	b.n	80018dc <_ftoa+0x3dc>
            break;
 80018da:	bf00      	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80018dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d124      	bne.n	8001930 <_ftoa+0x430>
 80018e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01f      	beq.n	8001930 <_ftoa+0x430>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80018f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <_ftoa+0x422>
 80018f6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <_ftoa+0x408>
 80018fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <_ftoa+0x422>
            width--;
 8001908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800190a:	3b01      	subs	r3, #1
 800190c:	677b      	str	r3, [r7, #116]	; 0x74
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800190e:	e008      	b.n	8001922 <_ftoa+0x422>
            buf[len++] = '0';
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	657a      	str	r2, [r7, #84]	; 0x54
 8001916:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800191a:	4413      	add	r3, r2
 800191c:	2230      	movs	r2, #48	; 0x30
 800191e:	f803 2c48 	strb.w	r2, [r3, #-72]
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001922:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001926:	429a      	cmp	r2, r3
 8001928:	d202      	bcs.n	8001930 <_ftoa+0x430>
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	2b1f      	cmp	r3, #31
 800192e:	d9ef      	bls.n	8001910 <_ftoa+0x410>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001932:	2b1f      	cmp	r3, #31
 8001934:	d82a      	bhi.n	800198c <_ftoa+0x48c>
        if (negative) {
 8001936:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <_ftoa+0x452>
            buf[len++] = '-';
 800193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	657a      	str	r2, [r7, #84]	; 0x54
 8001944:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001948:	4413      	add	r3, r2
 800194a:	222d      	movs	r2, #45	; 0x2d
 800194c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001950:	e01c      	b.n	800198c <_ftoa+0x48c>
        } else if (flags & FLAGS_PLUS) {
 8001952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d009      	beq.n	8001970 <_ftoa+0x470>
            buf[len++] = '+'; // ignore the space if the '+' exists
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	657a      	str	r2, [r7, #84]	; 0x54
 8001962:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001966:	4413      	add	r3, r2
 8001968:	222b      	movs	r2, #43	; 0x2b
 800196a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800196e:	e00d      	b.n	800198c <_ftoa+0x48c>
        } else if (flags & FLAGS_SPACE) {
 8001970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <_ftoa+0x48c>
            buf[len++] = ' ';
 800197a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	657a      	str	r2, [r7, #84]	; 0x54
 8001980:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001984:	4413      	add	r3, r2
 8001986:	2220      	movs	r2, #32
 8001988:	f803 2c48 	strb.w	r2, [r3, #-72]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800198c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800198e:	9303      	str	r3, [sp, #12]
 8001990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fba9 	bl	80010fc <_out_rev>
 80019aa:	4603      	mov	r3, r0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	375c      	adds	r7, #92	; 0x5c
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	cccccccd 	.word	0xcccccccd
 80019b8:	66666667 	.word	0x66666667
 80019bc:	00000000 	.word	0x00000000

080019c0 <_etoa>:

#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse
// <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	b09b      	sub	sp, #108	; 0x6c
 80019c6:	af06      	add	r7, sp, #24
 80019c8:	6178      	str	r0, [r7, #20]
 80019ca:	6139      	str	r1, [r7, #16]
 80019cc:	60fa      	str	r2, [r7, #12]
 80019ce:	60bb      	str	r3, [r7, #8]
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80019d0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80019d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019d8:	f7fe fff6 	bl	80009c8 <__aeabi_dcmpeq>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d014      	beq.n	8001a0c <_etoa+0x4c>
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	4bc4      	ldr	r3, [pc, #784]	; (8001cf8 <_etoa+0x338>)
 80019e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019ec:	f7ff f814 	bl	8000a18 <__aeabi_dcmpgt>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <_etoa+0x4c>
 80019f6:	f04f 32ff 	mov.w	r2, #4294967295
 80019fa:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80019fe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a02:	f7fe ffeb 	bl	80009dc <__aeabi_dcmplt>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d014      	beq.n	8001a36 <_etoa+0x76>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a10:	9304      	str	r3, [sp, #16]
 8001a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a16:	9303      	str	r3, [sp, #12]
 8001a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001a22:	e9cd 2300 	strd	r2, r3, [sp]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	6939      	ldr	r1, [r7, #16]
 8001a2c:	6978      	ldr	r0, [r7, #20]
 8001a2e:	f7ff fd67 	bl	8001500 <_ftoa>
 8001a32:	4603      	mov	r3, r0
 8001a34:	e247      	b.n	8001ec6 <_etoa+0x506>
    }

    // determine the sign
    const bool negative = value < 0;
 8001a36:	2301      	movs	r3, #1
 8001a38:	461e      	mov	r6, r3
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a46:	f7fe ffc9 	bl	80009dc <__aeabi_dcmplt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <_etoa+0x94>
 8001a50:	2300      	movs	r3, #0
 8001a52:	461e      	mov	r6, r3
 8001a54:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
    if (negative) {
 8001a58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <_etoa+0xac>
        value = -value;
 8001a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
 8001a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_etoa+0xbe>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001a78:	2306      	movs	r3, #6
 8001a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
 8001a7e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001a82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;          // effectively log2
 8001a86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	0d0a      	lsrs	r2, r1, #20
 8001a94:	2300      	movs	r3, #0
 8001a96:	4613      	mov	r3, r2
 8001a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U); // drop the exponent so conv.F is now in [1,2)
 8001aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aaa:	4994      	ldr	r1, [pc, #592]	; (8001cfc <_etoa+0x33c>)
 8001aac:	ea02 0400 	and.w	r4, r2, r0
 8001ab0:	ea03 0501 	and.w	r5, r3, r1
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <_etoa+0x340>)
 8001aba:	ea44 0802 	orr.w	r8, r4, r2
 8001abe:	ea45 0903 	orr.w	r9, r5, r3
 8001ac2:	e9c7 8906 	strd	r8, r9, [r7, #24]
    // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
    int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ac8:	f7fe fcac 	bl	8000424 <__aeabi_i2d>
 8001acc:	a37e      	add	r3, pc, #504	; (adr r3, 8001cc8 <_etoa+0x308>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fd11 	bl	80004f8 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	a37c      	add	r3, pc, #496	; (adr r3, 8001cd0 <_etoa+0x310>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fb52 	bl	800018c <__adddf3>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <_etoa+0x344>)
 8001afa:	f7fe fb45 	bl	8000188 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	a374      	add	r3, pc, #464	; (adr r3, 8001cd8 <_etoa+0x318>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fcf4 	bl	80004f8 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4620      	mov	r0, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7fe fb38 	bl	800018c <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7fe ff82 	bl	8000a2c <__aeabi_d2iz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001b2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b2e:	f7fe fc79 	bl	8000424 <__aeabi_i2d>
 8001b32:	a36b      	add	r3, pc, #428	; (adr r3, 8001ce0 <_etoa+0x320>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fcde 	bl	80004f8 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <_etoa+0x348>)
 8001b4a:	f7fe fb1f 	bl	800018c <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7fe ff69 	bl	8000a2c <__aeabi_d2iz>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001b5e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b60:	f7fe fc60 	bl	8000424 <__aeabi_i2d>
 8001b64:	a360      	add	r3, pc, #384	; (adr r3, 8001ce8 <_etoa+0x328>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fcc5 	bl	80004f8 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4614      	mov	r4, r2
 8001b74:	461d      	mov	r5, r3
 8001b76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b78:	f7fe fc54 	bl	8000424 <__aeabi_i2d>
 8001b7c:	a35c      	add	r3, pc, #368	; (adr r3, 8001cf0 <_etoa+0x330>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fcb9 	bl	80004f8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fafb 	bl	8000188 <__aeabi_dsub>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const double z2 = z * z;
 8001b9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b9e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ba2:	f7fe fca9 	bl	80004f8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8001bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	0503      	lsls	r3, r0, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001bca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001bce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	f7fe fad9 	bl	800018c <__adddf3>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4690      	mov	r8, r2
 8001be0:	4699      	mov	r9, r3
 8001be2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001be6:	f04f 0000 	mov.w	r0, #0
 8001bea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bee:	f7fe facb 	bl	8000188 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4692      	mov	sl, r2
 8001bf8:	469b      	mov	fp, r3
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <_etoa+0x34c>)
 8001c00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c04:	f7fe fda2 	bl	800074c <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <_etoa+0x350>)
 8001c16:	f7fe fab9 	bl	800018c <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c22:	f7fe fd93 	bl	800074c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <_etoa+0x354>)
 8001c34:	f7fe faaa 	bl	800018c <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c40:	f7fe fd84 	bl	800074c <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4650      	mov	r0, sl
 8001c4a:	4659      	mov	r1, fp
 8001c4c:	f7fe fa9e 	bl	800018c <__adddf3>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4640      	mov	r0, r8
 8001c56:	4649      	mov	r1, r9
 8001c58:	f7fe fd78 	bl	800074c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <_etoa+0x340>)
 8001c6a:	f7fe fa8f 	bl	800018c <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fc3f 	bl	80004f8 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // correct for rounding errors
    if (value < conv.F) {
 8001c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c86:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c8a:	f7fe fea7 	bl	80009dc <__aeabi_dcmplt>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <_etoa+0x2f0>
        expval--;
 8001c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c96:	3b01      	subs	r3, #1
 8001c98:	64fb      	str	r3, [r7, #76]	; 0x4c
        conv.F /= 10;
 8001c9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <_etoa+0x350>)
 8001ca4:	f7fe fd52 	bl	800074c <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8001cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb2:	2b63      	cmp	r3, #99	; 0x63
 8001cb4:	dc30      	bgt.n	8001d18 <_etoa+0x358>
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb8:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001cbc:	db2c      	blt.n	8001d18 <_etoa+0x358>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e02b      	b.n	8001d1a <_etoa+0x35a>
 8001cc2:	bf00      	nop
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	509f79fb 	.word	0x509f79fb
 8001ccc:	3fd34413 	.word	0x3fd34413
 8001cd0:	8b60c8b3 	.word	0x8b60c8b3
 8001cd4:	3fc68a28 	.word	0x3fc68a28
 8001cd8:	636f4361 	.word	0x636f4361
 8001cdc:	3fd287a7 	.word	0x3fd287a7
 8001ce0:	0979a371 	.word	0x0979a371
 8001ce4:	400a934f 	.word	0x400a934f
 8001ce8:	bbb55516 	.word	0xbbb55516
 8001cec:	40026bb1 	.word	0x40026bb1
 8001cf0:	fefa39ef 	.word	0xfefa39ef
 8001cf4:	3fe62e42 	.word	0x3fe62e42
 8001cf8:	7fefffff 	.word	0x7fefffff
 8001cfc:	000fffff 	.word	0x000fffff
 8001d00:	3ff00000 	.word	0x3ff00000
 8001d04:	3ff80000 	.word	0x3ff80000
 8001d08:	3fe00000 	.word	0x3fe00000
 8001d0c:	402c0000 	.word	0x402c0000
 8001d10:	40240000 	.word	0x40240000
 8001d14:	40180000 	.word	0x40180000
 8001d18:	2305      	movs	r3, #5
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
 8001d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d03d      	beq.n	8001da4 <_etoa+0x3e4>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
 8001d28:	a369      	add	r3, pc, #420	; (adr r3, 8001ed0 <_etoa+0x510>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d32:	f7fe fe67 	bl	8000a04 <__aeabi_dcmpge>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d024      	beq.n	8001d86 <_etoa+0x3c6>
 8001d3c:	a366      	add	r3, pc, #408	; (adr r3, 8001ed8 <_etoa+0x518>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d46:	f7fe fe49 	bl	80009dc <__aeabi_dcmplt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01a      	beq.n	8001d86 <_etoa+0x3c6>
            if ((int)prec > expval) {
 8001d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d56:	429a      	cmp	r2, r3
 8001d58:	da07      	bge.n	8001d6a <_etoa+0x3aa>
                prec = (unsigned)((int)prec - expval - 1);
 8001d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d68:	e002      	b.n	8001d70 <_etoa+0x3b0>
            } else {
                prec = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            flags |= FLAGS_PRECISION; // make sure _ftoa respects precision
 8001d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            // no characters in exponent
            minwidth = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	64bb      	str	r3, [r7, #72]	; 0x48
            expval = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d84:	e00e      	b.n	8001da4 <_etoa+0x3e4>
        } else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8001d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <_etoa+0x3e4>
 8001d8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <_etoa+0x3e4>
                --prec;
 8001d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
 8001da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
    if (width > minwidth) {
 8001daa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d904      	bls.n	8001dbe <_etoa+0x3fe>
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
 8001db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
 8001dbc:	e001      	b.n	8001dc2 <_etoa+0x402>
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
 8001dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <_etoa+0x418>
 8001dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <_etoa+0x418>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // rescale the float value
    if (expval) {
 8001dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <_etoa+0x432>
        value /= conv.F;
 8001dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001de6:	f7fe fcb1 	bl	800074c <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    }

    // output the floating part
    const size_t start_idx = idx;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8001df6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <_etoa+0x44c>
 8001dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	e003      	b.n	8001e14 <_etoa+0x454>
 8001e0c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8001e10:	e9c7 3400 	strd	r3, r4, [r7]
 8001e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e1c:	9304      	str	r3, [sp, #16]
 8001e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e20:	9303      	str	r3, [sp, #12]
 8001e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e2c:	e9cd 3400 	strd	r3, r4, [sp]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff fb62 	bl	8001500 <_ftoa>
 8001e3c:	60f8      	str	r0, [r7, #12]

    // output the exponent part
    if (minwidth) {
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03f      	beq.n	8001ec4 <_etoa+0x504>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8001e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <_etoa+0x494>
 8001e50:	2045      	movs	r0, #69	; 0x45
 8001e52:	e000      	b.n	8001e56 <_etoa+0x496>
 8001e54:	2065      	movs	r0, #101	; 0x65
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	1c53      	adds	r3, r2, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	697c      	ldr	r4, [r7, #20]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	47a0      	blx	r4
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0,
 8001e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bfb8      	it	lt
 8001e6a:	425b      	neglt	r3, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e70:	0fdb      	lsrs	r3, r3, #31
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e76:	3a01      	subs	r2, #1
 8001e78:	2105      	movs	r1, #5
 8001e7a:	9105      	str	r1, [sp, #20]
 8001e7c:	9204      	str	r2, [sp, #16]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	9203      	str	r2, [sp, #12]
 8001e82:	220a      	movs	r2, #10
 8001e84:	9202      	str	r2, [sp, #8]
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	9000      	str	r0, [sp, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6939      	ldr	r1, [r7, #16]
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7ff fa5f 	bl	8001354 <_ntoa_long>
 8001e96:	60f8      	str	r0, [r7, #12]
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
 8001e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00f      	beq.n	8001ec4 <_etoa+0x504>
            while (idx - start_idx < width)
 8001ea4:	e007      	b.n	8001eb6 <_etoa+0x4f6>
                out(' ', buffer, idx++, maxlen);
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	1c53      	adds	r3, r2, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	697c      	ldr	r4, [r7, #20]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	6939      	ldr	r1, [r7, #16]
 8001eb2:	2020      	movs	r0, #32
 8001eb4:	47a0      	blx	r4
            while (idx - start_idx < width)
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f0      	bhi.n	8001ea6 <_etoa+0x4e6>
        }
    }
    return idx;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3754      	adds	r7, #84	; 0x54
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ed0:	eb1c432d 	.word	0xeb1c432d
 8001ed4:	3f1a36e2 	.word	0x3f1a36e2
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	412e8480 	.word	0x412e8480

08001ee0 <_vsnprintf>:
#endif // PRINTF_SUPPORT_EXPONENTIAL
#endif // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b0a0      	sub	sp, #128	; 0x80
 8001ee4:	af0a      	add	r7, sp, #40	; 0x28
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44

    if (!buffer) {
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 8490 	bne.w	800281a <_vsnprintf+0x93a>
        // use null output function
        out = _out_null;
 8001efa:	4ba0      	ldr	r3, [pc, #640]	; (800217c <_vsnprintf+0x29c>)
 8001efc:	60fb      	str	r3, [r7, #12]
    }

    while (*format) {
 8001efe:	f000 bc8c 	b.w	800281a <_vsnprintf+0x93a>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b25      	cmp	r3, #37	; 0x25
 8001f08:	d00d      	beq.n	8001f26 <_vsnprintf+0x46>
            // no
            out(*format, buffer, idx++, maxlen);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	7818      	ldrb	r0, [r3, #0]
 8001f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f10:	1c53      	adds	r3, r2, #1
 8001f12:	647b      	str	r3, [r7, #68]	; 0x44
 8001f14:	68fc      	ldr	r4, [r7, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	47a0      	blx	r4
            format++;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	603b      	str	r3, [r7, #0]
            continue;
 8001f22:	f000 bc7a 	b.w	800281a <_vsnprintf+0x93a>
        } else {
            // yes, evaluate it
            format++;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	603b      	str	r3, [r7, #0]
        }

        // evaluate flags
        flags = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	657b      	str	r3, [r7, #84]	; 0x54
        do {
            switch (*format) {
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	3b20      	subs	r3, #32
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d856      	bhi.n	8001fe8 <_vsnprintf+0x108>
 8001f3a:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <_vsnprintf+0x60>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001fc1 	.word	0x08001fc1
 8001f44:	08001fe9 	.word	0x08001fe9
 8001f48:	08001fe9 	.word	0x08001fe9
 8001f4c:	08001fd5 	.word	0x08001fd5
 8001f50:	08001fe9 	.word	0x08001fe9
 8001f54:	08001fe9 	.word	0x08001fe9
 8001f58:	08001fe9 	.word	0x08001fe9
 8001f5c:	08001fe9 	.word	0x08001fe9
 8001f60:	08001fe9 	.word	0x08001fe9
 8001f64:	08001fe9 	.word	0x08001fe9
 8001f68:	08001fe9 	.word	0x08001fe9
 8001f6c:	08001fad 	.word	0x08001fad
 8001f70:	08001fe9 	.word	0x08001fe9
 8001f74:	08001f99 	.word	0x08001f99
 8001f78:	08001fe9 	.word	0x08001fe9
 8001f7c:	08001fe9 	.word	0x08001fe9
 8001f80:	08001f85 	.word	0x08001f85
            case '0':
                flags |= FLAGS_ZEROPAD;
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	657b      	str	r3, [r7, #84]	; 0x54
                format++;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	603b      	str	r3, [r7, #0]
                n = 1U;
 8001f92:	2301      	movs	r3, #1
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
                break;
 8001f96:	e02a      	b.n	8001fee <_vsnprintf+0x10e>
            case '-':
                flags |= FLAGS_LEFT;
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	657b      	str	r3, [r7, #84]	; 0x54
                format++;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	603b      	str	r3, [r7, #0]
                n = 1U;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
                break;
 8001faa:	e020      	b.n	8001fee <_vsnprintf+0x10e>
            case '+':
                flags |= FLAGS_PLUS;
 8001fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	657b      	str	r3, [r7, #84]	; 0x54
                format++;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	603b      	str	r3, [r7, #0]
                n = 1U;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	64bb      	str	r3, [r7, #72]	; 0x48
                break;
 8001fbe:	e016      	b.n	8001fee <_vsnprintf+0x10e>
            case ' ':
                flags |= FLAGS_SPACE;
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	657b      	str	r3, [r7, #84]	; 0x54
                format++;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	603b      	str	r3, [r7, #0]
                n = 1U;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	64bb      	str	r3, [r7, #72]	; 0x48
                break;
 8001fd2:	e00c      	b.n	8001fee <_vsnprintf+0x10e>
            case '#':
                flags |= FLAGS_HASH;
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	657b      	str	r3, [r7, #84]	; 0x54
                format++;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	603b      	str	r3, [r7, #0]
                n = 1U;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
                break;
 8001fe6:	e002      	b.n	8001fee <_vsnprintf+0x10e>
            default:
                n = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
                break;
 8001fec:	bf00      	nop
            }
        } while (n);
 8001fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d19d      	bne.n	8001f30 <_vsnprintf+0x50>

        // evaluate width field
        width = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
        if (_is_digit(*format)) {
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f843 	bl	8001088 <_is_digit>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <_vsnprintf+0x134>
            width = _atoi(&format);
 8002008:	463b      	mov	r3, r7
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f852 	bl	80010b4 <_atoi>
 8002010:	6538      	str	r0, [r7, #80]	; 0x50
 8002012:	e018      	b.n	8002046 <_vsnprintf+0x166>
        } else if (*format == '*') {
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b2a      	cmp	r3, #42	; 0x2a
 800201a:	d114      	bne.n	8002046 <_vsnprintf+0x166>
            const int w = va_arg(va, int);
 800201c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201e:	1d1a      	adds	r2, r3, #4
 8002020:	66ba      	str	r2, [r7, #104]	; 0x68
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
            if (w < 0) {
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	2b00      	cmp	r3, #0
 800202a:	da07      	bge.n	800203c <_vsnprintf+0x15c>
                flags |= FLAGS_LEFT; // reverse padding
 800202c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	657b      	str	r3, [r7, #84]	; 0x54
                width = (unsigned int)-w;
 8002034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002036:	425b      	negs	r3, r3
 8002038:	653b      	str	r3, [r7, #80]	; 0x50
 800203a:	e001      	b.n	8002040 <_vsnprintf+0x160>
            } else {
                width = (unsigned int)w;
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	653b      	str	r3, [r7, #80]	; 0x50
            }
            format++;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	603b      	str	r3, [r7, #0]
        }

        // evaluate precision field
        precision = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (*format == '.') {
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b2e      	cmp	r3, #46	; 0x2e
 8002050:	d124      	bne.n	800209c <_vsnprintf+0x1bc>
            flags |= FLAGS_PRECISION;
 8002052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002054:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002058:	657b      	str	r3, [r7, #84]	; 0x54
            format++;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	603b      	str	r3, [r7, #0]
            if (_is_digit(*format)) {
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f80f 	bl	8001088 <_is_digit>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <_vsnprintf+0x19c>
                precision = _atoi(&format);
 8002070:	463b      	mov	r3, r7
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f81e 	bl	80010b4 <_atoi>
 8002078:	64f8      	str	r0, [r7, #76]	; 0x4c
 800207a:	e00f      	b.n	800209c <_vsnprintf+0x1bc>
            } else if (*format == '*') {
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b2a      	cmp	r3, #42	; 0x2a
 8002082:	d10b      	bne.n	800209c <_vsnprintf+0x1bc>
                const int prec = (int)va_arg(va, int);
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	1d1a      	adds	r2, r3, #4
 8002088:	66ba      	str	r2, [r7, #104]	; 0x68
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
                precision = prec > 0 ? (unsigned int)prec : 0U;
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002090:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002094:	64fb      	str	r3, [r7, #76]	; 0x4c
                format++;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	603b      	str	r3, [r7, #0]
            }
        }

        // evaluate length field
        switch (*format) {
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3b68      	subs	r3, #104	; 0x68
 80020a2:	2b12      	cmp	r3, #18
 80020a4:	d866      	bhi.n	8002174 <_vsnprintf+0x294>
 80020a6:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <_vsnprintf+0x1cc>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	0800211f 	.word	0x0800211f
 80020b0:	08002175 	.word	0x08002175
 80020b4:	08002155 	.word	0x08002155
 80020b8:	08002175 	.word	0x08002175
 80020bc:	080020f9 	.word	0x080020f9
 80020c0:	08002175 	.word	0x08002175
 80020c4:	08002175 	.word	0x08002175
 80020c8:	08002175 	.word	0x08002175
 80020cc:	08002175 	.word	0x08002175
 80020d0:	08002175 	.word	0x08002175
 80020d4:	08002175 	.word	0x08002175
 80020d8:	08002175 	.word	0x08002175
 80020dc:	08002145 	.word	0x08002145
 80020e0:	08002175 	.word	0x08002175
 80020e4:	08002175 	.word	0x08002175
 80020e8:	08002175 	.word	0x08002175
 80020ec:	08002175 	.word	0x08002175
 80020f0:	08002175 	.word	0x08002175
 80020f4:	08002165 	.word	0x08002165
        case 'l':
            flags |= FLAGS_LONG;
 80020f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	657b      	str	r3, [r7, #84]	; 0x54
            format++;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	603b      	str	r3, [r7, #0]
            if (*format == 'l') {
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b6c      	cmp	r3, #108	; 0x6c
 800210c:	d134      	bne.n	8002178 <_vsnprintf+0x298>
                flags |= FLAGS_LONG_LONG;
 800210e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002114:	657b      	str	r3, [r7, #84]	; 0x54
                format++;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	603b      	str	r3, [r7, #0]
            }
            break;
 800211c:	e02c      	b.n	8002178 <_vsnprintf+0x298>
        case 'h':
            flags |= FLAGS_SHORT;
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002124:	657b      	str	r3, [r7, #84]	; 0x54
            format++;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	603b      	str	r3, [r7, #0]
            if (*format == 'h') {
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b68      	cmp	r3, #104	; 0x68
 8002132:	d125      	bne.n	8002180 <_vsnprintf+0x2a0>
                flags |= FLAGS_CHAR;
 8002134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213a:	657b      	str	r3, [r7, #84]	; 0x54
                format++;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	603b      	str	r3, [r7, #0]
            }
            break;
 8002142:	e01d      	b.n	8002180 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
        case 't':
            flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	657b      	str	r3, [r7, #84]	; 0x54
            format++;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	603b      	str	r3, [r7, #0]
            break;
 8002152:	e016      	b.n	8002182 <_vsnprintf+0x2a2>
#endif
        case 'j':
            flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215a:	657b      	str	r3, [r7, #84]	; 0x54
            format++;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	603b      	str	r3, [r7, #0]
            break;
 8002162:	e00e      	b.n	8002182 <_vsnprintf+0x2a2>
        case 'z':
            flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	657b      	str	r3, [r7, #84]	; 0x54
            format++;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	603b      	str	r3, [r7, #0]
            break;
 8002172:	e006      	b.n	8002182 <_vsnprintf+0x2a2>
        default:
            break;
 8002174:	bf00      	nop
 8002176:	e004      	b.n	8002182 <_vsnprintf+0x2a2>
            break;
 8002178:	bf00      	nop
 800217a:	e002      	b.n	8002182 <_vsnprintf+0x2a2>
 800217c:	08001011 	.word	0x08001011
            break;
 8002180:	bf00      	nop
        }

        // evaluate specifier
        switch (*format) {
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	3b25      	subs	r3, #37	; 0x25
 8002188:	2b53      	cmp	r3, #83	; 0x53
 800218a:	f200 8339 	bhi.w	8002800 <_vsnprintf+0x920>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <_vsnprintf+0x2b4>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080027e9 	.word	0x080027e9
 8002198:	08002801 	.word	0x08002801
 800219c:	08002801 	.word	0x08002801
 80021a0:	08002801 	.word	0x08002801
 80021a4:	08002801 	.word	0x08002801
 80021a8:	08002801 	.word	0x08002801
 80021ac:	08002801 	.word	0x08002801
 80021b0:	08002801 	.word	0x08002801
 80021b4:	08002801 	.word	0x08002801
 80021b8:	08002801 	.word	0x08002801
 80021bc:	08002801 	.word	0x08002801
 80021c0:	08002801 	.word	0x08002801
 80021c4:	08002801 	.word	0x08002801
 80021c8:	08002801 	.word	0x08002801
 80021cc:	08002801 	.word	0x08002801
 80021d0:	08002801 	.word	0x08002801
 80021d4:	08002801 	.word	0x08002801
 80021d8:	08002801 	.word	0x08002801
 80021dc:	08002801 	.word	0x08002801
 80021e0:	08002801 	.word	0x08002801
 80021e4:	08002801 	.word	0x08002801
 80021e8:	08002801 	.word	0x08002801
 80021ec:	08002801 	.word	0x08002801
 80021f0:	08002801 	.word	0x08002801
 80021f4:	08002801 	.word	0x08002801
 80021f8:	08002801 	.word	0x08002801
 80021fc:	08002801 	.word	0x08002801
 8002200:	08002801 	.word	0x08002801
 8002204:	08002801 	.word	0x08002801
 8002208:	08002801 	.word	0x08002801
 800220c:	08002801 	.word	0x08002801
 8002210:	08002801 	.word	0x08002801
 8002214:	080025bb 	.word	0x080025bb
 8002218:	08002573 	.word	0x08002573
 800221c:	080025bb 	.word	0x080025bb
 8002220:	08002801 	.word	0x08002801
 8002224:	08002801 	.word	0x08002801
 8002228:	08002801 	.word	0x08002801
 800222c:	08002801 	.word	0x08002801
 8002230:	08002801 	.word	0x08002801
 8002234:	08002801 	.word	0x08002801
 8002238:	08002801 	.word	0x08002801
 800223c:	08002801 	.word	0x08002801
 8002240:	08002801 	.word	0x08002801
 8002244:	08002801 	.word	0x08002801
 8002248:	08002801 	.word	0x08002801
 800224c:	08002801 	.word	0x08002801
 8002250:	08002801 	.word	0x08002801
 8002254:	08002801 	.word	0x08002801
 8002258:	08002801 	.word	0x08002801
 800225c:	08002801 	.word	0x08002801
 8002260:	080022e5 	.word	0x080022e5
 8002264:	08002801 	.word	0x08002801
 8002268:	08002801 	.word	0x08002801
 800226c:	08002801 	.word	0x08002801
 8002270:	08002801 	.word	0x08002801
 8002274:	08002801 	.word	0x08002801
 8002278:	08002801 	.word	0x08002801
 800227c:	08002801 	.word	0x08002801
 8002280:	08002801 	.word	0x08002801
 8002284:	08002801 	.word	0x08002801
 8002288:	080022e5 	.word	0x080022e5
 800228c:	08002623 	.word	0x08002623
 8002290:	080022e5 	.word	0x080022e5
 8002294:	080025bb 	.word	0x080025bb
 8002298:	08002573 	.word	0x08002573
 800229c:	080025bb 	.word	0x080025bb
 80022a0:	08002801 	.word	0x08002801
 80022a4:	080022e5 	.word	0x080022e5
 80022a8:	08002801 	.word	0x08002801
 80022ac:	08002801 	.word	0x08002801
 80022b0:	08002801 	.word	0x08002801
 80022b4:	08002801 	.word	0x08002801
 80022b8:	08002801 	.word	0x08002801
 80022bc:	080022e5 	.word	0x080022e5
 80022c0:	0800275b 	.word	0x0800275b
 80022c4:	08002801 	.word	0x08002801
 80022c8:	08002801 	.word	0x08002801
 80022cc:	08002697 	.word	0x08002697
 80022d0:	08002801 	.word	0x08002801
 80022d4:	080022e5 	.word	0x080022e5
 80022d8:	08002801 	.word	0x08002801
 80022dc:	08002801 	.word	0x08002801
 80022e0:	080022e5 	.word	0x080022e5
        case 'X':
        case 'o':
        case 'b': {
            // set the base
            unsigned int base;
            if (*format == 'x' || *format == 'X') {
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b78      	cmp	r3, #120	; 0x78
 80022ea:	d003      	beq.n	80022f4 <_vsnprintf+0x414>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b58      	cmp	r3, #88	; 0x58
 80022f2:	d102      	bne.n	80022fa <_vsnprintf+0x41a>
                base = 16U;
 80022f4:	2310      	movs	r3, #16
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
 80022f8:	e013      	b.n	8002322 <_vsnprintf+0x442>
            } else if (*format == 'o') {
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b6f      	cmp	r3, #111	; 0x6f
 8002300:	d102      	bne.n	8002308 <_vsnprintf+0x428>
                base = 8U;
 8002302:	2308      	movs	r3, #8
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
 8002306:	e00c      	b.n	8002322 <_vsnprintf+0x442>
            } else if (*format == 'b') {
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b62      	cmp	r3, #98	; 0x62
 800230e:	d102      	bne.n	8002316 <_vsnprintf+0x436>
                base = 2U;
 8002310:	2302      	movs	r3, #2
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
 8002314:	e005      	b.n	8002322 <_vsnprintf+0x442>
            } else {
                base = 10U;
 8002316:	230a      	movs	r3, #10
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
                flags &= ~FLAGS_HASH; // no hash for dec format
 800231a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231c:	f023 0310 	bic.w	r3, r3, #16
 8002320:	657b      	str	r3, [r7, #84]	; 0x54
            }
            // uppercase
            if (*format == 'X') {
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b58      	cmp	r3, #88	; 0x58
 8002328:	d103      	bne.n	8002332 <_vsnprintf+0x452>
                flags |= FLAGS_UPPERCASE;
 800232a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232c:	f043 0320 	orr.w	r3, r3, #32
 8002330:	657b      	str	r3, [r7, #84]	; 0x54
            }

            // no plus or space flag for u, x, X, o, b
            if ((*format != 'i') && (*format != 'd')) {
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b69      	cmp	r3, #105	; 0x69
 8002338:	d007      	beq.n	800234a <_vsnprintf+0x46a>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d003      	beq.n	800234a <_vsnprintf+0x46a>
                flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	f023 030c 	bic.w	r3, r3, #12
 8002348:	657b      	str	r3, [r7, #84]	; 0x54
            }

            // ignore '0' flag when precision is given
            if (flags & FLAGS_PRECISION) {
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <_vsnprintf+0x47c>
                flags &= ~FLAGS_ZEROPAD;
 8002354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	657b      	str	r3, [r7, #84]	; 0x54
            }

            // convert the integer
            if ((*format == 'i') || (*format == 'd')) {
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b69      	cmp	r3, #105	; 0x69
 8002362:	d004      	beq.n	800236e <_vsnprintf+0x48e>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	f040 808e 	bne.w	800248a <_vsnprintf+0x5aa>
                // signed
                if (flags & FLAGS_LONG_LONG) {
 800236e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02f      	beq.n	80023d8 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                    const long long value = va_arg(va, long long);
 8002378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800237a:	3307      	adds	r3, #7
 800237c:	f023 0307 	bic.w	r3, r3, #7
 8002380:	f103 0208 	add.w	r2, r3, #8
 8002384:	66ba      	str	r2, [r7, #104]	; 0x68
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 800238e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002392:	2a00      	cmp	r2, #0
 8002394:	f173 0100 	sbcs.w	r1, r3, #0
 8002398:	da02      	bge.n	80023a0 <_vsnprintf+0x4c0>
 800239a:	4252      	negs	r2, r2
 800239c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	0fdb      	lsrs	r3, r3, #31
 80023a8:	b2dc      	uxtb	r4, r3
 80023aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ac:	461a      	mov	r2, r3
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80023b4:	9508      	str	r5, [sp, #32]
 80023b6:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80023b8:	9507      	str	r5, [sp, #28]
 80023ba:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80023bc:	9506      	str	r5, [sp, #24]
 80023be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023c2:	9402      	str	r4, [sp, #8]
 80023c4:	e9cd 0100 	strd	r0, r1, [sp]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7ff f827 	bl	8001422 <_ntoa_long_long>
 80023d4:	6478      	str	r0, [r7, #68]	; 0x44
                if (flags & FLAGS_LONG_LONG) {
 80023d6:	e0c8      	b.n	800256a <_vsnprintf+0x68a>
                                          precision, width, flags);
#endif
                } else if (flags & FLAGS_LONG) {
 80023d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01e      	beq.n	8002420 <_vsnprintf+0x540>
                    const long value = va_arg(va, long);
 80023e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e4:	1d1a      	adds	r2, r3, #4
 80023e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61fb      	str	r3, [r7, #28]
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value),
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bfb8      	it	lt
 80023f2:	425b      	neglt	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	0fdb      	lsrs	r3, r3, #31
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023fe:	9205      	str	r2, [sp, #20]
 8002400:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002402:	9204      	str	r2, [sp, #16]
 8002404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002406:	9203      	str	r2, [sp, #12]
 8002408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800240a:	9202      	str	r2, [sp, #8]
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	9100      	str	r1, [sp, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7fe ff9c 	bl	8001354 <_ntoa_long>
 800241c:	6478      	str	r0, [r7, #68]	; 0x44
                if (flags & FLAGS_LONG_LONG) {
 800241e:	e0a4      	b.n	800256a <_vsnprintf+0x68a>
                                     value < 0, base, precision, width, flags);
                } else {
                    const int value = (flags & FLAGS_CHAR)
 8002420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
                                          ? (char)va_arg(va, int)
                                          : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <_vsnprintf+0x556>
                                          ? (char)va_arg(va, int)
 800242a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800242c:	1d1a      	adds	r2, r3, #4
 800242e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	e00e      	b.n	8002454 <_vsnprintf+0x574>
                                          : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <_vsnprintf+0x56c>
 8002440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	66ba      	str	r2, [r7, #104]	; 0x68
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b21b      	sxth	r3, r3
 800244a:	e003      	b.n	8002454 <_vsnprintf+0x574>
 800244c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800244e:	1d1a      	adds	r2, r3, #4
 8002450:	66ba      	str	r2, [r7, #104]	; 0x68
 8002452:	681b      	ldr	r3, [r3, #0]
                    const int value = (flags & FLAGS_CHAR)
 8002454:	623b      	str	r3, [r7, #32]
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value),
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	2b00      	cmp	r3, #0
 800245a:	bfb8      	it	lt
 800245c:	425b      	neglt	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	0fdb      	lsrs	r3, r3, #31
 8002464:	b2db      	uxtb	r3, r3
 8002466:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002468:	9205      	str	r2, [sp, #20]
 800246a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800246c:	9204      	str	r2, [sp, #16]
 800246e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002470:	9203      	str	r2, [sp, #12]
 8002472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002474:	9202      	str	r2, [sp, #8]
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	9100      	str	r1, [sp, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7fe ff67 	bl	8001354 <_ntoa_long>
 8002486:	6478      	str	r0, [r7, #68]	; 0x44
                if (flags & FLAGS_LONG_LONG) {
 8002488:	e06f      	b.n	800256a <_vsnprintf+0x68a>
                                     value < 0, base, precision, width, flags);
                }
            } else {
                // unsigned
                if (flags & FLAGS_LONG_LONG) {
 800248a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
 8002494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002496:	3307      	adds	r3, #7
 8002498:	f023 0307 	bic.w	r3, r3, #7
 800249c:	f103 0208 	add.w	r2, r3, #8
 80024a0:	66ba      	str	r2, [r7, #104]	; 0x68
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024a8:	4608      	mov	r0, r1
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80024b0:	9408      	str	r4, [sp, #32]
 80024b2:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80024b4:	9407      	str	r4, [sp, #28]
 80024b6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80024b8:	9406      	str	r4, [sp, #24]
 80024ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80024be:	2100      	movs	r1, #0
 80024c0:	9102      	str	r1, [sp, #8]
 80024c2:	e9cd 2300 	strd	r2, r3, [sp]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7fe ffa8 	bl	8001422 <_ntoa_long_long>
 80024d2:	6478      	str	r0, [r7, #68]	; 0x44
 80024d4:	e049      	b.n	800256a <_vsnprintf+0x68a>
                                          precision, width, flags);
#endif
                } else if (flags & FLAGS_LONG) {
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d016      	beq.n	800250e <_vsnprintf+0x62e>
                    idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
 80024e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	66ba      	str	r2, [r7, #104]	; 0x68
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ea:	9205      	str	r2, [sp, #20]
 80024ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024ee:	9204      	str	r2, [sp, #16]
 80024f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024f2:	9203      	str	r2, [sp, #12]
 80024f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024f6:	9202      	str	r2, [sp, #8]
 80024f8:	2200      	movs	r2, #0
 80024fa:	9201      	str	r2, [sp, #4]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7fe ff25 	bl	8001354 <_ntoa_long>
 800250a:	6478      	str	r0, [r7, #68]	; 0x44
 800250c:	e02d      	b.n	800256a <_vsnprintf+0x68a>
                                     width, flags);
                } else {
                    const unsigned int value =
                        (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int)
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <_vsnprintf+0x644>
                        (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int)
 8002518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	66ba      	str	r2, [r7, #104]	; 0x68
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e00e      	b.n	8002542 <_vsnprintf+0x662>
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
                                                                     : va_arg(va, unsigned int);
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <_vsnprintf+0x65a>
                                             : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int)
 800252e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002530:	1d1a      	adds	r2, r3, #4
 8002532:	66ba      	str	r2, [r7, #104]	; 0x68
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	e003      	b.n	8002542 <_vsnprintf+0x662>
                                                                     : va_arg(va, unsigned int);
 800253a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002540:	681b      	ldr	r3, [r3, #0]
                    const unsigned int value =
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
                    idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002546:	9305      	str	r3, [sp, #20]
 8002548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254a:	9304      	str	r3, [sp, #16]
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	9303      	str	r3, [sp, #12]
 8002550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	2300      	movs	r3, #0
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f7fe fef6 	bl	8001354 <_ntoa_long>
 8002568:	6478      	str	r0, [r7, #68]	; 0x44
                }
            }
            format++;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	603b      	str	r3, [r7, #0]
            break;
 8002570:	e153      	b.n	800281a <_vsnprintf+0x93a>
        }
#if defined(PRINTF_SUPPORT_FLOAT)
        case 'f':
        case 'F':
            if (*format == 'F')
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b46      	cmp	r3, #70	; 0x46
 8002578:	d103      	bne.n	8002582 <_vsnprintf+0x6a2>
                flags |= FLAGS_UPPERCASE;
 800257a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257c:	f043 0320 	orr.w	r3, r3, #32
 8002580:	657b      	str	r3, [r7, #84]	; 0x54
            idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002584:	3307      	adds	r3, #7
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	f103 0208 	add.w	r2, r3, #8
 800258e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002596:	9104      	str	r1, [sp, #16]
 8002598:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800259a:	9103      	str	r1, [sp, #12]
 800259c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800259e:	9102      	str	r1, [sp, #8]
 80025a0:	e9cd 2300 	strd	r2, r3, [sp]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7fe ffa8 	bl	8001500 <_ftoa>
 80025b0:	6478      	str	r0, [r7, #68]	; 0x44
            format++;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	603b      	str	r3, [r7, #0]
            break;
 80025b8:	e12f      	b.n	800281a <_vsnprintf+0x93a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        case 'e':
        case 'E':
        case 'g':
        case 'G':
            if ((*format == 'g') || (*format == 'G'))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b67      	cmp	r3, #103	; 0x67
 80025c0:	d003      	beq.n	80025ca <_vsnprintf+0x6ea>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b47      	cmp	r3, #71	; 0x47
 80025c8:	d103      	bne.n	80025d2 <_vsnprintf+0x6f2>
                flags |= FLAGS_ADAPT_EXP;
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d0:	657b      	str	r3, [r7, #84]	; 0x54
            if ((*format == 'E') || (*format == 'G'))
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b45      	cmp	r3, #69	; 0x45
 80025d8:	d003      	beq.n	80025e2 <_vsnprintf+0x702>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b47      	cmp	r3, #71	; 0x47
 80025e0:	d103      	bne.n	80025ea <_vsnprintf+0x70a>
                flags |= FLAGS_UPPERCASE;
 80025e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e4:	f043 0320 	orr.w	r3, r3, #32
 80025e8:	657b      	str	r3, [r7, #84]	; 0x54
            idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80025ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ec:	3307      	adds	r3, #7
 80025ee:	f023 0307 	bic.w	r3, r3, #7
 80025f2:	f103 0208 	add.w	r2, r3, #8
 80025f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025fe:	9104      	str	r1, [sp, #16]
 8002600:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002602:	9103      	str	r1, [sp, #12]
 8002604:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002606:	9102      	str	r1, [sp, #8]
 8002608:	e9cd 2300 	strd	r2, r3, [sp]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff f9d4 	bl	80019c0 <_etoa>
 8002618:	6478      	str	r0, [r7, #68]	; 0x44
            format++;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	603b      	str	r3, [r7, #0]
            break;
 8002620:	e0fb      	b.n	800281a <_vsnprintf+0x93a>
#endif // PRINTF_SUPPORT_EXPONENTIAL
#endif // PRINTF_SUPPORT_FLOAT
        case 'c': {
            unsigned int l = 1U;
 8002622:	2301      	movs	r3, #1
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
            // pre padding
            if (!(flags & FLAGS_LEFT)) {
 8002626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10e      	bne.n	800264e <_vsnprintf+0x76e>
                while (l++ < width) {
 8002630:	e007      	b.n	8002642 <_vsnprintf+0x762>
                    out(' ', buffer, idx++, maxlen);
 8002632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002634:	1c53      	adds	r3, r2, #1
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
 8002638:	68fc      	ldr	r4, [r7, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	2020      	movs	r0, #32
 8002640:	47a0      	blx	r4
                while (l++ < width) {
 8002642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002648:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800264a:	429a      	cmp	r2, r3
 800264c:	d8f1      	bhi.n	8002632 <_vsnprintf+0x752>
                }
            }
            // char output
            out((char)va_arg(va, int), buffer, idx++, maxlen);
 800264e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002650:	1d1a      	adds	r2, r3, #4
 8002652:	66ba      	str	r2, [r7, #104]	; 0x68
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b2d8      	uxtb	r0, r3
 8002658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800265a:	1c53      	adds	r3, r2, #1
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
 800265e:	68fc      	ldr	r4, [r7, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	47a0      	blx	r4
            // post padding
            if (flags & FLAGS_LEFT) {
 8002666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <_vsnprintf+0x7ae>
                while (l++ < width) {
 8002670:	e007      	b.n	8002682 <_vsnprintf+0x7a2>
                    out(' ', buffer, idx++, maxlen);
 8002672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002674:	1c53      	adds	r3, r2, #1
 8002676:	647b      	str	r3, [r7, #68]	; 0x44
 8002678:	68fc      	ldr	r4, [r7, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	2020      	movs	r0, #32
 8002680:	47a0      	blx	r4
                while (l++ < width) {
 8002682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002688:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800268a:	429a      	cmp	r2, r3
 800268c:	d8f1      	bhi.n	8002672 <_vsnprintf+0x792>
                }
            }
            format++;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	603b      	str	r3, [r7, #0]
            break;
 8002694:	e0c1      	b.n	800281a <_vsnprintf+0x93a>
        }

        case 's': {
            const char *p = va_arg(va, char *);
 8002696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002698:	1d1a      	adds	r2, r3, #4
 800269a:	66ba      	str	r2, [r7, #104]	; 0x68
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	63bb      	str	r3, [r7, #56]	; 0x38
            unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80026a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <_vsnprintf+0x7ca>
 80026a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a8:	e001      	b.n	80026ae <_vsnprintf+0x7ce>
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	4619      	mov	r1, r3
 80026b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026b2:	f7fe fccd 	bl	8001050 <_strnlen_s>
 80026b6:	6378      	str	r0, [r7, #52]	; 0x34
            // pre padding
            if (flags & FLAGS_PRECISION) {
 80026b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <_vsnprintf+0x7ee>
                l = (l < precision ? l : precision);
 80026c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	4293      	cmp	r3, r2
 80026c8:	bf28      	it	cs
 80026ca:	4613      	movcs	r3, r2
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            if (!(flags & FLAGS_LEFT)) {
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d11a      	bne.n	800270e <_vsnprintf+0x82e>
                while (l++ < width) {
 80026d8:	e007      	b.n	80026ea <_vsnprintf+0x80a>
                    out(' ', buffer, idx++, maxlen);
 80026da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026dc:	1c53      	adds	r3, r2, #1
 80026de:	647b      	str	r3, [r7, #68]	; 0x44
 80026e0:	68fc      	ldr	r4, [r7, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	2020      	movs	r0, #32
 80026e8:	47a0      	blx	r4
                while (l++ < width) {
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	637a      	str	r2, [r7, #52]	; 0x34
 80026f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d8f1      	bhi.n	80026da <_vsnprintf+0x7fa>
                }
            }
            // string output
            while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80026f6:	e00a      	b.n	800270e <_vsnprintf+0x82e>
                out(*(p++), buffer, idx++, maxlen);
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80026fe:	7818      	ldrb	r0, [r3, #0]
 8002700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002702:	1c53      	adds	r3, r2, #1
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
 8002706:	68fc      	ldr	r4, [r7, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	47a0      	blx	r4
            while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <_vsnprintf+0x84a>
 8002716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0eb      	beq.n	80026f8 <_vsnprintf+0x818>
 8002720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002722:	1e5a      	subs	r2, r3, #1
 8002724:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1e6      	bne.n	80026f8 <_vsnprintf+0x818>
            }
            // post padding
            if (flags & FLAGS_LEFT) {
 800272a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <_vsnprintf+0x872>
                while (l++ < width) {
 8002734:	e007      	b.n	8002746 <_vsnprintf+0x866>
                    out(' ', buffer, idx++, maxlen);
 8002736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002738:	1c53      	adds	r3, r2, #1
 800273a:	647b      	str	r3, [r7, #68]	; 0x44
 800273c:	68fc      	ldr	r4, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	2020      	movs	r0, #32
 8002744:	47a0      	blx	r4
                while (l++ < width) {
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	637a      	str	r2, [r7, #52]	; 0x34
 800274c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800274e:	429a      	cmp	r2, r3
 8002750:	d8f1      	bhi.n	8002736 <_vsnprintf+0x856>
                }
            }
            format++;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	603b      	str	r3, [r7, #0]
            break;
 8002758:	e05f      	b.n	800281a <_vsnprintf+0x93a>
        }

        case 'p': {
            width = sizeof(void *) * 2U;
 800275a:	2308      	movs	r3, #8
 800275c:	653b      	str	r3, [r7, #80]	; 0x50
            flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800275e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002760:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002764:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002766:	2300      	movs	r3, #0
 8002768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (is_ll) {
 800276c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01e      	beq.n	80027b2 <_vsnprintf+0x8d2>
                idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void *), false, 16U,
 8002774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	66ba      	str	r2, [r7, #104]	; 0x68
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002784:	9108      	str	r1, [sp, #32]
 8002786:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002788:	9107      	str	r1, [sp, #28]
 800278a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800278c:	9106      	str	r1, [sp, #24]
 800278e:	f04f 0010 	mov.w	r0, #16
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800279a:	2100      	movs	r1, #0
 800279c:	9102      	str	r1, [sp, #8]
 800279e:	e9cd 2300 	strd	r2, r3, [sp]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7fe fe3a 	bl	8001422 <_ntoa_long_long>
 80027ae:	6478      	str	r0, [r7, #68]	; 0x44
 80027b0:	e016      	b.n	80027e0 <_vsnprintf+0x900>
                                      precision, width, flags);
            } else {
#endif
                idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false,
 80027b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b4:	1d1a      	adds	r2, r3, #4
 80027b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	9305      	str	r3, [sp, #20]
 80027c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c2:	9304      	str	r3, [sp, #16]
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c6:	9303      	str	r3, [sp, #12]
 80027c8:	2310      	movs	r3, #16
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2300      	movs	r3, #0
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7fe fdbb 	bl	8001354 <_ntoa_long>
 80027de:	6478      	str	r0, [r7, #68]	; 0x44
                                 16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
            }
#endif
            format++;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	603b      	str	r3, [r7, #0]
            break;
 80027e6:	e018      	b.n	800281a <_vsnprintf+0x93a>
        }

        case '%':
            out('%', buffer, idx++, maxlen);
 80027e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027ea:	1c53      	adds	r3, r2, #1
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
 80027ee:	68fc      	ldr	r4, [r7, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	2025      	movs	r0, #37	; 0x25
 80027f6:	47a0      	blx	r4
            format++;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	603b      	str	r3, [r7, #0]
            break;
 80027fe:	e00c      	b.n	800281a <_vsnprintf+0x93a>

        default:
            out(*format, buffer, idx++, maxlen);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	7818      	ldrb	r0, [r3, #0]
 8002804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002806:	1c53      	adds	r3, r2, #1
 8002808:	647b      	str	r3, [r7, #68]	; 0x44
 800280a:	68fc      	ldr	r4, [r7, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	47a0      	blx	r4
            format++;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	603b      	str	r3, [r7, #0]
            break;
 8002818:	bf00      	nop
    while (*format) {
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f ab6f 	bne.w	8001f02 <_vsnprintf+0x22>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <_vsnprintf+0x952>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	e000      	b.n	8002834 <_vsnprintf+0x954>
 8002832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002834:	68fc      	ldr	r4, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	2000      	movs	r0, #0
 800283c:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
 800283e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002840:	4618      	mov	r0, r3
 8002842:	3758      	adds	r7, #88	; 0x58
 8002844:	46bd      	mov	sp, r7
 8002846:	bdb0      	pop	{r4, r5, r7, pc}

08002848 <printf_>:

///////////////////////////////////////////////////////////////////////////////

int printf_(const char *format, ...) {
 8002848:	b40f      	push	{r0, r1, r2, r3}
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af02      	add	r7, sp, #8
    va_list va;
    va_start(va, format);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	60bb      	str	r3, [r7, #8]
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002856:	1d39      	adds	r1, r7, #4
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f04f 32ff 	mov.w	r2, #4294967295
 8002862:	4806      	ldr	r0, [pc, #24]	; (800287c <printf_+0x34>)
 8002864:	f7ff fb3c 	bl	8001ee0 <_vsnprintf>
 8002868:	60f8      	str	r0, [r7, #12]
    va_end(va);
    return ret;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002876:	b004      	add	sp, #16
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	0800102b 	.word	0x0800102b

08002880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_MspInit+0x58>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_MspInit+0x58>)
 800288c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002890:	6253      	str	r3, [r2, #36]	; 0x24
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_MspInit+0x58>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_MspInit+0x58>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_MspInit+0x58>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_MspInit+0x58>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_MspInit+0x58>)
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_MspInit+0x58>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6253      	str	r3, [r2, #36]	; 0x24
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_MspInit+0x58>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40023800 	.word	0x40023800

080028dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_I2C_MspInit+0x7c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d128      	bne.n	8002950 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_I2C_MspInit+0x80>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_I2C_MspInit+0x80>)
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_I2C_MspInit+0x80>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002916:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800291a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291c:	2312      	movs	r3, #18
 800291e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002928:	2304      	movs	r3, #4
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	480b      	ldr	r0, [pc, #44]	; (8002960 <HAL_I2C_MspInit+0x84>)
 8002934:	f000 fa66 	bl	8002e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_I2C_MspInit+0x80>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	4a07      	ldr	r2, [pc, #28]	; (800295c <HAL_I2C_MspInit+0x80>)
 800293e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002942:	6253      	str	r3, [r2, #36]	; 0x24
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_I2C_MspInit+0x80>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40005800 	.word	0x40005800
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400

08002964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_SPI_MspInit+0x7c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d128      	bne.n	80029d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_SPI_MspInit+0x80>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <HAL_SPI_MspInit+0x80>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6253      	str	r3, [r2, #36]	; 0x24
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_SPI_MspInit+0x80>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_SPI_MspInit+0x80>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_SPI_MspInit+0x80>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	61d3      	str	r3, [r2, #28]
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_SPI_MspInit+0x80>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80029ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c8:	2305      	movs	r3, #5
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <HAL_SPI_MspInit+0x84>)
 80029d4:	f000 fa16 	bl	8002e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40003800 	.word	0x40003800
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40020400 	.word	0x40020400

080029ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_UART_MspInit+0x7c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d128      	bne.n	8002a60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_UART_MspInit+0x80>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_UART_MspInit+0x80>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_UART_MspInit+0x80>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_UART_MspInit+0x80>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a10      	ldr	r2, [pc, #64]	; (8002a6c <HAL_UART_MspInit+0x80>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_UART_MspInit+0x80>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a50:	2307      	movs	r3, #7
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <HAL_UART_MspInit+0x84>)
 8002a5c:	f000 f9d2 	bl	8002e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <NMI_Handler+0x4>

08002a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <HardFault_Handler+0x4>

08002a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <MemManage_Handler+0x4>

08002a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8a:	e7fe      	b.n	8002a8a <BusFault_Handler+0x4>

08002a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <UsageFault_Handler+0x4>

08002a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aba:	f000 f881 	bl	8002bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
	...

08002ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad0:	480c      	ldr	r0, [pc, #48]	; (8002b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ad2:	490d      	ldr	r1, [pc, #52]	; (8002b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad8:	e002      	b.n	8002ae0 <LoopCopyDataInit>

08002ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ade:	3304      	adds	r3, #4

08002ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae4:	d3f9      	bcc.n	8002ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	; (8002b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aec:	e001      	b.n	8002af2 <LoopFillZerobss>

08002aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af0:	3204      	adds	r2, #4

08002af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af4:	d3fb      	bcc.n	8002aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002af6:	f7ff ffe4 	bl	8002ac2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002afa:	f001 fc6d 	bl	80043d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002afe:	f7fe f959 	bl	8000db4 <main>
  bx lr
 8002b02:	4770      	bx	lr
  ldr r0, =_sdata
 8002b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b0c:	080044f4 	.word	0x080044f4
  ldr r2, =_sbss
 8002b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b14:	20000120 	.word	0x20000120

08002b18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC1_IRQHandler>

08002b1a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b24:	2003      	movs	r0, #3
 8002b26:	f000 f939 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b2a:	200f      	movs	r0, #15
 8002b2c:	f000 f80e 	bl	8002b4c <HAL_InitTick>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	71fb      	strb	r3, [r7, #7]
 8002b3a:	e001      	b.n	8002b40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b3c:	f7ff fea0 	bl	8002880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b40:	79fb      	ldrb	r3, [r7, #7]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_InitTick+0x68>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d022      	beq.n	8002ba6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_InitTick+0x6c>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_InitTick+0x68>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f938 	bl	8002dea <HAL_SYSTICK_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	d809      	bhi.n	8002b9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b86:	2200      	movs	r2, #0
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8e:	f000 f910 	bl	8002db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_InitTick+0x70>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e007      	b.n	8002baa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e004      	b.n	8002baa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e001      	b.n	8002baa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_IncTick+0x1c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_IncTick+0x20>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <HAL_IncTick+0x1c>)
 8002bd0:	6013      	str	r3, [r2, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	2000011c 	.word	0x2000011c
 8002be0:	20000008 	.word	0x20000008

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <HAL_GetTick+0x10>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	2000011c 	.word	0x2000011c

08002bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff fff0 	bl	8002be4 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d004      	beq.n	8002c1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_Delay+0x40>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c1c:	bf00      	nop
 8002c1e:	f7ff ffe1 	bl	8002be4 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d8f7      	bhi.n	8002c1e <HAL_Delay+0x26>
  {
  }
}
 8002c2e:	bf00      	nop
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000008 	.word	0x20000008

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d68:	d301      	bcc.n	8002d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <SysTick_Config+0x40>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d76:	210f      	movs	r1, #15
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f7ff ff90 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <SysTick_Config+0x40>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SysTick_Config+0x40>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff49 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff5e 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff90 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5f 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ffb0 	bl	8002d58 <SysTick_Config>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e1a:	e154      	b.n	80030c6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8146 	beq.w	80030c0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d005      	beq.n	8002e4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d130      	bne.n	8002eae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002e82:	2201      	movs	r2, #1
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f003 0201 	and.w	r2, r3, #1
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d017      	beq.n	8002eea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d123      	bne.n	8002f3e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	08da      	lsrs	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	6939      	ldr	r1, [r7, #16]
 8002f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0203 	and.w	r2, r3, #3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80a0 	beq.w	80030c0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f80:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_GPIO_Init+0x2e0>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_GPIO_Init+0x2e0>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6213      	str	r3, [r2, #32]
 8002f8c:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <HAL_GPIO_Init+0x2e0>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f98:	4a53      	ldr	r2, [pc, #332]	; (80030e8 <HAL_GPIO_Init+0x2e4>)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a4b      	ldr	r2, [pc, #300]	; (80030ec <HAL_GPIO_Init+0x2e8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d019      	beq.n	8002ff8 <HAL_GPIO_Init+0x1f4>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a4a      	ldr	r2, [pc, #296]	; (80030f0 <HAL_GPIO_Init+0x2ec>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_GPIO_Init+0x1f0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a49      	ldr	r2, [pc, #292]	; (80030f4 <HAL_GPIO_Init+0x2f0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a48      	ldr	r2, [pc, #288]	; (80030f8 <HAL_GPIO_Init+0x2f4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <HAL_GPIO_Init+0x1e8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a47      	ldr	r2, [pc, #284]	; (80030fc <HAL_GPIO_Init+0x2f8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_GPIO_Init+0x1e4>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e008      	b.n	8002ffa <HAL_GPIO_Init+0x1f6>
 8002fe8:	2305      	movs	r3, #5
 8002fea:	e006      	b.n	8002ffa <HAL_GPIO_Init+0x1f6>
 8002fec:	2303      	movs	r3, #3
 8002fee:	e004      	b.n	8002ffa <HAL_GPIO_Init+0x1f6>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e002      	b.n	8002ffa <HAL_GPIO_Init+0x1f6>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_GPIO_Init+0x1f6>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	f002 0203 	and.w	r2, r2, #3
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	4093      	lsls	r3, r2
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800300a:	4937      	ldr	r1, [pc, #220]	; (80030e8 <HAL_GPIO_Init+0x2e4>)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003018:	4b39      	ldr	r3, [pc, #228]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800303c:	4a30      	ldr	r2, [pc, #192]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003066:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_GPIO_Init+0x2fc>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3301      	adds	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f47f aea3 	bne.w	8002e1c <HAL_GPIO_Init+0x18>
  }
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	40020800 	.word	0x40020800
 80030f8:	40020c00 	.word	0x40020c00
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010400 	.word	0x40010400

08003104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e12b      	b.n	800336e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff fbd6 	bl	80028dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003168:	f000 fe24 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 800316c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a81      	ldr	r2, [pc, #516]	; (8003378 <HAL_I2C_Init+0x274>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d807      	bhi.n	8003188 <HAL_I2C_Init+0x84>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a80      	ldr	r2, [pc, #512]	; (800337c <HAL_I2C_Init+0x278>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e006      	b.n	8003196 <HAL_I2C_Init+0x92>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a7d      	ldr	r2, [pc, #500]	; (8003380 <HAL_I2C_Init+0x27c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	bf94      	ite	ls
 8003190:	2301      	movls	r3, #1
 8003192:	2300      	movhi	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0e7      	b.n	800336e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a78      	ldr	r2, [pc, #480]	; (8003384 <HAL_I2C_Init+0x280>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a6a      	ldr	r2, [pc, #424]	; (8003378 <HAL_I2C_Init+0x274>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d802      	bhi.n	80031d8 <HAL_I2C_Init+0xd4>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e009      	b.n	80031ec <HAL_I2C_Init+0xe8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	4a69      	ldr	r2, [pc, #420]	; (8003388 <HAL_I2C_Init+0x284>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	3301      	adds	r3, #1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	495c      	ldr	r1, [pc, #368]	; (8003378 <HAL_I2C_Init+0x274>)
 8003208:	428b      	cmp	r3, r1
 800320a:	d819      	bhi.n	8003240 <HAL_I2C_Init+0x13c>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e59      	subs	r1, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fbb1 f3f3 	udiv	r3, r1, r3
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003220:	400b      	ands	r3, r1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_I2C_Init+0x138>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e59      	subs	r1, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fbb1 f3f3 	udiv	r3, r1, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	e051      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 800323c:	2304      	movs	r3, #4
 800323e:	e04f      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d111      	bne.n	800326c <HAL_I2C_Init+0x168>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	440b      	add	r3, r1
 8003256:	fbb0 f3f3 	udiv	r3, r0, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e012      	b.n	8003292 <HAL_I2C_Init+0x18e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e58      	subs	r0, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	0099      	lsls	r1, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Init+0x196>
 8003296:	2301      	movs	r3, #1
 8003298:	e022      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10e      	bne.n	80032c0 <HAL_I2C_Init+0x1bc>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1e58      	subs	r0, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032be:	e00f      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1e58      	subs	r0, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	0099      	lsls	r1, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	6809      	ldr	r1, [r1, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800330e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6911      	ldr	r1, [r2, #16]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68d2      	ldr	r2, [r2, #12]
 800331a:	4311      	orrs	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	430b      	orrs	r3, r1
 8003322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	000186a0 	.word	0x000186a0
 800337c:	001e847f 	.word	0x001e847f
 8003380:	003d08ff 	.word	0x003d08ff
 8003384:	431bde83 	.word	0x431bde83
 8003388:	10624dd3 	.word	0x10624dd3

0800338c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e31d      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339e:	4b94      	ldr	r3, [pc, #592]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a8:	4b91      	ldr	r3, [pc, #580]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d07b      	beq.n	80034b6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d006      	beq.n	80033d2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d10f      	bne.n	80033ea <HAL_RCC_OscConfig+0x5e>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d10b      	bne.n	80033ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d2:	4b87      	ldr	r3, [pc, #540]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d06a      	beq.n	80034b4 <HAL_RCC_OscConfig+0x128>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d166      	bne.n	80034b4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e2f7      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x74>
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e02d      	b.n	800345c <HAL_RCC_OscConfig+0xd0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0x96>
 8003408:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a78      	ldr	r2, [pc, #480]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a75      	ldr	r2, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0xd0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0xb8>
 800342a:	4b71      	ldr	r3, [pc, #452]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a70      	ldr	r2, [pc, #448]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6d      	ldr	r2, [pc, #436]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xd0>
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a69      	ldr	r2, [pc, #420]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7ff fbbe 	bl	8002be4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7ff fbba 	bl	8002be4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e2ad      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800347e:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xe0>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff fbaa 	bl	8002be4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7ff fba6 	bl	8002be4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e299      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034a6:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x108>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d05a      	beq.n	8003578 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d119      	bne.n	8003502 <HAL_RCC_OscConfig+0x176>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d116      	bne.n	8003502 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_OscConfig+0x160>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e276      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	493d      	ldr	r1, [pc, #244]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003500:	e03a      	b.n	8003578 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d020      	beq.n	800354c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350a:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCC_OscConfig+0x268>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7ff fb68 	bl	8002be4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003518:	f7ff fb64 	bl	8002be4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e257      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	492a      	ldr	r1, [pc, #168]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
 800354a:	e015      	b.n	8003578 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <HAL_RCC_OscConfig+0x268>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7ff fb47 	bl	8002be4 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355a:	f7ff fb43 	bl	8002be4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e236      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80b8 	beq.w	80036f6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d170      	bne.n	800366e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x218>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e21a      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d921      	bls.n	80035f8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fc23 	bl	8003e04 <RCC_SetFlashLatencyFromMSIRange>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e208      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4906      	ldr	r1, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	4901      	ldr	r1, [pc, #4]	; (80035f0 <HAL_RCC_OscConfig+0x264>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
 80035ee:	e020      	b.n	8003632 <HAL_RCC_OscConfig+0x2a6>
 80035f0:	40023800 	.word	0x40023800
 80035f4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035f8:	4ba4      	ldr	r3, [pc, #656]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	49a1      	ldr	r1, [pc, #644]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360a:	4ba0      	ldr	r3, [pc, #640]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	499c      	ldr	r1, [pc, #624]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fbee 	bl	8003e04 <RCC_SetFlashLatencyFromMSIRange>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1d3      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	0b5b      	lsrs	r3, r3, #13
 8003638:	3301      	adds	r3, #1
 800363a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003642:	4a92      	ldr	r2, [pc, #584]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	0912      	lsrs	r2, r2, #4
 8003648:	f002 020f 	and.w	r2, r2, #15
 800364c:	4990      	ldr	r1, [pc, #576]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800364e:	5c8a      	ldrb	r2, [r1, r2]
 8003650:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003652:	4a90      	ldr	r2, [pc, #576]	; (8003894 <HAL_RCC_OscConfig+0x508>)
 8003654:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003656:	4b90      	ldr	r3, [pc, #576]	; (8003898 <HAL_RCC_OscConfig+0x50c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fa76 	bl	8002b4c <HAL_InitTick>
 8003660:	4603      	mov	r3, r0
 8003662:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d045      	beq.n	80036f6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	e1b5      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d029      	beq.n	80036ca <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003676:	4b89      	ldr	r3, [pc, #548]	; (800389c <HAL_RCC_OscConfig+0x510>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7ff fab2 	bl	8002be4 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003684:	f7ff faae 	bl	8002be4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1a1      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003696:	4b7d      	ldr	r3, [pc, #500]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a2:	4b7a      	ldr	r3, [pc, #488]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4977      	ldr	r1, [pc, #476]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b4:	4b75      	ldr	r3, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	4972      	ldr	r1, [pc, #456]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ca:	4b74      	ldr	r3, [pc, #464]	; (800389c <HAL_RCC_OscConfig+0x510>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7ff fa88 	bl	8002be4 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d8:	f7ff fa84 	bl	8002be4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e177      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036ea:	4b68      	ldr	r3, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d030      	beq.n	8003764 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b65      	ldr	r3, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x514>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7ff fa68 	bl	8002be4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003718:	f7ff fa64 	bl	8002be4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e157      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800372a:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x38c>
 8003736:	e015      	b.n	8003764 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_OscConfig+0x514>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7ff fa51 	bl	8002be4 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003746:	f7ff fa4d 	bl	8002be4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e140      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003758:	4b4c      	ldr	r3, [pc, #304]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f0      	bne.n	8003746 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80b5 	beq.w	80038dc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003776:	4b45      	ldr	r3, [pc, #276]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	4b42      	ldr	r3, [pc, #264]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	4a41      	ldr	r2, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	6253      	str	r3, [r2, #36]	; 0x24
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379a:	2301      	movs	r3, #1
 800379c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x518>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d118      	bne.n	80037dc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037aa:	4b3e      	ldr	r3, [pc, #248]	; (80038a4 <HAL_RCC_OscConfig+0x518>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a3d      	ldr	r2, [pc, #244]	; (80038a4 <HAL_RCC_OscConfig+0x518>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b6:	f7ff fa15 	bl	8002be4 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037be:	f7ff fa11 	bl	8002be4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b64      	cmp	r3, #100	; 0x64
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e104      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <HAL_RCC_OscConfig+0x518>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x466>
 80037e4:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	4a28      	ldr	r2, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6353      	str	r3, [r2, #52]	; 0x34
 80037f0:	e02d      	b.n	800384e <HAL_RCC_OscConfig+0x4c2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x488>
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_OscConfig+0x500>)
 80037fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fe:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003804:	6353      	str	r3, [r2, #52]	; 0x34
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	4a20      	ldr	r2, [pc, #128]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800380c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003810:	6353      	str	r3, [r2, #52]	; 0x34
 8003812:	e01c      	b.n	800384e <HAL_RCC_OscConfig+0x4c2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b05      	cmp	r3, #5
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_OscConfig+0x4aa>
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800381e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003826:	6353      	str	r3, [r2, #52]	; 0x34
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	4a17      	ldr	r2, [pc, #92]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800382e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003832:	6353      	str	r3, [r2, #52]	; 0x34
 8003834:	e00b      	b.n	800384e <HAL_RCC_OscConfig+0x4c2>
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	6353      	str	r3, [r2, #52]	; 0x34
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800384c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d015      	beq.n	8003882 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7ff f9c5 	bl	8002be4 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7ff f9c1 	bl	8002be4 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0b2      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_OscConfig+0x500>)
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ee      	beq.n	800385e <HAL_RCC_OscConfig+0x4d2>
 8003880:	e023      	b.n	80038ca <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003882:	f7ff f9af 	bl	8002be4 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003888:	e019      	b.n	80038be <HAL_RCC_OscConfig+0x532>
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	080044cc 	.word	0x080044cc
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004
 800389c:	42470020 	.word	0x42470020
 80038a0:	42470680 	.word	0x42470680
 80038a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7ff f99c 	bl	8002be4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e08d      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038be:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ee      	bne.n	80038a8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b44      	ldr	r3, [pc, #272]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	4a43      	ldr	r2, [pc, #268]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038da:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d079      	beq.n	80039d8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d056      	beq.n	8003998 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d13b      	bne.n	800396a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_OscConfig+0x65c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7ff f974 	bl	8002be4 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7ff f970 	bl	8002be4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e063      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003912:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	4319      	orrs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	430b      	orrs	r3, r1
 8003936:	492b      	ldr	r1, [pc, #172]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_OscConfig+0x65c>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7ff f94f 	bl	8002be4 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7ff f94b 	bl	8002be4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e03e      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x5be>
 8003968:	e036      	b.n	80039d8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <HAL_RCC_OscConfig+0x65c>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7ff f938 	bl	8002be4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7ff f934 	bl	8002be4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e027      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x5ec>
 8003996:	e01f      	b.n	80039d8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e01a      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <HAL_RCC_OscConfig+0x658>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	42470060 	.word	0x42470060

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e11a      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b8f      	ldr	r3, [pc, #572]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d919      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x34>
 8003a14:	4b8a      	ldr	r3, [pc, #552]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a89      	ldr	r2, [pc, #548]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b87      	ldr	r3, [pc, #540]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 0201 	bic.w	r2, r3, #1
 8003a28:	4985      	ldr	r1, [pc, #532]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a30:	4b83      	ldr	r3, [pc, #524]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0f9      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4e:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	497a      	ldr	r1, [pc, #488]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 808e 	beq.w	8003b8a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a76:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0d7      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0cb      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aa6:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0bf      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0b7      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	495c      	ldr	r1, [pc, #368]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7ff f884 	bl	8002be4 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d112      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7ff f87c 	bl	8002be4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e09b      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xfc>
 8003b0a:	e03e      	b.n	8003b8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d112      	bne.n	8003b3a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b16:	f7ff f865 	bl	8002be4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e084      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b2c:	4b45      	ldr	r3, [pc, #276]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d1ee      	bne.n	8003b16 <HAL_RCC_ClockConfig+0x12a>
 8003b38:	e027      	b.n	8003b8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d11d      	bne.n	8003b7e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7ff f84e 	bl	8002be4 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e06d      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d1ee      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x158>
 8003b66:	e010      	b.n	8003b8a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7ff f83c 	bl	8002be4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e05b      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ee      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8a:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d219      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_ClockConfig+0x1be>
 8003b9e:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a27      	ldr	r2, [pc, #156]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 0201 	bic.w	r2, r3, #1
 8003bb2:	4923      	ldr	r1, [pc, #140]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_RCC_ClockConfig+0x254>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e034      	b.n	8003c36 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4917      	ldr	r1, [pc, #92]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	490f      	ldr	r1, [pc, #60]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c0a:	f000 f823 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <HAL_RCC_ClockConfig+0x258>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	490b      	ldr	r1, [pc, #44]	; (8003c48 <HAL_RCC_ClockConfig+0x25c>)
 8003c1c:	5ccb      	ldrb	r3, [r1, r3]
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <HAL_RCC_ClockConfig+0x260>)
 8003c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_RCC_ClockConfig+0x264>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe ff8e 	bl	8002b4c <HAL_InitTick>
 8003c30:	4603      	mov	r3, r0
 8003c32:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c34:	7afb      	ldrb	r3, [r7, #11]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023c00 	.word	0x40023c00
 8003c44:	40023800 	.word	0x40023800
 8003c48:	080044cc 	.word	0x080044cc
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	20000004 	.word	0x20000004

08003c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003c5a:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x30>
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d87c      	bhi.n	8003d68 <HAL_RCC_GetSysClockFreq+0x114>
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d002      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x24>
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x2a>
 8003c76:	e077      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x140>)
 8003c7a:	613b      	str	r3, [r7, #16]
      break;
 8003c7c:	e082      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c7e:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x144>)
 8003c80:	613b      	str	r3, [r7, #16]
      break;
 8003c82:	e07f      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	4a43      	ldr	r2, [pc, #268]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x148>)
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	0d9b      	lsrs	r3, r3, #22
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9e:	4b3c      	ldr	r3, [pc, #240]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01a      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	4939      	ldr	r1, [pc, #228]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x144>)
 8003cb4:	fb01 f003 	mul.w	r0, r1, r3
 8003cb8:	2100      	movs	r1, #0
 8003cba:	fb01 f102 	mul.w	r1, r1, r2
 8003cbe:	1844      	adds	r4, r0, r1
 8003cc0:	4935      	ldr	r1, [pc, #212]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x144>)
 8003cc2:	fba2 0101 	umull	r0, r1, r2, r1
 8003cc6:	1863      	adds	r3, r4, r1
 8003cc8:	4619      	mov	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f7fc fef3 	bl	8000abc <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4613      	mov	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e040      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	461c      	mov	r4, r3
 8003ce4:	f04f 0500 	mov.w	r5, #0
 8003ce8:	4620      	mov	r0, r4
 8003cea:	4629      	mov	r1, r5
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	014b      	lsls	r3, r1, #5
 8003cf6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cfa:	0142      	lsls	r2, r0, #5
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	1b00      	subs	r0, r0, r4
 8003d02:	eb61 0105 	sbc.w	r1, r1, r5
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	018b      	lsls	r3, r1, #6
 8003d10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d14:	0182      	lsls	r2, r0, #6
 8003d16:	1a12      	subs	r2, r2, r0
 8003d18:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1c:	f04f 0000 	mov.w	r0, #0
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	00d9      	lsls	r1, r3, #3
 8003d26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d2a:	00d0      	lsls	r0, r2, #3
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	1912      	adds	r2, r2, r4
 8003d32:	eb45 0303 	adc.w	r3, r5, r3
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	0299      	lsls	r1, r3, #10
 8003d40:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d44:	0290      	lsls	r0, r2, #10
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	461a      	mov	r2, r3
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	f7fc feb1 	bl	8000abc <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	613b      	str	r3, [r7, #16]
      break;
 8003d66:	e00d      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0b5b      	lsrs	r3, r3, #13
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	613b      	str	r3, [r7, #16]
      break;
 8003d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d84:	693b      	ldr	r3, [r7, #16]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	016e3600 	.word	0x016e3600
 8003d9c:	080044c0 	.word	0x080044c0

08003da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	20000000 	.word	0x20000000

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003db8:	f7ff fff2 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	080044dc 	.word	0x080044dc

08003ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003de0:	f7ff ffde 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0adb      	lsrs	r3, r3, #11
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	080044dc 	.word	0x080044dc

08003e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e10:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d12c      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e1c:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e016      	b.n	8003e62 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	6253      	str	r3, [r2, #36]	; 0x24
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003e54:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003e68:	d105      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e70:	d101      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003e72:	2301      	movs	r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d105      	bne.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 0201 	bic.w	r2, r3, #1
 8003e90:	490b      	ldr	r1, [pc, #44]	; (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	40023c00 	.word	0x40023c00

08003ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e06e      	b.n	8003fb4 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d108      	bne.n	8003ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee6:	d009      	beq.n	8003efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
 8003eee:	e005      	b.n	8003efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fe fd24 	bl	8002964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	ea42 0103 	orr.w	r1, r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	0c1a      	lsrs	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f002 0204 	and.w	r2, r2, #4
 8003fa2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e03f      	b.n	800404e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fe fd02 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f905 	bl	8004210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b08a      	sub	sp, #40	; 0x28
 800405a:	af02      	add	r7, sp, #8
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b20      	cmp	r3, #32
 8004074:	d17c      	bne.n	8004170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_UART_Transmit+0x2c>
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e075      	b.n	8004172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_UART_Transmit+0x3e>
 8004090:	2302      	movs	r3, #2
 8004092:	e06e      	b.n	8004172 <HAL_UART_Transmit+0x11c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2221      	movs	r2, #33	; 0x21
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040aa:	f7fe fd9b 	bl	8002be4 <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c4:	d108      	bne.n	80040d8 <HAL_UART_Transmit+0x82>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	e003      	b.n	80040e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040e8:	e02a      	b.n	8004140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f840 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e036      	b.n	8004172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	3302      	adds	r3, #2
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e007      	b.n	8004132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	3301      	adds	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1cf      	bne.n	80040ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	2140      	movs	r1, #64	; 0x40
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f810 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418a:	e02c      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d028      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0x30>
 800419a:	f7fe fd23 	bl	8002be4 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d21d      	bcs.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e00f      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4013      	ands	r3, r2
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	429a      	cmp	r2, r3
 8004202:	d0c3      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4313      	orrs	r3, r2
 8004244:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004250:	f023 030c 	bic.w	r3, r3, #12
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	430b      	orrs	r3, r1
 800425c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699a      	ldr	r2, [r3, #24]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a55      	ldr	r2, [pc, #340]	; (80043d0 <UART_SetConfig+0x1c0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d103      	bne.n	8004286 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800427e:	f7ff fdad 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	e002      	b.n	800428c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004286:	f7ff fd95 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 800428a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004294:	d14c      	bne.n	8004330 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	4a49      	ldr	r2, [pc, #292]	; (80043d4 <UART_SetConfig+0x1c4>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	0119      	lsls	r1, r3, #4
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009a      	lsls	r2, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042cc:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <UART_SetConfig+0x1c4>)
 80042ce:	fba3 0302 	umull	r0, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2064      	movs	r0, #100	; 0x64
 80042d6:	fb00 f303 	mul.w	r3, r0, r3
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	3332      	adds	r3, #50	; 0x32
 80042e0:	4a3c      	ldr	r2, [pc, #240]	; (80043d4 <UART_SetConfig+0x1c4>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ee:	4419      	add	r1, r3
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009a      	lsls	r2, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	fbb2 f2f3 	udiv	r2, r2, r3
 8004306:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <UART_SetConfig+0x1c4>)
 8004308:	fba3 0302 	umull	r0, r3, r3, r2
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2064      	movs	r0, #100	; 0x64
 8004310:	fb00 f303 	mul.w	r3, r0, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	3332      	adds	r3, #50	; 0x32
 800431a:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <UART_SetConfig+0x1c4>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 0207 	and.w	r2, r3, #7
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	440a      	add	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800432e:	e04a      	b.n	80043c6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009a      	lsls	r2, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <UART_SetConfig+0x1c4>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	0119      	lsls	r1, r3, #4
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009a      	lsls	r2, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	fbb2 f2f3 	udiv	r2, r2, r3
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <UART_SetConfig+0x1c4>)
 8004368:	fba3 0302 	umull	r0, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	2064      	movs	r0, #100	; 0x64
 8004370:	fb00 f303 	mul.w	r3, r0, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	3332      	adds	r3, #50	; 0x32
 800437a:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <UART_SetConfig+0x1c4>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004386:	4419      	add	r1, r3
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009a      	lsls	r2, r3, #2
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	fbb2 f2f3 	udiv	r2, r2, r3
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <UART_SetConfig+0x1c4>)
 80043a0:	fba3 0302 	umull	r0, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	2064      	movs	r0, #100	; 0x64
 80043a8:	fb00 f303 	mul.w	r3, r0, r3
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	3332      	adds	r3, #50	; 0x32
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <UART_SetConfig+0x1c4>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	440a      	add	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40013800 	.word	0x40013800
 80043d4:	51eb851f 	.word	0x51eb851f

080043d8 <__libc_init_array>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	2600      	movs	r6, #0
 80043dc:	4d0c      	ldr	r5, [pc, #48]	; (8004410 <__libc_init_array+0x38>)
 80043de:	4c0d      	ldr	r4, [pc, #52]	; (8004414 <__libc_init_array+0x3c>)
 80043e0:	1b64      	subs	r4, r4, r5
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	42a6      	cmp	r6, r4
 80043e6:	d109      	bne.n	80043fc <__libc_init_array+0x24>
 80043e8:	f000 f822 	bl	8004430 <_init>
 80043ec:	2600      	movs	r6, #0
 80043ee:	4d0a      	ldr	r5, [pc, #40]	; (8004418 <__libc_init_array+0x40>)
 80043f0:	4c0a      	ldr	r4, [pc, #40]	; (800441c <__libc_init_array+0x44>)
 80043f2:	1b64      	subs	r4, r4, r5
 80043f4:	10a4      	asrs	r4, r4, #2
 80043f6:	42a6      	cmp	r6, r4
 80043f8:	d105      	bne.n	8004406 <__libc_init_array+0x2e>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004400:	4798      	blx	r3
 8004402:	3601      	adds	r6, #1
 8004404:	e7ee      	b.n	80043e4 <__libc_init_array+0xc>
 8004406:	f855 3b04 	ldr.w	r3, [r5], #4
 800440a:	4798      	blx	r3
 800440c:	3601      	adds	r6, #1
 800440e:	e7f2      	b.n	80043f6 <__libc_init_array+0x1e>
 8004410:	080044ec 	.word	0x080044ec
 8004414:	080044ec 	.word	0x080044ec
 8004418:	080044ec 	.word	0x080044ec
 800441c:	080044f0 	.word	0x080044f0

08004420 <memset>:
 8004420:	4603      	mov	r3, r0
 8004422:	4402      	add	r2, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <_init>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	bf00      	nop
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr

0800443c <_fini>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr
